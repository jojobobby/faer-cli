// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_engine_GLTextureData
#define INCLUDED_engine_GLTextureData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(engine,GLTextureData)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace engine{


class HXCPP_CLASS_ATTRIBUTES GLTextureData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GLTextureData_obj OBJ_;
		GLTextureData_obj();

	public:
		enum { _hx_ClassId = 0x21b4737e };

		void __construct(int w,int h, ::openfl::display::BitmapData tex);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="engine.GLTextureData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"engine.GLTextureData"); }
		static ::hx::ObjectPtr< GLTextureData_obj > __new(int w,int h, ::openfl::display::BitmapData tex);
		static ::hx::ObjectPtr< GLTextureData_obj > __alloc(::hx::Ctx *_hx_ctx,int w,int h, ::openfl::display::BitmapData tex);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GLTextureData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GLTextureData",80,46,4c,ba); }

		int width;
		int height;
		Float xOffset;
		Float yOffset;
		 ::lime::graphics::opengl::GLObject texture;
};

} // end namespace engine

#endif /* INCLUDED_engine_GLTextureData */ 
