// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_engine_TextureFactory
#define INCLUDED_engine_TextureFactory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(engine,TextureFactory)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)

namespace engine{


class HXCPP_CLASS_ATTRIBUTES TextureFactory_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TextureFactory_obj OBJ_;
		TextureFactory_obj();

	public:
		enum { _hx_ClassId = 0x0e80eef5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="engine.TextureFactory")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"engine.TextureFactory"); }

		inline static ::hx::ObjectPtr< TextureFactory_obj > __new() {
			::hx::ObjectPtr< TextureFactory_obj > __this = new TextureFactory_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TextureFactory_obj > __alloc(::hx::Ctx *_hx_ctx) {
			TextureFactory_obj *__this = (TextureFactory_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextureFactory_obj), false, "engine.TextureFactory"));
			*(void **)__this = TextureFactory_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextureFactory_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextureFactory",4f,b1,ee,73); }

		static void __boot();
		static  ::haxe::ds::ObjectMap textures;
		static int count;
		static void disposeTextures();
		static ::Dynamic disposeTextures_dyn();

		static void disposeNormalTextures();
		static ::Dynamic disposeNormalTextures_dyn();

};

} // end namespace engine

#endif /* INCLUDED_engine_TextureFactory */ 
