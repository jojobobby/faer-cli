// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_appengine_RequestHandler
#define INCLUDED_appengine_RequestHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(appengine,RequestHandler)
HX_DECLARE_CLASS2(haxe,http,HttpBase)
HX_DECLARE_CLASS1(sys,Http)
HX_DECLARE_CLASS1(util,Signal)

namespace appengine{


class HXCPP_CLASS_ATTRIBUTES RequestHandler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef RequestHandler_obj OBJ_;
		RequestHandler_obj();

	public:
		enum { _hx_ClassId = 0x2daec57e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="appengine.RequestHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"appengine.RequestHandler"); }

		inline static ::hx::ObjectPtr< RequestHandler_obj > __new() {
			::hx::ObjectPtr< RequestHandler_obj > __this = new RequestHandler_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< RequestHandler_obj > __alloc(::hx::Ctx *_hx_ctx) {
			RequestHandler_obj *__this = (RequestHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RequestHandler_obj), false, "appengine.RequestHandler"));
			*(void **)__this = RequestHandler_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RequestHandler_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RequestHandler",5b,a4,72,69); }

		static void __boot();
		static  ::util::Signal complete;
		static int maxRetries;
		static  ::sys::Http http;
		static int retriesLeft;
		static void init();
		static ::Dynamic init_dyn();

		static void sendRequest(::String url);
		static ::Dynamic sendRequest_dyn();

		static void retryOrReportError(::String error);
		static ::Dynamic retryOrReportError_dyn();

		static void cleanUpAndComplete(bool isOK,::String data);
		static ::Dynamic cleanUpAndComplete_dyn();

};

} // end namespace appengine

#endif /* INCLUDED_appengine_RequestHandler */ 
