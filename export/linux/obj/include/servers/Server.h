// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_servers_Server
#define INCLUDED_servers_Server

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(servers,LatLong)
HX_DECLARE_CLASS1(servers,Server)

namespace servers{


class HXCPP_CLASS_ATTRIBUTES Server_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Server_obj OBJ_;
		Server_obj();

	public:
		enum { _hx_ClassId = 0x24f85733 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="servers.Server")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"servers.Server"); }
		static ::hx::ObjectPtr< Server_obj > __new();
		static ::hx::ObjectPtr< Server_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Server_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Server",e3,be,cb,a2); }

		::String name;
		::String address;
		int port;
		 ::servers::LatLong latLong;
		Float usage;
		bool isAdminOnly;
		 ::servers::Server setName(::String name);
		::Dynamic setName_dyn();

		 ::servers::Server setAddress(::String address);
		::Dynamic setAddress_dyn();

		 ::servers::Server setPort(int port);
		::Dynamic setPort_dyn();

		 ::servers::Server setLatLong(Float latitude,Float longitude);
		::Dynamic setLatLong_dyn();

		 ::servers::Server setUsage(Float usage);
		::Dynamic setUsage_dyn();

		 ::servers::Server setIsAdminOnly(bool isAdminOnly);
		::Dynamic setIsAdminOnly_dyn();

		int priority();
		::Dynamic priority_dyn();

		bool isCrowded();
		::Dynamic isCrowded_dyn();

		bool isFull();
		::Dynamic isFull_dyn();

};

} // end namespace servers

#endif /* INCLUDED_servers_Server */ 
