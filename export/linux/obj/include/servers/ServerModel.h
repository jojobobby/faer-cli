// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_servers_ServerModel
#define INCLUDED_servers_ServerModel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(servers,Server)
HX_DECLARE_CLASS1(servers,ServerModel)

namespace servers{


class HXCPP_CLASS_ATTRIBUTES ServerModel_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ServerModel_obj OBJ_;
		ServerModel_obj();

	public:
		enum { _hx_ClassId = 0x0fd21a3e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="servers.ServerModel")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"servers.ServerModel"); }
		static ::hx::ObjectPtr< ServerModel_obj > __new();
		static ::hx::ObjectPtr< ServerModel_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ServerModel_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ServerModel",c6,fd,6b,8e); }

		::Array< ::Dynamic> servers;
		void setServers(::Array< ::Dynamic> list);
		::Dynamic setServers_dyn();

		::Array< ::Dynamic> getServers();
		::Dynamic getServers_dyn();

		 ::servers::Server getServer();
		::Dynamic getServer_dyn();

		bool isServerAvailable();
		::Dynamic isServerAvailable_dyn();

};

} // end namespace servers

#endif /* INCLUDED_servers_ServerModel */ 
