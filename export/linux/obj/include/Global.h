// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_Global
#define INCLUDED_Global

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Global)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS2(account,services,BuyCharacterSlotTask)
HX_DECLARE_CLASS2(account,services,BuySkinTask)
HX_DECLARE_CLASS2(account,services,ChangePasswordTask)
HX_DECLARE_CLASS2(account,services,DeleteCharacterTask)
HX_DECLARE_CLASS2(account,services,GetCharListTask)
HX_DECLARE_CLASS2(account,services,LoadAccountTask)
HX_DECLARE_CLASS2(account,services,LoginTask)
HX_DECLARE_CLASS2(account,services,RegisterAccountTask)
HX_DECLARE_CLASS2(account,services,SendPasswordReminderTask)
HX_DECLARE_CLASS2(account,services,UploadBehaviorTask)
HX_DECLARE_CLASS2(account,services,UploadXmlTask)
HX_DECLARE_CLASS1(characters,CharacterModel)
HX_DECLARE_CLASS2(classes,model,CharacterSkin)
HX_DECLARE_CLASS2(classes,model,ClassModel)
HX_DECLARE_CLASS1(core,Layers)
HX_DECLARE_CLASS1(core,PlayerModel)
HX_DECLARE_CLASS1(game,GameSprite)
HX_DECLARE_CLASS2(game,model,GameInitData)
HX_DECLARE_CLASS2(lib,tasks,Task)
HX_DECLARE_CLASS2(lime,utils,ObjectPool_objects_Projectile)
HX_DECLARE_CLASS1(mapeditor,MapEditor)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(servers,ServerModel)
HX_DECLARE_CLASS2(ui,model,TabStripModel)
HX_DECLARE_CLASS1(util,EmptySignal)
HX_DECLARE_CLASS1(util,Signal)



class HXCPP_CLASS_ATTRIBUTES Global_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Global_obj OBJ_;
		Global_obj();

	public:
		enum { _hx_ClassId = 0x3d916843 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Global")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"Global"); }

		inline static ::hx::ObjectPtr< Global_obj > __new() {
			::hx::ObjectPtr< Global_obj > __this = new Global_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Global_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Global_obj *__this = (Global_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Global_obj), false, "Global"));
			*(void **)__this = Global_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Global_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Global",83,a5,46,dc); }

		static void __boot();
		static int currentInteractiveTarget;
		static  ::game::GameSprite gameSprite;
		static  ::core::Layers layers;
		static  ::mapeditor::MapEditor currentEditor;
		static  ::lime::utils::ObjectPool_objects_Projectile projPool;
		static  ::servers::ServerModel serverModel;
		static  ::classes::model::ClassModel classModel;
		static  ::core::PlayerModel playerModel;
		static  ::characters::CharacterModel charModel;
		static  ::ui::model::TabStripModel tabStripModel;
		static  ::account::services::LoadAccountTask loadTask;
		static  ::account::services::LoginTask loginTask;
		static  ::account::services::GetCharListTask charListTask;
		static  ::account::services::DeleteCharacterTask deleteCharacterTask;
		static  ::account::services::BuyCharacterSlotTask buyCharacterSlotTask;
		static  ::account::services::RegisterAccountTask registerAccountTask;
		static  ::account::services::ChangePasswordTask changePasswordTask;
		static  ::account::services::SendPasswordReminderTask sendPasswordReminderTask;
		static  ::account::services::BuySkinTask buySkinTask;
		static  ::account::services::UploadBehaviorTask uploadBehaviorTask;
		static  ::account::services::UploadXmlTask uploadXmlTask;
		static  ::util::EmptySignal updateAccount;
		static  ::util::Signal focusCharSkin;
		static void init( ::openfl::display::Sprite root);
		static ::Dynamic init_dyn();

		static  ::classes::model::CharacterSkin makeDefaultSkin( ::Xml xml);
		static ::Dynamic makeDefaultSkin_dyn();

		static void playGame( ::game::model::GameInitData gameInit);
		static ::Dynamic playGame_dyn();

		static void useVial(int vialId);
		static ::Dynamic useVial_dyn();

		static void parseCharList( ::Xml xml);
		static ::Dynamic parseCharList_dyn();

		static void deleteChar();
		static ::Dynamic deleteChar_dyn();

		static void buyCharSlot();
		static ::Dynamic buyCharSlot_dyn();

		static void invalidate();
		static ::Dynamic invalidate_dyn();

		static void setScreenValid( ::openfl::display::Sprite sprite);
		static ::Dynamic setScreenValid_dyn();

};


#endif /* INCLUDED_Global */ 
