// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_objects_ProjectileProperties
#define INCLUDED_objects_ProjectileProperties

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(objects,ProjectileProperties)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES ProjectileProperties_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ProjectileProperties_obj OBJ_;
		ProjectileProperties_obj();

	public:
		enum { _hx_ClassId = 0x7f0b6390 };

		void __construct( ::Xml projectileXML);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.ProjectileProperties")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.ProjectileProperties"); }
		static ::hx::ObjectPtr< ProjectileProperties_obj > __new( ::Xml projectileXML);
		static ::hx::ObjectPtr< ProjectileProperties_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml projectileXML);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ProjectileProperties_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ProjectileProperties",5c,cf,9e,63); }

		int bulletType;
		::String objectId;
		int lifetime;
		Float speed;
		int realSpeed;
		int size;
		int physicalDamage;
		int magicDamage;
		int trueDamage;
		::Array< int > effects;
		bool multiHit;
		bool armorPiercing;
		bool particleTrail;
		bool wavy;
		bool parametric;
		bool boomerang;
		Float amplitude;
		Float frequency;
		Float magnitude;
		Float acceleration;
		int accelerationDelay;
		int speedClamp;
};

} // end namespace objects

#endif /* INCLUDED_objects_ProjectileProperties */ 
