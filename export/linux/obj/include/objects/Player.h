// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_objects_Player
#define INCLUDED_objects_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS1(objects,Projectile)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS1(util,AnimatedChar)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES Player_obj : public  ::objects::GameObject_obj
{
	public:
		typedef  ::objects::GameObject_obj super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		enum { _hx_ClassId = 0x45a16455 };

		void __construct( ::Xml objectXML);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.Player")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.Player"); }
		static ::hx::ObjectPtr< Player_obj > __new( ::Xml objectXML);
		static ::hx::ObjectPtr< Player_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml objectXML);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Player",81,5f,4d,6c); }

		static void __boot();
		static  ::openfl::geom::Point newP;
		static  ::objects::Player fromPlayerXML(::String name, ::Xml playerXML);
		static ::Dynamic fromPlayerXML_dyn();

		int skinId;
		 ::util::AnimatedChar skin;
		int accountId;
		int gems;
		int gold;
		int crowns;
		::String guildName;
		int guildRank;
		bool isFellowGuild;
		int mp;
		int maxHPBoost;
		int maxHPMax;
		int maxMP;
		int maxMPBoost;
		int maxMPMax;
		int defenseBoost;
		int defenseMax;
		int resistanceBoost;
		int resistanceMax;
		int strength;
		int strengthBoost;
		int strengthMax;
		int wit;
		int witBoost;
		int witMax;
		int speed;
		int speedBoost;
		int speedMax;
		int haste;
		int hasteBoost;
		int hasteMax;
		int stamina;
		int staminaBoost;
		int staminaMax;
		int intelligence;
		int intelligenceBoost;
		int intelligenceMax;
		int piercing;
		int piercingBoost;
		int piercingMax;
		int penetration;
		int penetrationBoost;
		int penetrationMax;
		int tenacity;
		int tenacityBoost;
		int tenacityMax;
		int healthVialCount;
		int magicVialCount;
		Float damageMult;
		Float hitMult;
		int tier;
		bool hasBackpack;
		int attackPeriod;
		int nextAltAttack;
		int nextTeleportAt;
		bool isDefaultAnimatedChar;
		Float moveMultiplier;
		::String hurtSound;
		::String deathSound;
		Float rotate;
		 ::openfl::geom::Point relMoveVec;
		int lastAttackError;
		 ::Xml objectXML;
		void updateMaxValues();
		::Dynamic updateMaxValues_dyn();

		bool update(int time,short dt);

		void damage(int origType,int damageAmount,::Array< int > effects,bool kill, ::objects::Projectile proj,::hx::Null< unsigned int >  textColor);

		 ::openfl::display::BitmapData getPortrait(::hx::Null< float >  sizeMult, ::util::AnimatedChar animCharOverride);
		::Dynamic getPortrait_dyn();

		void setRelativeMovement(float rotate,float relMoveVecX,float relMoveVecY);
		::Dynamic setRelativeMovement_dyn();

		void setGuildName(::String guildName);
		::Dynamic setGuildName_dyn();

		int msUntilTeleport();
		::Dynamic msUntilTeleport_dyn();

		bool teleportTo( ::objects::Player player);
		::Dynamic teleportTo_dyn();

		bool walkTo(float x,float y);
		::Dynamic walkTo_dyn();

		void modifyMove(float x,float y, ::openfl::geom::Point newP);
		::Dynamic modifyMove_dyn();

		void modifyStep(float x,float y, ::openfl::geom::Point newP);
		::Dynamic modifyStep_dyn();

		bool isValidPosition(float x,float y);
		::Dynamic isValidPosition_dyn();

		bool isFullOccupy(float x,float y);
		::Dynamic isFullOccupy_dyn();

		bool useAltWeapon(float xS,float yS,int useType);
		::Dynamic useAltWeapon_dyn();

		void attemptAttackAngle(float angle);
		::Dynamic attemptAttackAngle_dyn();

		int nextAvailableInventorySlot();
		::Dynamic nextAvailableInventorySlot_dyn();

		int swapInventoryIndex(::String current);
		::Dynamic swapInventoryIndex_dyn();

		int getVialCount(int objectType);
		::Dynamic getVialCount_dyn();

		Float getMoveSpeed();
		::Dynamic getMoveSpeed_dyn();

		float strMult();
		::Dynamic strMult_dyn();

		Float witMult();
		::Dynamic witMult_dyn();

		void shoot(float angle);
		::Dynamic shoot_dyn();

		void doShoot(int time,int weaponType, ::Xml weaponXML,float attackAngle,bool useMult);
		::Dynamic doShoot_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_Player */ 
