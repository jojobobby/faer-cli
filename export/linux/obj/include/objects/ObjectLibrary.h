// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_objects_ObjectLibrary
#define INCLUDED_objects_ObjectLibrary

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,ObjectLibrary)
HX_DECLARE_CLASS1(objects,ObjectProperties)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES ObjectLibrary_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ObjectLibrary_obj OBJ_;
		ObjectLibrary_obj();

	public:
		enum { _hx_ClassId = 0x56dc0388 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="objects.ObjectLibrary")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"objects.ObjectLibrary"); }

		inline static ::hx::ObjectPtr< ObjectLibrary_obj > __new() {
			::hx::ObjectPtr< ObjectLibrary_obj > __this = new ObjectLibrary_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ObjectLibrary_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ObjectLibrary_obj *__this = (ObjectLibrary_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ObjectLibrary_obj), false, "objects.ObjectLibrary"));
			*(void **)__this = ObjectLibrary_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ObjectLibrary_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ObjectLibrary",dc,05,21,76); }

		static void __boot();
		static  ::haxe::ds::IntMap propsLibrary;
		static  ::haxe::ds::IntMap xmlLibrary;
		static  ::haxe::ds::StringMap idToType;
		static  ::haxe::ds::IntMap typeToDisplayId;
		static  ::haxe::ds::IntMap typeToTextureData;
		static  ::haxe::ds::IntMap typeToTopTextureData;
		static  ::haxe::ds::IntMap typeToAnimationsData;
		static  ::objects::ObjectProperties defaultProps;
		static ::Array< ::Dynamic> playerChars;
		static ::Array< ::Dynamic> hexTransforms;
		static  ::haxe::ds::IntMap playerClassAbbr;
		static void parseFromXML( ::Xml xml);
		static ::Dynamic parseFromXML_dyn();

		static ::String getIdFromType(int objType);
		static ::Dynamic getIdFromType_dyn();

		static  ::objects::ObjectProperties getPropsFromId(::String id);
		static ::Dynamic getPropsFromId_dyn();

		static  ::objects::GameObject getObjectFromType(int objectType);
		static ::Dynamic getObjectFromType_dyn();

		static  ::openfl::display::BitmapData getTextureFromType(int objectType);
		static ::Dynamic getTextureFromType_dyn();

		static  ::openfl::display::BitmapData getRedrawnTextureFromType(int objectType,int size,bool includeBottom,::hx::Null< bool >  useCaching,::hx::Null< int >  scaleValue);
		static ::Dynamic getRedrawnTextureFromType_dyn();

		static int getSizeFromType(int objectType);
		static ::Dynamic getSizeFromType_dyn();

		static int getSlotTypeFromType(int objectType);
		static ::Dynamic getSlotTypeFromType_dyn();

		static int getMatchingSlotIndex(int objectType, ::objects::Player player);
		static ::Dynamic getMatchingSlotIndex_dyn();

		static bool isUsableByPlayer(int objectType, ::objects::Player player);
		static ::Dynamic isUsableByPlayer_dyn();

		static bool isUntradable(int objectType);
		static ::Dynamic isUntradable_dyn();

		static bool slotsMatching(int slot1,int slot2);
		static ::Dynamic slotsMatching_dyn();

		static bool genericMatch(::Array< int > slotTypes,int targetType,int slot1,int slot2);
		static ::Dynamic genericMatch_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_ObjectLibrary */ 
