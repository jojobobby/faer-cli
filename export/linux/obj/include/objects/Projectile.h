// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_objects_Projectile
#define INCLUDED_objects_Projectile

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(map,Map)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,ObjectProperties)
HX_DECLARE_CLASS1(objects,Projectile)
HX_DECLARE_CLASS1(objects,ProjectileProperties)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES Projectile_obj : public  ::objects::GameObject_obj
{
	public:
		typedef  ::objects::GameObject_obj super;
		typedef Projectile_obj OBJ_;
		Projectile_obj();

	public:
		enum { _hx_ClassId = 0x79d588dd };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.Projectile")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.Projectile"); }
		static ::hx::ObjectPtr< Projectile_obj > __new();
		static ::hx::ObjectPtr< Projectile_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Projectile_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Projectile",09,8a,3c,bb); }

		static void __boot();
		static  ::haxe::ds::IntMap objBullIdToObjId;
		static int nextFakeObjectId;
		 ::objects::ObjectProperties containerProps;
		 ::objects::ProjectileProperties projProps;
		 ::openfl::display::BitmapData texture;
		int bulletId;
		int containerType;
		int bulletType;
		bool damagesEnemies;
		bool damagesPlayers;
		int physicalDamage;
		int magicDamage;
		int trueDamage;
		::String sound;
		Float startX;
		Float startY;
		int startTime;
		Float angle;
		Float sinAngle;
		Float cosAngle;
		Float prevDirAngle;
		int bIdMod2Flip;
		int bIdMod4Flip;
		Float phase;
		::Array< int > colors;
		 ::haxe::ds::IntMap multiHitDict;
		 ::openfl::geom::Point staticPoint;
		bool addTo( ::map::Map map,float x,float y);

		void removeFromMap();

		bool update(int time,short dt);

		void reset(int containerType,int bulletType,int ownerId,int bulletId,float angle,int startTime);
		::Dynamic reset_dyn();

		void setDamages(int physicalDmg,int magicDmg,int trueDmg);
		::Dynamic setDamages_dyn();

		bool moveTo(float x,float y);

		 ::objects::GameObject getHit(float pX,float pY);
		::Dynamic getHit_dyn();

		 ::openfl::geom::Point positionAt(int elapsed);
		::Dynamic positionAt_dyn();

		Float getDirectionAngle(int time);
		::Dynamic getDirectionAngle_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_Projectile */ 
