// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_objects_ObjectProperties
#define INCLUDED_objects_ObjectProperties

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(objects,ObjectProperties)
HX_DECLARE_CLASS1(objects,ScepterProperties)
HX_DECLARE_CLASS1(objects,ShowEffectProperties)
HX_DECLARE_CLASS1(objects,TextureData)
HX_DECLARE_CLASS1(objects,WhileMovingProperties)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES ObjectProperties_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ObjectProperties_obj OBJ_;
		ObjectProperties_obj();

	public:
		enum { _hx_ClassId = 0x46a7b586 };

		void __construct( ::Xml objectXML);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.ObjectProperties")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.ObjectProperties"); }
		static ::hx::ObjectPtr< ObjectProperties_obj > __new( ::Xml objectXML);
		static ::hx::ObjectPtr< ObjectProperties_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml objectXML);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ObjectProperties_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ObjectProperties",b2,df,75,ca); }

		int objType;
		::String objId;
		::String displayId;
		bool isPlayer;
		bool isEnemy;
		bool drawOnGround;
		bool drawUnder;
		bool occupySquare;
		bool fullOccupy;
		bool enemyOccupySquare;
		bool staticObj;
		bool noMiniMap;
		bool protectFromGroundDamage;
		bool protectFromSink;
		Float baseZ;
		bool flying;
		int color;
		bool showName;
		bool dontFaceAttacks;
		Float bloodProb;
		int bloodColor;
		int shadowColor;
		 ::haxe::ds::IntMap sounds;
		 ::objects::TextureData portrait;
		int minSize;
		int maxSize;
		int sizeStep;
		 ::objects::WhileMovingProperties whileMoving;
		::String oldSound;
		 ::haxe::ds::IntMap projectiles;
		 ::objects::ScepterProperties scepterProps;
		Float angleCorrection;
		Float rotation;
		bool floating;
		int floatTime;
		Float floatHeight;
		bool floatSine;
		::Array< ::Dynamic> showEffects;
		int getSize();
		::Dynamic getSize_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_ObjectProperties */ 
