// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_objects_TextureData
#define INCLUDED_objects_TextureData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(objects,TextureData)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS1(util,AnimatedChar)
HX_DECLARE_CLASS1(util,Rect)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES TextureData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TextureData_obj OBJ_;
		TextureData_obj();

	public:
		enum { _hx_ClassId = 0x0c07bdf9 };

		void __construct( ::Xml objectXML,::hx::Null< bool >  __o_forceTex);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.TextureData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.TextureData"); }
		static ::hx::ObjectPtr< TextureData_obj > __new( ::Xml objectXML,::hx::Null< bool >  __o_forceTex);
		static ::hx::ObjectPtr< TextureData_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml objectXML,::hx::Null< bool >  __o_forceTex);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextureData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextureData",85,ec,14,dd); }

		 ::openfl::display::BitmapData texture;
		 ::openfl::display::BitmapData mask;
		 ::util::AnimatedChar animatedChar;
		::Array< ::Dynamic> randomTextureData;
		 ::haxe::ds::IntMap altTextures;
		 ::util::Rect rect;
		float uValue;
		float vValue;
		float width;
		float height;
		float maskUValue;
		float maskVValue;
		float maskWidth;
		float maskHeight;
		 ::openfl::display::BitmapData getTexture(::hx::Null< int >  id);
		::Dynamic getTexture_dyn();

		 ::util::Rect getRect(::hx::Null< int >  id);
		::Dynamic getRect_dyn();

		 ::objects::TextureData getTextureData(::hx::Null< int >  id);
		::Dynamic getTextureData_dyn();

		 ::objects::TextureData getAltTextureData(int id);
		::Dynamic getAltTextureData_dyn();

		void parse( ::Xml xml,::String type);
		::Dynamic parse_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_TextureData */ 
