// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_objects_DrainProperties
#define INCLUDED_objects_DrainProperties

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(objects,DrainProperties)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES DrainProperties_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DrainProperties_obj OBJ_;
		DrainProperties_obj();

	public:
		enum { _hx_ClassId = 0x2481ea57 };

		void __construct( ::Xml drainXML);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="objects.DrainProperties")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"objects.DrainProperties"); }
		static ::hx::ObjectPtr< DrainProperties_obj > __new( ::Xml drainXML);
		static ::hx::ObjectPtr< DrainProperties_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml drainXML);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DrainProperties_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DrainProperties",ab,29,cb,60); }

		int drainStat;
		int drainPerSec;
};

} // end namespace objects

#endif /* INCLUDED_objects_DrainProperties */ 
