// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_screens_CharacterBox
#define INCLUDED_screens_CharacterBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(screens,CharacterBox)
HX_DECLARE_CLASS1(ui,SimpleText)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)

namespace screens{


class HXCPP_CLASS_ATTRIBUTES CharacterBox_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef CharacterBox_obj OBJ_;
		CharacterBox_obj();

	public:
		enum { _hx_ClassId = 0x3e814be5 };

		void __construct( ::Xml playerXML);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="screens.CharacterBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"screens.CharacterBox"); }
		static ::hx::ObjectPtr< CharacterBox_obj > __new( ::Xml playerXML);
		static ::hx::ObjectPtr< CharacterBox_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml playerXML);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterBox",02,d6,82,f0); }

		 ::Xml playerXML;
		bool available;
		 ::openfl::display::Sprite graphicContainer;
		 ::openfl::display::Sprite graphic;
		 ::openfl::display::Bitmap bitmap;
		 ::ui::SimpleText statusText;
		 ::ui::SimpleText classNameText;
		 ::openfl::display::Bitmap lock;
		void onClick( ::openfl::events::MouseEvent event);
		::Dynamic onClick_dyn();

		 ::Dynamic objectType();
		::Dynamic objectType_dyn();

		 ::ui::tooltip::ToolTip getTooltip();
		::Dynamic getTooltip_dyn();

		void setOver(bool over);
		::Dynamic setOver_dyn();

		void setImage(int dir,int action,Float p);
		::Dynamic setImage_dyn();

		void setStatusButton();
		::Dynamic setStatusButton_dyn();

};

} // end namespace screens

#endif /* INCLUDED_screens_CharacterBox */ 
