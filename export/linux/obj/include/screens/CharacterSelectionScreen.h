// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_screens_CharacterSelectionScreen
#define INCLUDED_screens_CharacterSelectionScreen

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(game,view,CurrencyDisplay)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,DropShadowFilter)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(screens,CharacterList)
HX_DECLARE_CLASS1(screens,CharacterSelectionScreen)
HX_DECLARE_CLASS1(screens,TitleMenuOption)
HX_DECLARE_CLASS1(ui,Scrollbar)
HX_DECLARE_CLASS1(ui,SimpleText)

namespace screens{


class HXCPP_CLASS_ATTRIBUTES CharacterSelectionScreen_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef CharacterSelectionScreen_obj OBJ_;
		CharacterSelectionScreen_obj();

	public:
		enum { _hx_ClassId = 0x1b2e1bce };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="screens.CharacterSelectionScreen")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"screens.CharacterSelectionScreen"); }
		static ::hx::ObjectPtr< CharacterSelectionScreen_obj > __new();
		static ::hx::ObjectPtr< CharacterSelectionScreen_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterSelectionScreen_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterSelectionScreen",4f,97,2d,b9); }

		static void __boot();
		static  ::openfl::filters::DropShadowFilter DROP_SHADOW;
		static void onNewCharacter( ::openfl::events::MouseEvent _);
		static ::Dynamic onNewCharacter_dyn();

		static void onClose( ::openfl::events::MouseEvent _);
		static ::Dynamic onClose_dyn();

		static void onPlayClick( ::openfl::events::Event event);
		static ::Dynamic onPlayClick_dyn();

		 ::ui::SimpleText nameText;
		 ::game::view::CurrencyDisplay currencyDisplay;
		 ::screens::CharacterList characterList;
		Float characterListHeight;
		 ::screens::TitleMenuOption playButton;
		 ::screens::TitleMenuOption backButton;
		 ::screens::TitleMenuOption classesButton;
		 ::ui::Scrollbar scrollBar;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onRemoved( ::openfl::events::Event _);
		::Dynamic onRemoved_dyn();

		void initialize();
		::Dynamic initialize_dyn();

		 ::openfl::geom::Rectangle getReferenceRectangle();
		::Dynamic getReferenceRectangle_dyn();

		void createDisplayAssets();
		::Dynamic createDisplayAssets_dyn();

		void createButtons();
		::Dynamic createButtons_dyn();

		void positionButtons();
		::Dynamic positionButtons_dyn();

		void createScrollbar();
		::Dynamic createScrollbar_dyn();

		void createCharacterList();
		::Dynamic createCharacterList_dyn();

		void createCurrencyDisplay();
		::Dynamic createCurrencyDisplay_dyn();

		void createNameText();
		::Dynamic createNameText_dyn();

		void onScrollBarChange( ::openfl::events::Event event);
		::Dynamic onScrollBarChange_dyn();

};

} // end namespace screens

#endif /* INCLUDED_screens_CharacterSelectionScreen */ 
