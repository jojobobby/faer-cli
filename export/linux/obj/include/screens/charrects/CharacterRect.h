// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_screens_charrects_CharacterRect
#define INCLUDED_screens_charrects_CharacterRect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(screens,charrects,CharacterRect)

namespace screens{
namespace charrects{


class HXCPP_CLASS_ATTRIBUTES CharacterRect_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef CharacterRect_obj OBJ_;
		CharacterRect_obj();

	public:
		enum { _hx_ClassId = 0x3baa690f };

		void __construct(int color,int overColor);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="screens.charrects.CharacterRect")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"screens.charrects.CharacterRect"); }
		static ::hx::ObjectPtr< CharacterRect_obj > __new(int color,int overColor);
		static ::hx::ObjectPtr< CharacterRect_obj > __alloc(::hx::Ctx *_hx_ctx,int color,int overColor);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterRect_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterRect",4d,2d,84,8c); }

		 ::openfl::display::Sprite selectContainer;
		int color;
		int overColor;
		 ::openfl::display::Shape box;
		void makeContainer();
		::Dynamic makeContainer_dyn();

		void drawBox(bool over);
		::Dynamic drawBox_dyn();

		virtual void onMouseOver( ::openfl::events::MouseEvent _);
		::Dynamic onMouseOver_dyn();

		virtual void onRollOut( ::openfl::events::MouseEvent _);
		::Dynamic onRollOut_dyn();

};

} // end namespace screens
} // end namespace charrects

#endif /* INCLUDED_screens_charrects_CharacterRect */ 
