// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#define INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)

namespace lime{
namespace _internal{
namespace backend{
namespace native{


class HXCPP_CLASS_ATTRIBUTES NativeOpenGLRenderContext_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef NativeOpenGLRenderContext_obj OBJ_;
		NativeOpenGLRenderContext_obj();

	public:
		enum { _hx_ClassId = 0x693d41ef };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime._internal.backend.native.NativeOpenGLRenderContext")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lime._internal.backend.native.NativeOpenGLRenderContext"); }
		static ::hx::ObjectPtr< NativeOpenGLRenderContext_obj > __new();
		static ::hx::ObjectPtr< NativeOpenGLRenderContext_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NativeOpenGLRenderContext_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NativeOpenGLRenderContext",d3,3f,53,bf); }

		static void __boot();
		static  ::haxe::ds::StringMap _hx___extensionObjects;
		static  ::haxe::ds::StringMap _hx___extensionObjectConstructors;
		static int _hx___lastContextID;
		static ::Array< ::String > _hx___supportedExtensions;
		int DEPTH_BUFFER_BIT;
		int STENCIL_BUFFER_BIT;
		int COLOR_BUFFER_BIT;
		int TRIANGLES;
		int ZERO;
		int ONE;
		int SRC_COLOR;
		int ONE_MINUS_SRC_COLOR;
		int SRC_ALPHA;
		int ONE_MINUS_SRC_ALPHA;
		int DST_ALPHA;
		int ONE_MINUS_DST_ALPHA;
		int DST_COLOR;
		int ONE_MINUS_DST_COLOR;
		int FUNC_ADD;
		int FUNC_REVERSE_SUBTRACT;
		int ARRAY_BUFFER;
		int ELEMENT_ARRAY_BUFFER;
		int STATIC_DRAW;
		int DYNAMIC_DRAW;
		int FRONT;
		int BACK;
		int FRONT_AND_BACK;
		int TEXTURE_2D;
		int CULL_FACE;
		int BLEND;
		int STENCIL_TEST;
		int DEPTH_TEST;
		int SCISSOR_TEST;
		int CW;
		int CCW;
		int MAX_TEXTURE_SIZE;
		int UNSIGNED_BYTE;
		int UNSIGNED_SHORT;
		int INT;
		int FLOAT;
		int ALPHA;
		int RGBA;
		int FRAGMENT_SHADER;
		int VERTEX_SHADER;
		int MAX_TEXTURE_IMAGE_UNITS;
		int LINK_STATUS;
		int ACTIVE_UNIFORMS;
		int SHADING_LANGUAGE_VERSION;
		int NEVER;
		int LESS;
		int EQUAL;
		int LEQUAL;
		int GREATER;
		int NOTEQUAL;
		int GEQUAL;
		int ALWAYS;
		int KEEP;
		int REPLACE;
		int INCR;
		int DECR;
		int INVERT;
		int INCR_WRAP;
		int DECR_WRAP;
		int VENDOR;
		int RENDERER;
		int VERSION;
		int NEAREST;
		int LINEAR;
		int NEAREST_MIPMAP_NEAREST;
		int LINEAR_MIPMAP_NEAREST;
		int NEAREST_MIPMAP_LINEAR;
		int LINEAR_MIPMAP_LINEAR;
		int TEXTURE_MAG_FILTER;
		int TEXTURE_MIN_FILTER;
		int TEXTURE_WRAP_S;
		int TEXTURE_WRAP_T;
		int TEXTURE_CUBE_MAP;
		int TEXTURE_CUBE_MAP_POSITIVE_X;
		int TEXTURE0;
		int REPEAT;
		int CLAMP_TO_EDGE;
		int COMPILE_STATUS;
		int FRAMEBUFFER;
		int RENDERBUFFER;
		int DEPTH_COMPONENT16;
		int STENCIL_INDEX8;
		int COLOR_ATTACHMENT0;
		int DEPTH_ATTACHMENT;
		int STENCIL_ATTACHMENT;
		int DEPTH_STENCIL_ATTACHMENT;
		int NONE;
		int FRAMEBUFFER_COMPLETE;
		int DEPTH24_STENCIL8;
		::String type;
		Float version;
		 ::lime::graphics::opengl::GLObject _hx___arrayBufferBinding;
		 ::lime::graphics::opengl::GLObject _hx___elementBufferBinding;
		int _hx___contextID;
		 ::lime::graphics::opengl::GLObject _hx___currentProgram;
		 ::lime::graphics::opengl::GLObject _hx___framebufferBinding;
		bool _hx___initialized;
		bool _hx___isContextLost;
		 ::lime::graphics::opengl::GLObject _hx___renderbufferBinding;
		 ::lime::graphics::opengl::GLObject _hx___texture2DBinding;
		 ::lime::graphics::opengl::GLObject _hx___textureCubeMapBinding;
		 ::Dynamic getParameter(int pname);
		::Dynamic getParameter_dyn();

};

} // end namespace lime
} // end namespace _internal
} // end namespace backend
} // end namespace native

#endif /* INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext */ 
