// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_CommandMenu
#define INCLUDED_mapeditor_CommandMenu

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(mapeditor,CommandMenu)
HX_DECLARE_CLASS1(mapeditor,CommandMenuItem)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES CommandMenu_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef CommandMenu_obj OBJ_;
		CommandMenu_obj();

	public:
		enum { _hx_ClassId = 0x37a60de5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.CommandMenu")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.CommandMenu"); }
		static ::hx::ObjectPtr< CommandMenu_obj > __new();
		static ::hx::ObjectPtr< CommandMenu_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CommandMenu_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CommandMenu",6a,7c,ec,c9); }

		 ::haxe::ds::IntMap keyCodeDict;
		int yOffset;
		 ::mapeditor::CommandMenuItem selected;
		int getCommand();
		::Dynamic getCommand_dyn();

		void setCommand(int command);
		::Dynamic setCommand_dyn();

		void setSelected( ::mapeditor::CommandMenuItem item);
		::Dynamic setSelected_dyn();

		void onAddedToStage( ::openfl::events::Event _);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::openfl::events::Event _);
		::Dynamic onRemovedFromStage_dyn();

		void onKeyDown( ::openfl::events::KeyboardEvent event);
		::Dynamic onKeyDown_dyn();

		void addCommandMenuItem(::String label,int keyCode, ::Dynamic callback,int command);
		::Dynamic addCommandMenuItem_dyn();

		void addBreak();
		::Dynamic addBreak_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_CommandMenu */ 
