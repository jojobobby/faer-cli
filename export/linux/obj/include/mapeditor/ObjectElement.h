// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_ObjectElement
#define INCLUDED_mapeditor_ObjectElement

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mapeditor_Element
#include <mapeditor/Element.h>
#endif
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(mapeditor,Element)
HX_DECLARE_CLASS1(mapeditor,ObjectElement)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES ObjectElement_obj : public  ::mapeditor::Element_obj
{
	public:
		typedef  ::mapeditor::Element_obj super;
		typedef ObjectElement_obj OBJ_;
		ObjectElement_obj();

	public:
		enum { _hx_ClassId = 0x0f568ea0 };

		void __construct( ::Xml objXML);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.ObjectElement")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.ObjectElement"); }
		static ::hx::ObjectPtr< ObjectElement_obj > __new( ::Xml objXML);
		static ::hx::ObjectPtr< ObjectElement_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml objXML);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ObjectElement_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ObjectElement",9d,8d,05,3d); }

		 ::Xml objXML;
		 ::ui::tooltip::ToolTip getToolTip();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_ObjectElement */ 
