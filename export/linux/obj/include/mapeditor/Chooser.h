// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_Chooser
#define INCLUDED_mapeditor_Chooser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(mapeditor,Chooser)
HX_DECLARE_CLASS1(mapeditor,Element)
HX_DECLARE_CLASS2(openfl,_Vector,IVector)
HX_DECLARE_CLASS2(openfl,_Vector,ObjectVector)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,GraphicsPath)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IGraphicsData)
HX_DECLARE_CLASS2(openfl,display,IGraphicsPath)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS1(ui,Scrollbar)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES Chooser_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Chooser_obj OBJ_;
		Chooser_obj();

	public:
		enum { _hx_ClassId = 0x1596b732 };

		void __construct(int layer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.Chooser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.Chooser"); }
		static ::hx::ObjectPtr< Chooser_obj > __new(int layer);
		static ::hx::ObjectPtr< Chooser_obj > __alloc(::hx::Ctx *_hx_ctx,int layer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Chooser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Chooser",9b,49,6c,aa); }

		int layer;
		 ::openfl::display::Sprite elementSprite;
		 ::mapeditor::Element selected;
		 ::ui::Scrollbar scrollBar;
		 ::openfl::_Vector::ObjectVector elements;
		 ::openfl::display::GraphicsPath path;
		 ::openfl::_Vector::ObjectVector graphicsData;
		int selectedType();
		::Dynamic selectedType_dyn();

		void setSelectedType(int type);
		::Dynamic setSelectedType_dyn();

		void removeElements();
		::Dynamic removeElements_dyn();

		void addElement( ::mapeditor::Element element);
		::Dynamic addElement_dyn();

		void onMouseDown( ::openfl::events::MouseEvent event);
		::Dynamic onMouseDown_dyn();

		void setSelected( ::mapeditor::Element element);
		::Dynamic setSelected_dyn();

		void onScrollBarChange( ::openfl::events::Event _);
		::Dynamic onScrollBarChange_dyn();

		void onAddedToStage( ::openfl::events::Event _);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::openfl::events::Event _);
		::Dynamic onRemovedFromStage_dyn();

		void drawBackground();
		::Dynamic drawBackground_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_Chooser */ 
