// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_Element
#define INCLUDED_mapeditor_Element

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(mapeditor,Element)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES Element_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Element_obj OBJ_;
		Element_obj();

	public:
		enum { _hx_ClassId = 0x3ed04433 };

		void __construct(int type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.Element")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.Element"); }
		static ::hx::ObjectPtr< Element_obj > __new(int type);
		static ::hx::ObjectPtr< Element_obj > __alloc(::hx::Ctx *_hx_ctx,int type);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Element_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Element",9c,d6,a5,d3); }

		int type;
		bool selected;
		bool mouseOver;
		void setSelected(bool selected);
		::Dynamic setSelected_dyn();

		void onAddedToStage( ::openfl::events::Event _);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::openfl::events::Event _);
		::Dynamic onRemovedFromStage_dyn();

		void onMouseOver( ::openfl::events::Event _);
		::Dynamic onMouseOver_dyn();

		void onRollOut( ::openfl::events::Event _);
		::Dynamic onRollOut_dyn();

		void setToolTip( ::ui::tooltip::ToolTip newToolTip);
		::Dynamic setToolTip_dyn();

		void removeTooltip();
		::Dynamic removeTooltip_dyn();

		virtual  ::ui::tooltip::ToolTip getToolTip();
		::Dynamic getToolTip_dyn();

		void draw();
		::Dynamic draw_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_Element */ 
