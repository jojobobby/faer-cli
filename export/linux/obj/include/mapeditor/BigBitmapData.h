// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_BigBitmapData
#define INCLUDED_mapeditor_BigBitmapData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(mapeditor,BigBitmapData)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES BigBitmapData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BigBitmapData_obj OBJ_;
		BigBitmapData_obj();

	public:
		enum { _hx_ClassId = 0x48766b50 };

		void __construct(int width,int height,bool transparent,int fillColor);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.BigBitmapData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.BigBitmapData"); }
		static ::hx::ObjectPtr< BigBitmapData_obj > __new(int width,int height,bool transparent,int fillColor);
		static ::hx::ObjectPtr< BigBitmapData_obj > __alloc(::hx::Ctx *_hx_ctx,int width,int height,bool transparent,int fillColor);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BigBitmapData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BigBitmapData",79,32,13,f7); }

		int width;
		int height;
		int fillColor;
		int maxChunkX;
		int maxChunkY;
		::Array< ::Dynamic> chunks;
		void copyTo( ::openfl::display::BitmapData source, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Rectangle destRect);
		::Dynamic copyTo_dyn();

		void copyFrom( ::openfl::geom::Rectangle sourceRect, ::openfl::display::BitmapData dest, ::openfl::geom::Rectangle destRect);
		::Dynamic copyFrom_dyn();

		void erase( ::openfl::geom::Rectangle rect);
		::Dynamic erase_dyn();

		void dispose();
		::Dynamic dispose_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_BigBitmapData */ 
