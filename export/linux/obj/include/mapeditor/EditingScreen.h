// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_EditingScreen
#define INCLUDED_mapeditor_EditingScreen

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(mapeditor,Chooser)
HX_DECLARE_CLASS1(mapeditor,CommandEvent)
HX_DECLARE_CLASS1(mapeditor,CommandMenu)
HX_DECLARE_CLASS1(mapeditor,CommandQueue)
HX_DECLARE_CLASS1(mapeditor,EditingScreen)
HX_DECLARE_CLASS1(mapeditor,GroundChooser)
HX_DECLARE_CLASS1(mapeditor,InfoPane)
HX_DECLARE_CLASS1(mapeditor,IntPoint)
HX_DECLARE_CLASS1(mapeditor,MECommandMenu)
HX_DECLARE_CLASS1(mapeditor,MEMap)
HX_DECLARE_CLASS1(mapeditor,ObjectChooser)
HX_DECLARE_CLASS1(mapeditor,RegionChooser)
HX_DECLARE_CLASS1(mapeditor,Tile)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,net,FileReference)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)
HX_DECLARE_CLASS1(ui,TextInputField)
HX_DECLARE_CLASS2(ui,dropdown,DropDown)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES EditingScreen_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef EditingScreen_obj OBJ_;
		EditingScreen_obj();

	public:
		enum { _hx_ClassId = 0x19c9bf5b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.EditingScreen")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.EditingScreen"); }
		static ::hx::ObjectPtr< EditingScreen_obj > __new();
		static ::hx::ObjectPtr< EditingScreen_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EditingScreen_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EditingScreen",84,86,66,c8); }

		 ::mapeditor::MECommandMenu commandMenu;
		 ::mapeditor::MEMap meMap;
		 ::mapeditor::InfoPane infoPane;
		 ::ui::TextInputField brushSize;
		 ::ui::TextInputField randomChance;
		 ::ui::TextInputField searchBar;
		 ::ui::dropdown::DropDown chooserDropDown;
		 ::mapeditor::GroundChooser groundChooser;
		 ::mapeditor::ObjectChooser objChooser;
		 ::mapeditor::RegionChooser regionChooser;
		 ::mapeditor::Chooser chooser;
		 ::mapeditor::CommandQueue commandQueue;
		 ::openfl::net::FileReference loadedFile;
		void onKeyDown( ::openfl::events::KeyboardEvent e);
		::Dynamic onKeyDown_dyn();

		bool ipArrContains(::Array< ::Dynamic> arr,int x,int y);
		::Dynamic ipArrContains_dyn();

		bool inRadius(Float cX,Float cY,Float x,Float y,Float radius);
		::Dynamic inRadius_dyn();

		void editTiles(::Array< ::Dynamic> tiles);
		::Dynamic editTiles_dyn();

		void addModifyCommandList(::Array< ::Dynamic> tiles,int layer,int type);
		::Dynamic addModifyCommandList_dyn();

		void onDropDownChange( ::openfl::events::Event event);
		::Dynamic onDropDownChange_dyn();

		void onUndo( ::mapeditor::CommandEvent event);
		::Dynamic onUndo_dyn();

		void onRedo( ::mapeditor::CommandEvent event);
		::Dynamic onRedo_dyn();

		void onClear( ::mapeditor::CommandEvent event);
		::Dynamic onClear_dyn();

		bool tilesContains(::Array< ::Dynamic> arr, ::mapeditor::Tile tile);
		::Dynamic tilesContains_dyn();

		unsigned short tilesIndexOf(::Array< ::Dynamic> arr, ::mapeditor::Tile tile);
		::Dynamic tilesIndexOf_dyn();

		 ::openfl::utils::ByteArrayData createMap();
		::Dynamic createMap_dyn();

		void onSave( ::mapeditor::CommandEvent event);
		::Dynamic onSave_dyn();

		void onLoad( ::mapeditor::CommandEvent event);
		::Dynamic onLoad_dyn();

		void onFileBrowseSelect( ::openfl::events::Event event);
		::Dynamic onFileBrowseSelect_dyn();

		void onFileLoadComplete( ::openfl::events::Event event);
		::Dynamic onFileLoadComplete_dyn();

		void onFileLoadIOError( ::openfl::events::Event event);
		::Dynamic onFileLoadIOError_dyn();

		void onTest( ::openfl::events::Event _);
		::Dynamic onTest_dyn();

		void onQuit( ::openfl::events::Event _);
		::Dynamic onQuit_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_EditingScreen */ 
