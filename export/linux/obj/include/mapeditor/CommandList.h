// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_CommandList
#define INCLUDED_mapeditor_CommandList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(mapeditor,Command)
HX_DECLARE_CLASS1(mapeditor,CommandList)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES CommandList_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CommandList_obj OBJ_;
		CommandList_obj();

	public:
		enum { _hx_ClassId = 0x36ffe4a4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.CommandList")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.CommandList"); }
		static ::hx::ObjectPtr< CommandList_obj > __new();
		static ::hx::ObjectPtr< CommandList_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CommandList_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CommandList",29,53,46,c9); }

		::Array< ::Dynamic> list;
		bool empty();
		::Dynamic empty_dyn();

		void addCommand( ::mapeditor::Command command);
		::Dynamic addCommand_dyn();

		void execute();
		::Dynamic execute_dyn();

		void unexecute();
		::Dynamic unexecute_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_CommandList */ 
