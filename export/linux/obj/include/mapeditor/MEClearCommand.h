// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_MEClearCommand
#define INCLUDED_mapeditor_MEClearCommand

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mapeditor_Command
#include <mapeditor/Command.h>
#endif
HX_DECLARE_CLASS1(mapeditor,Command)
HX_DECLARE_CLASS1(mapeditor,MEClearCommand)
HX_DECLARE_CLASS1(mapeditor,MEMap)
HX_DECLARE_CLASS1(mapeditor,METile)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES MEClearCommand_obj : public  ::mapeditor::Command_obj
{
	public:
		typedef  ::mapeditor::Command_obj super;
		typedef MEClearCommand_obj OBJ_;
		MEClearCommand_obj();

	public:
		enum { _hx_ClassId = 0x6570d9ff };

		void __construct( ::mapeditor::MEMap map,int x,int y, ::mapeditor::METile oldTile);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.MEClearCommand")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.MEClearCommand"); }
		static ::hx::ObjectPtr< MEClearCommand_obj > __new( ::mapeditor::MEMap map,int x,int y, ::mapeditor::METile oldTile);
		static ::hx::ObjectPtr< MEClearCommand_obj > __alloc(::hx::Ctx *_hx_ctx, ::mapeditor::MEMap map,int x,int y, ::mapeditor::METile oldTile);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MEClearCommand_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MEClearCommand",b6,56,02,80); }

		 ::mapeditor::MEMap map;
		int x;
		int y;
		 ::mapeditor::METile oldTile;
		void execute();

		void unexecute();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_MEClearCommand */ 
