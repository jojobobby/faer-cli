// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_CommandMenuItem
#define INCLUDED_mapeditor_CommandMenuItem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(mapeditor,CommandMenuItem)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(ui,SimpleText)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES CommandMenuItem_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef CommandMenuItem_obj OBJ_;
		CommandMenuItem_obj();

	public:
		enum { _hx_ClassId = 0x438c5598 };

		void __construct(::String label, ::Dynamic callback,int command);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.CommandMenuItem")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.CommandMenuItem"); }
		static ::hx::ObjectPtr< CommandMenuItem_obj > __new(::String label, ::Dynamic callback,int command);
		static ::hx::ObjectPtr< CommandMenuItem_obj > __alloc(::hx::Ctx *_hx_ctx,::String label, ::Dynamic callback,int command);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CommandMenuItem_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CommandMenuItem",9d,ea,ec,18); }

		 ::Dynamic callback;
		Dynamic callback_dyn() { return callback;}
		int command;
		bool over;
		bool down;
		bool selected;
		 ::ui::SimpleText text;
		void setSelected(bool selected);
		::Dynamic setSelected_dyn();

		void redraw();
		::Dynamic redraw_dyn();

		void onMouseOver( ::openfl::events::MouseEvent _);
		::Dynamic onMouseOver_dyn();

		void onMouseOut( ::openfl::events::MouseEvent _);
		::Dynamic onMouseOut_dyn();

		void onMouseDown( ::openfl::events::MouseEvent _);
		::Dynamic onMouseDown_dyn();

		void onMouseUp( ::openfl::events::MouseEvent _);
		::Dynamic onMouseUp_dyn();

		void onClick( ::openfl::events::MouseEvent _);
		::Dynamic onClick_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_CommandMenuItem */ 
