// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_mapeditor_MEMap
#define INCLUDED_mapeditor_MEMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(mapeditor,BigBitmapData)
HX_DECLARE_CLASS1(mapeditor,EditingScreen)
HX_DECLARE_CLASS1(mapeditor,IntPoint)
HX_DECLARE_CLASS1(mapeditor,MEMap)
HX_DECLARE_CLASS1(mapeditor,METile)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace mapeditor{


class HXCPP_CLASS_ATTRIBUTES MEMap_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef MEMap_obj OBJ_;
		MEMap_obj();

	public:
		enum { _hx_ClassId = 0x7dc0195f };

		void __construct( ::mapeditor::EditingScreen editScreen);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mapeditor.MEMap")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mapeditor.MEMap"); }
		static ::hx::ObjectPtr< MEMap_obj > __new( ::mapeditor::EditingScreen editScreen);
		static ::hx::ObjectPtr< MEMap_obj > __alloc(::hx::Ctx *_hx_ctx, ::mapeditor::EditingScreen editScreen);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MEMap_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MEMap",24,26,b1,83); }

		 ::haxe::ds::IntMap tileDict;
		 ::mapeditor::BigBitmapData fullMap;
		 ::openfl::display::BitmapData regionMap;
		 ::openfl::display::BitmapData map;
		 ::openfl::display::Shape overlay;
		 ::mapeditor::IntPoint posT;
		Float zoom;
		 ::openfl::display::BitmapData invisibleTexture;
		 ::openfl::display::BitmapData replaceTexture;
		 ::mapeditor::IntPoint mouseRectAnchorT;
		 ::mapeditor::IntPoint mouseMoveAnchorT;
		bool mouseDown;
		 ::mapeditor::EditingScreen editScreen;
		 ::mapeditor::METile getTile(int x,int y);
		::Dynamic getTile_dyn();

		void modifyTile(int x,int y,int layer,int type);
		::Dynamic modifyTile_dyn();

		::Array< ::Dynamic> getAllTiles();
		::Dynamic getAllTiles_dyn();

		void setTile(int x,int y, ::mapeditor::METile tile);
		::Dynamic setTile_dyn();

		void eraseTile(int x,int y);
		::Dynamic eraseTile_dyn();

		void clear();
		::Dynamic clear_dyn();

		 ::openfl::geom::Rectangle getTileBounds();
		::Dynamic getTileBounds_dyn();

		Float sizeInTiles();
		::Dynamic sizeInTiles_dyn();

		void modifyZoom(Float mult);
		::Dynamic modifyZoom_dyn();

		bool canMove();
		::Dynamic canMove_dyn();

		void increaseZoom();
		::Dynamic increaseZoom_dyn();

		void decreaseZoom();
		::Dynamic decreaseZoom_dyn();

		void moveLeft();
		::Dynamic moveLeft_dyn();

		void moveRight();
		::Dynamic moveRight_dyn();

		void moveUp();
		::Dynamic moveUp_dyn();

		void moveDown();
		::Dynamic moveDown_dyn();

		void movePosT(int dX,int dY);
		::Dynamic movePosT_dyn();

		 ::mapeditor::IntPoint mousePosT();
		::Dynamic mousePosT_dyn();

		 ::openfl::geom::Rectangle mouseRectT();
		::Dynamic mouseRectT_dyn();

		 ::mapeditor::IntPoint posTToPosP( ::mapeditor::IntPoint pT);
		::Dynamic posTToPosP_dyn();

		Float sizeTToSizeP(int sizeT);
		::Dynamic sizeTToSizeP_dyn();

		 ::openfl::geom::Rectangle mouseRectP();
		::Dynamic mouseRectP_dyn();

		void onAddedToStage( ::openfl::events::Event _);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::openfl::events::Event _);
		::Dynamic onRemovedFromStage_dyn();

		void onKeyDown( ::openfl::events::KeyboardEvent event);
		::Dynamic onKeyDown_dyn();

		void onKeyUp( ::openfl::events::KeyboardEvent event);
		::Dynamic onKeyUp_dyn();

		void onMouseWheel( ::openfl::events::MouseEvent event);
		::Dynamic onMouseWheel_dyn();

		void onMouseDown( ::openfl::events::MouseEvent _);
		::Dynamic onMouseDown_dyn();

		void onMouseUp( ::openfl::events::MouseEvent _);
		::Dynamic onMouseUp_dyn();

		void onEnterFrame( ::openfl::events::Event _);
		::Dynamic onEnterFrame_dyn();

		void onMouseMove( ::openfl::events::MouseEvent event);
		::Dynamic onMouseMove_dyn();

		 ::mapeditor::METile getOrCreateTile(int x,int y);
		::Dynamic getOrCreateTile_dyn();

		void clearTile(int x,int y);
		::Dynamic clearTile_dyn();

		void drawTile(int x,int y, ::mapeditor::METile tile);
		::Dynamic drawTile_dyn();

		void drawOverlay();
		::Dynamic drawOverlay_dyn();

		void draw();
		::Dynamic draw_dyn();

};

} // end namespace mapeditor

#endif /* INCLUDED_mapeditor_MEMap */ 
