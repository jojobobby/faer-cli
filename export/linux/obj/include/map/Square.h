// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_map_Square
#define INCLUDED_map_Square

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(map,GroundProperties)
HX_DECLARE_CLASS1(map,Square)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS2(objects,animation,Animations)

namespace map{


class HXCPP_CLASS_ATTRIBUTES Square_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Square_obj OBJ_;
		Square_obj();

	public:
		enum { _hx_ClassId = 0x03fa0c39 };

		void __construct(float x,float y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="map.Square")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"map.Square"); }
		static ::hx::ObjectPtr< Square_obj > __new(float x,float y);
		static ::hx::ObjectPtr< Square_obj > __alloc(::hx::Ctx *_hx_ctx,float x,float y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Square_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Square",bd,74,86,8d); }

		int tileType;
		 ::objects::GameObject obj;
		 ::map::GroundProperties props;
		 ::objects::animation::Animations animations;
		float baseU;
		float baseV;
		float sink;
		int lastDamage;
		int lastVisible;
		float clipX;
		float clipY;
		float leftBlendU;
		float leftBlendV;
		float topBlendU;
		float topBlendV;
		float rightBlendU;
		float rightBlendV;
		float bottomBlendU;
		float bottomBlendV;
		float middleX;
		float middleY;
		unsigned short x;
		unsigned short y;
};

} // end namespace map

#endif /* INCLUDED_map_Square */ 
