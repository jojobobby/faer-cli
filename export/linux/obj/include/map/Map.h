// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_map_Map
#define INCLUDED_map_Map

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS1(map,CharacterStatusText)
HX_DECLARE_CLASS1(map,Map)
HX_DECLARE_CLASS1(map,Quest)
HX_DECLARE_CLASS1(map,RenderDataSingle)
HX_DECLARE_CLASS1(map,SpeechBalloon)
HX_DECLARE_CLASS1(map,Square)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace map{


class HXCPP_CLASS_ATTRIBUTES Map_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Map_obj OBJ_;
		Map_obj();

	public:
		enum { _hx_ClassId = 0x22569fc4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="map.Map")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"map.Map"); }
		static ::hx::ObjectPtr< Map_obj > __new();
		static ::hx::ObjectPtr< Map_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Map_obj();

		HX_DO_RTTI_ALL;
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Map",7c,c2,3a,00); }

		static void __boot();
		static float emptyBarU;
		static float emptyBarV;
		static float emptyBarW;
		static float emptyBarH;
		static float hpBarU;
		static float hpBarV;
		static float hpBarW;
		static float hpBarH;
		static float mpBarU;
		static float mpBarV;
		static float mpBarW;
		static float mpBarH;
		static float oxygenBarU;
		static float oxygenBarV;
		static float oxygenBarW;
		static float oxygenBarH;
		static float shieldBarU;
		static float shieldBarV;
		static float shieldBarW;
		static float shieldBarH;
		static float leftMaskU;
		static float leftMaskV;
		static float topMaskU;
		static float topMaskV;
		static float rightMaskU;
		static float rightMaskV;
		static float bottomMaskU;
		static float bottomMaskV;
		unsigned short mapWidth;
		unsigned short mapHeight;
		::String mapName;
		int back;
		bool allowPlayerTeleport;
		bool showDisplays;
		::Array< ::Dynamic> squares;
		int gameObjectsLen;
		::Array< ::Dynamic> gameObjects;
		::Array< ::Dynamic> rdSingle;
		 ::objects::Player player;
		 ::map::Quest quest;
		short lastWidth;
		short lastHeight;
		 ::openfl::display3D::Context3D c3d;
		int lastTileUpdate;
		int lastBufferUpdate;
		::Array< ::Dynamic> visSquares;
		unsigned short visSquareLen;
		 ::lime::graphics::opengl::GLObject defaultProgram;
		 ::lime::graphics::opengl::GLObject lowGlowProgram;
		 ::lime::graphics::opengl::GLObject medGlowProgram;
		 ::lime::graphics::opengl::GLObject highGlowProgram;
		 ::lime::graphics::opengl::GLObject veryHighGlowProgram;
		 ::lime::graphics::opengl::GLObject singleProgram;
		 ::lime::graphics::opengl::GLObject groundProgram;
		 ::lime::graphics::opengl::GLObject singleVBO;
		 ::lime::graphics::opengl::GLObject singleIBO;
		 ::lime::graphics::opengl::GLObject groundVAO;
		 ::lime::graphics::opengl::GLObject groundVBO;
		int groundVBOLen;
		 ::lime::graphics::opengl::GLObject groundIBO;
		int groundIBOLen;
		 ::lime::graphics::opengl::GLObject objVAO;
		 ::lime::graphics::opengl::GLObject objVBO;
		int objVBOLen;
		 ::lime::graphics::opengl::GLObject objIBO;
		int objIBOLen;
		int i;
		int vIdx;
		int iIdx;
		 ::haxe::ds::IntMap speechBalloons;
		::Array< ::Dynamic> statusTexts;
		 ::openfl::display::BitmapData normalBalloonTex;
		 ::openfl::display::BitmapData tellBalloonTex;
		 ::openfl::display::BitmapData guildBalloonTex;
		 ::openfl::display::BitmapData enemyBalloonTex;
		 ::openfl::display::BitmapData partyBalloonTex;
		 ::openfl::display::BitmapData adminBalloonTex;
		void addSpeechBalloon( ::map::SpeechBalloon sb);

		void addStatusText( ::map::CharacterStatusText text);

		void setProps(int width,int height,::String name,int back,bool allowPlayerTeleport,bool showDisplays);

		void initialize();

		void dispose();

		void update(int time,short dt);

		void setGroundTile(unsigned short x,unsigned short y,unsigned short tileType);

		void addGameObject( ::objects::GameObject go,float posX,float posY);

		void removeObj(int objectId);

		 ::objects::GameObject getGameObject(int objectId);

		void removeGameObject(int objectId);

		 ::map::Square lookupSquare(unsigned short x,unsigned short y);

		void draw(int time);

};

} // end namespace map

#endif /* INCLUDED_map_Map */ 
