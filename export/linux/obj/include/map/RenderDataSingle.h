// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_map_RenderDataSingle
#define INCLUDED_map_RenderDataSingle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS1(map,RenderDataSingle)

namespace map{


class HXCPP_CLASS_ATTRIBUTES RenderDataSingle_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef RenderDataSingle_obj OBJ_;
		RenderDataSingle_obj();

	public:
		enum { _hx_ClassId = 0x3421b520 };

		void __construct( ::lime::graphics::opengl::GLObject texture,float cosX,float sinX,float sinY,float cosY,float x,float y,float texelW,float texelH, ::Dynamic alpha);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="map.RenderDataSingle")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"map.RenderDataSingle"); }
		static ::hx::ObjectPtr< RenderDataSingle_obj > __new( ::lime::graphics::opengl::GLObject texture,float cosX,float sinX,float sinY,float cosY,float x,float y,float texelW,float texelH, ::Dynamic alpha);
		static ::hx::ObjectPtr< RenderDataSingle_obj > __alloc(::hx::Ctx *_hx_ctx, ::lime::graphics::opengl::GLObject texture,float cosX,float sinX,float sinY,float cosY,float x,float y,float texelW,float texelH, ::Dynamic alpha);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RenderDataSingle_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RenderDataSingle",68,3f,64,69); }

		 ::lime::graphics::opengl::GLObject texture;
		float cosX;
		float sinX;
		float sinY;
		float cosY;
		float x;
		float y;
		float texelW;
		float texelH;
		float alpha;
};

} // end namespace map

#endif /* INCLUDED_map_RenderDataSingle */ 
