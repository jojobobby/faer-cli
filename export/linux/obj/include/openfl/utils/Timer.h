// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_openfl_utils_Timer
#define INCLUDED_openfl_utils_Timer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS1(haxe,Timer)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,utils,Timer)

namespace openfl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Timer_obj : public  ::openfl::events::EventDispatcher_obj
{
	public:
		typedef  ::openfl::events::EventDispatcher_obj super;
		typedef Timer_obj OBJ_;
		Timer_obj();

	public:
		enum { _hx_ClassId = 0x3b9e57e4 };

		void __construct(Float delay,::hx::Null< int >  __o_repeatCount);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.utils.Timer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.utils.Timer"); }
		static ::hx::ObjectPtr< Timer_obj > __new(Float delay,::hx::Null< int >  __o_repeatCount);
		static ::hx::ObjectPtr< Timer_obj > __alloc(::hx::Ctx *_hx_ctx,Float delay,::hx::Null< int >  __o_repeatCount);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Timer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Timer",a5,2f,63,a3); }

		int currentCount;
		bool running;
		Float _hx___delay;
		int _hx___repeatCount;
		 ::haxe::Timer _hx___timer;
		void reset();
		::Dynamic reset_dyn();

		void start();
		::Dynamic start_dyn();

		void stop();
		::Dynamic stop_dyn();

		void timer_onTimer();
		::Dynamic timer_onTimer_dyn();

};

} // end namespace openfl
} // end namespace utils

#endif /* INCLUDED_openfl_utils_Timer */ 
