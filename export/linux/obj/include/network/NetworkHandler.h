// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_network_NetworkHandler
#define INCLUDED_network_NetworkHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(network,NetworkHandler)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS1(objects,Projectile)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,ProgressEvent)
HX_DECLARE_CLASS2(openfl,events,SecurityErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,net,Socket)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)
HX_DECLARE_CLASS1(servers,Server)

namespace network{


class HXCPP_CLASS_ATTRIBUTES NetworkHandler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef NetworkHandler_obj OBJ_;
		NetworkHandler_obj();

	public:
		enum { _hx_ClassId = 0x0680e18a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="network.NetworkHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"network.NetworkHandler"); }

		inline static ::hx::ObjectPtr< NetworkHandler_obj > __new() {
			::hx::ObjectPtr< NetworkHandler_obj > __this = new NetworkHandler_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< NetworkHandler_obj > __alloc(::hx::Ctx *_hx_ctx) {
			NetworkHandler_obj *__this = (NetworkHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NetworkHandler_obj), false, "network.NetworkHandler"));
			*(void **)__this = NetworkHandler_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NetworkHandler_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NetworkHandler",dc,b8,e9,d2); }

		static void __boot();
		static  ::openfl::net::Socket socket;
		static  ::servers::Server server;
		static int gameId;
		static bool createCharacter;
		static int charId;
		static int lastTickId;
		static  ::openfl::utils::ByteArrayData fmMap;
		static int playerId;
		static  ::objects::Player player;
		static  ::openfl::utils::ByteArrayData outgoingData;
		static int readLen;
		static void init();
		static ::Dynamic init_dyn();

		static void reset( ::servers::Server newServer,int newGameId,bool newCreateCharacter,int newCharId, ::openfl::utils::ByteArrayData newFmMap);
		static ::Dynamic reset_dyn();

		static void connect();
		static ::Dynamic connect_dyn();

		static void disconnect();
		static ::Dynamic disconnect_dyn();

		static void sendPacket(int packetId);
		static ::Dynamic sendPacket_dyn();

		static void onConnect( ::openfl::events::Event _);
		static ::Dynamic onConnect_dyn();

		static void onClose( ::openfl::events::Event _);
		static ::Dynamic onClose_dyn();

		static void onIOError( ::openfl::events::IOErrorEvent e);
		static ::Dynamic onIOError_dyn();

		static void onSecurityError( ::openfl::events::SecurityErrorEvent e);
		static ::Dynamic onSecurityError_dyn();

		static void onSocketData( ::openfl::events::ProgressEvent _);
		static ::Dynamic onSocketData_dyn();

		static void updateAck();
		static ::Dynamic updateAck_dyn();

		static void gotoAck(int time);
		static ::Dynamic gotoAck_dyn();

		static void pong(int serial,int time);
		static ::Dynamic pong_dyn();

		static void playerShoot(int time, ::objects::Projectile proj);
		static ::Dynamic playerShoot_dyn();

		static void playerHit(int bulletId,int objectId);
		static ::Dynamic playerHit_dyn();

		static void enemyHit(int time,int bulletId,int targetId,bool kill);
		static ::Dynamic enemyHit_dyn();

		static void groundDamage(int time,Float x,Float y);
		static ::Dynamic groundDamage_dyn();

		static void playerText(::String textStr);
		static ::Dynamic playerText_dyn();

		static bool invSwap( ::objects::Player player, ::objects::GameObject sourceObj,int slotId1,int itemId, ::objects::GameObject targetObj,int slotId2,int objectType2);
		static ::Dynamic invSwap_dyn();

		static bool invSwapVial( ::objects::Player player, ::objects::GameObject sourceObj,int slotId1,int itemId, ::objects::GameObject targetObj,int slotId2,int objectType2);
		static ::Dynamic invSwapVial_dyn();

		static void invDrop( ::objects::GameObject object,int slotId,int objectType);
		static ::Dynamic invDrop_dyn();

		static void useItem(int time,int objectId,int slotId,int objectType,Float posX,Float posY,int useType);
		static ::Dynamic useItem_dyn();

		static bool useItem_new( ::objects::GameObject itemOwner,int slotId);
		static ::Dynamic useItem_new_dyn();

		static void teleport(int objectId);
		static ::Dynamic teleport_dyn();

		static void usePortal(int objectId);
		static ::Dynamic usePortal_dyn();

		static void requestTrade(::String name);
		static ::Dynamic requestTrade_dyn();

		static void escape();
		static ::Dynamic escape_dyn();

		static void joinGuild(::String guildName);
		static ::Dynamic joinGuild_dyn();

		static void setPlayerSkinTemplate( ::objects::Player player,int skinId);
		static ::Dynamic setPlayerSkinTemplate_dyn();

		static void move(int tickId, ::objects::Player player);
		static ::Dynamic move_dyn();

};

} // end namespace network

#endif /* INCLUDED_network_NetworkHandler */ 
