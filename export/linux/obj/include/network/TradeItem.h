// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_network_TradeItem
#define INCLUDED_network_TradeItem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b72d07b15b4a29a0_3_new)
HX_DECLARE_CLASS1(network,TradeItem)

namespace network{


class HXCPP_CLASS_ATTRIBUTES TradeItem_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TradeItem_obj OBJ_;
		TradeItem_obj();

	public:
		enum { _hx_ClassId = 0x4eda82ed };

		void __construct( ::Dynamic item, ::Dynamic slotType, ::Dynamic tradeable, ::Dynamic included);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="network.TradeItem")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"network.TradeItem"); }

		inline static ::hx::ObjectPtr< TradeItem_obj > __new( ::Dynamic item, ::Dynamic slotType, ::Dynamic tradeable, ::Dynamic included) {
			::hx::ObjectPtr< TradeItem_obj > __this = new TradeItem_obj();
			__this->__construct(item,slotType,tradeable,included);
			return __this;
		}

		inline static ::hx::ObjectPtr< TradeItem_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic item, ::Dynamic slotType, ::Dynamic tradeable, ::Dynamic included) {
			TradeItem_obj *__this = (TradeItem_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TradeItem_obj), false, "network.TradeItem"));
			*(void **)__this = TradeItem_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_b72d07b15b4a29a0_3_new)
HXLINE(   7)		( ( ::network::TradeItem)(__this) )->included = false;
HXLINE(   6)		( ( ::network::TradeItem)(__this) )->tradeable = false;
HXLINE(   5)		( ( ::network::TradeItem)(__this) )->slotType = 0;
HXLINE(   4)		( ( ::network::TradeItem)(__this) )->item = 0;
HXLINE(   3)		if (::hx::IsNotNull( item )) {
HXDLIN(   3)			( ( ::network::TradeItem)(__this) )->item = ( (int)(item) );
            		}
HXDLIN(   3)		if (::hx::IsNotNull( slotType )) {
HXDLIN(   3)			( ( ::network::TradeItem)(__this) )->slotType = ( (int)(slotType) );
            		}
HXDLIN(   3)		if (::hx::IsNotNull( tradeable )) {
HXDLIN(   3)			( ( ::network::TradeItem)(__this) )->tradeable = ( (bool)(tradeable) );
            		}
HXDLIN(   3)		if (::hx::IsNotNull( included )) {
HXDLIN(   3)			( ( ::network::TradeItem)(__this) )->included = ( (bool)(included) );
            		}
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TradeItem_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TradeItem",77,e2,10,c5); }

		int item;
		int slotType;
		bool tradeable;
		bool included;
};

} // end namespace network

#endif /* INCLUDED_network_TradeItem */ 
