// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_lib_ui_impl_LayoutList
#define INCLUDED_lib_ui_impl_LayoutList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS3(lib,ui,api,Layout)
HX_DECLARE_CLASS3(lib,ui,api,Size)
HX_DECLARE_CLASS3(lib,ui,impl,LayoutList)
HX_DECLARE_CLASS3(lib,ui,impl,NullLayout)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(util,EmptySignal)

namespace lib{
namespace ui{
namespace impl{


class HXCPP_CLASS_ATTRIBUTES LayoutList_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef LayoutList_obj OBJ_;
		LayoutList_obj();

	public:
		enum { _hx_ClassId = 0x66978f39 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lib.ui.impl.LayoutList")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lib.ui.impl.LayoutList"); }
		static ::hx::ObjectPtr< LayoutList_obj > __new();
		static ::hx::ObjectPtr< LayoutList_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LayoutList_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LayoutList",48,98,03,d9); }

		static void __boot();
		static  ::lib::ui::impl::NullLayout NULL_LAYOUT;
		static  ::lib::ui::api::Size ZERO_SIZE;
		 ::util::EmptySignal itemsChanged;
		::Array< ::Dynamic> list;
		 ::openfl::display::Sprite container;
		 ::openfl::display::Shape containerMask;
		::Dynamic layout;
		 ::lib::ui::api::Size size;
		int offset;
		void setLayout(::Dynamic layout);
		::Dynamic setLayout_dyn();

		 ::lib::ui::api::Size getSize();
		::Dynamic getSize_dyn();

		void setSize( ::lib::ui::api::Size size);
		::Dynamic setSize_dyn();

		 ::lib::ui::api::Size getSizeOfItems();
		::Dynamic getSizeOfItems_dyn();

		void setItems(::Array< ::Dynamic> items);
		::Dynamic setItems_dyn();

		void setOffset(int value);
		::Dynamic setOffset_dyn();

		void updateLayout();
		::Dynamic updateLayout_dyn();

		void applySizeToMask();
		::Dynamic applySizeToMask_dyn();

		void clearList();
		::Dynamic clearList_dyn();

		void addItemsToListAndContainer(::Array< ::Dynamic> items);
		::Dynamic addItemsToListAndContainer_dyn();

		void addToListAndContainer( ::openfl::display::DisplayObject item);
		::Dynamic addToListAndContainer_dyn();

};

} // end namespace lib
} // end namespace ui
} // end namespace impl

#endif /* INCLUDED_lib_ui_impl_LayoutList */ 
