// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_lib_ui_api_Size
#define INCLUDED_lib_ui_api_Size

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_4f4d4a1014822963_3_new)
HX_DECLARE_CLASS3(lib,ui,api,Size)

namespace lib{
namespace ui{
namespace api{


class HXCPP_CLASS_ATTRIBUTES Size_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Size_obj OBJ_;
		Size_obj();

	public:
		enum { _hx_ClassId = 0x575b3182 };

		void __construct(::hx::Null< int >  __o_width,::hx::Null< int >  __o_height);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lib.ui.api.Size")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"lib.ui.api.Size"); }

		inline static ::hx::ObjectPtr< Size_obj > __new(::hx::Null< int >  __o_width,::hx::Null< int >  __o_height) {
			::hx::ObjectPtr< Size_obj > __this = new Size_obj();
			__this->__construct(__o_width,__o_height);
			return __this;
		}

		inline static ::hx::ObjectPtr< Size_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_width,::hx::Null< int >  __o_height) {
			Size_obj *__this = (Size_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Size_obj), false, "lib.ui.api.Size"));
			*(void **)__this = Size_obj::_hx_vtable;
{
            		int width = __o_width.Default(0);
            		int height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_4f4d4a1014822963_3_new)
HXLINE(   5)		( ( ::lib::ui::api::Size)(__this) )->height = 0;
HXLINE(   4)		( ( ::lib::ui::api::Size)(__this) )->width = 0;
HXLINE(   8)		( ( ::lib::ui::api::Size)(__this) )->width = width;
HXLINE(   9)		( ( ::lib::ui::api::Size)(__this) )->height = height;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Size_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Size",e1,cc,2c,37); }

		int width;
		int height;
};

} // end namespace lib
} // end namespace ui
} // end namespace api

#endif /* INCLUDED_lib_ui_api_Size */ 
