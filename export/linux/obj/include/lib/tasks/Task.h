// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_lib_tasks_Task
#define INCLUDED_lib_tasks_Task

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lib,tasks,Task)
HX_DECLARE_CLASS1(util,Signal)

namespace lib{
namespace tasks{


class HXCPP_CLASS_ATTRIBUTES Task_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Task_obj OBJ_;
		Task_obj();

	public:
		enum { _hx_ClassId = 0x7e99215e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lib.tasks.Task")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lib.tasks.Task"); }
		static ::hx::ObjectPtr< Task_obj > __new();
		static ::hx::ObjectPtr< Task_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Task_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Task",65,eb,cf,37); }

		 ::util::Signal started;
		 ::util::Signal finished;
		 ::util::Signal lastly;
		bool isStarted;
		bool isFinished;
		bool isOK;
		::String error;
		void start();
		::Dynamic start_dyn();

		void reset();
		::Dynamic reset_dyn();

		virtual void startTask();
		::Dynamic startTask_dyn();

		void onReset();
		::Dynamic onReset_dyn();

		void completeTask(bool isOK,::String error);
		::Dynamic completeTask_dyn();

};

} // end namespace lib
} // end namespace tasks

#endif /* INCLUDED_lib_tasks_Task */ 
