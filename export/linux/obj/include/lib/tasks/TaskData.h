// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_lib_tasks_TaskData
#define INCLUDED_lib_tasks_TaskData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lib,tasks,Task)
HX_DECLARE_CLASS2(lib,tasks,TaskData)

namespace lib{
namespace tasks{


class HXCPP_CLASS_ATTRIBUTES TaskData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TaskData_obj OBJ_;
		TaskData_obj();

	public:
		enum { _hx_ClassId = 0x75cafd18 };

		void __construct( ::lib::tasks::Task task,bool success,::String error);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lib.tasks.TaskData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lib.tasks.TaskData"); }
		static ::hx::ObjectPtr< TaskData_obj > __new( ::lib::tasks::Task task,bool success,::String error);
		static ::hx::ObjectPtr< TaskData_obj > __alloc(::hx::Ctx *_hx_ctx, ::lib::tasks::Task task,bool success,::String error);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TaskData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TaskData",2f,84,56,4a); }

		 ::lib::tasks::Task task;
		bool success;
		::String error;
};

} // end namespace lib
} // end namespace tasks

#endif /* INCLUDED_lib_tasks_TaskData */ 
