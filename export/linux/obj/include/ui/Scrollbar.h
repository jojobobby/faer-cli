// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_Scrollbar
#define INCLUDED_ui_Scrollbar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,IVector)
HX_DECLARE_CLASS2(openfl,_Vector,ObjectVector)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,GraphicsPath)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IGraphicsData)
HX_DECLARE_CLASS2(openfl,display,IGraphicsPath)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS1(ui,Scrollbar)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES Scrollbar_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Scrollbar_obj OBJ_;
		Scrollbar_obj();

	public:
		enum { _hx_ClassId = 0x57ef5c72 };

		void __construct(int widthParam,int heightParam,::hx::Null< Float >  __o_speed);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.Scrollbar")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.Scrollbar"); }
		static ::hx::ObjectPtr< Scrollbar_obj > __new(int widthParam,int heightParam,::hx::Null< Float >  __o_speed);
		static ::hx::ObjectPtr< Scrollbar_obj > __alloc(::hx::Ctx *_hx_ctx,int widthParam,int heightParam,::hx::Null< Float >  __o_speed);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Scrollbar_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Scrollbar",c6,7f,e7,df); }

		static void drawArrow(int w,int h, ::openfl::display::Graphics g);
		static ::Dynamic drawArrow_dyn();

		static  ::openfl::display::Sprite getSprite( ::Dynamic downFunction);
		static ::Dynamic getSprite_dyn();

		static void onRollOver( ::openfl::events::MouseEvent event);
		static ::Dynamic onRollOver_dyn();

		static void onRollOut( ::openfl::events::MouseEvent event);
		static ::Dynamic onRollOut_dyn();

		int w;
		int h;
		Float speed;
		 ::openfl::geom::Rectangle indicatorRect;
		Float jumpDist;
		 ::openfl::display::Sprite background;
		 ::openfl::display::Sprite upArrow;
		 ::openfl::display::Sprite downArrow;
		 ::openfl::display::Sprite posIndicator;
		int lastUpdateTime;
		Float change;
		 ::openfl::display::GraphicsPath path;
		 ::openfl::_Vector::ObjectVector graphicsData;
		Float pos();
		::Dynamic pos_dyn();

		void setIndicatorSize(Float windowHeight,Float totalHeight,::hx::Null< bool >  doSetPos);
		::Dynamic setIndicatorSize_dyn();

		void setPos(Float v);
		::Dynamic setPos_dyn();

		void jumpUp(Float mult);
		::Dynamic jumpUp_dyn();

		void jumpDown(Float mult);
		::Dynamic jumpDown_dyn();

		void resize(int widthParam,int heightParam,::hx::Null< Float >  speed);
		::Dynamic resize_dyn();

		void sendPos();
		::Dynamic sendPos_dyn();

		void drawIndicator(int w,int h, ::openfl::display::Graphics g);
		::Dynamic drawIndicator_dyn();

		void onAddedToStage( ::openfl::events::Event event);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::openfl::events::Event event);
		::Dynamic onRemovedFromStage_dyn();

		void onMouseWheel( ::openfl::events::MouseEvent event);
		::Dynamic onMouseWheel_dyn();

		void onBackgroundDown( ::openfl::events::MouseEvent event);
		::Dynamic onBackgroundDown_dyn();

		void onUpArrowDown( ::openfl::events::MouseEvent event);
		::Dynamic onUpArrowDown_dyn();

		void onDownArrowDown( ::openfl::events::MouseEvent event);
		::Dynamic onDownArrowDown_dyn();

		void onArrowFrame( ::openfl::events::Event event);
		::Dynamic onArrowFrame_dyn();

		void onArrowUp( ::openfl::events::Event event);
		::Dynamic onArrowUp_dyn();

		void onStartIndicatorDrag( ::openfl::events::MouseEvent event);
		::Dynamic onStartIndicatorDrag_dyn();

		void onStopIndicatorDrag( ::openfl::events::MouseEvent event);
		::Dynamic onStopIndicatorDrag_dyn();

		void onDragMove( ::openfl::events::MouseEvent event);
		::Dynamic onDragMove_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_Scrollbar */ 
