// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_Slot
#define INCLUDED_ui_Slot

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,IVector)
HX_DECLARE_CLASS2(openfl,_Vector,ObjectVector)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,GraphicsPath)
HX_DECLARE_CLASS2(openfl,display,GraphicsSolidFill)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IGraphicsData)
HX_DECLARE_CLASS2(openfl,display,IGraphicsFill)
HX_DECLARE_CLASS2(openfl,display,IGraphicsPath)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,ColorMatrixFilter)
HX_DECLARE_CLASS1(ui,Slot)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES Slot_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Slot_obj OBJ_;
		Slot_obj();

	public:
		enum { _hx_ClassId = 0x5b0c6cf2 };

		void __construct(int itemType,int hotkey,::Array< int > cuts);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.Slot")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.Slot"); }
		static ::hx::ObjectPtr< Slot_obj > __new(int itemType,int hotkey,::Array< int > cuts);
		static ::hx::ObjectPtr< Slot_obj > __alloc(::hx::Ctx *_hx_ctx,int itemType,int hotkey,::Array< int > cuts);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Slot_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Slot",1e,0a,2f,37); }

		static void __boot();
		static  ::openfl::filters::ColorMatrixFilter greyColorFilter;
		static ::String slotTypeToName(int itemType);
		static ::Dynamic slotTypeToName_dyn();

		int itemType;
		int hotkey;
		::Array< int > cuts;
		 ::openfl::display::Bitmap backgroundImage;
		 ::openfl::display::GraphicsSolidFill fill;
		 ::openfl::display::GraphicsPath path;
		 ::openfl::_Vector::ObjectVector graphicsData;
		void drawBackground();
		::Dynamic drawBackground_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_Slot */ 
