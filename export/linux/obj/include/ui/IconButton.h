// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_IconButton
#define INCLUDED_ui_IconButton

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS1(ui,IconButton)
HX_DECLARE_CLASS2(ui,tooltip,TextToolTip)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES IconButton_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef IconButton_obj OBJ_;
		IconButton_obj();

	public:
		enum { _hx_ClassId = 0x26b8756b };

		void __construct( ::openfl::display::BitmapData bitmapData,::String toolTipTitle,::String hotkeyName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.IconButton")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.IconButton"); }
		static ::hx::ObjectPtr< IconButton_obj > __new( ::openfl::display::BitmapData bitmapData,::String toolTipTitle,::String hotkeyName);
		static ::hx::ObjectPtr< IconButton_obj > __alloc(::hx::Ctx *_hx_ctx, ::openfl::display::BitmapData bitmapData,::String toolTipTitle,::String hotkeyName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~IconButton_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IconButton",6b,22,25,22); }

		static void __boot();
		static  ::openfl::geom::ColorTransform mouseOverCT;
		 ::openfl::display::BitmapData origIconBitmapData;
		 ::openfl::display::BitmapData iconBitmapData;
		 ::openfl::display::Bitmap icon;
		::String hotkeyName;
		 ::openfl::geom::ColorTransform ct;
		 ::ui::tooltip::TextToolTip toolTip;
		void setColorTransform( ::openfl::geom::ColorTransform ct);
		::Dynamic setColorTransform_dyn();

		void onMouseOver( ::openfl::events::MouseEvent event);
		::Dynamic onMouseOver_dyn();

		void onMouseOut( ::openfl::events::MouseEvent event);
		::Dynamic onMouseOut_dyn();

		void onRemovedFromStage( ::openfl::events::Event event);
		::Dynamic onRemovedFromStage_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_IconButton */ 
