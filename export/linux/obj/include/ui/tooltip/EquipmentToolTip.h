// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_tooltip_EquipmentToolTip
#define INCLUDED_ui_tooltip_EquipmentToolTip

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(ui,LineBreakDesign)
HX_DECLARE_CLASS1(ui,SimpleText)
HX_DECLARE_CLASS2(ui,tooltip,Effect)
HX_DECLARE_CLASS2(ui,tooltip,EquipmentToolTip)
HX_DECLARE_CLASS2(ui,tooltip,Restriction)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)

namespace ui{
namespace tooltip{


class HXCPP_CLASS_ATTRIBUTES EquipmentToolTip_obj : public  ::ui::tooltip::ToolTip_obj
{
	public:
		typedef  ::ui::tooltip::ToolTip_obj super;
		typedef EquipmentToolTip_obj OBJ_;
		EquipmentToolTip_obj();

	public:
		enum { _hx_ClassId = 0x7f0fd0c4 };

		void __construct(int objectType, ::objects::Player player,int invType,::String inventoryOwnerType,::hx::Null< int >  __o_inventorySlotID);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.tooltip.EquipmentToolTip")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.tooltip.EquipmentToolTip"); }
		static ::hx::ObjectPtr< EquipmentToolTip_obj > __new(int objectType, ::objects::Player player,int invType,::String inventoryOwnerType,::hx::Null< int >  __o_inventorySlotID);
		static ::hx::ObjectPtr< EquipmentToolTip_obj > __alloc(::hx::Ctx *_hx_ctx,int objectType, ::objects::Player player,int invType,::String inventoryOwnerType,::hx::Null< int >  __o_inventorySlotID);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EquipmentToolTip_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EquipmentToolTip",55,7a,68,4e); }

		static ::String buildRestrictionsHTML(::Array< ::Dynamic> restrictions);
		static ::Dynamic buildRestrictionsHTML_dyn();

		static ::String statToName(int stat);
		static ::Dynamic statToName_dyn();

		 ::openfl::display::Bitmap icon;
		 ::ui::SimpleText titleText;
		 ::ui::SimpleText tierText;
		 ::ui::LineBreakDesign line1;
		 ::ui::SimpleText effectsText;
		 ::ui::LineBreakDesign line2;
		 ::ui::SimpleText restrictionsText;
		 ::objects::Player player;
		bool isEquippable;
		int objectType;
		 ::Xml curItemXML;
		 ::Xml objectXML;
		bool playerCanUse;
		::Array< ::Dynamic> restrictions;
		::Array< ::Dynamic> effects;
		int yOffset;
		int rarityColor;
		::String compareIncrementStat( ::Xml activateXML);
		::Dynamic compareIncrementStat_dyn();

		::String buildEffectsHTML(::Array< ::Dynamic> effects);
		::Dynamic buildEffectsHTML_dyn();

};

} // end namespace ui
} // end namespace tooltip

#endif /* INCLUDED_ui_tooltip_EquipmentToolTip */ 
