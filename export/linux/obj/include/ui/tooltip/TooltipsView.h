// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_tooltip_TooltipsView
#define INCLUDED_ui_tooltip_TooltipsView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)
HX_DECLARE_CLASS2(ui,tooltip,TooltipsView)

namespace ui{
namespace tooltip{


class HXCPP_CLASS_ATTRIBUTES TooltipsView_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef TooltipsView_obj OBJ_;
		TooltipsView_obj();

	public:
		enum { _hx_ClassId = 0x2ccd7664 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.tooltip.TooltipsView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.tooltip.TooltipsView"); }
		static ::hx::ObjectPtr< TooltipsView_obj > __new();
		static ::hx::ObjectPtr< TooltipsView_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TooltipsView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TooltipsView",b5,a8,c1,02); }

		 ::ui::tooltip::ToolTip toolTip;
		void show( ::ui::tooltip::ToolTip toolTip);
		::Dynamic show_dyn();

		void hide();
		::Dynamic hide_dyn();

};

} // end namespace ui
} // end namespace tooltip

#endif /* INCLUDED_ui_tooltip_TooltipsView */ 
