// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_dialogs_ErrorDialog
#define INCLUDED_ui_dialogs_ErrorDialog

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_ui_dialogs_Dialog
#include <ui/dialogs/Dialog.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(ui,dialogs,Dialog)
HX_DECLARE_CLASS2(ui,dialogs,ErrorDialog)

namespace ui{
namespace dialogs{


class HXCPP_CLASS_ATTRIBUTES ErrorDialog_obj : public  ::ui::dialogs::Dialog_obj
{
	public:
		typedef  ::ui::dialogs::Dialog_obj super;
		typedef ErrorDialog_obj OBJ_;
		ErrorDialog_obj();

	public:
		enum { _hx_ClassId = 0x785cb919 };

		void __construct(::String errorText);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.dialogs.ErrorDialog")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.dialogs.ErrorDialog"); }
		static ::hx::ObjectPtr< ErrorDialog_obj > __new(::String errorText);
		static ::hx::ObjectPtr< ErrorDialog_obj > __alloc(::hx::Ctx *_hx_ctx,::String errorText);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ErrorDialog_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ErrorDialog",90,e2,d2,83); }

		static void onComplete( ::openfl::events::Event event);
		static ::Dynamic onComplete_dyn();

		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onRemoved( ::openfl::events::Event _);
		::Dynamic onRemoved_dyn();

		void onClose( ::openfl::events::MouseEvent _);
		::Dynamic onClose_dyn();

};

} // end namespace ui
} // end namespace dialogs

#endif /* INCLUDED_ui_dialogs_ErrorDialog */ 
