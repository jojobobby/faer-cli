// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_SimpleText
#define INCLUDED_ui_SimpleText

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,Font)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,text,TextFormat)
HX_DECLARE_CLASS1(ui,SimpleText)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES SimpleText_obj : public  ::openfl::text::TextField_obj
{
	public:
		typedef  ::openfl::text::TextField_obj super;
		typedef SimpleText_obj OBJ_;
		SimpleText_obj();

	public:
		enum { _hx_ClassId = 0x22af5d83 };

		void __construct(int textSize,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_settable,::hx::Null< int >  __o_widthParam,::hx::Null< int >  __o_heightParam,::hx::Null< bool >  __o_isLink);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.SimpleText")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.SimpleText"); }
		static ::hx::ObjectPtr< SimpleText_obj > __new(int textSize,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_settable,::hx::Null< int >  __o_widthParam,::hx::Null< int >  __o_heightParam,::hx::Null< bool >  __o_isLink);
		static ::hx::ObjectPtr< SimpleText_obj > __alloc(::hx::Ctx *_hx_ctx,int textSize,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_settable,::hx::Null< int >  __o_widthParam,::hx::Null< int >  __o_heightParam,::hx::Null< bool >  __o_isLink);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SimpleText_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SimpleText",1f,02,de,f6); }

		static void __boot();
		static  ::openfl::text::Font font;
		static bool fontRegistered;
		int inputWidth;
		int inputHeight;
		int actualWidth;
		int actualHeight;
		 ::ui::SimpleText setSize(int size);
		::Dynamic setSize_dyn();

		 ::ui::SimpleText setColor(int color);
		::Dynamic setColor_dyn();

		 ::ui::SimpleText setBold(bool bold);
		::Dynamic setBold_dyn();

		 ::ui::SimpleText setItalic(bool italic);
		::Dynamic setItalic_dyn();

		 ::ui::SimpleText setAlignment( ::Dynamic alignment);
		::Dynamic setAlignment_dyn();

		 ::ui::SimpleText setText(::String text);
		::Dynamic setText_dyn();

		 ::ui::SimpleText setHtmlText(::String text);
		::Dynamic setHtmlText_dyn();

		 ::ui::SimpleText updateMetrics();
		::Dynamic updateMetrics_dyn();

		void useTextDimensions();
		::Dynamic useTextDimensions_dyn();

		void applyFormat( ::openfl::text::TextFormat format);
		::Dynamic applyFormat_dyn();

		void onChange( ::openfl::events::Event _);
		::Dynamic onChange_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_SimpleText */ 
