// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_MiniMap
#define INCLUDED_ui_MiniMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(map,Map)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS1(ui,IconButton)
HX_DECLARE_CLASS1(ui,MiniMap)
HX_DECLARE_CLASS1(ui,MiniMapZoomButtons)
HX_DECLARE_CLASS2(ui,menu,Menu)
HX_DECLARE_CLASS2(ui,menu,PlayerGroupMenu)
HX_DECLARE_CLASS2(ui,tooltip,PlayerGroupToolTip)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES MiniMap_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef MiniMap_obj OBJ_;
		MiniMap_obj();

	public:
		enum { _hx_ClassId = 0x5070add1 };

		void __construct(int width,int height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.MiniMap")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.MiniMap"); }
		static ::hx::ObjectPtr< MiniMap_obj > __new(int width,int height);
		static ::hx::ObjectPtr< MiniMap_obj > __alloc(::hx::Ctx *_hx_ctx,int width,int height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MiniMap_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MiniMap",25,94,23,19); }

		static void __boot();
		static  ::haxe::ds::IntMap objectTypeColorDict;
		static  ::Dynamic gameObjectToColor( ::objects::GameObject go);
		static ::Dynamic gameObjectToColor_dyn();

		static bool areSamePlayers(::Array< ::Dynamic> players0,::Array< ::Dynamic> players1);
		static ::Dynamic areSamePlayers_dyn();

		static bool lineSegmentIntersectXY( ::openfl::geom::Rectangle rect,Float p1x,Float p1y,Float p2x,Float p2y, ::openfl::geom::Point result);
		static ::Dynamic lineSegmentIntersectXY_dyn();

		 ::map::Map map;
		int mapWidth;
		int mapHeight;
		int zoomIndex;
		 ::openfl::geom::Rectangle windowRect;
		 ::openfl::geom::Point maxWH;
		 ::openfl::display::BitmapData miniMapData;
		::Array< Float > zoomLevels;
		 ::openfl::display::BitmapData blueArrow;
		 ::openfl::display::Shape groundLayer;
		 ::openfl::display::Shape characterLayer;
		 ::ui::IconButton optionsButton;
		 ::ui::IconButton hubButton;
		 ::ui::MiniMapZoomButtons zoomButtons;
		 ::openfl::display::Bitmap decor;
		bool isMouseOver;
		 ::ui::tooltip::PlayerGroupToolTip tooltip;
		 ::ui::menu::PlayerGroupMenu menu;
		 ::openfl::geom::Matrix mapMatrix;
		 ::openfl::geom::Matrix arrowMatrix;
		::Array< ::Dynamic> players;
		 ::openfl::geom::Point tempPoint;
		void update();
		::Dynamic update_dyn();

		void onMiniMapZoom(::String direction);
		::Dynamic onMiniMapZoom_dyn();

		void dispose();
		::Dynamic dispose_dyn();

		void setGroundTile(int x,int y,int tileType);
		::Dynamic setGroundTile_dyn();

		void setGameObjectTile(int x,int y, ::objects::GameObject go);
		::Dynamic setGameObjectTile_dyn();

		void zoomIn();
		::Dynamic zoomIn_dyn();

		void zoomOut();
		::Dynamic zoomOut_dyn();

		void createButton();
		::Dynamic createButton_dyn();

		void makeViewModel();
		::Dynamic makeViewModel_dyn();

		void makeVisualLayers();
		::Dynamic makeVisualLayers_dyn();

		void addMouseListeners();
		::Dynamic addMouseListeners_dyn();

		void onZoomChanged(int zoomLevel);
		::Dynamic onZoomChanged_dyn();

		void addMenu();
		::Dynamic addMenu_dyn();

		void onHubClick( ::openfl::events::MouseEvent event);
		::Dynamic onHubClick_dyn();

		void onOptionsClick( ::openfl::events::MouseEvent event);
		::Dynamic onOptionsClick_dyn();

		void onMouseOver( ::openfl::events::MouseEvent event);
		::Dynamic onMouseOver_dyn();

		void onMouseOut( ::openfl::events::MouseEvent event);
		::Dynamic onMouseOut_dyn();

		void onMapClick( ::openfl::events::MouseEvent event);
		::Dynamic onMapClick_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_MiniMap */ 
