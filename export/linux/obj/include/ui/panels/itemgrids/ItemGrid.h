// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#define INCLUDED_ui_panels_itemgrids_ItemGrid

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(ui,panels,Panel)
HX_DECLARE_CLASS3(ui,panels,itemgrids,ItemGrid)
HX_DECLARE_CLASS4(ui,panels,itemgrids,itemtiles,InteractiveItemTile)
HX_DECLARE_CLASS4(ui,panels,itemgrids,itemtiles,ItemTile)
HX_DECLARE_CLASS4(ui,panels,itemgrids,itemtiles,ItemTileEvent)
HX_DECLARE_CLASS2(ui,tooltip,EquipmentToolTip)
HX_DECLARE_CLASS2(ui,tooltip,ToolTip)

namespace ui{
namespace panels{
namespace itemgrids{


class HXCPP_CLASS_ATTRIBUTES ItemGrid_obj : public  ::ui::panels::Panel_obj
{
	public:
		typedef  ::ui::panels::Panel_obj super;
		typedef ItemGrid_obj OBJ_;
		ItemGrid_obj();

	public:
		enum { _hx_ClassId = 0x0bf625e0 };

		void __construct( ::objects::GameObject gridOwner, ::objects::Player currentPlayer,int itemIndexOffset,::hx::Null< bool >  __o_disableBgDraw);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.panels.itemgrids.ItemGrid")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.panels.itemgrids.ItemGrid"); }
		static ::hx::ObjectPtr< ItemGrid_obj > __new( ::objects::GameObject gridOwner, ::objects::Player currentPlayer,int itemIndexOffset,::hx::Null< bool >  __o_disableBgDraw);
		static ::hx::ObjectPtr< ItemGrid_obj > __alloc(::hx::Ctx *_hx_ctx, ::objects::GameObject gridOwner, ::objects::Player currentPlayer,int itemIndexOffset,::hx::Null< bool >  __o_disableBgDraw);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ItemGrid_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ItemGrid",99,09,1a,7b); }

		static void __boot();
		static ::Array< int > NO_CUT;
		static ::Array< ::Dynamic> CutsByNum;
		static void onShiftClick( ::ui::panels::itemgrids::itemtiles::ItemTileEvent e);
		static ::Dynamic onShiftClick_dyn();

		 ::objects::GameObject owner;
		 ::objects::Player curPlayer;
		bool interactive;
		int indexOffset;
		bool disableBgDraw;
		 ::ui::tooltip::EquipmentToolTip tooltip;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onRemoved( ::openfl::events::Event _);
		::Dynamic onRemoved_dyn();

		void addToVialStack( ::ui::panels::itemgrids::itemtiles::InteractiveItemTile sourceTile);
		::Dynamic addToVialStack_dyn();

		void dropItem( ::ui::panels::itemgrids::itemtiles::InteractiveItemTile itemTile);
		::Dynamic dropItem_dyn();

		bool swapItemTiles( ::ui::panels::itemgrids::itemtiles::ItemTile sourceTile, ::ui::panels::itemgrids::itemtiles::ItemTile destTile);
		::Dynamic swapItemTiles_dyn();

		void dropWithoutDestTile( ::ui::panels::itemgrids::itemtiles::ItemTile sourceTile, ::objects::GameObject container,int containerIndex);
		::Dynamic dropWithoutDestTile_dyn();

		void equipOrUseContainer( ::ui::panels::itemgrids::itemtiles::InteractiveItemTile tile);
		::Dynamic equipOrUseContainer_dyn();

		void equipOrUseInventory( ::ui::panels::itemgrids::itemtiles::InteractiveItemTile tile);
		::Dynamic equipOrUseInventory_dyn();

		void onTileMove( ::ui::panels::itemgrids::itemtiles::ItemTileEvent e);
		::Dynamic onTileMove_dyn();

		void onVialMove( ::ui::panels::itemgrids::itemtiles::ItemTileEvent e);
		::Dynamic onVialMove_dyn();

		void onCtrlClick( ::ui::panels::itemgrids::itemtiles::ItemTileEvent e);
		::Dynamic onCtrlClick_dyn();

		void onDoubleClick( ::ui::panels::itemgrids::itemtiles::ItemTileEvent e);
		::Dynamic onDoubleClick_dyn();

		void draw();
		::Dynamic draw_dyn();

		virtual void setItems(::Array< int > items,::hx::Null< int >  itemIndexOffset);
		::Dynamic setItems_dyn();

		void addToGrid( ::ui::panels::itemgrids::itemtiles::ItemTile tile,int numRows,int tileIndex);
		::Dynamic addToGrid_dyn();

		::String getCharacterType();
		::Dynamic getCharacterType_dyn();

		void onTileHover( ::openfl::events::MouseEvent e);
		::Dynamic onTileHover_dyn();

};

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids

#endif /* INCLUDED_ui_panels_itemgrids_ItemGrid */ 
