// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile
#define INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,_Vector,IVector)
HX_DECLARE_CLASS2(openfl,_Vector,ObjectVector)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,GraphicsPath)
HX_DECLARE_CLASS2(openfl,display,GraphicsSolidFill)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IGraphicsData)
HX_DECLARE_CLASS2(openfl,display,IGraphicsFill)
HX_DECLARE_CLASS2(openfl,display,IGraphicsPath)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(ui,panels,Panel)
HX_DECLARE_CLASS3(ui,panels,itemgrids,ItemGrid)
HX_DECLARE_CLASS4(ui,panels,itemgrids,itemtiles,ItemTile)
HX_DECLARE_CLASS4(ui,panels,itemgrids,itemtiles,ItemTileSprite)

namespace ui{
namespace panels{
namespace itemgrids{
namespace itemtiles{


class HXCPP_CLASS_ATTRIBUTES ItemTile_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef ItemTile_obj OBJ_;
		ItemTile_obj();

	public:
		enum { _hx_ClassId = 0x65ba405c };

		void __construct(int id, ::ui::panels::itemgrids::ItemGrid parentGrid);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.panels.itemgrids.itemtiles.ItemTile")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.panels.itemgrids.itemtiles.ItemTile"); }
		static ::hx::ObjectPtr< ItemTile_obj > __new(int id, ::ui::panels::itemgrids::ItemGrid parentGrid);
		static ::hx::ObjectPtr< ItemTile_obj > __alloc(::hx::Ctx *_hx_ctx,int id, ::ui::panels::itemgrids::ItemGrid parentGrid);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ItemTile_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ItemTile",01,fe,aa,83); }

		 ::openfl::display::Bitmap restrictionBitmap;
		 ::ui::panels::itemgrids::itemtiles::ItemTileSprite itemSprite;
		int tileId;
		 ::ui::panels::itemgrids::ItemGrid ownerGrid;
		 ::openfl::display::GraphicsSolidFill fill;
		 ::openfl::display::GraphicsPath path;
		 ::openfl::_Vector::ObjectVector graphicsData;
		::Array< int > cuts;
		 ::openfl::display::Bitmap rareBackground;
		 ::openfl::display::Bitmap epicBackground;
		 ::openfl::display::Bitmap legendaryBackground;
		 ::openfl::display::Bitmap mythicBackground;
		void drawBackground(::Array< int > cuts);
		::Dynamic drawBackground_dyn();

		virtual bool setItem(int itemId);
		::Dynamic setItem_dyn();

		virtual void setItemSprite( ::ui::panels::itemgrids::itemtiles::ItemTileSprite itemTileSprite);
		::Dynamic setItemSprite_dyn();

		void updateUseability( ::objects::Player player);
		::Dynamic updateUseability_dyn();

		virtual bool canHoldItem(int itemType);
		::Dynamic canHoldItem_dyn();

		void resetItemPosition();
		::Dynamic resetItemPosition_dyn();

		int getItemId();
		::Dynamic getItemId_dyn();

};

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids
} // end namespace itemtiles

#endif /* INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile */ 
