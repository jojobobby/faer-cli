// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_ClickableText
#define INCLUDED_ui_ClickableText

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(ui,ClickableText)
HX_DECLARE_CLASS1(ui,SimpleText)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES ClickableText_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef ClickableText_obj OBJ_;
		ClickableText_obj();

	public:
		enum { _hx_ClassId = 0x3e4d323b };

		void __construct(int textSize,bool bold,::String text);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.ClickableText")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.ClickableText"); }
		static ::hx::ObjectPtr< ClickableText_obj > __new(int textSize,bool bold,::String text);
		static ::hx::ObjectPtr< ClickableText_obj > __alloc(::hx::Ctx *_hx_ctx,int textSize,bool bold,::String text);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ClickableText_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ClickableText",8f,8f,3b,86); }

		static void onMouseClick( ::openfl::events::MouseEvent event);
		static ::Dynamic onMouseClick_dyn();

		 ::ui::SimpleText text;
		int defaultColor;
		void setDefaultColor(int color);
		::Dynamic setDefaultColor_dyn();

		void onMouseOver( ::openfl::events::MouseEvent event);
		::Dynamic onMouseOver_dyn();

		void onMouseOut( ::openfl::events::MouseEvent event);
		::Dynamic onMouseOut_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_ClickableText */ 
