// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_view_TitleView
#define INCLUDED_ui_view_TitleView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(screens,TitleMenuOption)
HX_DECLARE_CLASS2(ui,view,TitleView)
HX_DECLARE_CLASS1(util,EmptySignal)

namespace ui{
namespace view{


class HXCPP_CLASS_ATTRIBUTES TitleView_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef TitleView_obj OBJ_;
		TitleView_obj();

	public:
		enum { _hx_ClassId = 0x396675c0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.view.TitleView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.view.TitleView"); }
		static ::hx::ObjectPtr< TitleView_obj > __new();
		static ::hx::ObjectPtr< TitleView_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TitleView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TitleView",fd,ff,cc,13); }

		static void handleIntentionToPlay();
		static ::Dynamic handleIntentionToPlay_dyn();

		static void showServersScreen();
		static ::Dynamic showServersScreen_dyn();

		static void showEditorScreen();
		static ::Dynamic showEditorScreen_dyn();

		static void handleIntentionToReviewAccount();
		static ::Dynamic handleIntentionToReviewAccount_dyn();

		static void dispatchBehaviorRequest();
		static ::Dynamic dispatchBehaviorRequest_dyn();

		static void dispatchXmlRequest();
		static ::Dynamic dispatchXmlRequest_dyn();

		 ::util::EmptySignal playClicked;
		 ::util::EmptySignal serversClicked;
		 ::util::EmptySignal accountClicked;
		 ::util::EmptySignal editorClicked;
		 ::util::EmptySignal behaviorClicked;
		 ::util::EmptySignal xmlClicked;
		 ::openfl::display::Sprite container;
		 ::screens::TitleMenuOption playButton;
		 ::screens::TitleMenuOption serversButton;
		 ::screens::TitleMenuOption accountButton;
		 ::screens::TitleMenuOption editorButton;
		 ::screens::TitleMenuOption behaviorButton;
		 ::screens::TitleMenuOption xmlButton;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onRemoved( ::openfl::events::Event _);
		::Dynamic onRemoved_dyn();

		void initialize();
		::Dynamic initialize_dyn();

		void makeChildren();
		::Dynamic makeChildren_dyn();

		void addChildren();
		::Dynamic addChildren_dyn();

		void positionButtons();
		::Dynamic positionButtons_dyn();

};

} // end namespace ui
} // end namespace view

#endif /* INCLUDED_ui_view_TitleView */ 
