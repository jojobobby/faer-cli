// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_view_VialSlotView
#define INCLUDED_ui_view_VialSlotView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TimerEvent)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,utils,Timer)
HX_DECLARE_CLASS1(ui,SimpleText)
HX_DECLARE_CLASS2(ui,view,VialSlotView)

namespace ui{
namespace view{


class HXCPP_CLASS_ATTRIBUTES VialSlotView_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef VialSlotView_obj OBJ_;
		VialSlotView_obj();

	public:
		enum { _hx_ClassId = 0x3751925a };

		void __construct(::Array< int > cuts,int position,bool fillWhole);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.view.VialSlotView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.view.VialSlotView"); }
		static ::hx::ObjectPtr< VialSlotView_obj > __new(::Array< int > cuts,int position,bool fillWhole);
		static ::hx::ObjectPtr< VialSlotView_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< int > cuts,int position,bool fillWhole);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~VialSlotView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("VialSlotView",a1,58,42,47); }

		int buttonWidth;
		int position;
		int objectType;
		 ::ui::SimpleText text;
		 ::openfl::display::Sprite vialIconDraggableSprite;
		 ::openfl::display::Bitmap vialIcon;
		 ::openfl::utils::Timer doubleClickTimer;
		 ::openfl::geom::Point dragStart;
		bool pendingSecondClick;
		bool isDragging;
		bool showVials;
		void init( ::objects::Player player);
		::Dynamic init_dyn();

		void draw( ::objects::Player player);
		::Dynamic draw_dyn();

		void setData(int vials,::hx::Null< int >  objectType);
		::Dynamic setData_dyn();

		void setPendingDoubleClick(bool isPending);
		::Dynamic setPendingDoubleClick_dyn();

		void beginDrag();
		::Dynamic beginDrag_dyn();

		void onMouseOut( ::openfl::events::MouseEvent e);
		::Dynamic onMouseOut_dyn();

		void onMouseUp( ::openfl::events::MouseEvent e);
		::Dynamic onMouseUp_dyn();

		void onMouseDown( ::openfl::events::MouseEvent e);
		::Dynamic onMouseDown_dyn();

		void beginDragCheck( ::openfl::events::MouseEvent e);
		::Dynamic beginDragCheck_dyn();

		void cancelDragCheck( ::openfl::events::MouseEvent e);
		::Dynamic cancelDragCheck_dyn();

		void onMouseMoveCheckDrag( ::openfl::events::MouseEvent e);
		::Dynamic onMouseMoveCheckDrag_dyn();

		void onDoubleClickTimerComplete( ::openfl::events::TimerEvent e);
		::Dynamic onDoubleClickTimerComplete_dyn();

		void endDrag( ::openfl::events::MouseEvent e);
		::Dynamic endDrag_dyn();

		void onRemovedFromStage( ::openfl::events::Event e);
		::Dynamic onRemovedFromStage_dyn();

};

} // end namespace ui
} // end namespace view

#endif /* INCLUDED_ui_view_VialSlotView */ 
