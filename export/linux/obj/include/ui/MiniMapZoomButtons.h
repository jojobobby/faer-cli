// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_MiniMapZoomButtons
#define INCLUDED_ui_MiniMapZoomButtons

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS1(ui,MiniMapZoomButtons)
HX_DECLARE_CLASS1(util,Signal)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES MiniMapZoomButtons_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef MiniMapZoomButtons_obj OBJ_;
		MiniMapZoomButtons_obj();

	public:
		enum { _hx_ClassId = 0x4e294581 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.MiniMapZoomButtons")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.MiniMapZoomButtons"); }
		static ::hx::ObjectPtr< MiniMapZoomButtons_obj > __new();
		static ::hx::ObjectPtr< MiniMapZoomButtons_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MiniMapZoomButtons_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MiniMapZoomButtons",49,0b,31,c7); }

		static void __boot();
		static  ::openfl::geom::ColorTransform FADE;
		static  ::openfl::geom::ColorTransform NORM;
		 ::util::Signal zoom;
		 ::openfl::display::Sprite zoomOut;
		 ::openfl::display::Sprite zoomIn;
		int zoomLevels;
		int zoomLevel;
		int setZoomLevel(int value);
		::Dynamic setZoomLevel_dyn();

		int setZoomLevels(int count);
		::Dynamic setZoomLevels_dyn();

		void makeZoomOut();
		::Dynamic makeZoomOut_dyn();

		void makeZoomIn();
		::Dynamic makeZoomIn_dyn();

		bool canZoomOut();
		::Dynamic canZoomOut_dyn();

		bool canZoomIn();
		::Dynamic canZoomIn_dyn();

		void updateButtons();
		::Dynamic updateButtons_dyn();

		void onZoomOut( ::openfl::events::MouseEvent event);
		::Dynamic onZoomOut_dyn();

		void onZoomIn( ::openfl::events::MouseEvent event);
		::Dynamic onZoomIn_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_MiniMapZoomButtons */ 
