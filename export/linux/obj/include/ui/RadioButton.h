// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_RadioButton
#define INCLUDED_ui_RadioButton

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(ui,RadioButton)
HX_DECLARE_CLASS1(util,Signal)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES RadioButton_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef RadioButton_obj OBJ_;
		RadioButton_obj();

	public:
		enum { _hx_ClassId = 0x120c3a2d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.RadioButton")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.RadioButton"); }
		static ::hx::ObjectPtr< RadioButton_obj > __new();
		static ::hx::ObjectPtr< RadioButton_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RadioButton_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RadioButton",2d,ed,b6,15); }

		 ::util::Signal changed;
		 ::openfl::display::Shape unselected;
		 ::openfl::display::Shape selected;
		void setSelected(bool value);
		::Dynamic setSelected_dyn();

		 ::openfl::display::Shape makeUnselected();
		::Dynamic makeUnselected_dyn();

		 ::openfl::display::Shape makeSelected();
		::Dynamic makeSelected_dyn();

		void drawOutline( ::openfl::display::Graphics graphics);
		::Dynamic drawOutline_dyn();

		void drawFill( ::openfl::display::Graphics graphics);
		::Dynamic drawFill_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_RadioButton */ 
