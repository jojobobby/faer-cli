// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_TextBox
#define INCLUDED_ui_TextBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(game,GameSprite)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TimerEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,utils,Timer)
HX_DECLARE_CLASS1(ui,TextBox)
HX_DECLARE_CLASS1(ui,TextBoxLine)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES TextBox_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef TextBox_obj OBJ_;
		TextBox_obj();

	public:
		enum { _hx_ClassId = 0x00fcddca };

		void __construct( ::game::GameSprite gs,int w,int h);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.TextBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.TextBox"); }
		static ::hx::ObjectPtr< TextBox_obj > __new( ::game::GameSprite gs,int w,int h);
		static ::hx::ObjectPtr< TextBox_obj > __alloc(::hx::Ctx *_hx_ctx, ::game::GameSprite gs,int w,int h);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextBox",3e,3b,0b,6c); }

		static void __boot();
		static bool isInputtingText;
		static ::Array< ::Dynamic> lines;
		 ::openfl::display::Sprite textSprite;
		 ::game::GameSprite gs;
		int w;
		int h;
		Float textSpriteYPos;
		 ::openfl::text::TextField inputField;
		bool showMax;
		int lc;
		::Array< ::String > tellers;
		int currentTeller;
		 ::openfl::utils::Timer timer;
		int selectedMessageIdx;
		 ::openfl::display::Bitmap decor;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onClick( ::openfl::events::MouseEvent _);
		::Dynamic onClick_dyn();

		void addText(::String text,unsigned int textColor);
		::Dynamic addText_dyn();

		void addTextFull(::String name,::String recipient,::String text,unsigned int nameColor,unsigned int textColor);
		::Dynamic addTextFull_dyn();

		void clearTextSprite();
		::Dynamic clearTextSprite_dyn();

		void addTextBlock(::String text);
		::Dynamic addTextBlock_dyn();

		void refreshStatusBox();
		::Dynamic refreshStatusBox_dyn();

		void insertTellPrefix(bool backward);
		::Dynamic insertTellPrefix_dyn();

		void selectInput();
		::Dynamic selectInput_dyn();

		void unselectInput();
		::Dynamic unselectInput_dyn();

		void placeTextField();
		::Dynamic placeTextField_dyn();

		void onTimer( ::openfl::events::TimerEvent event);
		::Dynamic onTimer_dyn();

		void onAddedToStage( ::openfl::events::Event event);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::openfl::events::Event event);
		::Dynamic onRemovedFromStage_dyn();

		void onKeyUp( ::openfl::events::KeyboardEvent event);
		::Dynamic onKeyUp_dyn();

		void onInputFieldKeyUp( ::openfl::events::KeyboardEvent event);
		::Dynamic onInputFieldKeyUp_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_TextBox */ 
