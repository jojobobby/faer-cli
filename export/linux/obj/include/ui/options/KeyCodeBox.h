// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_ui_options_KeyCodeBox
#define INCLUDED_ui_options_KeyCodeBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(ui,options,KeyCodeBox)

namespace ui{
namespace options{


class HXCPP_CLASS_ATTRIBUTES KeyCodeBox_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef KeyCodeBox_obj OBJ_;
		KeyCodeBox_obj();

	public:
		enum { _hx_ClassId = 0x37544505 };

		void __construct(int keyCode);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.options.KeyCodeBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ui.options.KeyCodeBox"); }
		static ::hx::ObjectPtr< KeyCodeBox_obj > __new(int keyCode);
		static ::hx::ObjectPtr< KeyCodeBox_obj > __alloc(::hx::Ctx *_hx_ctx,int keyCode);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~KeyCodeBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("KeyCodeBox",1f,a3,a9,b2); }

		int keyCode;
		bool selected;
		bool inputMode;
		 ::openfl::display::Bitmap keyIcon;
		int value();
		::Dynamic value_dyn();

		void setKeyCode(int keyCode);
		::Dynamic setKeyCode_dyn();

		void setText(int keyCodeIndex);
		::Dynamic setText_dyn();

		void setNormalMode();
		::Dynamic setNormalMode_dyn();

		void setInputMode();
		::Dynamic setInputMode_dyn();

		void onNormalClick( ::openfl::events::MouseEvent event);
		::Dynamic onNormalClick_dyn();

		void onInputKeyDown( ::openfl::events::KeyboardEvent event);
		::Dynamic onInputKeyDown_dyn();

		void onMouse1( ::openfl::events::MouseEvent event);
		::Dynamic onMouse1_dyn();

		void onMouse2( ::openfl::events::MouseEvent event);
		::Dynamic onMouse2_dyn();

		void onMouse3( ::openfl::events::MouseEvent event);
		::Dynamic onMouse3_dyn();

};

} // end namespace ui
} // end namespace options

#endif /* INCLUDED_ui_options_KeyCodeBox */ 
