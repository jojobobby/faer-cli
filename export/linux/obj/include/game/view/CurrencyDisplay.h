// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_game_view_CurrencyDisplay
#define INCLUDED_game_view_CurrencyDisplay

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(game,GameSprite)
HX_DECLARE_CLASS2(game,view,CurrencyDisplay)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(ui,SimpleText)

namespace game{
namespace view{


class HXCPP_CLASS_ATTRIBUTES CurrencyDisplay_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef CurrencyDisplay_obj OBJ_;
		CurrencyDisplay_obj();

	public:
		enum { _hx_ClassId = 0x1aba7712 };

		void __construct(::String orientation, ::game::GameSprite gs);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.view.CurrencyDisplay")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"game.view.CurrencyDisplay"); }
		static ::hx::ObjectPtr< CurrencyDisplay_obj > __new(::String orientation, ::game::GameSprite gs);
		static ::hx::ObjectPtr< CurrencyDisplay_obj > __alloc(::hx::Ctx *_hx_ctx,::String orientation, ::game::GameSprite gs);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CurrencyDisplay_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CurrencyDisplay",d1,4e,97,ea); }

		 ::ui::SimpleText gemText;
		 ::ui::SimpleText goldText;
		 ::ui::SimpleText crownText;
		 ::openfl::display::Bitmap gemIcon;
		 ::openfl::display::Bitmap goldIcon;
		 ::openfl::display::Bitmap crownIcon;
		int gems;
		int gold;
		int crowns;
		 ::game::GameSprite gs;
		::String orientation;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onRemoved( ::openfl::events::Event _);
		::Dynamic onRemoved_dyn();

		void onGemsChanged(int gems);
		::Dynamic onGemsChanged_dyn();

		void onGoldChanged(int gold);
		::Dynamic onGoldChanged_dyn();

		void onCrownsChanged(int crowns);
		::Dynamic onCrownsChanged_dyn();

};

} // end namespace game
} // end namespace view

#endif /* INCLUDED_game_view_CurrencyDisplay */ 
