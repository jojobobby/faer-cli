// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_game_model_VialModel
#define INCLUDED_game_model_VialModel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(game,model,VialModel)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(ui,model,VialData)

namespace game{
namespace model{


class HXCPP_CLASS_ATTRIBUTES VialModel_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef VialModel_obj OBJ_;
		VialModel_obj();

	public:
		enum { _hx_ClassId = 0x2766fdf4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="game.model.VialModel")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"game.model.VialModel"); }

		inline static ::hx::ObjectPtr< VialModel_obj > __new() {
			::hx::ObjectPtr< VialModel_obj > __this = new VialModel_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< VialModel_obj > __alloc(::hx::Ctx *_hx_ctx) {
			VialModel_obj *__this = (VialModel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VialModel_obj), false, "game.model.VialModel"));
			*(void **)__this = VialModel_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~VialModel_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("VialModel",cb,9f,7c,e2); }

		static void __boot();
		static  ::haxe::ds::IntMap vialData;
		static int getVialSlot(int objectType);
		static ::Dynamic getVialSlot_dyn();

		static void init();
		static ::Dynamic init_dyn();

		static  ::ui::model::VialData getVialData(int objectId);
		static ::Dynamic getVialData_dyn();

};

} // end namespace game
} // end namespace model

#endif /* INCLUDED_game_model_VialModel */ 
