// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_game_MoveRecords
#define INCLUDED_game_MoveRecords

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(game,MoveRecord)
HX_DECLARE_CLASS1(game,MoveRecords)

namespace game{


class HXCPP_CLASS_ATTRIBUTES MoveRecords_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MoveRecords_obj OBJ_;
		MoveRecords_obj();

	public:
		enum { _hx_ClassId = 0x571e10df };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.MoveRecords")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"game.MoveRecords"); }
		static ::hx::ObjectPtr< MoveRecords_obj > __new();
		static ::hx::ObjectPtr< MoveRecords_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MoveRecords_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MoveRecords",91,19,aa,ed); }

		int lastClearTime;
		::Array< ::Dynamic> records;
		int recordIdx;
		void clear(int time);
		::Dynamic clear_dyn();

		int getId(int time);
		::Dynamic getId_dyn();

		int getScore(int id,int time);
		::Dynamic getScore_dyn();

};

} // end namespace game

#endif /* INCLUDED_game_MoveRecords */ 
