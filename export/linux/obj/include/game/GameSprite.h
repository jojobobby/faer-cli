// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_game_GameSprite
#define INCLUDED_game_GameSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(game,GameSprite)
HX_DECLARE_CLASS1(game,InputHandler)
HX_DECLARE_CLASS1(game,MoveRecords)
HX_DECLARE_CLASS2(game,view,CurrencyDisplay)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(map,Map)
HX_DECLARE_CLASS1(objects,GameObject)
HX_DECLARE_CLASS1(objects,Player)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)
HX_DECLARE_CLASS1(servers,Server)
HX_DECLARE_CLASS1(ui,GuildText)
HX_DECLARE_CLASS1(ui,MiniMap)
HX_DECLARE_CLASS1(ui,SimpleText)
HX_DECLARE_CLASS1(ui,TextBox)
HX_DECLARE_CLASS2(ui,view,CharacterDetailsView)
HX_DECLARE_CLASS2(ui,view,Inventory)

namespace game{


class HXCPP_CLASS_ATTRIBUTES GameSprite_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef GameSprite_obj OBJ_;
		GameSprite_obj();

	public:
		enum { _hx_ClassId = 0x7c964c69 };

		void __construct( ::servers::Server server,int gameId,bool createCharacter,int charId, ::openfl::utils::ByteArrayData fmMap);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.GameSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"game.GameSprite"); }
		static ::hx::ObjectPtr< GameSprite_obj > __new( ::servers::Server server,int gameId,bool createCharacter,int charId, ::openfl::utils::ByteArrayData fmMap);
		static ::hx::ObjectPtr< GameSprite_obj > __alloc(::hx::Ctx *_hx_ctx, ::servers::Server server,int gameId,bool createCharacter,int charId, ::openfl::utils::ByteArrayData fmMap);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GameSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GameSprite",b7,c9,bc,fc); }

		 ::map::Map map;
		 ::game::InputHandler inputHandler;
		 ::ui::TextBox textBox;
		 ::ui::MiniMap miniMap;
		 ::ui::view::CharacterDetailsView characterDetails;
		 ::ui::view::Inventory inventory;
		 ::ui::GuildText guildText;
		 ::game::view::CurrencyDisplay currencyDisplay;
		int lastUpdate;
		int lastFixedUpdate;
		 ::game::MoveRecords moveRecords;
		 ::ui::SimpleText statsView;
		int lastFrameUpdate;
		int frames;
		 ::objects::Player focus;
		bool isGameStarted;
		bool uiInited;
		bool inited;
		bool fromEditor;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void close();
		::Dynamic close_dyn();

		void setFocus( ::objects::Player focus);
		::Dynamic setFocus_dyn();

		void addStatsView();
		::Dynamic addStatsView_dyn();

		void updateStats(int time);
		::Dynamic updateStats_dyn();

		void initialize();
		::Dynamic initialize_dyn();

		void connect();
		::Dynamic connect_dyn();

		void disconnect();
		::Dynamic disconnect_dyn();

		void onResize( ::openfl::events::Event _);
		::Dynamic onResize_dyn();

		void onEnterFrame( ::openfl::events::Event event);
		::Dynamic onEnterFrame_dyn();

};

} // end namespace game

#endif /* INCLUDED_game_GameSprite */ 
