// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_game_InputHandler
#define INCLUDED_game_InputHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(game,GameSprite)
HX_DECLARE_CLASS1(game,InputHandler)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)

namespace game{


class HXCPP_CLASS_ATTRIBUTES InputHandler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef InputHandler_obj OBJ_;
		InputHandler_obj();

	public:
		enum { _hx_ClassId = 0x5000d6ba };

		void __construct( ::game::GameSprite gs);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="game.InputHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"game.InputHandler"); }
		static ::hx::ObjectPtr< InputHandler_obj > __new( ::game::GameSprite gs);
		static ::hx::ObjectPtr< InputHandler_obj > __alloc(::hx::Ctx *_hx_ctx, ::game::GameSprite gs);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InputHandler_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InputHandler",00,55,14,a6); }

		static void onMouseWheel( ::openfl::events::MouseEvent event);
		static ::Dynamic onMouseWheel_dyn();

		bool isWalking;
		int moveLeft;
		int moveRight;
		int moveUp;
		int moveDown;
		int rotateLeft;
		int rotateRight;
		bool shootDown;
		void clearInput();
		::Dynamic clearInput_dyn();

		void setPlayerMovement();
		::Dynamic setPlayerMovement_dyn();

		void useItem(int slotId);
		::Dynamic useItem_dyn();

		void togglePerformanceStats();
		::Dynamic togglePerformanceStats_dyn();

		void onAddedToStage( ::openfl::events::Event event);
		::Dynamic onAddedToStage_dyn();

		void onRemovedFromStage( ::openfl::events::Event event);
		::Dynamic onRemovedFromStage_dyn();

		void onDeactivate( ::openfl::events::Event event);
		::Dynamic onDeactivate_dyn();

		void onMouseDown( ::openfl::events::MouseEvent event);
		::Dynamic onMouseDown_dyn();

		void onMouseUp( ::openfl::events::MouseEvent _);
		::Dynamic onMouseUp_dyn();

		void onRightMouseDown( ::openfl::events::MouseEvent event);
		::Dynamic onRightMouseDown_dyn();

		void onRightMouseUp( ::openfl::events::MouseEvent _);
		::Dynamic onRightMouseUp_dyn();

		void onMiddleMouseDown( ::openfl::events::MouseEvent event);
		::Dynamic onMiddleMouseDown_dyn();

		void onMiddleMouseUp( ::openfl::events::MouseEvent _);
		::Dynamic onMiddleMouseUp_dyn();

		void onEnterFrame( ::openfl::events::Event event);
		::Dynamic onEnterFrame_dyn();

		void onKeyDown( ::openfl::events::KeyboardEvent event);
		::Dynamic onKeyDown_dyn();

		void onKeyUp( ::openfl::events::KeyboardEvent event);
		::Dynamic onKeyUp_dyn();

		void downAction(unsigned char keyCode,::hx::Null< bool >  shootCheck);
		::Dynamic downAction_dyn();

		void upAction(unsigned char keyCode);
		::Dynamic upAction_dyn();

};

} // end namespace game

#endif /* INCLUDED_game_InputHandler */ 
