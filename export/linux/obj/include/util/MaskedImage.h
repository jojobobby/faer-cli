// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_MaskedImage
#define INCLUDED_util_MaskedImage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS1(util,MaskedImage)

namespace util{


class HXCPP_CLASS_ATTRIBUTES MaskedImage_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MaskedImage_obj OBJ_;
		MaskedImage_obj();

	public:
		enum { _hx_ClassId = 0x580f542e };

		void __construct( ::openfl::display::BitmapData image, ::openfl::display::BitmapData mask);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.MaskedImage")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"util.MaskedImage"); }
		static ::hx::ObjectPtr< MaskedImage_obj > __new( ::openfl::display::BitmapData image, ::openfl::display::BitmapData mask);
		static ::hx::ObjectPtr< MaskedImage_obj > __alloc(::hx::Ctx *_hx_ctx, ::openfl::display::BitmapData image, ::openfl::display::BitmapData mask);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MaskedImage_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MaskedImage",f0,0a,e4,fd); }

		 ::openfl::display::BitmapData image;
		 ::openfl::display::BitmapData mask;
		int width();
		::Dynamic width_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_MaskedImage */ 
