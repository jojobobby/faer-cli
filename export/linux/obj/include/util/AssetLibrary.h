// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_AssetLibrary
#define INCLUDED_util_AssetLibrary

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS1(util,AssetLibrary)
HX_DECLARE_CLASS1(util,Rect)

namespace util{


class HXCPP_CLASS_ATTRIBUTES AssetLibrary_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AssetLibrary_obj OBJ_;
		AssetLibrary_obj();

	public:
		enum { _hx_ClassId = 0x1a7d2671 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="util.AssetLibrary")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"util.AssetLibrary"); }

		inline static ::hx::ObjectPtr< AssetLibrary_obj > __new() {
			::hx::ObjectPtr< AssetLibrary_obj > __this = new AssetLibrary_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< AssetLibrary_obj > __alloc(::hx::Ctx *_hx_ctx) {
			AssetLibrary_obj *__this = (AssetLibrary_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AssetLibrary_obj), false, "util.AssetLibrary"));
			*(void **)__this = AssetLibrary_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AssetLibrary_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AssetLibrary",0b,4f,d4,27); }

		static void __boot();
		static  ::haxe::ds::StringMap images;
		static  ::haxe::ds::StringMap imageSets;
		static void addImageSet(::String name, ::openfl::display::BitmapData data,int width,int height,::hx::Null< bool >  ignoreAtlas);
		static ::Dynamic addImageSet_dyn();

		static  ::openfl::display::BitmapData getImageFromSet(::String name,int id);
		static ::Dynamic getImageFromSet_dyn();

		static  ::util::Rect getRectFromSet(::String name,int id);
		static ::Dynamic getRectFromSet_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_AssetLibrary */ 
