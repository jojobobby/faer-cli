// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_Signal
#define INCLUDED_util_Signal

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_ace0f4bbf57a7597_33_new)
HX_DECLARE_CLASS1(util,Signal)

namespace util{


class HXCPP_CLASS_ATTRIBUTES Signal_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Signal_obj OBJ_;
		Signal_obj();

	public:
		enum { _hx_ClassId = 0x17cf1836 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.Signal")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"util.Signal"); }

		inline static ::hx::ObjectPtr< Signal_obj > __new() {
			::hx::ObjectPtr< Signal_obj > __this = new Signal_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Signal_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Signal_obj *__this = (Signal_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Signal_obj), true, "util.Signal"));
			*(void **)__this = Signal_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_ace0f4bbf57a7597_33_new)
HXDLIN(  33)		( ( ::util::Signal)(__this) )->listeners = ::Array_obj< ::Dynamic>::__new(0);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Signal_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Signal",88,a2,1a,e9); }

		::Array< ::Dynamic> listeners;
		void on( ::Dynamic listener);
		::Dynamic on_dyn();

		void once( ::Dynamic listener);
		::Dynamic once_dyn();

		void off( ::Dynamic listener);
		::Dynamic off_dyn();

		void emit( ::Dynamic data);
		::Dynamic emit_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_Signal */ 
