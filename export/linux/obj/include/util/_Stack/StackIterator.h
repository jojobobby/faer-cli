// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util__Stack_StackIterator
#define INCLUDED_util__Stack_StackIterator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_cpp_FastIterator
#include <cpp/FastIterator.h>
#endif
HX_DECLARE_CLASS1(util,Cell)
HX_DECLARE_CLASS2(util,_Stack,StackIterator)

namespace util{
namespace _Stack{


class HXCPP_CLASS_ATTRIBUTES StackIterator_obj : public ::cpp::FastIterator_obj<  ::Dynamic >
{
	public:
		typedef ::cpp::FastIterator_obj<  ::Dynamic > super;
		typedef StackIterator_obj OBJ_;
		StackIterator_obj();

	public:
		enum { _hx_ClassId = 0x56845ceb };

		void __construct( ::util::Cell head);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util._Stack.StackIterator")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"util._Stack.StackIterator"); }
		static ::hx::ObjectPtr< StackIterator_obj > __new( ::util::Cell head);
		static ::hx::ObjectPtr< StackIterator_obj > __alloc(::hx::Ctx *_hx_ctx, ::util::Cell head);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~StackIterator_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("StackIterator",36,45,6c,31); }

		 ::util::Cell current;
		bool hasNext();

		 ::Dynamic next();

};

} // end namespace util
} // end namespace _Stack

#endif /* INCLUDED_util__Stack_StackIterator */ 
