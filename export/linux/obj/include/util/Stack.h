// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_Stack
#define INCLUDED_util_Stack

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_0b1ffbdd40d6dc57_34_new)
HX_DECLARE_CLASS1(util,Cell)
HX_DECLARE_CLASS1(util,Stack)

namespace util{


class HXCPP_CLASS_ATTRIBUTES Stack_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Stack_obj OBJ_;
		Stack_obj();

	public:
		enum { _hx_ClassId = 0x14757de6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.Stack")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"util.Stack"); }

		inline static ::hx::ObjectPtr< Stack_obj > __new() {
			::hx::ObjectPtr< Stack_obj > __this = new Stack_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Stack_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Stack_obj *__this = (Stack_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Stack_obj), true, "util.Stack"));
			*(void **)__this = Stack_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_0b1ffbdd40d6dc57_34_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Stack_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Stack",28,d7,38,17); }

		 ::util::Cell head;
};

} // end namespace util

#endif /* INCLUDED_util_Stack */ 
