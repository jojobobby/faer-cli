// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_BitmapUtil
#define INCLUDED_util_BitmapUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS1(util,BitmapUtil)

namespace util{


class HXCPP_CLASS_ATTRIBUTES BitmapUtil_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BitmapUtil_obj OBJ_;
		BitmapUtil_obj();

	public:
		enum { _hx_ClassId = 0x7f8f63d7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="util.BitmapUtil")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"util.BitmapUtil"); }

		inline static ::hx::ObjectPtr< BitmapUtil_obj > __new() {
			::hx::ObjectPtr< BitmapUtil_obj > __this = new BitmapUtil_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< BitmapUtil_obj > __alloc(::hx::Ctx *_hx_ctx) {
			BitmapUtil_obj *__this = (BitmapUtil_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BitmapUtil_obj), false, "util.BitmapUtil"));
			*(void **)__this = BitmapUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BitmapUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BitmapUtil",b1,bb,bc,35); }

		static  ::openfl::display::BitmapData trimAlpha( ::openfl::display::BitmapData tex);
		static ::Dynamic trimAlpha_dyn();

		static  ::openfl::display::BitmapData mirror( ::openfl::display::BitmapData bitmapData,::hx::Null< int >  width);
		static ::Dynamic mirror_dyn();

		static  ::openfl::display::BitmapData cropToBitmapData( ::openfl::display::BitmapData bitmapData,int x,int y,int width,int height);
		static ::Dynamic cropToBitmapData_dyn();

		static Float amountTransparent( ::openfl::display::BitmapData bitmapData);
		static ::Dynamic amountTransparent_dyn();

		static int mostCommonColor( ::openfl::display::BitmapData bitmapData);
		static ::Dynamic mostCommonColor_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_BitmapUtil */ 
