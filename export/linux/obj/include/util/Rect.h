// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_Rect
#define INCLUDED_util_Rect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_865fed207ef50b3a_6_new)
HX_DECLARE_CLASS1(util,Rect)

namespace util{


class HXCPP_CLASS_ATTRIBUTES Rect_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Rect_obj OBJ_;
		Rect_obj();

	public:
		enum { _hx_ClassId = 0x5c5f7446 };

		void __construct(::hx::Null< float >  __o_x,::hx::Null< float >  __o_y,::hx::Null< float >  __o_width,::hx::Null< float >  __o_height);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="util.Rect")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"util.Rect"); }

		inline static ::hx::ObjectPtr< Rect_obj > __new(::hx::Null< float >  __o_x,::hx::Null< float >  __o_y,::hx::Null< float >  __o_width,::hx::Null< float >  __o_height) {
			::hx::ObjectPtr< Rect_obj > __this = new Rect_obj();
			__this->__construct(__o_x,__o_y,__o_width,__o_height);
			return __this;
		}

		inline static ::hx::ObjectPtr< Rect_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< float >  __o_x,::hx::Null< float >  __o_y,::hx::Null< float >  __o_width,::hx::Null< float >  __o_height) {
			Rect_obj *__this = (Rect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Rect_obj), false, "util.Rect"));
			*(void **)__this = Rect_obj::_hx_vtable;
{
            		float x = __o_x.Default(0);
            		float y = __o_y.Default(0);
            		float width = __o_width.Default(0);
            		float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_865fed207ef50b3a_6_new)
HXLINE(  10)		( ( ::util::Rect)(__this) )->height = ((Float)0.0);
HXLINE(   9)		( ( ::util::Rect)(__this) )->width = ((Float)0.0);
HXLINE(   8)		( ( ::util::Rect)(__this) )->y = ((Float)0.0);
HXLINE(   7)		( ( ::util::Rect)(__this) )->x = ((Float)0.0);
HXLINE(  13)		( ( ::util::Rect)(__this) )->x = ( (Float)(x) );
HXLINE(  14)		( ( ::util::Rect)(__this) )->y = ( (Float)(y) );
HXLINE(  15)		( ( ::util::Rect)(__this) )->width = ( (Float)(width) );
HXLINE(  16)		( ( ::util::Rect)(__this) )->height = ( (Float)(height) );
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Rect_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Rect",44,79,80,36); }

		Float x;
		Float y;
		Float width;
		Float height;
};

} // end namespace util

#endif /* INCLUDED_util_Rect */ 
