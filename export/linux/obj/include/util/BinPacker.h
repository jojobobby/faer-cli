// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_BinPacker
#define INCLUDED_util_BinPacker

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(util,BinPacker)
HX_DECLARE_CLASS1(util,Rect)

namespace util{


class HXCPP_CLASS_ATTRIBUTES BinPacker_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BinPacker_obj OBJ_;
		BinPacker_obj();

	public:
		enum { _hx_ClassId = 0x03fd914b };

		void __construct(float width,float height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.BinPacker")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"util.BinPacker"); }
		static ::hx::ObjectPtr< BinPacker_obj > __new(float width,float height);
		static ::hx::ObjectPtr< BinPacker_obj > __alloc(::hx::Ctx *_hx_ctx,float width,float height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BinPacker_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BinPacker",8d,b3,53,ce); }

		float binWidth;
		float binHeight;
		::Array< ::Dynamic> freeRectangles;
		 ::util::Rect insert(float width,float height);
		::Dynamic insert_dyn();

		bool splitFreeNode( ::util::Rect freeNode, ::util::Rect usedNode);
		::Dynamic splitFreeNode_dyn();

		void pruneFreeList();
		::Dynamic pruneFreeList_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_BinPacker */ 
