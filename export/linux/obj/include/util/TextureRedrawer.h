// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_TextureRedrawer
#define INCLUDED_util_TextureRedrawer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS1(util,TextureRedrawer)

namespace util{


class HXCPP_CLASS_ATTRIBUTES TextureRedrawer_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TextureRedrawer_obj OBJ_;
		TextureRedrawer_obj();

	public:
		enum { _hx_ClassId = 0x0e93e599 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="util.TextureRedrawer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"util.TextureRedrawer"); }

		inline static ::hx::ObjectPtr< TextureRedrawer_obj > __new() {
			::hx::ObjectPtr< TextureRedrawer_obj > __this = new TextureRedrawer_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TextureRedrawer_obj > __alloc(::hx::Ctx *_hx_ctx) {
			TextureRedrawer_obj *__this = (TextureRedrawer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextureRedrawer_obj), false, "util.TextureRedrawer"));
			*(void **)__this = TextureRedrawer_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextureRedrawer_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextureRedrawer",3f,99,f0,87); }

		static void __boot();
		static  ::haxe::ds::ObjectMap redrawCaches;
		static  ::openfl::display::BitmapData redraw( ::openfl::display::BitmapData tex,int size,bool padBottom,int glowColor,::hx::Null< bool >  useCache,::hx::Null< Float >  sMult,::hx::Null< bool >  noAlphaTrim);
		static ::Dynamic redraw_dyn();

		static  ::openfl::display::BitmapData resize( ::openfl::display::BitmapData tex,int size,bool padBottom,::hx::Null< Float >  sMult);
		static ::Dynamic resize_dyn();

		static int getHash(int size,bool padBottom,int glowColor,Float sMult);
		static ::Dynamic getHash_dyn();

		static void cache( ::openfl::display::BitmapData tex,int hash, ::openfl::display::BitmapData modifiedTex);
		static ::Dynamic cache_dyn();

		static bool isCached( ::openfl::display::BitmapData tex,int hash);
		static ::Dynamic isCached_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_TextureRedrawer */ 
