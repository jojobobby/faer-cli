// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_util_AnimatedChar
#define INCLUDED_util_AnimatedChar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(util,AnimatedChar)
HX_DECLARE_CLASS1(util,MaskedImage)
HX_DECLARE_CLASS1(util,MaskedImageSet)
HX_DECLARE_CLASS1(util,Rect)

namespace util{


class HXCPP_CLASS_ATTRIBUTES AnimatedChar_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AnimatedChar_obj OBJ_;
		AnimatedChar_obj();

	public:
		enum { _hx_ClassId = 0x59b7ae9f };

		void __construct( ::util::MaskedImage image,int width,int height,::hx::Null< int >  __o_padding);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="util.AnimatedChar")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"util.AnimatedChar"); }
		static ::hx::ObjectPtr< AnimatedChar_obj > __new( ::util::MaskedImage image,int width,int height,::hx::Null< int >  __o_padding);
		static ::hx::ObjectPtr< AnimatedChar_obj > __alloc(::hx::Ctx *_hx_ctx, ::util::MaskedImage image,int width,int height,::hx::Null< int >  __o_padding);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AnimatedChar_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AnimatedChar",39,d7,0e,67); }

		static void __boot();
		static ::Array< ::Dynamic> SEC_TO_DIRS;
		 ::util::MaskedImage origImage;
		int width;
		int height;
		 ::haxe::ds::IntMap imageDict;
		 ::haxe::ds::IntMap rectDict;
		 ::util::MaskedImage imageFromDir(int dir,int action,Float p);
		::Dynamic imageFromDir_dyn();

		 ::util::MaskedImage imageFromAngle(Float angle,int action,Float p);
		::Dynamic imageFromAngle_dyn();

		int facingToDir(float facing);
		::Dynamic facingToDir_dyn();

		 ::util::Rect rectFromFacing(float facing,int action,float p);
		::Dynamic rectFromFacing_dyn();

		 ::haxe::ds::IntMap loadImageDir(int offset, ::util::MaskedImageSet frames);
		::Dynamic loadImageDir_dyn();

		 ::haxe::ds::IntMap loadRectDir(int offset, ::util::MaskedImageSet frames);
		::Dynamic loadRectDir_dyn();

};

} // end namespace util

#endif /* INCLUDED_util_AnimatedChar */ 
