// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_assets_CharacterFactory
#define INCLUDED_assets_CharacterFactory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(assets,Animation)
HX_DECLARE_CLASS1(assets,CharacterFactory)
HX_DECLARE_CLASS1(assets,CharacterTemplate)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(util,AnimatedChar)

namespace assets{


class HXCPP_CLASS_ATTRIBUTES CharacterFactory_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CharacterFactory_obj OBJ_;
		CharacterFactory_obj();

	public:
		enum { _hx_ClassId = 0x545bc704 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="assets.CharacterFactory")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"assets.CharacterFactory"); }

		inline static ::hx::ObjectPtr< CharacterFactory_obj > __new() {
			::hx::ObjectPtr< CharacterFactory_obj > __this = new CharacterFactory_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< CharacterFactory_obj > __alloc(::hx::Ctx *_hx_ctx) {
			CharacterFactory_obj *__this = (CharacterFactory_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterFactory_obj), false, "assets.CharacterFactory"));
			*(void **)__this = CharacterFactory_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterFactory_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterFactory",41,fc,60,83); }

		static  ::util::AnimatedChar makeCharacter( ::assets::CharacterTemplate _hx_template);
		static ::Dynamic makeCharacter_dyn();

		static  ::openfl::display::BitmapData makeIcon( ::assets::CharacterTemplate _hx_template,::hx::Null< int >  size);
		static ::Dynamic makeIcon_dyn();

		static  ::assets::Animation makeWalkingIcon( ::assets::CharacterTemplate _hx_template,::hx::Null< int >  size);
		static ::Dynamic makeWalkingIcon_dyn();

		static  ::openfl::display::BitmapData makeFrame( ::util::AnimatedChar character,int action,Float offset,int size);
		static ::Dynamic makeFrame_dyn();

};

} // end namespace assets

#endif /* INCLUDED_assets_CharacterFactory */ 
