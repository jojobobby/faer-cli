// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_assets_Animation
#define INCLUDED_assets_Animation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(assets,Animation)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,TimerEvent)
HX_DECLARE_CLASS2(openfl,utils,Timer)

namespace assets{


class HXCPP_CLASS_ATTRIBUTES Animation_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Animation_obj OBJ_;
		Animation_obj();

	public:
		enum { _hx_ClassId = 0x7fc27d01 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="assets.Animation")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"assets.Animation"); }
		static ::hx::ObjectPtr< Animation_obj > __new();
		static ::hx::ObjectPtr< Animation_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Animation_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Animation",e4,ce,07,ed); }

		 ::openfl::display::Bitmap bitmap;
		::Array< ::Dynamic> frames;
		 ::openfl::utils::Timer timer;
		bool isStarted;
		int index;
		int count;
		void setFrames(::Array< ::Dynamic> newFrames);
		::Dynamic setFrames_dyn();

		void start();
		::Dynamic start_dyn();

		void stop();
		::Dynamic stop_dyn();

		void dispose();
		::Dynamic dispose_dyn();

		 ::openfl::display::Bitmap makeBitmap();
		::Dynamic makeBitmap_dyn();

		 ::openfl::utils::Timer makeTimer();
		::Dynamic makeTimer_dyn();

		void iterate( ::openfl::events::TimerEvent event);
		::Dynamic iterate_dyn();

};

} // end namespace assets

#endif /* INCLUDED_assets_Animation */ 
