// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_assets_CharacterTemplate
#define INCLUDED_assets_CharacterTemplate

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_6d37b9b73b19d06a_3_new)
HX_DECLARE_CLASS1(assets,CharacterTemplate)

namespace assets{


class HXCPP_CLASS_ATTRIBUTES CharacterTemplate_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CharacterTemplate_obj OBJ_;
		CharacterTemplate_obj();

	public:
		enum { _hx_ClassId = 0x62aefadc };

		void __construct(::String file,int index);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="assets.CharacterTemplate")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"assets.CharacterTemplate"); }

		inline static ::hx::ObjectPtr< CharacterTemplate_obj > __new(::String file,int index) {
			::hx::ObjectPtr< CharacterTemplate_obj > __this = new CharacterTemplate_obj();
			__this->__construct(file,index);
			return __this;
		}

		inline static ::hx::ObjectPtr< CharacterTemplate_obj > __alloc(::hx::Ctx *_hx_ctx,::String file,int index) {
			CharacterTemplate_obj *__this = (CharacterTemplate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterTemplate_obj), true, "assets.CharacterTemplate"));
			*(void **)__this = CharacterTemplate_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_6d37b9b73b19d06a_3_new)
HXLINE(   5)		( ( ::assets::CharacterTemplate)(__this) )->index = 0;
HXLINE(   4)		( ( ::assets::CharacterTemplate)(__this) )->file = HX_("",00,00,00,00);
HXLINE(   8)		( ( ::assets::CharacterTemplate)(__this) )->file = file;
HXLINE(   9)		( ( ::assets::CharacterTemplate)(__this) )->index = index;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterTemplate_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterTemplate",e3,90,82,e8); }

		::String file;
		int index;
};

} // end namespace assets

#endif /* INCLUDED_assets_CharacterTemplate */ 
