// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_Main
#define INCLUDED_Main

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
HX_DECLARE_CLASS0(Main)
HX_DECLARE_CLASS1(engine,GLTextureData)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,display,Stage3D)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS1(util,BinPacker)



class HXCPP_CLASS_ATTRIBUTES Main_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Main_obj OBJ_;
		Main_obj();

	public:
		enum { _hx_ClassId = 0x07825a7d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Main")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Main"); }
		static ::hx::ObjectPtr< Main_obj > __new();
		static ::hx::ObjectPtr< Main_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Main_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Main",59,64,2f,33); }

		static void __boot();
		static int PADDING;
		static int ATLAS_WIDTH;
		static int ATLAS_HEIGHT;
		static int mouseXOffset;
		static int mouseYOffset;
		static int stageWidth;
		static int stageHeight;
		static  ::openfl::display::Stage primaryStage;
		static  ::openfl::display::Stage3D primaryStage3D;
		static  ::openfl::display::BitmapData tempAtlas;
		static  ::util::BinPacker atlasPacker;
		static  ::engine::GLTextureData atlas;
		static int startTime;
		static bool rpcReady;
		static  ::openfl::display::Bitmap baseCursorSprite;
		static  ::openfl::display::Bitmap clickCursorSprite;
		static bool mouseDown;
		static void onReady(const  DiscordUser* request);

		static void onDisconnected(int errorCode,const char* message);

		static void onError(int errorCode,const char* message);

		static void refreshCursor();
		static ::Dynamic refreshCursor_dyn();

		static void onMouseDown( ::openfl::events::MouseEvent _);
		static ::Dynamic onMouseDown_dyn();

		static void onMouseUp( ::openfl::events::MouseEvent _);
		static ::Dynamic onMouseUp_dyn();

		void onResize( ::openfl::events::Event _);
		::Dynamic onResize_dyn();

		void onEnterFrame( ::openfl::events::Event _);
		::Dynamic onEnterFrame_dyn();

};


#endif /* INCLUDED_Main */ 
