// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_account_view_RegisterDialog
#define INCLUDED_account_view_RegisterDialog

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_ui_Frame
#include <ui/Frame.h>
#endif
HX_DECLARE_CLASS2(account,view,FormField)
HX_DECLARE_CLASS2(account,view,LabeledField)
HX_DECLARE_CLASS2(account,view,RegisterDialog)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(ui,Frame)
HX_DECLARE_CLASS1(ui,SimpleText)

namespace account{
namespace view{


class HXCPP_CLASS_ATTRIBUTES RegisterDialog_obj : public  ::ui::Frame_obj
{
	public:
		typedef  ::ui::Frame_obj super;
		typedef RegisterDialog_obj OBJ_;
		RegisterDialog_obj();

	public:
		enum { _hx_ClassId = 0x7ec8a2ed };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="account.view.RegisterDialog")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"account.view.RegisterDialog"); }
		static ::hx::ObjectPtr< RegisterDialog_obj > __new();
		static ::hx::ObjectPtr< RegisterDialog_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RegisterDialog_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RegisterDialog",ab,1f,ca,21); }

		static void onCancel( ::openfl::events::MouseEvent _);
		static ::Dynamic onCancel_dyn();

		static void onSignIn( ::openfl::events::TextEvent _);
		static ::Dynamic onSignIn_dyn();

		::Array< ::String > errors;
		 ::account::view::LabeledField nameInput;
		 ::account::view::LabeledField emailInput;
		 ::account::view::LabeledField passwordInput;
		 ::account::view::LabeledField retypePasswordInput;
		 ::ui::SimpleText signInText;
		 ::ui::SimpleText tosText;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onRemoved( ::openfl::events::Event _);
		::Dynamic onRemoved_dyn();

		void displayErrors();
		::Dynamic displayErrors_dyn();

		bool areInputsValid();
		::Dynamic areInputsValid_dyn();

		bool isNameValid();
		::Dynamic isNameValid_dyn();

		bool isEmailValid();
		::Dynamic isEmailValid_dyn();

		bool isPasswordValid();
		::Dynamic isPasswordValid_dyn();

		bool isPasswordVerified();
		::Dynamic isPasswordVerified_dyn();

		void clearErrors();
		::Dynamic clearErrors_dyn();

		void displayErrorText(::String value);
		::Dynamic displayErrorText_dyn();

		void sendData();
		::Dynamic sendData_dyn();

		void onRegister( ::openfl::events::MouseEvent _);
		::Dynamic onRegister_dyn();

};

} // end namespace account
} // end namespace view

#endif /* INCLUDED_account_view_RegisterDialog */ 
