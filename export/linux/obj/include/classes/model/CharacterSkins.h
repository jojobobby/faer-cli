// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_classes_model_CharacterSkins
#define INCLUDED_classes_model_CharacterSkins

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(classes,model,CharacterSkin)
HX_DECLARE_CLASS2(classes,model,CharacterSkins)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)

namespace classes{
namespace model{


class HXCPP_CLASS_ATTRIBUTES CharacterSkins_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CharacterSkins_obj OBJ_;
		CharacterSkins_obj();

	public:
		enum { _hx_ClassId = 0x599672bc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="classes.model.CharacterSkins")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"classes.model.CharacterSkins"); }
		static ::hx::ObjectPtr< CharacterSkins_obj > __new();
		static ::hx::ObjectPtr< CharacterSkins_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterSkins_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterSkins",0d,db,85,fe); }

		static void updateSkinState( ::classes::model::CharacterSkin skin);
		static ::Dynamic updateSkinState_dyn();

		::Array< ::Dynamic> skins;
		 ::haxe::ds::IntMap map;
		 ::classes::model::CharacterSkin defaultSkin;
		 ::classes::model::CharacterSkin selectedSkin;
		int getCount();
		::Dynamic getCount_dyn();

		 ::classes::model::CharacterSkin getDefaultSkin();
		::Dynamic getDefaultSkin_dyn();

		 ::classes::model::CharacterSkin getSelectedSkin();
		::Dynamic getSelectedSkin_dyn();

		 ::classes::model::CharacterSkin getSkinAt(int index);
		::Dynamic getSkinAt_dyn();

		void addSkin( ::classes::model::CharacterSkin skin,::hx::Null< bool >  isDefault);
		::Dynamic addSkin_dyn();

		 ::classes::model::CharacterSkin getSkin(int id);
		::Dynamic getSkin_dyn();

		void onSkinChanged( ::classes::model::CharacterSkin skin);
		::Dynamic onSkinChanged_dyn();

};

} // end namespace classes
} // end namespace model

#endif /* INCLUDED_classes_model_CharacterSkins */ 
