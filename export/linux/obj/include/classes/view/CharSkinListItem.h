// Generated by Haxe 4.3.0+731dcd7
#ifndef INCLUDED_classes_view_CharSkinListItem
#define INCLUDED_classes_view_CharSkinListItem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(classes,model,CharacterSkin)
HX_DECLARE_CLASS2(classes,model,CharacterSkinState)
HX_DECLARE_CLASS2(classes,view,CharSkinListItem)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,ColorMatrixFilter)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS1(ui,BuyButton)
HX_DECLARE_CLASS1(ui,RadioButton)
HX_DECLARE_CLASS1(ui,SimpleText)

namespace classes{
namespace view{


class HXCPP_CLASS_ATTRIBUTES CharSkinListItem_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef CharSkinListItem_obj OBJ_;
		CharSkinListItem_obj();

	public:
		enum { _hx_ClassId = 0x5f77b74f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="classes.view.CharSkinListItem")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"classes.view.CharSkinListItem"); }
		static ::hx::ObjectPtr< CharSkinListItem_obj > __new();
		static ::hx::ObjectPtr< CharSkinListItem_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharSkinListItem_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharSkinListItem",44,1c,ec,2a); }

		static void drawBackground( ::openfl::display::Graphics graphics,int width);
		static ::Dynamic drawBackground_dyn();

		 ::openfl::filters::ColorMatrixFilter grayscaleMatrix;
		 ::openfl::display::Shape background;
		 ::openfl::display::Sprite skinContainer;
		 ::ui::SimpleText nameText;
		 ::ui::RadioButton selectionButton;
		 ::openfl::display::Bitmap lock;
		 ::ui::SimpleText lockText;
		 ::openfl::display::Sprite buyButtonContainer;
		 ::classes::model::CharacterSkin model;
		 ::classes::model::CharacterSkinState state;
		bool isSelected;
		 ::openfl::display::Bitmap skinIcon;
		 ::ui::BuyButton buyButton;
		bool isOver;
		void onAdded( ::openfl::events::Event _);
		::Dynamic onAdded_dyn();

		void onRemoved( ::openfl::events::Event _);
		::Dynamic onRemoved_dyn();

		void onBuy( ::openfl::events::MouseEvent _);
		::Dynamic onBuy_dyn();

		void onSelected(bool isSelected);
		::Dynamic onSelected_dyn();

		void setLockIcon( ::openfl::display::BitmapData data);
		::Dynamic setLockIcon_dyn();

		void setBuyButton( ::ui::BuyButton buyButton);
		::Dynamic setBuyButton_dyn();

		void setSkin( ::openfl::display::Bitmap icon);
		::Dynamic setSkin_dyn();

		 ::classes::model::CharacterSkin getModel();
		::Dynamic getModel_dyn();

		void setModel( ::classes::model::CharacterSkin value);
		::Dynamic setModel_dyn();

		void setIsSelected(bool value);
		::Dynamic setIsSelected_dyn();

		void removeEventListeners();
		::Dynamic removeEventListeners_dyn();

		void onModelChanged( ::classes::model::CharacterSkin skin);
		::Dynamic onModelChanged_dyn();

		void updateName();
		::Dynamic updateName_dyn();

		void updateState();
		::Dynamic updateState_dyn();

		void setButtonVisibilities();
		::Dynamic setButtonVisibilities_dyn();

		void setEventListeners();
		::Dynamic setEventListeners_dyn();

		void setCost();
		::Dynamic setCost_dyn();

		void addEventListeners();
		::Dynamic addEventListeners_dyn();

		void updateBackground();
		::Dynamic updateBackground_dyn();

		int getColor();
		::Dynamic getColor_dyn();

		void updateGrayFilter();
		::Dynamic updateGrayFilter_dyn();

		void onClick( ::openfl::events::MouseEvent _);
		::Dynamic onClick_dyn();

		void onOver( ::openfl::events::MouseEvent _);
		::Dynamic onOver_dyn();

		void onOut( ::openfl::events::MouseEvent _);
		::Dynamic onOut_dyn();

};

} // end namespace classes
} // end namespace view

#endif /* INCLUDED_classes_view_CharSkinListItem */ 
