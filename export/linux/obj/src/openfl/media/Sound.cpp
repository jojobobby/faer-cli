// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_268_new,"openfl.media.Sound","new",0xfdfd1c39,"openfl.media.Sound.new","openfl/media/Sound.hx",268,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_458_load,"openfl.media.Sound","load",0x3e30ac2d,"openfl.media.Sound.load","openfl/media/Sound.hx",458,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_437_load,"openfl.media.Sound","load",0x3e30ac2d,"openfl.media.Sound.load","openfl/media/Sound.hx",437,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_700_AudioBuffer_onURLLoad,"openfl.media.Sound","AudioBuffer_onURLLoad",0x80e63186,"openfl.media.Sound.AudioBuffer_onURLLoad","openfl/media/Sound.hx",700,0x46a01619)
namespace openfl{
namespace media{

void Sound_obj::__construct( ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context){
            	HX_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_268_new)
HXLINE( 269)		super::__construct(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 271)		this->bytesLoaded = 0;
HXLINE( 272)		this->bytesTotal = 0;
HXLINE( 273)		this->isBuffering = false;
HXLINE( 274)		this->url = null();
HXLINE( 276)		if (::hx::IsNotNull( stream )) {
HXLINE( 278)			this->load(stream,context);
            		}
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

void *Sound_obj::_hx_vtable = 0;

Dynamic Sound_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Sound_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x0ce018c7;
	}
}

void Sound_obj::load( ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::openfl::media::Sound,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_458_load)
HXLINE( 458)			_gthis->AudioBuffer_onURLLoad(null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_437_load)
HXDLIN( 437)		 ::openfl::media::Sound _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 438)		this->url = stream->url;
HXLINE( 456)		::lime::media::AudioBuffer_obj::loadFromFile(this->url)->onComplete(this->AudioBuffer_onURLLoad_dyn())->onError( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Sound_obj,load,(void))

void Sound_obj::AudioBuffer_onURLLoad( ::lime::media::AudioBuffer buffer){
            	HX_GC_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_700_AudioBuffer_onURLLoad)
HXDLIN( 700)		if (::hx::IsNull( buffer )) {
HXLINE( 702)			this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),null(),null(),null(),null()));
            		}
            		else {
HXLINE( 706)			this->_hx___buffer = buffer;
HXLINE( 707)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,AudioBuffer_onURLLoad,(void))


::hx::ObjectPtr< Sound_obj > Sound_obj::__new( ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context) {
	::hx::ObjectPtr< Sound_obj > __this = new Sound_obj();
	__this->__construct(stream,context);
	return __this;
}

::hx::ObjectPtr< Sound_obj > Sound_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context) {
	Sound_obj *__this = (Sound_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Sound_obj), true, "openfl.media.Sound"));
	*(void **)__this = Sound_obj::_hx_vtable;
	__this->__construct(stream,context);
	return __this;
}

Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(isBuffering,"isBuffering");
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(isBuffering,"isBuffering");
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Sound_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { return ::hx::Val( _hx___buffer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return ::hx::Val( bytesTotal ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return ::hx::Val( bytesLoaded ); }
		if (HX_FIELD_EQ(inName,"isBuffering") ) { return ::hx::Val( isBuffering ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"AudioBuffer_onURLLoad") ) { return ::hx::Val( AudioBuffer_onURLLoad_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Sound_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::media::AudioBuffer >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isBuffering") ) { isBuffering=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytesLoaded",d0,66,ca,99));
	outFields->push(HX_("bytesTotal",59,57,da,45));
	outFields->push(HX_("isBuffering",98,26,10,90));
	outFields->push(HX_("url",6f,2b,59,00));
	outFields->push(HX_("__buffer",20,28,c4,78));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Sound_obj,bytesLoaded),HX_("bytesLoaded",d0,66,ca,99)},
	{::hx::fsInt,(int)offsetof(Sound_obj,bytesTotal),HX_("bytesTotal",59,57,da,45)},
	{::hx::fsBool,(int)offsetof(Sound_obj,isBuffering),HX_("isBuffering",98,26,10,90)},
	{::hx::fsString,(int)offsetof(Sound_obj,url),HX_("url",6f,2b,59,00)},
	{::hx::fsObject /*  ::lime::media::AudioBuffer */ ,(int)offsetof(Sound_obj,_hx___buffer),HX_("__buffer",20,28,c4,78)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Sound_obj_sStaticStorageInfo = 0;
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_("bytesLoaded",d0,66,ca,99),
	HX_("bytesTotal",59,57,da,45),
	HX_("isBuffering",98,26,10,90),
	HX_("url",6f,2b,59,00),
	HX_("__buffer",20,28,c4,78),
	HX_("load",26,9a,b7,47),
	HX_("AudioBuffer_onURLLoad",6d,fb,f7,c7),
	::String(null()) };

::hx::Class Sound_obj::__mClass;

void Sound_obj::__register()
{
	Sound_obj _hx_dummy;
	Sound_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.media.Sound",c7,8b,e2,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Sound_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace media
