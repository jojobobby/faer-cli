// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_63_new,"openfl.events.TimerEvent","new",0xb64ac7fe,"openfl.events.TimerEvent.new","openfl/events/TimerEvent.hx",63,0x5c7b7b12)
HX_LOCAL_STACK_FRAME(_hx_pos_8ee12f816d5b32f3_77_toString,"openfl.events.TimerEvent","toString",0x793b7c4e,"openfl.events.TimerEvent.toString","openfl/events/TimerEvent.hx",77,0x5c7b7b12)
static const ::String _hx_array_data_7c93b10c_2[] = {
	HX_("type",ba,f2,08,4d),HX_("bubbles",67,bb,56,61),HX_("cancelable",14,a0,79,c4),
};
namespace openfl{
namespace events{

void TimerEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            	HX_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_63_new)
HXDLIN(  63)		super::__construct(type,bubbles,cancelable);
            	}

Dynamic TimerEvent_obj::__CreateEmpty() { return new TimerEvent_obj; }

void *TimerEvent_obj::_hx_vtable = 0;

Dynamic TimerEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TimerEvent_obj > _hx_result = new TimerEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TimerEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08ec4c31) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x08ec4c31;
	} else {
		return inClassId==(int)0x43808502;
	}
}

::String TimerEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_8ee12f816d5b32f3_77_toString)
HXDLIN(  77)		return this->_hx___formatToString(HX_("TimerEvent",35,32,87,fd),::Array_obj< ::String >::fromData( _hx_array_data_7c93b10c_2,3));
            	}



::hx::ObjectPtr< TimerEvent_obj > TimerEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable) {
	::hx::ObjectPtr< TimerEvent_obj > __this = new TimerEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable);
	return __this;
}

::hx::ObjectPtr< TimerEvent_obj > TimerEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable) {
	TimerEvent_obj *__this = (TimerEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TimerEvent_obj), true, "openfl.events.TimerEvent"));
	*(void **)__this = TimerEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable);
	return __this;
}

TimerEvent_obj::TimerEvent_obj()
{
}

::hx::Val TimerEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TimerEvent_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TimerEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String TimerEvent_obj_sMemberFields[] = {
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class TimerEvent_obj::__mClass;

void TimerEvent_obj::__register()
{
	TimerEvent_obj _hx_dummy;
	TimerEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.events.TimerEvent",0c,b1,93,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TimerEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TimerEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimerEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimerEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace events
