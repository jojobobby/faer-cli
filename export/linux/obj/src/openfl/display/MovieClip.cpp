// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FrameLabel
#include <openfl/display/FrameLabel.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Timeline
#include <openfl/display/Timeline.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_utils__Object_Object_Impl_
#include <openfl/utils/_Object/Object_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_170_new,"openfl.display.MovieClip","new",0xe16984e8,"openfl.display.MovieClip.new","openfl/display/MovieClip.hx",170,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_269_gotoAndStop,"openfl.display.MovieClip","gotoAndStop",0x3dafa39e,"openfl.display.MovieClip.gotoAndStop","openfl/display/MovieClip.hx",269,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_341___enterFrame,"openfl.display.MovieClip","__enterFrame",0x9306f98d,"openfl.display.MovieClip.__enterFrame","openfl/display/MovieClip.hx",341,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_360___tabTest,"openfl.display.MovieClip","__tabTest",0x5479b8af,"openfl.display.MovieClip.__tabTest","openfl/display/MovieClip.hx",360,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_367___onMouseDown,"openfl.display.MovieClip","__onMouseDown",0x20658370,"openfl.display.MovieClip.__onMouseDown","openfl/display/MovieClip.hx",367,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_382___onMouseUp,"openfl.display.MovieClip","__onMouseUp",0x127371e9,"openfl.display.MovieClip.__onMouseUp","openfl/display/MovieClip.hx",382,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_406___onRollOut,"openfl.display.MovieClip","__onRollOut",0xaf12771a,"openfl.display.MovieClip.__onRollOut","openfl/display/MovieClip.hx",406,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_421___onRollOver,"openfl.display.MovieClip","__onRollOver",0x81167548,"openfl.display.MovieClip.__onRollOver","openfl/display/MovieClip.hx",421,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_429_set_buttonMode,"openfl.display.MovieClip","set_buttonMode",0x8c3dbbaa,"openfl.display.MovieClip.set_buttonMode","openfl/display/MovieClip.hx",429,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_510_get_currentLabels,"openfl.display.MovieClip","get_currentLabels",0x011f46f7,"openfl.display.MovieClip.get_currentLabels","openfl/display/MovieClip.hx",510,0x2b84738a)
namespace openfl{
namespace display{

void MovieClip_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_170_new)
HXLINE( 171)		super::__construct();
HXLINE( 173)		this->_hx___enabled = true;
            	}

Dynamic MovieClip_obj::__CreateEmpty() { return new MovieClip_obj; }

void *MovieClip_obj::_hx_vtable = 0;

Dynamic MovieClip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MovieClip_obj > _hx_result = new MovieClip_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MovieClip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17c2d032) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x17c2d032;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void MovieClip_obj::gotoAndStop( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_269_gotoAndStop)
HXDLIN( 269)		if (::hx::IsNotNull( this->_hx___timeline )) {
HXLINE( 271)			this->_hx___timeline->_hx___gotoAndStop(frame,scene);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndStop,(void))

void MovieClip_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_341___enterFrame)
HXLINE( 342)		if (::hx::IsNotNull( this->_hx___timeline )) {
HXLINE( 344)			this->_hx___timeline->_hx___enterFrame(deltaTime);
            		}
HXLINE( 347)		{
HXLINE( 347)			int _g = 0;
HXDLIN( 347)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 347)			while((_g < _g1->length)){
HXLINE( 347)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 347)				_g = (_g + 1);
HXLINE( 349)				child->_hx___enterFrame(deltaTime);
            			}
            		}
            	}


void MovieClip_obj::_hx___tabTest(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_360___tabTest)
HXLINE( 361)		if (!(this->_hx___enabled)) {
HXLINE( 361)			return;
            		}
HXLINE( 362)		this->super::_hx___tabTest(stack);
            	}


void MovieClip_obj::_hx___onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_367___onMouseDown)
HXLINE( 368)		bool _hx_tmp;
HXDLIN( 368)		if (this->_hx___enabled) {
HXLINE( 368)			_hx_tmp = this->_hx___hasDown;
            		}
            		else {
HXLINE( 368)			_hx_tmp = false;
            		}
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 370)			this->gotoAndStop(HX_("_down",41,14,7f,f5),null());
            		}
HXLINE( 373)		this->_hx___mouseIsDown = true;
HXLINE( 375)		if (::hx::IsNotNull( this->stage )) {
HXLINE( 377)			this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___onMouseUp_dyn(),true,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onMouseDown,(void))

void MovieClip_obj::_hx___onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_382___onMouseUp)
HXLINE( 383)		this->_hx___mouseIsDown = false;
HXLINE( 385)		if (::hx::IsNotNull( this->stage )) {
HXLINE( 387)			this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___onMouseUp_dyn(),null());
            		}
HXLINE( 390)		if (!(this->_hx___buttonMode)) {
HXLINE( 392)			return;
            		}
HXLINE( 395)		bool _hx_tmp;
HXDLIN( 395)		bool _hx_tmp1;
HXDLIN( 395)		if (::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->target,::hx::ObjectPtr<OBJ_>(this))) {
HXLINE( 395)			_hx_tmp1 = this->_hx___enabled;
            		}
            		else {
HXLINE( 395)			_hx_tmp1 = false;
            		}
HXDLIN( 395)		if (_hx_tmp1) {
HXLINE( 395)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXLINE( 395)			_hx_tmp = false;
            		}
HXDLIN( 395)		if (_hx_tmp) {
HXLINE( 397)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            		else {
HXLINE( 399)			bool _hx_tmp2;
HXDLIN( 399)			if (this->_hx___enabled) {
HXLINE( 399)				_hx_tmp2 = this->_hx___hasUp;
            			}
            			else {
HXLINE( 399)				_hx_tmp2 = false;
            			}
HXDLIN( 399)			if (_hx_tmp2) {
HXLINE( 401)				this->gotoAndStop(HX_("_up",7a,7c,48,00),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onMouseUp,(void))

void MovieClip_obj::_hx___onRollOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_406___onRollOut)
HXLINE( 407)		if (!(this->_hx___enabled)) {
HXLINE( 407)			return;
            		}
HXLINE( 409)		bool _hx_tmp;
HXDLIN( 409)		if (this->_hx___mouseIsDown) {
HXLINE( 409)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXLINE( 409)			_hx_tmp = false;
            		}
HXDLIN( 409)		if (_hx_tmp) {
HXLINE( 411)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            		else {
HXLINE( 413)			if (this->_hx___hasUp) {
HXLINE( 415)				this->gotoAndStop(HX_("_up",7a,7c,48,00),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onRollOut,(void))

void MovieClip_obj::_hx___onRollOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_421___onRollOver)
HXDLIN( 421)		bool _hx_tmp;
HXDLIN( 421)		if (this->_hx___enabled) {
HXDLIN( 421)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXDLIN( 421)			_hx_tmp = false;
            		}
HXDLIN( 421)		if (_hx_tmp) {
HXLINE( 423)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onRollOver,(void))

bool MovieClip_obj::set_buttonMode(bool value){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_429_set_buttonMode)
HXLINE( 430)		if ((this->_hx___buttonMode != value)) {
HXLINE( 432)			if (value) {
HXLINE( 434)				this->_hx___hasDown = false;
HXLINE( 435)				this->_hx___hasOver = false;
HXLINE( 436)				this->_hx___hasUp = false;
HXLINE( 438)				{
HXLINE( 438)					int _g = 0;
HXDLIN( 438)					::Array< ::Dynamic> _g1 = this->get_currentLabels();
HXDLIN( 438)					while((_g < _g1->length)){
HXLINE( 438)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 438)						_g = (_g + 1);
HXLINE( 440)						::String _hx_switch_0 = frameLabel->name;
            						if (  (_hx_switch_0==HX_("_down",41,14,7f,f5)) ){
HXLINE( 447)							this->_hx___hasDown = true;
HXDLIN( 447)							goto _hx_goto_10;
            						}
            						if (  (_hx_switch_0==HX_("_over",33,ad,c9,fc)) ){
HXLINE( 445)							this->_hx___hasOver = true;
HXDLIN( 445)							goto _hx_goto_10;
            						}
            						if (  (_hx_switch_0==HX_("_up",7a,7c,48,00)) ){
HXLINE( 443)							this->_hx___hasUp = true;
HXDLIN( 443)							goto _hx_goto_10;
            						}
            						/* default */{
            						}
            						_hx_goto_10:;
            					}
            				}
HXLINE( 452)				bool _hx_tmp;
HXDLIN( 452)				bool _hx_tmp1;
HXDLIN( 452)				if (!(this->_hx___hasDown)) {
HXLINE( 452)					_hx_tmp1 = this->_hx___hasOver;
            				}
            				else {
HXLINE( 452)					_hx_tmp1 = true;
            				}
HXDLIN( 452)				if (!(_hx_tmp1)) {
HXLINE( 452)					_hx_tmp = this->_hx___hasUp;
            				}
            				else {
HXLINE( 452)					_hx_tmp = true;
            				}
HXDLIN( 452)				if (_hx_tmp) {
HXLINE( 454)					this->addEventListener(HX_("rollOver",71,ab,a8,12),this->_hx___onRollOver_dyn(),null(),null(),null());
HXLINE( 455)					this->addEventListener(HX_("rollOut",11,f9,11,5d),this->_hx___onRollOut_dyn(),null(),null(),null());
HXLINE( 456)					this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___onMouseDown_dyn(),null(),null(),null());
            				}
            			}
            			else {
HXLINE( 461)				this->removeEventListener(HX_("rollOver",71,ab,a8,12),this->_hx___onRollOver_dyn(),null());
HXLINE( 462)				this->removeEventListener(HX_("rollOut",11,f9,11,5d),this->_hx___onRollOut_dyn(),null());
HXLINE( 463)				this->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___onMouseDown_dyn(),null());
            			}
HXLINE( 466)			this->_hx___buttonMode = value;
            		}
HXLINE( 469)		return value;
            	}


::Array< ::Dynamic> MovieClip_obj::get_currentLabels(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_510_get_currentLabels)
HXDLIN( 510)		if (::hx::IsNotNull( this->_hx___timeline )) {
HXLINE( 512)			return this->_hx___timeline->_hx___currentLabels->copy();
            		}
            		else {
HXLINE( 516)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 510)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabels,return )


::hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__new() {
	::hx::ObjectPtr< MovieClip_obj > __this = new MovieClip_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MovieClip_obj *__this = (MovieClip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MovieClip_obj), true, "openfl.display.MovieClip"));
	*(void **)__this = MovieClip_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MovieClip_obj::MovieClip_obj()
{
}

void MovieClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClip);
	HX_MARK_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_MARK_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_MARK_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_MARK_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_MARK_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_MARK_MEMBER_NAME(_hx___timeline,"__timeline");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_VISIT_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_VISIT_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_VISIT_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_VISIT_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_VISIT_MEMBER_NAME(_hx___timeline,"__timeline");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MovieClip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__hasUp") ) { return ::hx::Val( _hx___hasUp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { return ::hx::Val( _hx___enabled ); }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { return ::hx::Val( _hx___hasDown ); }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { return ::hx::Val( _hx___hasOver ); }
		if (HX_FIELD_EQ(inName,"__tabTest") ) { return ::hx::Val( _hx___tabTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__timeline") ) { return ::hx::Val( _hx___timeline ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gotoAndStop") ) { return ::hx::Val( gotoAndStop_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseUp") ) { return ::hx::Val( _hx___onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onRollOut") ) { return ::hx::Val( _hx___onRollOut_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onRollOver") ) { return ::hx::Val( _hx___onRollOver_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentLabels") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentLabels() ); }
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { return ::hx::Val( _hx___mouseIsDown ); }
		if (HX_FIELD_EQ(inName,"__onMouseDown") ) { return ::hx::Val( _hx___onMouseDown_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_buttonMode") ) { return ::hx::Val( set_buttonMode_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_currentLabels") ) { return ::hx::Val( get_currentLabels_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MovieClip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__hasUp") ) { _hx___hasUp=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { _hx___enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { _hx___hasDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { _hx___hasOver=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__timeline") ) { _hx___timeline=inValue.Cast<  ::openfl::display::Timeline >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { _hx___mouseIsDown=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MovieClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentLabels",18,a9,d9,2c));
	outFields->push(HX_("__enabled",61,55,7f,ff));
	outFields->push(HX_("__hasDown",bc,69,00,93));
	outFields->push(HX_("__hasOver",ae,02,4b,9a));
	outFields->push(HX_("__hasUp",35,ed,7f,8c));
	outFields->push(HX_("__mouseIsDown",51,32,d5,9d));
	outFields->push(HX_("__timeline",a1,e1,73,a0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MovieClip_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___enabled),HX_("__enabled",61,55,7f,ff)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasDown),HX_("__hasDown",bc,69,00,93)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasOver),HX_("__hasOver",ae,02,4b,9a)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasUp),HX_("__hasUp",35,ed,7f,8c)},
	{::hx::fsBool,(int)offsetof(MovieClip_obj,_hx___mouseIsDown),HX_("__mouseIsDown",51,32,d5,9d)},
	{::hx::fsObject /*  ::openfl::display::Timeline */ ,(int)offsetof(MovieClip_obj,_hx___timeline),HX_("__timeline",a1,e1,73,a0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MovieClip_obj_sStaticStorageInfo = 0;
#endif

static ::String MovieClip_obj_sMemberFields[] = {
	HX_("__enabled",61,55,7f,ff),
	HX_("__hasDown",bc,69,00,93),
	HX_("__hasOver",ae,02,4b,9a),
	HX_("__hasUp",35,ed,7f,8c),
	HX_("__mouseIsDown",51,32,d5,9d),
	HX_("__timeline",a1,e1,73,a0),
	HX_("gotoAndStop",16,27,86,f1),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__tabTest",27,ee,bd,c6),
	HX_("__onMouseDown",e8,d4,7d,59),
	HX_("__onMouseUp",61,f5,49,c6),
	HX_("__onRollOut",92,fa,e8,62),
	HX_("__onRollOver",d0,fa,f2,28),
	HX_("set_buttonMode",32,b3,6c,48),
	HX_("get_currentLabels",6f,b4,49,33),
	::String(null()) };

::hx::Class MovieClip_obj::__mClass;

void MovieClip_obj::__register()
{
	MovieClip_obj _hx_dummy;
	MovieClip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.MovieClip",f6,30,c3,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MovieClip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MovieClip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
