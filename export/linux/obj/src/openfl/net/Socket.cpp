// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IOError
#include <openfl/errors/IOError.h>
#endif
#ifndef INCLUDED_openfl_errors_SecurityError
#include <openfl/errors/SecurityError.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ProgressEvent
#include <openfl/events/ProgressEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_Socket
#include <openfl/net/Socket.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__internal_Lib
#include <openfl/utils/_internal/Lib.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_261_new,"openfl.net.Socket","new",0xed4fa1d4,"openfl.net.Socket.new","openfl/net/Socket.hx",261,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_289_close,"openfl.net.Socket","close",0x490d2e2c,"openfl.net.Socket.close","openfl/net/Socket.hx",289,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_344_connect,"openfl.net.Socket","connect",0x25b3d75e,"openfl.net.Socket.connect","openfl/net/Socket.hx",344,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_428_flush,"openfl.net.Socket","flush",0x03457938,"openfl.net.Socket.flush","openfl/net/Socket.hx",428,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_520_readBytes,"openfl.net.Socket","readBytes",0xc767b5a9,"openfl.net.Socket.readBytes","openfl/net/Socket.hx",520,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_701_readUnsignedShort,"openfl.net.Socket","readUnsignedShort",0xf4b71685,"openfl.net.Socket.readUnsignedShort","openfl/net/Socket.hx",701,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_778_writeByte,"openfl.net.Socket","writeByte",0x82bf73fb,"openfl.net.Socket.writeByte","openfl/net/Socket.hx",778,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_809_writeBytes,"openfl.net.Socket","writeBytes",0xe4c60818,"openfl.net.Socket.writeBytes","openfl/net/Socket.hx",809,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_994___cleanSocket,"openfl.net.Socket","__cleanSocket",0x6b69a970,"openfl.net.Socket.__cleanSocket","openfl/net/Socket.hx",994,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_1052_this_onEnterFrame,"openfl.net.Socket","this_onEnterFrame",0x0bcb0429,"openfl.net.Socket.this_onEnterFrame","openfl/net/Socket.hx",1052,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_1168_get_bytesAvailable,"openfl.net.Socket","get_bytesAvailable",0xb0011db3,"openfl.net.Socket.get_bytesAvailable","openfl/net/Socket.hx",1168,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_1178_get_connected,"openfl.net.Socket","get_connected",0x736e6114,"openfl.net.Socket.get_connected","openfl/net/Socket.hx",1178,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_1187_set_endian,"openfl.net.Socket","set_endian",0x80f9abe4,"openfl.net.Socket.set_endian","openfl/net/Socket.hx",1187,0x34d23f5a)
namespace openfl{
namespace net{

void Socket_obj::__construct(::String host,::hx::Null< int >  __o_port){
            		int port = __o_port.Default(0);
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_261_new)
HXLINE( 262)		super::__construct(null());
HXLINE( 264)		this->set_endian(0);
HXLINE( 265)		this->timeout = 20000;
HXLINE( 267)		this->_hx___buffer = ::haxe::io::Bytes_obj::alloc(65535);
HXLINE( 269)		bool _hx_tmp;
HXDLIN( 269)		if ((port > 0)) {
HXLINE( 269)			_hx_tmp = (port < 65535);
            		}
            		else {
HXLINE( 269)			_hx_tmp = false;
            		}
HXDLIN( 269)		if (_hx_tmp) {
HXLINE( 271)			this->connect(host,port);
            		}
            	}

Dynamic Socket_obj::__CreateEmpty() { return new Socket_obj; }

void *Socket_obj::_hx_vtable = 0;

Dynamic Socket_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Socket_obj > _hx_result = new Socket_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Socket_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x5e5831fc;
	}
}

static ::openfl::utils::IDataOutput_obj _hx_openfl_net_Socket__hx_openfl_utils_IDataOutput= {
};

static ::openfl::utils::IDataInput_obj _hx_openfl_net_Socket__hx_openfl_utils_IDataInput= {
};

void *Socket_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x948d2d33: return &_hx_openfl_net_Socket__hx_openfl_utils_IDataOutput;
		case (int)0xbeb9f218: return &_hx_openfl_net_Socket__hx_openfl_utils_IDataInput;
	}
	return super::_hx_getInterface(inHash);
}

void Socket_obj::close(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_289_close)
HXDLIN( 289)		if (::hx::IsNotNull( this->_hx___socket )) {
HXLINE( 291)			this->_hx___cleanSocket();
            		}
            		else {
HXLINE( 295)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,close,(void))

void Socket_obj::connect(::String host,::hx::Null< int >  __o_port){
            		int port = __o_port.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_344_connect)
HXLINE( 345)		if (::hx::IsNotNull( this->_hx___socket )) {
HXLINE( 347)			this->close();
            		}
HXLINE( 350)		bool _hx_tmp;
HXDLIN( 350)		if ((port >= 0)) {
HXLINE( 350)			_hx_tmp = (port > 65535);
            		}
            		else {
HXLINE( 350)			_hx_tmp = true;
            		}
HXDLIN( 350)		if (_hx_tmp) {
HXLINE( 352)			HX_STACK_DO_THROW( ::openfl::errors::SecurityError_obj::__alloc( HX_CTX ,HX_("Invalid socket port number specified.",5a,8e,7c,a7)));
            		}
HXLINE( 358)		 ::sys::net::Host h = null();
HXLINE( 360)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 362)			h =  ::sys::net::Host_obj::__alloc( HX_CTX ,host);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 364)				{
HXLINE( 364)					null();
            				}
HXLINE( 366)				this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,HX_("Invalid host",51,b1,1f,8c),null()));
HXLINE( 367)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 370)		this->_hx___timestamp = ::Sys_obj::time();
HXLINE( 373)		this->_hx___host = host;
HXLINE( 374)		this->_hx___port = port;
HXLINE( 376)		this->_hx___output =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 377)		this->_hx___output->_hx___endian = this->_hx___endian;
HXLINE( 379)		this->_hx___input =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 380)		this->_hx___input->_hx___endian = this->_hx___endian;
HXLINE( 401)		this->_hx___socket =  ::sys::net::Socket_obj::__alloc( HX_CTX );
HXLINE( 403)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 405)			this->_hx___socket->setBlocking(false);
HXLINE( 406)			this->_hx___socket->connect(h,port);
HXLINE( 407)			this->_hx___socket->setFastSend(false);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE( 409)				{
HXLINE( 409)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 412)		::openfl::utils::_internal::Lib_obj::current->addEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Socket_obj,connect,(void))

void Socket_obj::flush(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_428_flush)
HXLINE( 429)		if (::hx::IsNull( this->_hx___socket )) {
HXLINE( 431)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 434)		int a = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_hx___output);
HXDLIN( 434)		bool aNeg = (a < 0);
HXDLIN( 434)		bool _hx_tmp;
HXDLIN( 434)		if ((aNeg != false)) {
HXLINE( 434)			_hx_tmp = aNeg;
            		}
            		else {
HXLINE( 434)			_hx_tmp = (a > 0);
            		}
HXDLIN( 434)		if (_hx_tmp) {
HXLINE( 436)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 443)				this->_hx___socket->output->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytes(this->_hx___output),0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_hx___output));
HXLINE( 445)				this->_hx___output =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 446)				this->_hx___output->_hx___endian = this->_hx___endian;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 448)					{
HXLINE( 448)						null();
            					}
HXLINE( 450)					bool throwError = false;
HXLINE( 451)					switch((int)(_g.StaticCast< ::hx::EnumBase >()->_hx_getIndex())){
            						case (int)0: {
            						}
            						break;
            						case (int)3: {
HXLINE( 454)							if ((_g.StaticCast< ::hx::EnumBase >()->_hx_getObject(0).StaticCast< ::hx::EnumBase >()->_hx_getIndex() != 0)) {
HXLINE( 456)								throwError = true;
            							}
            						}
            						break;
            						default:{
HXLINE( 456)							throwError = true;
            						}
            					}
HXLINE( 458)					if (throwError) {
HXLINE( 460)						HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,flush,(void))

void Socket_obj::readBytes( ::openfl::utils::ByteArrayData bytes,::hx::Null< int >  __o_offset,::hx::Null< int >  __o_length){
            		int offset = __o_offset.Default(0);
            		int length = __o_length.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_520_readBytes)
HXLINE( 521)		if (::hx::IsNull( this->_hx___socket )) {
HXLINE( 523)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 526)		this->_hx___input->readBytes(bytes,offset,length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Socket_obj,readBytes,(void))

int Socket_obj::readUnsignedShort(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_701_readUnsignedShort)
HXLINE( 702)		if (::hx::IsNull( this->_hx___socket )) {
HXLINE( 704)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 707)		return this->_hx___input->readUnsignedShort();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readUnsignedShort,return )

void Socket_obj::writeByte(int value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_778_writeByte)
HXLINE( 779)		if (::hx::IsNull( this->_hx___socket )) {
HXLINE( 781)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 784)		this->_hx___output->writeByte(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeByte,(void))

void Socket_obj::writeBytes( ::openfl::utils::ByteArrayData bytes,::hx::Null< int >  __o_offset,::hx::Null< int >  __o_length){
            		int offset = __o_offset.Default(0);
            		int length = __o_length.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_809_writeBytes)
HXLINE( 810)		if (::hx::IsNull( this->_hx___socket )) {
HXLINE( 812)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 815)		this->_hx___output->writeBytes(bytes,offset,length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Socket_obj,writeBytes,(void))

void Socket_obj::_hx___cleanSocket(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_994___cleanSocket)
HXLINE( 995)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 997)			this->_hx___socket->close();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 999)				{
HXLINE( 999)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1001)		this->_hx___socket = null();
HXLINE(1002)		this->_hx___connected = false;
HXLINE(1003)		::openfl::utils::_internal::Lib_obj::current->removeEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,_hx___cleanSocket,(void))

void Socket_obj::this_onEnterFrame( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_1052_this_onEnterFrame)
HXLINE(1059)		bool doConnect = false;
HXLINE(1060)		bool doClose = false;
HXLINE(1062)		if (!(this->get_connected())) {
HXLINE(1066)			 ::sys::net::Socket r = Dynamic(  ::Dynamic(::sys::net::Socket_obj::select(null(),::Array_obj< ::Dynamic>::__new(1)->init(0,this->_hx___socket),null(),0)->__Field(HX_("write",df,6c,59,d0),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::sys::net::Socket >();
HXDLIN(1066)			if (::hx::IsInstanceEq( r,this->_hx___socket )) {
HXLINE(1068)				doConnect = true;
            			}
            			else {
HXLINE(1070)				Float _hx_tmp = ::Sys_obj::time();
HXDLIN(1070)				if (((_hx_tmp - this->_hx___timestamp) > (( (Float)(this->timeout) ) / ( (Float)(1000) )))) {
HXLINE(1072)					doClose = true;
            				}
            			}
            		}
HXLINE(1076)		 ::haxe::io::BytesBuffer b =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXLINE(1077)		int bLength = 0;
HXLINE(1079)		bool _hx_tmp1;
HXDLIN(1079)		if (!(this->get_connected())) {
HXLINE(1079)			_hx_tmp1 = doConnect;
            		}
            		else {
HXLINE(1079)			_hx_tmp1 = true;
            		}
HXDLIN(1079)		if (_hx_tmp1) {
HXLINE(1081)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            				HX_STACK_CATCHABLE( ::haxe::io::Error, 1);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 2);
            				HX_STACK_CATCHABLE( ::Dynamic, 3);
HXLINE(1083)				int l;
HXLINE(1085)				do {
HXLINE(1087)					l = this->_hx___socket->input->readBytes(this->_hx___buffer,0,this->_hx___buffer->length);
HXLINE(1089)					if ((l > 0)) {
HXLINE(1091)						{
HXLINE(1091)							 ::haxe::io::Bytes src = this->_hx___buffer;
HXDLIN(1091)							bool _hx_tmp2;
HXDLIN(1091)							if ((l >= 0)) {
HXLINE(1091)								_hx_tmp2 = (l > src->length);
            							}
            							else {
HXLINE(1091)								_hx_tmp2 = true;
            							}
HXDLIN(1091)							if (_hx_tmp2) {
HXLINE(1091)								HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            							}
HXDLIN(1091)							::Array< unsigned char > b2 = src->b;
HXDLIN(1091)							{
HXLINE(1091)								int _g = 0;
HXDLIN(1091)								while((_g < l)){
HXLINE(1091)									_g = (_g + 1);
HXDLIN(1091)									b->b->push(b2->__get((_g - 1)));
            								}
            							}
            						}
HXLINE(1092)						bLength = (bLength + l);
            					}
            				} while((l == this->_hx___buffer->length));
;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
            				}
            				else if (_hx_e.IsClass<  ::haxe::io::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Error e11 = _hx_e;
HXLINE(1103)					switch((int)(e11->_hx_getIndex())){
            						case (int)0: {
            						}
            						break;
            						case (int)3: {
HXLINE(1106)							 ::Dynamic _g11 = e11->_hx_getObject(0);
HXDLIN(1106)							if ((_g11.StaticCast< ::hx::EnumBase >()->_hx_getIndex() != 0)) {
HXLINE(1108)								doClose = true;
            							}
            						}
            						break;
            						default:{
HXLINE(1108)							doClose = true;
            						}
            					}
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g2 = _hx_e;
HXLINE(1101)					{
HXLINE(1101)						null();
            					}
HXLINE(1081)					if (::Std_obj::isOfType(_g2->value,::hx::ClassOf< ::haxe::io::Error >())) {
HXLINE(1101)						 ::haxe::io::Error e11 = _g2->value;
HXLINE(1103)						switch((int)(e11->_hx_getIndex())){
            							case (int)0: {
            							}
            							break;
            							case (int)3: {
HXLINE(1106)								 ::Dynamic _g11 = e11->_hx_getObject(0);
HXDLIN(1106)								if ((_g11.StaticCast< ::hx::EnumBase >()->_hx_getIndex() != 0)) {
HXLINE(1108)									doClose = true;
            								}
            							}
            							break;
            							default:{
HXLINE(1108)								doClose = true;
            							}
            						}
            					}
            					else {
HXLINE(1081)						if (!(::Std_obj::isOfType(_g2->value,::hx::ClassOf< ::haxe::io::Eof >()))) {
HXLINE(1081)							HX_STACK_DO_THROW(_g2);
            						}
            					}
            				}
            				else if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g3 = _hx_e;
HXLINE(1111)					{
HXLINE(1111)						null();
            					}
HXLINE(1113)					doClose = true;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(1117)		bool _hx_tmp3;
HXDLIN(1117)		if (doClose) {
HXLINE(1117)			_hx_tmp3 = this->get_connected();
            		}
            		else {
HXLINE(1117)			_hx_tmp3 = false;
            		}
HXDLIN(1117)		if (_hx_tmp3) {
HXLINE(1119)			this->_hx___cleanSocket();
HXLINE(1121)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("close",b8,17,63,48),null(),null()));
            		}
            		else {
HXLINE(1123)			if (doClose) {
HXLINE(1125)				this->_hx___cleanSocket();
HXLINE(1127)				this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,HX_("Connection failed",5f,1d,9e,a8),null()));
            			}
            			else {
HXLINE(1129)				if (doConnect) {
HXLINE(1131)					this->_hx___connected = true;
HXLINE(1132)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("connect",ea,3b,80,15),null(),null()));
            				}
            			}
            		}
HXLINE(1135)		if ((bLength > 0)) {
HXLINE(1137)			 ::haxe::io::Bytes newData = b->getBytes();
HXLINE(1139)			int rl = (::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_hx___input) - this->_hx___input->position);
HXLINE(1140)			bool _hx_tmp4;
HXDLIN(1140)			if ((false != (rl < 0))) {
HXLINE(1140)				_hx_tmp4 = false;
            			}
            			else {
HXLINE(1140)				_hx_tmp4 = (0 > rl);
            			}
HXDLIN(1140)			if (_hx_tmp4) {
HXLINE(1140)				rl = 0;
            			}
HXLINE(1142)			 ::haxe::io::Bytes newInput = ::haxe::io::Bytes_obj::alloc((rl + newData->length));
HXLINE(1143)			bool aNeg = (rl < 0);
HXDLIN(1143)			bool _hx_tmp5;
HXDLIN(1143)			if ((aNeg != false)) {
HXLINE(1143)				_hx_tmp5 = aNeg;
            			}
            			else {
HXLINE(1143)				_hx_tmp5 = (rl > 0);
            			}
HXDLIN(1143)			if (_hx_tmp5) {
HXLINE(1143)				newInput->blit(0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytes(this->_hx___input),this->_hx___input->position,rl);
            			}
HXLINE(1144)			newInput->blit(rl,newData,0,newData->length);
HXLINE(1145)			this->_hx___input = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(newInput);
HXLINE(1146)			this->_hx___input->_hx___endian = this->_hx___endian;
HXLINE(1148)			this->dispatchEvent( ::openfl::events::ProgressEvent_obj::__alloc( HX_CTX ,HX_("socketData",7d,63,de,b1),false,false,newData->length,0));
            		}
HXLINE(1151)		if (::hx::IsNotNull( this->_hx___socket )) {
HXLINE(1153)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::IOError, 0);
HXLINE(1155)				this->flush();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::openfl::errors::IOError >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::IOError e2 = _hx_e;
HXLINE(1159)					this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,e2->get_message(),null()));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,this_onEnterFrame,(void))

int Socket_obj::get_bytesAvailable(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_1168_get_bytesAvailable)
HXDLIN(1168)		 ::openfl::utils::ByteArrayData this1 = this->_hx___input;
HXDLIN(1168)		return (this1->length - this1->position);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,get_bytesAvailable,return )

bool Socket_obj::get_connected(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_1178_get_connected)
HXDLIN(1178)		return this->_hx___connected;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,get_connected,return )

 ::Dynamic Socket_obj::set_endian( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_1187_set_endian)
HXLINE(1188)		this->_hx___endian = value;
HXLINE(1190)		if (::hx::IsNotNull( this->_hx___input )) {
HXLINE(1190)			this->_hx___input->_hx___endian = value;
            		}
HXLINE(1191)		if (::hx::IsNotNull( this->_hx___output )) {
HXLINE(1191)			this->_hx___output->_hx___endian = value;
            		}
HXLINE(1193)		return this->_hx___endian;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,set_endian,return )


::hx::ObjectPtr< Socket_obj > Socket_obj::__new(::String host,::hx::Null< int >  __o_port) {
	::hx::ObjectPtr< Socket_obj > __this = new Socket_obj();
	__this->__construct(host,__o_port);
	return __this;
}

::hx::ObjectPtr< Socket_obj > Socket_obj::__alloc(::hx::Ctx *_hx_ctx,::String host,::hx::Null< int >  __o_port) {
	Socket_obj *__this = (Socket_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Socket_obj), true, "openfl.net.Socket"));
	*(void **)__this = Socket_obj::_hx_vtable;
	__this->__construct(host,__o_port);
	return __this;
}

Socket_obj::Socket_obj()
{
}

void Socket_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Socket);
	HX_MARK_MEMBER_NAME(timeout,"timeout");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___connected,"__connected");
	HX_MARK_MEMBER_NAME(_hx___endian,"__endian");
	HX_MARK_MEMBER_NAME(_hx___host,"__host");
	HX_MARK_MEMBER_NAME(_hx___input,"__input");
	HX_MARK_MEMBER_NAME(_hx___output,"__output");
	HX_MARK_MEMBER_NAME(_hx___port,"__port");
	HX_MARK_MEMBER_NAME(_hx___socket,"__socket");
	HX_MARK_MEMBER_NAME(_hx___timestamp,"__timestamp");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Socket_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(timeout,"timeout");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___connected,"__connected");
	HX_VISIT_MEMBER_NAME(_hx___endian,"__endian");
	HX_VISIT_MEMBER_NAME(_hx___host,"__host");
	HX_VISIT_MEMBER_NAME(_hx___input,"__input");
	HX_VISIT_MEMBER_NAME(_hx___output,"__output");
	HX_VISIT_MEMBER_NAME(_hx___port,"__port");
	HX_VISIT_MEMBER_NAME(_hx___socket,"__socket");
	HX_VISIT_MEMBER_NAME(_hx___timestamp,"__timestamp");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Socket_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush") ) { return ::hx::Val( flush_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__host") ) { return ::hx::Val( _hx___host ); }
		if (HX_FIELD_EQ(inName,"__port") ) { return ::hx::Val( _hx___port ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { return ::hx::Val( timeout ); }
		if (HX_FIELD_EQ(inName,"__input") ) { return ::hx::Val( _hx___input ); }
		if (HX_FIELD_EQ(inName,"connect") ) { return ::hx::Val( connect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { return ::hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__endian") ) { return ::hx::Val( _hx___endian ); }
		if (HX_FIELD_EQ(inName,"__output") ) { return ::hx::Val( _hx___output ); }
		if (HX_FIELD_EQ(inName,"__socket") ) { return ::hx::Val( _hx___socket ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_connected() ); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return ::hx::Val( readBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeByte") ) { return ::hx::Val( writeByte_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return ::hx::Val( writeBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_endian") ) { return ::hx::Val( set_endian_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__connected") ) { return ::hx::Val( _hx___connected ); }
		if (HX_FIELD_EQ(inName,"__timestamp") ) { return ::hx::Val( _hx___timestamp ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__cleanSocket") ) { return ::hx::Val( _hx___cleanSocket_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_connected") ) { return ::hx::Val( get_connected_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bytesAvailable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bytesAvailable() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"readUnsignedShort") ) { return ::hx::Val( readUnsignedShort_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onEnterFrame") ) { return ::hx::Val( this_onEnterFrame_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_bytesAvailable") ) { return ::hx::Val( get_bytesAvailable_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Socket_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__host") ) { _hx___host=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__port") ) { _hx___port=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { timeout=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__input") ) { _hx___input=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__endian") ) { _hx___endian=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__output") ) { _hx___output=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__socket") ) { _hx___socket=inValue.Cast<  ::sys::net::Socket >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__connected") ) { _hx___connected=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__timestamp") ) { _hx___timestamp=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Socket_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytesAvailable",de,4b,9d,9b));
	outFields->push(HX_("connected",c9,e2,f6,a2));
	outFields->push(HX_("timeout",a1,1a,f7,d8));
	outFields->push(HX_("__buffer",20,28,c4,78));
	outFields->push(HX_("__connected",a9,2b,23,d1));
	outFields->push(HX_("__endian",bb,03,b8,a2));
	outFields->push(HX_("__host",88,32,0b,f4));
	outFields->push(HX_("__input",ea,1c,7c,28));
	outFields->push(HX_("__output",21,7a,b0,b4));
	outFields->push(HX_("__port",a1,e6,54,f9));
	outFields->push(HX_("__socket",d3,f6,75,ce));
	outFields->push(HX_("__timestamp",b6,1d,fb,d3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Socket_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Socket_obj,timeout),HX_("timeout",a1,1a,f7,d8)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Socket_obj,_hx___buffer),HX_("__buffer",20,28,c4,78)},
	{::hx::fsBool,(int)offsetof(Socket_obj,_hx___connected),HX_("__connected",a9,2b,23,d1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Socket_obj,_hx___endian),HX_("__endian",bb,03,b8,a2)},
	{::hx::fsString,(int)offsetof(Socket_obj,_hx___host),HX_("__host",88,32,0b,f4)},
	{::hx::fsObject /*  ::openfl::utils::ByteArrayData */ ,(int)offsetof(Socket_obj,_hx___input),HX_("__input",ea,1c,7c,28)},
	{::hx::fsObject /*  ::openfl::utils::ByteArrayData */ ,(int)offsetof(Socket_obj,_hx___output),HX_("__output",21,7a,b0,b4)},
	{::hx::fsInt,(int)offsetof(Socket_obj,_hx___port),HX_("__port",a1,e6,54,f9)},
	{::hx::fsObject /*  ::sys::net::Socket */ ,(int)offsetof(Socket_obj,_hx___socket),HX_("__socket",d3,f6,75,ce)},
	{::hx::fsFloat,(int)offsetof(Socket_obj,_hx___timestamp),HX_("__timestamp",b6,1d,fb,d3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Socket_obj_sStaticStorageInfo = 0;
#endif

static ::String Socket_obj_sMemberFields[] = {
	HX_("timeout",a1,1a,f7,d8),
	HX_("__buffer",20,28,c4,78),
	HX_("__connected",a9,2b,23,d1),
	HX_("__endian",bb,03,b8,a2),
	HX_("__host",88,32,0b,f4),
	HX_("__input",ea,1c,7c,28),
	HX_("__output",21,7a,b0,b4),
	HX_("__port",a1,e6,54,f9),
	HX_("__socket",d3,f6,75,ce),
	HX_("__timestamp",b6,1d,fb,d3),
	HX_("close",b8,17,63,48),
	HX_("connect",ea,3b,80,15),
	HX_("flush",c4,62,9b,02),
	HX_("readBytes",35,55,7f,8e),
	HX_("readUnsignedShort",11,22,0b,77),
	HX_("writeByte",87,13,d7,49),
	HX_("writeBytes",0c,03,5a,52),
	HX_("__cleanSocket",fc,fe,55,5c),
	HX_("this_onEnterFrame",b5,0f,1f,8e),
	HX_("get_bytesAvailable",a7,2c,37,37),
	HX_("get_connected",a0,b6,5a,64),
	HX_("set_endian",d8,a6,8d,ee),
	::String(null()) };

::hx::Class Socket_obj::__mClass;

void Socket_obj::__register()
{
	Socket_obj _hx_dummy;
	Socket_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.net.Socket",e2,67,c5,a1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Socket_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Socket_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Socket_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Socket_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace net
