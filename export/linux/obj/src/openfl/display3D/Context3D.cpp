// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display__internal_SamplerState
#include <openfl/display/_internal/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Uniform
#include <openfl/display3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DProgramType_Context3DProgramType_Impl_
#include <openfl/display3D/_Context3DProgramType/Context3DProgramType_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__internal_Context3DState
#include <openfl/display3D/_internal/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_AGALMiniAssembler
#include <openfl/utils/AGALMiniAssembler.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_148_new,"openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",148,0xc899cbb9)
static const Float _hx_array_data_2fa0bfa7_10[] = {
	1.0,1.0,1.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_462_clear,"openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",462,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_581_configureBackBuffer,"openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",581,0xc899cbb9)
static const int _hx_array_data_2fa0bfa7_13[] = {
	(int)0,(int)1,(int)2,(int)2,(int)1,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_762_createIndexBuffer,"openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",762,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_787_createProgram,"openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",787,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_836_createRectangleTexture,"openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",836,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_957_createVertexBuffer,"openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",957,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1193_drawTriangles,"openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",1193,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1242_present,"openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",1242,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1300_setBlendFactors,"openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",1300,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1305_setBlendFactorsSeparate,"openfl.display3D.Context3D","setBlendFactorsSeparate",0x9ca665f1,"openfl.display3D.Context3D.setBlendFactorsSeparate","openfl/display3D/Context3D.hx",1305,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1330_setColorMask,"openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",1330,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1352_setCulling,"openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",1352,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1376_setDepthTest,"openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",1376,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1388_setProgram,"openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",1388,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1488_setProgramConstantsFromMatrix,"openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",1488,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1626_setRenderToBackBuffer,"openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",1626,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1666_setRenderToTexture,"openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",1666,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1694_setSamplerStateAt,"openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",1694,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1726_setScissorRectangle,"openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",1726,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1784_setStencilActions,"openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",1784,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1807_setStencilReferenceValue,"openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",1807,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1839_setTextureAt,"openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",1839,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1893_setVertexBufferAt,"openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",1893,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1932___bindGLArrayBuffer,"openfl.display3D.Context3D","__bindGLArrayBuffer",0x84209c10,"openfl.display3D.Context3D.__bindGLArrayBuffer","openfl/display3D/Context3D.hx",1932,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1941___bindGLElementArrayBuffer,"openfl.display3D.Context3D","__bindGLElementArrayBuffer",0x269f0e66,"openfl.display3D.Context3D.__bindGLElementArrayBuffer","openfl/display3D/Context3D.hx",1941,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1950___bindGLFramebuffer,"openfl.display3D.Context3D","__bindGLFramebuffer",0x408c5984,"openfl.display3D.Context3D.__bindGLFramebuffer","openfl/display3D/Context3D.hx",1950,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1958___bindGLTexture2D,"openfl.display3D.Context3D","__bindGLTexture2D",0x24624244,"openfl.display3D.Context3D.__bindGLTexture2D","openfl/display3D/Context3D.hx",1958,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1970___bindGLTextureCubeMap,"openfl.display3D.Context3D","__bindGLTextureCubeMap",0x811ec0d5,"openfl.display3D.Context3D.__bindGLTextureCubeMap","openfl/display3D/Context3D.hx",1970,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1982___dispose,"openfl.display3D.Context3D","__dispose",0xc4b9d1f8,"openfl.display3D.Context3D.__dispose","openfl/display3D/Context3D.hx",1982,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2006___drawTriangles,"openfl.display3D.Context3D","__drawTriangles",0xf71e9e20,"openfl.display3D.Context3D.__drawTriangles","openfl/display3D/Context3D.hx",2006,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2034___flushGL,"openfl.display3D.Context3D","__flushGL",0x73ba2b42,"openfl.display3D.Context3D.__flushGL","openfl/display3D/Context3D.hx",2034,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2050___flushGLBlend,"openfl.display3D.Context3D","__flushGLBlend",0xce3a1daf,"openfl.display3D.Context3D.__flushGLBlend","openfl/display3D/Context3D.hx",2050,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2092___flushGLCulling,"openfl.display3D.Context3D","__flushGLCulling",0x308bab4e,"openfl.display3D.Context3D.__flushGLCulling","openfl/display3D/Context3D.hx",2092,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2121___flushGLDepth,"openfl.display3D.Context3D","__flushGLDepth",0xf06f2661,"openfl.display3D.Context3D.__flushGLDepth","openfl/display3D/Context3D.hx",2121,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2161___flushGLFramebuffer,"openfl.display3D.Context3D","__flushGLFramebuffer",0x8bc4a4cb,"openfl.display3D.Context3D.__flushGLFramebuffer","openfl/display3D/Context3D.hx",2161,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2207___flushGLProgram,"openfl.display3D.Context3D","__flushGLProgram",0xd0fd1362,"openfl.display3D.Context3D.__flushGLProgram","openfl/display3D/Context3D.hx",2207,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2252___flushGLScissor,"openfl.display3D.Context3D","__flushGLScissor",0xe1eaf0fa,"openfl.display3D.Context3D.__flushGLScissor","openfl/display3D/Context3D.hx",2252,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2297___flushGLStencil,"openfl.display3D.Context3D","__flushGLStencil",0x5d0786da,"openfl.display3D.Context3D.__flushGLStencil","openfl/display3D/Context3D.hx",2297,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2330___flushGLTextures,"openfl.display3D.Context3D","__flushGLTextures",0xec1af09a,"openfl.display3D.Context3D.__flushGLTextures","openfl/display3D/Context3D.hx",2330,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2417___flushGLViewport,"openfl.display3D.Context3D","__flushGLViewport",0x22f145c8,"openfl.display3D.Context3D.__flushGLViewport","openfl/display3D/Context3D.hx",2417,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2469___getGLBlend,"openfl.display3D.Context3D","__getGLBlend",0x53955e5d,"openfl.display3D.Context3D.__getGLBlend","openfl/display3D/Context3D.hx",2469,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2500___getGLCompareMode,"openfl.display3D.Context3D","__getGLCompareMode",0xec8b55b4,"openfl.display3D.Context3D.__getGLCompareMode","openfl/display3D/Context3D.hx",2500,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2516___getGLStencilAction,"openfl.display3D.Context3D","__getGLStencilAction",0xdf4274de,"openfl.display3D.Context3D.__getGLStencilAction","openfl/display3D/Context3D.hx",2516,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2532___getGLTriangleFace,"openfl.display3D.Context3D","__getGLTriangleFace",0x318746f9,"openfl.display3D.Context3D.__getGLTriangleFace","openfl/display3D/Context3D.hx",2532,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2543___renderStage3D,"openfl.display3D.Context3D","__renderStage3D",0x426e1052,"openfl.display3D.Context3D.__renderStage3D","openfl/display3D/Context3D.hx",2543,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2591___setGLBlend,"openfl.display3D.Context3D","__setGLBlend",0x5712fcd1,"openfl.display3D.Context3D.__setGLBlend","openfl/display3D/Context3D.hx",2591,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2607___setGLBlendEquation,"openfl.display3D.Context3D","__setGLBlendEquation",0x47b42d7d,"openfl.display3D.Context3D.__setGLBlendEquation","openfl/display3D/Context3D.hx",2607,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2616___setGLCullFace,"openfl.display3D.Context3D","__setGLCullFace",0x3db3a2ef,"openfl.display3D.Context3D.__setGLCullFace","openfl/display3D/Context3D.hx",2616,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2632___setGLDepthTest,"openfl.display3D.Context3D","__setGLDepthTest",0x637f7775,"openfl.display3D.Context3D.__setGLDepthTest","openfl/display3D/Context3D.hx",2632,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2648___setGLFrontFace,"openfl.display3D.Context3D","__setGLFrontFace",0x40c35666,"openfl.display3D.Context3D.__setGLFrontFace","openfl/display3D/Context3D.hx",2648,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2657___setGLScissorTest,"openfl.display3D.Context3D","__setGLScissorTest",0xe746cf0e,"openfl.display3D.Context3D.__setGLScissorTest","openfl/display3D/Context3D.hx",2657,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2673___setGLStencilTest,"openfl.display3D.Context3D","__setGLStencilTest",0xce93d4ee,"openfl.display3D.Context3D.__setGLStencilTest","openfl/display3D/Context3D.hx",2673,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_255_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",255,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_256_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",256,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_257_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",257,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_258_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",258,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_259_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",259,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_260_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",260,0xc899cbb9)
namespace openfl{
namespace display3D{

void Context3D_obj::__construct( ::openfl::display::Stage stage, ::openfl::display3D::_internal::Context3DState contextState, ::openfl::display::Stage3D stage3D){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_148_new)
HXLINE( 194)		this->driverInfo = HX_("OpenGL (Direct blitting)",e6,33,c8,a6);
HXLINE( 173)		this->backBufferWidth = 0;
HXLINE( 163)		this->backBufferHeight = 0;
HXLINE( 287)		super::__construct(null());
HXLINE( 289)		this->_hx___stage = stage;
HXLINE( 290)		this->_hx___contextState = contextState;
HXLINE( 291)		this->_hx___stage3D = stage3D;
HXLINE( 293)		this->_hx___context = stage->window->context;
HXLINE( 297)		this->gl = this->_hx___context->webgl;
HXLINE( 300)		if (::hx::IsNull( this->_hx___contextState )) {
HXLINE( 300)			this->_hx___contextState =  ::openfl::display3D::_internal::Context3DState_obj::__alloc( HX_CTX );
            		}
HXLINE( 301)		this->_hx___state =  ::openfl::display3D::_internal::Context3DState_obj::__alloc( HX_CTX );
HXLINE( 304)		this->_hx___vertexConstants =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,512,8);
HXLINE( 305)		this->_hx___fragmentConstants =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,512,8);
HXLINE( 306)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_2fa0bfa7_10,4);
HXDLIN( 306)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 306)		if (::hx::IsNotNull( array )) {
HXLINE( 306)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 306)			_this->byteOffset = 0;
HXDLIN( 306)			_this->length = array->get_length();
HXDLIN( 306)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 306)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 306)			_this->copyFromArray(array,null());
HXDLIN( 306)			this1 = _this;
            		}
            		else {
HXLINE( 306)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 306)		this->_hx___positionScale = this1;
HXLINE( 308)		this->_hx___programs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 310)		if ((::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims == -1)) {
HXLINE( 315)			::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims = 16384;
            		}
HXLINE( 319)		this->maxBackBufferWidth = ::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims;
HXLINE( 320)		this->maxBackBufferHeight = ::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims;
HXLINE( 322)		if ((::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy == -1)) {
HXLINE( 324)			if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects )) {
HXLINE( 324)				::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 324)				if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions )) {
HXLINE( 324)					::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions = ::Array_obj< ::String >::__new();
HXDLIN( 324)					::String extensions = ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_string(7939)) )) );
HXDLIN( 324)					if (::hx::IsNotNull( extensions )) {
HXLINE( 324)						::Array< ::String > extensionList = extensions.split(HX_(" ",20,00,00,00));
HXDLIN( 324)						{
HXLINE( 324)							int _g = 0;
HXDLIN( 324)							while((_g < extensionList->length)){
HXLINE( 324)								::String extension = extensionList->__get(_g);
HXDLIN( 324)								_g = (_g + 1);
HXDLIN( 324)								if (::StringTools_obj::startsWith(extension,HX_("GL_",9a,22,36,00))) {
HXLINE( 324)									::Array< ::String > _hx_tmp = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 324)									_hx_tmp->push(extension.substr(3,null()));
            								}
            								else {
HXLINE( 324)									::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions->push(extension);
            								}
            							}
            						}
            					}
            				}
HXDLIN( 324)				::Array< ::String > supportedExtensions = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 324)				{
HXLINE( 324)					int _g1 = 0;
HXDLIN( 324)					while((_g1 < supportedExtensions->length)){
HXLINE( 324)						::String extension1 = supportedExtensions->__get(_g1);
HXDLIN( 324)						_g1 = (_g1 + 1);
HXDLIN( 324)						if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->exists(extension1)) {
HXLINE( 324)							::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(extension1,null());
            						}
            					}
            				}
            			}
HXDLIN( 324)			 ::Dynamic extension2;
HXDLIN( 324)			if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->exists(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d))) {
HXLINE( 324)				 ::Dynamic object = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->get(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d));
HXDLIN( 324)				if (::hx::IsNull( object )) {
HXLINE( 324)					object = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->get(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d))();
HXDLIN( 324)					::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d),object);
HXDLIN( 324)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_extension(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d));
            				}
HXDLIN( 324)				extension2 = object;
            			}
            			else {
HXLINE( 324)				extension2 = null();
            			}
HXLINE( 333)			if (::hx::IsNotNull( extension2 )) {
HXLINE( 335)				::openfl::display3D::Context3D_obj::_hx___glTextureMaxAnisotropy = ( (int)(extension2->__Field(HX_("TEXTURE_MAX_ANISOTROPY_EXT",63,c1,6c,51),::hx::paccDynamic)) );
HXLINE( 336)				::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy = ( (int)(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::getParameter(this->gl,( (int)(extension2->__Field(HX_("MAX_TEXTURE_MAX_ANISOTROPY_EXT",7e,54,e7,a3),::hx::paccDynamic)) ))) );
            			}
            			else {
HXLINE( 340)				::openfl::display3D::Context3D_obj::_hx___glTextureMaxAnisotropy = 0;
HXLINE( 341)				::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy = 0;
            			}
            		}
HXLINE( 346)		if ((::openfl::display3D::Context3D_obj::_hx___glDepthStencil == -1)) {
HXLINE( 351)			bool _hx_tmp1;
HXDLIN( 351)			if ((this->_hx___context->type == HX_("opengles",9d,f6,c9,fa))) {
HXLINE( 351)				_hx_tmp1 = (::Std_obj::parseFloat(this->_hx___context->version) >= 3);
            			}
            			else {
HXLINE( 351)				_hx_tmp1 = false;
            			}
HXDLIN( 351)			if (_hx_tmp1) {
HXLINE( 353)				::openfl::display3D::Context3D_obj::_hx___glDepthStencil = this->_hx___context->gles3->DEPTH24_STENCIL8;
            			}
            			else {
HXLINE( 357)				if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects )) {
HXLINE( 357)					::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 357)					if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions )) {
HXLINE( 357)						::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions = ::Array_obj< ::String >::__new();
HXDLIN( 357)						::String extensions1 = ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_string(7939)) )) );
HXDLIN( 357)						if (::hx::IsNotNull( extensions1 )) {
HXLINE( 357)							::Array< ::String > extensionList1 = extensions1.split(HX_(" ",20,00,00,00));
HXDLIN( 357)							{
HXLINE( 357)								int _g2 = 0;
HXDLIN( 357)								while((_g2 < extensionList1->length)){
HXLINE( 357)									::String extension3 = extensionList1->__get(_g2);
HXDLIN( 357)									_g2 = (_g2 + 1);
HXDLIN( 357)									if (::StringTools_obj::startsWith(extension3,HX_("GL_",9a,22,36,00))) {
HXLINE( 357)										::Array< ::String > _hx_tmp2 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 357)										_hx_tmp2->push(extension3.substr(3,null()));
            									}
            									else {
HXLINE( 357)										::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions->push(extension3);
            									}
            								}
            							}
            						}
            					}
HXDLIN( 357)					::Array< ::String > supportedExtensions1 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 357)					{
HXLINE( 357)						int _g3 = 0;
HXDLIN( 357)						while((_g3 < supportedExtensions1->length)){
HXLINE( 357)							::String extension4 = supportedExtensions1->__get(_g3);
HXDLIN( 357)							_g3 = (_g3 + 1);
HXDLIN( 357)							if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->exists(extension4)) {
HXLINE( 357)								::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(extension4,null());
            							}
            						}
            					}
            				}
HXDLIN( 357)				 ::Dynamic extension5;
HXDLIN( 357)				if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->exists(HX_("OES_packed_depth_stencil",7b,19,31,fc))) {
HXLINE( 357)					 ::Dynamic object1 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->get(HX_("OES_packed_depth_stencil",7b,19,31,fc));
HXDLIN( 357)					if (::hx::IsNull( object1 )) {
HXLINE( 357)						object1 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->get(HX_("OES_packed_depth_stencil",7b,19,31,fc))();
HXDLIN( 357)						::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(HX_("OES_packed_depth_stencil",7b,19,31,fc),object1);
HXDLIN( 357)						::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_extension(HX_("OES_packed_depth_stencil",7b,19,31,fc));
            					}
HXDLIN( 357)					extension5 = object1;
            				}
            				else {
HXLINE( 357)					extension5 = null();
            				}
HXLINE( 358)				if (::hx::IsNotNull( extension5 )) {
HXLINE( 360)					::openfl::display3D::Context3D_obj::_hx___glDepthStencil = ( (int)(extension5->__Field(HX_("DEPTH24_STENCIL8_OES",b4,24,e8,3a),::hx::paccDynamic)) );
            				}
            				else {
HXLINE( 364)					if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects )) {
HXLINE( 364)						::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 364)						if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions )) {
HXLINE( 364)							::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions = ::Array_obj< ::String >::__new();
HXDLIN( 364)							::String extensions2 = ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_string(7939)) )) );
HXDLIN( 364)							if (::hx::IsNotNull( extensions2 )) {
HXLINE( 364)								::Array< ::String > extensionList2 = extensions2.split(HX_(" ",20,00,00,00));
HXDLIN( 364)								{
HXLINE( 364)									int _g4 = 0;
HXDLIN( 364)									while((_g4 < extensionList2->length)){
HXLINE( 364)										::String extension6 = extensionList2->__get(_g4);
HXDLIN( 364)										_g4 = (_g4 + 1);
HXDLIN( 364)										if (::StringTools_obj::startsWith(extension6,HX_("GL_",9a,22,36,00))) {
HXLINE( 364)											::Array< ::String > extension7 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 364)											extension7->push(extension6.substr(3,null()));
            										}
            										else {
HXLINE( 364)											::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions->push(extension6);
            										}
            									}
            								}
            							}
            						}
HXDLIN( 364)						::Array< ::String > supportedExtensions2 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 364)						{
HXLINE( 364)							int _g5 = 0;
HXDLIN( 364)							while((_g5 < supportedExtensions2->length)){
HXLINE( 364)								::String extension8 = supportedExtensions2->__get(_g5);
HXDLIN( 364)								_g5 = (_g5 + 1);
HXDLIN( 364)								if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->exists(extension8)) {
HXLINE( 364)									::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(extension8,null());
            								}
            							}
            						}
            					}
HXDLIN( 364)					if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->exists(HX_("EXT_packed_depth_stencil",f7,88,e3,09))) {
HXLINE( 364)						 ::Dynamic object2 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->get(HX_("EXT_packed_depth_stencil",f7,88,e3,09));
HXDLIN( 364)						if (::hx::IsNull( object2 )) {
HXLINE( 364)							object2 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->get(HX_("EXT_packed_depth_stencil",f7,88,e3,09))();
HXDLIN( 364)							::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(HX_("EXT_packed_depth_stencil",f7,88,e3,09),object2);
HXDLIN( 364)							::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_extension(HX_("EXT_packed_depth_stencil",f7,88,e3,09));
            						}
HXDLIN( 364)						extension5 = object2;
            					}
            					else {
HXLINE( 364)						extension5 = null();
            					}
HXLINE( 365)					if (::hx::IsNotNull( extension5 )) {
HXLINE( 367)						::openfl::display3D::Context3D_obj::_hx___glDepthStencil = ( (int)(extension5->__Field(HX_("DEPTH24_STENCIL8_EXT",b8,9e,e0,3a),::hx::paccDynamic)) );
            					}
            					else {
HXLINE( 371)						::openfl::display3D::Context3D_obj::_hx___glDepthStencil = 0;
            					}
            				}
            			}
            		}
HXLINE( 378)		if ((::openfl::display3D::Context3D_obj::_hx___glMemoryTotalAvailable == -1)) {
HXLINE( 380)			if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects )) {
HXLINE( 380)				::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 380)				if (::hx::IsNull( ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions )) {
HXLINE( 380)					::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions = ::Array_obj< ::String >::__new();
HXDLIN( 380)					::String extensions3 = ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_string(7939)) )) );
HXDLIN( 380)					if (::hx::IsNotNull( extensions3 )) {
HXLINE( 380)						::Array< ::String > extensionList3 = extensions3.split(HX_(" ",20,00,00,00));
HXDLIN( 380)						{
HXLINE( 380)							int _g6 = 0;
HXDLIN( 380)							while((_g6 < extensionList3->length)){
HXLINE( 380)								::String extension9 = extensionList3->__get(_g6);
HXDLIN( 380)								_g6 = (_g6 + 1);
HXDLIN( 380)								if (::StringTools_obj::startsWith(extension9,HX_("GL_",9a,22,36,00))) {
HXLINE( 380)									::Array< ::String > _hx_tmp3 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 380)									_hx_tmp3->push(extension9.substr(3,null()));
            								}
            								else {
HXLINE( 380)									::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions->push(extension9);
            								}
            							}
            						}
            					}
            				}
HXDLIN( 380)				::Array< ::String > supportedExtensions3 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___supportedExtensions;
HXDLIN( 380)				{
HXLINE( 380)					int _g7 = 0;
HXDLIN( 380)					while((_g7 < supportedExtensions3->length)){
HXLINE( 380)						::String extension10 = supportedExtensions3->__get(_g7);
HXDLIN( 380)						_g7 = (_g7 + 1);
HXDLIN( 380)						if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->exists(extension10)) {
HXLINE( 380)							::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(extension10,null());
            						}
            					}
            				}
            			}
HXDLIN( 380)			 ::Dynamic extension11;
HXDLIN( 380)			if (::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->exists(HX_("NVX_gpu_memory_info",6a,ad,9a,42))) {
HXLINE( 380)				 ::Dynamic object3 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->get(HX_("NVX_gpu_memory_info",6a,ad,9a,42));
HXDLIN( 380)				if (::hx::IsNull( object3 )) {
HXLINE( 380)					object3 = ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjectConstructors->get(HX_("NVX_gpu_memory_info",6a,ad,9a,42))();
HXDLIN( 380)					::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::_hx___extensionObjects->set(HX_("NVX_gpu_memory_info",6a,ad,9a,42),object3);
HXDLIN( 380)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_extension(HX_("NVX_gpu_memory_info",6a,ad,9a,42));
            				}
HXDLIN( 380)				extension11 = object3;
            			}
            			else {
HXLINE( 380)				extension11 = null();
            			}
HXLINE( 381)			if (::hx::IsNotNull( extension11 )) {
HXLINE( 383)				::openfl::display3D::Context3D_obj::_hx___glMemoryTotalAvailable = ( (int)(extension11->__Field(HX_("GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX",2b,93,c6,01),::hx::paccDynamic)) );
HXLINE( 384)				::openfl::display3D::Context3D_obj::_hx___glMemoryCurrentAvailable = ( (int)(extension11->__Field(HX_("GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX",b7,75,d8,0b),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 389)		if (::hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___driverInfo )) {
HXLINE( 391)			::String vendor = ( (::String)(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::getParameter(this->gl,this->gl->VENDOR)) );
HXLINE( 392)			::String version = ( (::String)(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::getParameter(this->gl,this->gl->VERSION)) );
HXLINE( 396)			::String _hx_tmp4 = ((((((HX_("OpenGL Vendor=",04,c1,2f,f5) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + ( (::String)(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::getParameter(this->gl,this->gl->RENDERER)) )) + HX_(" GLSL=",5f,30,5a,df));
HXDLIN( 396)			::openfl::display3D::Context3D_obj::_hx___driverInfo = (_hx_tmp4 + ( (::String)(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::getParameter(this->gl,this->gl->SHADING_LANGUAGE_VERSION)) ));
            		}
HXLINE( 399)		this->driverInfo = ::openfl::display3D::Context3D_obj::_hx___driverInfo;
HXLINE( 401)		this->_hx___quadIndexBufferElements = 16383;
HXLINE( 402)		this->_hx___quadIndexBufferCount = (this->_hx___quadIndexBufferElements * 6);
HXLINE( 405)		 ::Dynamic elements = this->_hx___quadIndexBufferCount;
HXDLIN( 405)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 405)		if (::hx::IsNotNull( elements )) {
HXLINE( 405)			this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,6);
            		}
            		else {
HXLINE( 405)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            		}
HXDLIN( 405)		 ::lime::utils::ArrayBufferView data = this2;
HXLINE( 407)		int index = 0;
HXLINE( 408)		int vertex = 0;
HXLINE( 410)		{
HXLINE( 410)			int _g8 = 0;
HXDLIN( 410)			int _g9 = this->_hx___quadIndexBufferElements;
HXDLIN( 410)			while((_g8 < _g9)){
HXLINE( 410)				_g8 = (_g8 + 1);
HXLINE( 412)				 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + (index * 2)),vertex);
HXLINE( 413)				 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 1) * 2)),(vertex + 1));
HXLINE( 414)				 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 2) * 2)),(vertex + 2));
HXLINE( 415)				 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 3) * 2)),(vertex + 2));
HXLINE( 416)				 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 4) * 2)),(vertex + 1));
HXLINE( 417)				 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 5) * 2)),(vertex + 3));
HXLINE( 419)				index = (index + 6);
HXLINE( 420)				vertex = (vertex + 4);
            			}
            		}
HXLINE( 423)		this->_hx___quadIndexBuffer = this->createIndexBuffer(this->_hx___quadIndexBufferCount,null());
HXLINE( 424)		this->_hx___quadIndexBuffer->uploadFromTypedArray(data,null());
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

void *Context3D_obj::_hx_vtable = 0;

Dynamic Context3D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Context3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x2d7459fd;
	}
}

void Context3D_obj::clear(::hx::Null< Float >  __o_red,::hx::Null< Float >  __o_green,::hx::Null< Float >  __o_blue,::hx::Null< Float >  __o_alpha,::hx::Null< Float >  __o_depth,::hx::Null< int >  __o_stencil,::hx::Null< int >  __o_mask){
            		Float red = __o_red.Default(0);
            		Float green = __o_green.Default(0);
            		Float blue = __o_blue.Default(0);
            		Float alpha = __o_alpha.Default(1);
            		Float depth = __o_depth.Default(1);
            		int stencil = __o_stencil.Default(0);
            		int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_462_clear)
HXLINE( 463)		this->_hx___flushGLFramebuffer();
HXLINE( 464)		this->_hx___flushGLViewport();
HXLINE( 466)		int clearMask = 0;
HXLINE( 468)		if (((mask & 1) != 0)) {
HXLINE( 470)			if (::hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE( 472)				bool _hx_tmp;
HXDLIN( 472)				if (::hx::IsInstanceEq( this->_hx___stage->context3D,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 472)					_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            				}
            				else {
HXLINE( 472)					_hx_tmp = false;
            				}
HXDLIN( 472)				if (_hx_tmp) {
HXLINE( 472)					this->_hx___stage->_hx___renderer->_hx___cleared = true;
            				}
HXLINE( 473)				this->_hx___cleared = true;
            			}
HXLINE( 476)			clearMask = (0 | this->gl->COLOR_BUFFER_BIT);
HXLINE( 478)			bool _hx_tmp1;
HXDLIN( 478)			bool _hx_tmp2;
HXDLIN( 478)			bool _hx_tmp3;
HXDLIN( 478)			if ((this->_hx___contextState->colorMaskRed == true)) {
HXLINE( 478)				_hx_tmp3 = (this->_hx___contextState->colorMaskGreen != true);
            			}
            			else {
HXLINE( 478)				_hx_tmp3 = true;
            			}
HXDLIN( 478)			if (!(_hx_tmp3)) {
HXLINE( 478)				_hx_tmp2 = (this->_hx___contextState->colorMaskBlue != true);
            			}
            			else {
HXLINE( 478)				_hx_tmp2 = true;
            			}
HXDLIN( 478)			if (!(_hx_tmp2)) {
HXLINE( 478)				_hx_tmp1 = (this->_hx___contextState->colorMaskAlpha != true);
            			}
            			else {
HXLINE( 478)				_hx_tmp1 = true;
            			}
HXDLIN( 478)			if (_hx_tmp1) {
HXLINE( 483)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_color_mask(true,true,true,true);
HXLINE( 484)				this->_hx___contextState->colorMaskRed = true;
HXLINE( 485)				this->_hx___contextState->colorMaskGreen = true;
HXLINE( 486)				this->_hx___contextState->colorMaskBlue = true;
HXLINE( 487)				this->_hx___contextState->colorMaskAlpha = true;
            			}
HXLINE( 490)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_clear_color(( (float)(red) ),( (float)(green) ),( (float)(blue) ),( (float)(alpha) ));
            		}
HXLINE( 493)		if (((mask & 2) != 0)) {
HXLINE( 495)			clearMask = (clearMask | this->gl->DEPTH_BUFFER_BIT);
HXLINE( 497)			if ((this->_hx___contextState->depthMask != true)) {
HXLINE( 499)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_mask(true);
HXLINE( 500)				this->_hx___contextState->depthMask = true;
            			}
HXLINE( 503)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_clear_depthf(( (float)(depth) ));
            		}
HXLINE( 506)		if (((mask & 4) != 0)) {
HXLINE( 508)			clearMask = (clearMask | this->gl->STENCIL_BUFFER_BIT);
HXLINE( 510)			if ((this->_hx___contextState->stencilWriteMask != 255)) {
HXLINE( 512)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_stencil_mask(255);
HXLINE( 513)				this->_hx___contextState->stencilWriteMask = 255;
            			}
HXLINE( 516)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_clear_stencil(stencil);
HXLINE( 517)			this->_hx___contextState->stencilWriteMask = 255;
            		}
HXLINE( 520)		if ((clearMask == 0)) {
HXLINE( 520)			return;
            		}
HXLINE( 522)		this->_hx___setGLScissorTest(false);
HXLINE( 523)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_clear(clearMask);
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(int width,int height,int antiAlias,::hx::Null< bool >  __o_enableDepthAndStencil,::hx::Null< bool >  __o_wantsBestResolution,::hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
            		bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
            		bool wantsBestResolution = __o_wantsBestResolution.Default(false);
            		bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_581_configureBackBuffer)
HXLINE( 583)		if (wantsBestResolution) {
HXLINE( 585)			width = ::Std_obj::_hx_int((( (Float)(width) ) * this->_hx___stage->window->_hx___scale));
HXLINE( 586)			height = ::Std_obj::_hx_int((( (Float)(height) ) * this->_hx___stage->window->_hx___scale));
            		}
HXLINE( 590)		if (::hx::IsNull( this->_hx___stage3D )) {
HXLINE( 592)			this->backBufferWidth = width;
HXLINE( 593)			this->backBufferHeight = height;
HXLINE( 595)			this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 596)			this->_hx___state->backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 597)			this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 598)			this->_hx___backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
            		}
            		else {
HXLINE( 602)			bool _hx_tmp;
HXDLIN( 602)			bool _hx_tmp1;
HXDLIN( 602)			if (::hx::IsNotNull( this->_hx___backBufferTexture )) {
HXLINE( 602)				_hx_tmp1 = (this->backBufferWidth != width);
            			}
            			else {
HXLINE( 602)				_hx_tmp1 = true;
            			}
HXDLIN( 602)			if (!(_hx_tmp1)) {
HXLINE( 602)				_hx_tmp = (this->backBufferHeight != height);
            			}
            			else {
HXLINE( 602)				_hx_tmp = true;
            			}
HXDLIN( 602)			if (_hx_tmp) {
HXLINE( 604)				if (::hx::IsNotNull( this->_hx___backBufferTexture )) {
HXLINE( 604)					this->_hx___backBufferTexture->dispose();
            				}
HXLINE( 605)				if (::hx::IsNotNull( this->_hx___frontBufferTexture )) {
HXLINE( 605)					this->_hx___frontBufferTexture->dispose();
            				}
HXLINE( 607)				this->_hx___backBufferTexture = this->createRectangleTexture(width,height,1,true);
HXLINE( 608)				this->_hx___frontBufferTexture = this->createRectangleTexture(width,height,1,true);
HXLINE( 610)				if (::hx::IsNull( this->_hx___stage3D->_hx___vertexBuffer )) {
HXLINE( 612)					this->_hx___stage3D->_hx___vertexBuffer = this->createVertexBuffer(4,5,null());
            				}
HXLINE( 619)				int scaledWidth;
HXDLIN( 619)				if (wantsBestResolution) {
HXLINE( 619)					scaledWidth = width;
            				}
            				else {
HXLINE( 619)					scaledWidth = ::Std_obj::_hx_int((( (Float)(width) ) * this->_hx___stage->window->_hx___scale));
            				}
HXLINE( 620)				int scaledHeight;
HXDLIN( 620)				if (wantsBestResolution) {
HXLINE( 620)					scaledHeight = height;
            				}
            				else {
HXLINE( 620)					scaledHeight = ::Std_obj::_hx_int((( (Float)(height) ) * this->_hx___stage->window->_hx___scale));
            				}
HXLINE( 622)				int length = null();
HXDLIN( 622)				bool fixed = null();
HXDLIN( 622)				 ::openfl::_Vector::FloatVector vertexData =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(20)->init(0,scaledWidth)->init(1,scaledHeight)->init(2,0)->init(3,1)->init(4,1)->init(5,0)->init(6,scaledHeight)->init(7,0)->init(8,0)->init(9,1)->init(10,scaledWidth)->init(11,0)->init(12,0)->init(13,1)->init(14,0)->init(15,0)->init(16,0)->init(17,0)->init(18,0)->init(19,((Float)0.0)),true);
HXLINE( 626)				this->_hx___stage3D->_hx___vertexBuffer->uploadFromVector(vertexData,0,20);
HXLINE( 628)				if (::hx::IsNull( this->_hx___stage3D->_hx___indexBuffer )) {
HXLINE( 630)					this->_hx___stage3D->_hx___indexBuffer = this->createIndexBuffer(6,null());
HXLINE( 632)					int length1 = null();
HXDLIN( 632)					bool fixed1 = null();
HXDLIN( 632)					 ::openfl::_Vector::IntVector indexData =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,::Array_obj< int >::fromData( _hx_array_data_2fa0bfa7_13,6));
HXLINE( 634)					this->_hx___stage3D->_hx___indexBuffer->uploadFromVector(indexData,0,6);
            				}
            			}
HXLINE( 638)			this->backBufferWidth = width;
HXLINE( 639)			this->backBufferHeight = height;
HXLINE( 641)			this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 642)			this->_hx___state->backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 643)			this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 644)			this->_hx___backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
HXLINE( 645)			this->_hx___state->_hx___primaryGLFramebuffer = this->_hx___backBufferTexture->_hx___getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
HXLINE( 646)			this->_hx___frontBufferTexture->_hx___getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Context3D_obj,configureBackBuffer,(void))

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(int numIndices, ::Dynamic __o_bufferUsage){
            		 ::Dynamic bufferUsage = __o_bufferUsage;
            		if (::hx::IsNull(__o_bufferUsage)) bufferUsage = 1;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_762_createIndexBuffer)
HXDLIN( 762)		return  ::openfl::display3D::IndexBuffer3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),numIndices,bufferUsage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram( ::Dynamic __o_format){
            		 ::Dynamic format = __o_format;
            		if (::hx::IsNull(__o_format)) format = 0;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_787_createProgram)
HXDLIN( 787)		return  ::openfl::display3D::Program3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),format);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_836_createRectangleTexture)
HXDLIN( 836)		return  ::openfl::display3D::textures::RectangleTexture_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),width,height,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),optimizeForRenderToTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(int numVertices,int data32PerVertex, ::Dynamic __o_bufferUsage){
            		 ::Dynamic bufferUsage = __o_bufferUsage;
            		if (::hx::IsNull(__o_bufferUsage)) bufferUsage = 1;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_957_createVertexBuffer)
HXDLIN( 957)		return  ::openfl::display3D::VertexBuffer3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),numVertices,data32PerVertex,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,::hx::Null< int >  __o_firstIndex,::hx::Null< int >  __o_numTriangles){
            		int firstIndex = __o_firstIndex.Default(0);
            		int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1193_drawTriangles)
HXLINE(1195)		if (::hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(1198)			bool _hx_tmp;
HXDLIN(1198)			if (::hx::IsInstanceEq( this->_hx___stage->context3D,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1198)				_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            			}
            			else {
HXLINE(1198)				_hx_tmp = false;
            			}
HXDLIN(1198)			if (_hx_tmp) {
HXLINE(1200)				this->_hx___stage->_hx___renderer->_hx___clear();
            			}
            			else {
HXLINE(1202)				if (!(this->_hx___cleared)) {
HXLINE(1205)					this->clear(0,0,0,0,1,0,1);
            				}
            			}
            		}
HXLINE(1209)		this->_hx___flushGL();
HXLINE(1212)		if (::hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1214)			this->_hx___state->program->_hx___flush();
            		}
HXLINE(1217)		int count;
HXDLIN(1217)		if ((numTriangles == -1)) {
HXLINE(1217)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE(1217)			count = (numTriangles * 3);
            		}
HXLINE(1219)		this->_hx___bindGLElementArrayBuffer(indexBuffer->_hx___id);
HXLINE(1220)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_draw_elements(this->gl->TRIANGLES,count,this->gl->UNSIGNED_SHORT,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((firstIndex * 2)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1242_present)
HXLINE(1243)		this->setRenderToBackBuffer();
HXLINE(1245)		bool _hx_tmp;
HXDLIN(1245)		if (::hx::IsNotNull( this->_hx___stage3D )) {
HXLINE(1245)			_hx_tmp = ::hx::IsNotNull( this->_hx___backBufferTexture );
            		}
            		else {
HXLINE(1245)			_hx_tmp = false;
            		}
HXDLIN(1245)		if (_hx_tmp) {
HXLINE(1247)			if (!(this->_hx___cleared)) {
HXLINE(1251)				this->clear(0,0,0,0,1,0,1);
            			}
HXLINE(1254)			 ::openfl::display3D::textures::RectangleTexture cacheBuffer = this->_hx___backBufferTexture;
HXLINE(1255)			this->_hx___backBufferTexture = this->_hx___frontBufferTexture;
HXLINE(1256)			this->_hx___frontBufferTexture = cacheBuffer;
HXLINE(1258)			this->_hx___state->_hx___primaryGLFramebuffer = this->_hx___backBufferTexture->_hx___getGLFramebuffer(this->_hx___state->backBufferEnableDepthAndStencil,this->_hx___backBufferAntiAlias,0);
HXLINE(1259)			this->_hx___cleared = false;
            		}
HXLINE(1262)		this->_hx___present = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::setBlendFactors( ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1300_setBlendFactors)
HXDLIN(1300)		this->setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setBlendFactorsSeparate( ::Dynamic sourceRGBFactor, ::Dynamic destinationRGBFactor, ::Dynamic sourceAlphaFactor, ::Dynamic destinationAlphaFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1305_setBlendFactorsSeparate)
HXLINE(1306)		this->_hx___state->blendSourceRGBFactor = sourceRGBFactor;
HXLINE(1307)		this->_hx___state->blendDestinationRGBFactor = destinationRGBFactor;
HXLINE(1308)		this->_hx___state->blendSourceAlphaFactor = sourceAlphaFactor;
HXLINE(1309)		this->_hx___state->blendDestinationAlphaFactor = destinationAlphaFactor;
HXLINE(1312)		this->_hx___setGLBlendEquation(this->gl->FUNC_ADD);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setBlendFactorsSeparate,(void))

void Context3D_obj::setColorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1330_setColorMask)
HXLINE(1331)		this->_hx___state->colorMaskRed = red;
HXLINE(1332)		this->_hx___state->colorMaskGreen = green;
HXLINE(1333)		this->_hx___state->colorMaskBlue = blue;
HXLINE(1334)		this->_hx___state->colorMaskAlpha = alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling( ::Dynamic triangleFaceToCull){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1352_setCulling)
HXDLIN(1352)		this->_hx___state->culling = triangleFaceToCull;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(bool depthMask, ::Dynamic passCompareMode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1376_setDepthTest)
HXLINE(1377)		this->_hx___state->depthMask = depthMask;
HXLINE(1378)		this->_hx___state->depthCompareMode = passCompareMode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1388_setProgram)
HXLINE(1389)		this->_hx___state->program = program;
HXLINE(1390)		this->_hx___state->shader = null();
HXLINE(1392)		if (::hx::IsNotNull( program )) {
HXLINE(1394)			int _g = 0;
HXDLIN(1394)			int _g1 = program->_hx___samplerStates->length;
HXDLIN(1394)			while((_g < _g1)){
HXLINE(1394)				_g = (_g + 1);
HXDLIN(1394)				int i = (_g - 1);
HXLINE(1396)				if (::hx::IsNull( this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::display::_internal::SamplerState >() )) {
HXLINE(1398)					this->_hx___state->samplerStates[i] = program->_hx___samplerStates->__get(i).StaticCast<  ::openfl::display::_internal::SamplerState >()->clone();
            				}
            				else {
HXLINE(1402)					this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::display::_internal::SamplerState >()->copyFrom(program->_hx___samplerStates->__get(i).StaticCast<  ::openfl::display::_internal::SamplerState >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,::hx::Null< bool >  __o_transposedMatrix){
            		bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1488_setProgramConstantsFromMatrix)
HXDLIN(1488)		bool _hx_tmp;
HXDLIN(1488)		if (::hx::IsNotNull( this->_hx___state->program )) {
HXDLIN(1488)			_hx_tmp = ::hx::IsEq( this->_hx___state->program->_hx___format,1 );
            		}
            		else {
HXDLIN(1488)			_hx_tmp = false;
            		}
HXDLIN(1488)		if (_hx_tmp) {
HXLINE(1490)			this->_hx___flushGLProgram();
HXLINE(1493)			 ::lime::utils::ArrayBufferView data =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,16,8);
HXLINE(1494)			{
HXLINE(1496)				{
HXLINE(1496)					Float val = matrix->rawData->get(0);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,data->byteOffset,val);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val1 = matrix->rawData->get(1);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 4),val1);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val2 = matrix->rawData->get(2);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 8),val2);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val3 = matrix->rawData->get(3);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 12),val3);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val4 = matrix->rawData->get(4);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 16),val4);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val5 = matrix->rawData->get(5);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 20),val5);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val6 = matrix->rawData->get(6);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 24),val6);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val7 = matrix->rawData->get(7);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 28),val7);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val8 = matrix->rawData->get(8);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 32),val8);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val9 = matrix->rawData->get(9);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 36),val9);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val10 = matrix->rawData->get(10);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 40),val10);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val11 = matrix->rawData->get(11);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 44),val11);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val12 = matrix->rawData->get(12);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 48),val12);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val13 = matrix->rawData->get(13);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 52),val13);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val14 = matrix->rawData->get(14);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 56),val14);
            				}
HXDLIN(1496)				{
HXLINE(1496)					Float val15 = matrix->rawData->get(15);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 60),val15);
            				}
            			}
HXLINE(1499)			::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(this->gl,firstRegister,transposedMatrix,data);
            		}
            		else {
HXLINE(1503)			bool isVertex = ::hx::IsEq( programType,1 );
HXLINE(1504)			 ::lime::utils::ArrayBufferView dest;
HXDLIN(1504)			if (isVertex) {
HXLINE(1504)				dest = this->_hx___vertexConstants;
            			}
            			else {
HXLINE(1504)				dest = this->_hx___fragmentConstants;
            			}
HXLINE(1505)			 ::openfl::_Vector::FloatVector source = matrix->rawData;
HXLINE(1506)			int i = (firstRegister * 4);
HXLINE(1508)			if (transposedMatrix) {
HXLINE(1510)				{
HXLINE(1510)					i = (i + 1);
HXDLIN(1510)					Float val16 = source->get(0);
HXDLIN(1510)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val16);
            				}
HXLINE(1511)				{
HXLINE(1511)					i = (i + 1);
HXDLIN(1511)					Float val17 = source->get(4);
HXDLIN(1511)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val17);
            				}
HXLINE(1512)				{
HXLINE(1512)					i = (i + 1);
HXDLIN(1512)					Float val18 = source->get(8);
HXDLIN(1512)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val18);
            				}
HXLINE(1513)				{
HXLINE(1513)					i = (i + 1);
HXDLIN(1513)					Float val19 = source->get(12);
HXDLIN(1513)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val19);
            				}
HXLINE(1515)				{
HXLINE(1515)					i = (i + 1);
HXDLIN(1515)					Float val20 = source->get(1);
HXDLIN(1515)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val20);
            				}
HXLINE(1516)				{
HXLINE(1516)					i = (i + 1);
HXDLIN(1516)					Float val21 = source->get(5);
HXDLIN(1516)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val21);
            				}
HXLINE(1517)				{
HXLINE(1517)					i = (i + 1);
HXDLIN(1517)					Float val22 = source->get(9);
HXDLIN(1517)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val22);
            				}
HXLINE(1518)				{
HXLINE(1518)					i = (i + 1);
HXDLIN(1518)					Float val23 = source->get(13);
HXDLIN(1518)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val23);
            				}
HXLINE(1520)				{
HXLINE(1520)					i = (i + 1);
HXDLIN(1520)					Float val24 = source->get(2);
HXDLIN(1520)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val24);
            				}
HXLINE(1521)				{
HXLINE(1521)					i = (i + 1);
HXDLIN(1521)					Float val25 = source->get(6);
HXDLIN(1521)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val25);
            				}
HXLINE(1522)				{
HXLINE(1522)					i = (i + 1);
HXDLIN(1522)					Float val26 = source->get(10);
HXDLIN(1522)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val26);
            				}
HXLINE(1523)				{
HXLINE(1523)					i = (i + 1);
HXDLIN(1523)					Float val27 = source->get(14);
HXDLIN(1523)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val27);
            				}
HXLINE(1525)				{
HXLINE(1525)					i = (i + 1);
HXDLIN(1525)					Float val28 = source->get(3);
HXDLIN(1525)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val28);
            				}
HXLINE(1526)				{
HXLINE(1526)					i = (i + 1);
HXDLIN(1526)					Float val29 = source->get(7);
HXDLIN(1526)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val29);
            				}
HXLINE(1527)				{
HXLINE(1527)					i = (i + 1);
HXDLIN(1527)					Float val30 = source->get(11);
HXDLIN(1527)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val30);
            				}
HXLINE(1528)				{
HXLINE(1528)					i = (i + 1);
HXDLIN(1528)					Float val31 = source->get(15);
HXDLIN(1528)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val31);
            				}
            			}
            			else {
HXLINE(1532)				{
HXLINE(1532)					i = (i + 1);
HXDLIN(1532)					Float val32 = source->get(0);
HXDLIN(1532)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val32);
            				}
HXLINE(1533)				{
HXLINE(1533)					i = (i + 1);
HXDLIN(1533)					Float val33 = source->get(1);
HXDLIN(1533)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val33);
            				}
HXLINE(1534)				{
HXLINE(1534)					i = (i + 1);
HXDLIN(1534)					Float val34 = source->get(2);
HXDLIN(1534)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val34);
            				}
HXLINE(1535)				{
HXLINE(1535)					i = (i + 1);
HXDLIN(1535)					Float val35 = source->get(3);
HXDLIN(1535)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val35);
            				}
HXLINE(1537)				{
HXLINE(1537)					i = (i + 1);
HXDLIN(1537)					Float val36 = source->get(4);
HXDLIN(1537)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val36);
            				}
HXLINE(1538)				{
HXLINE(1538)					i = (i + 1);
HXDLIN(1538)					Float val37 = source->get(5);
HXDLIN(1538)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val37);
            				}
HXLINE(1539)				{
HXLINE(1539)					i = (i + 1);
HXDLIN(1539)					Float val38 = source->get(6);
HXDLIN(1539)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val38);
            				}
HXLINE(1540)				{
HXLINE(1540)					i = (i + 1);
HXDLIN(1540)					Float val39 = source->get(7);
HXDLIN(1540)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val39);
            				}
HXLINE(1542)				{
HXLINE(1542)					i = (i + 1);
HXDLIN(1542)					Float val40 = source->get(8);
HXDLIN(1542)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val40);
            				}
HXLINE(1543)				{
HXLINE(1543)					i = (i + 1);
HXDLIN(1543)					Float val41 = source->get(9);
HXDLIN(1543)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val41);
            				}
HXLINE(1544)				{
HXLINE(1544)					i = (i + 1);
HXDLIN(1544)					Float val42 = source->get(10);
HXDLIN(1544)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val42);
            				}
HXLINE(1545)				{
HXLINE(1545)					i = (i + 1);
HXDLIN(1545)					Float val43 = source->get(11);
HXDLIN(1545)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val43);
            				}
HXLINE(1547)				{
HXLINE(1547)					i = (i + 1);
HXDLIN(1547)					Float val44 = source->get(12);
HXDLIN(1547)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val44);
            				}
HXLINE(1548)				{
HXLINE(1548)					i = (i + 1);
HXDLIN(1548)					Float val45 = source->get(13);
HXDLIN(1548)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val45);
            				}
HXLINE(1549)				{
HXLINE(1549)					i = (i + 1);
HXDLIN(1549)					Float val46 = source->get(14);
HXDLIN(1549)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val46);
            				}
HXLINE(1550)				{
HXLINE(1550)					i = (i + 1);
HXDLIN(1550)					Float val47 = source->get(15);
HXDLIN(1550)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val47);
            				}
            			}
HXLINE(1553)			if (::hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1555)				this->_hx___state->program->_hx___markDirty(isVertex,firstRegister,4);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1626_setRenderToBackBuffer)
HXDLIN(1626)		this->_hx___state->renderToTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,::hx::Null< bool >  __o_enableDepthAndStencil,::hx::Null< int >  __o_antiAlias,::hx::Null< int >  __o_surfaceSelector){
            		bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
            		int antiAlias = __o_antiAlias.Default(0);
            		int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1666_setRenderToTexture)
HXLINE(1667)		this->_hx___state->renderToTexture = texture;
HXLINE(1668)		this->_hx___state->renderToTextureDepthStencil = enableDepthAndStencil;
HXLINE(1669)		this->_hx___state->renderToTextureAntiAlias = antiAlias;
HXLINE(1670)		this->_hx___state->renderToTextureSurfaceSelector = surfaceSelector;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1694_setSamplerStateAt)
HXLINE(1701)		if (::hx::IsNull( this->_hx___state->samplerStates->__get(sampler).StaticCast<  ::openfl::display::_internal::SamplerState >() )) {
HXLINE(1703)			this->_hx___state->samplerStates[sampler] =  ::openfl::display::_internal::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1706)		 ::openfl::display::_internal::SamplerState state = this->_hx___state->samplerStates->__get(sampler).StaticCast<  ::openfl::display::_internal::SamplerState >();
HXLINE(1707)		state->wrap = wrap;
HXLINE(1708)		state->filter = filter;
HXLINE(1709)		state->mipfilter = mipfilter;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1726_setScissorRectangle)
HXDLIN(1726)		if (::hx::IsNotNull( rectangle )) {
HXLINE(1728)			this->_hx___state->scissorEnabled = true;
HXLINE(1729)			this->_hx___state->scissorRectangle->copyFrom(rectangle);
            		}
            		else {
HXLINE(1733)			this->_hx___state->scissorEnabled = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
            		 ::Dynamic triangleFace = __o_triangleFace;
            		if (::hx::IsNull(__o_triangleFace)) triangleFace = 2;
            		 ::Dynamic compareMode = __o_compareMode;
            		if (::hx::IsNull(__o_compareMode)) compareMode = 0;
            		 ::Dynamic actionOnBothPass = __o_actionOnBothPass;
            		if (::hx::IsNull(__o_actionOnBothPass)) actionOnBothPass = 5;
            		 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail;
            		if (::hx::IsNull(__o_actionOnDepthFail)) actionOnDepthFail = 5;
            		 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail;
            		if (::hx::IsNull(__o_actionOnDepthPassStencilFail)) actionOnDepthPassStencilFail = 5;
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1784_setStencilActions)
HXLINE(1785)		this->_hx___state->stencilTriangleFace = triangleFace;
HXLINE(1786)		this->_hx___state->stencilCompareMode = compareMode;
HXLINE(1787)		this->_hx___state->stencilPass = actionOnBothPass;
HXLINE(1788)		this->_hx___state->stencilDepthFail = actionOnDepthFail;
HXLINE(1789)		this->_hx___state->stencilFail = actionOnDepthPassStencilFail;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(int referenceValue,::hx::Null< int >  __o_readMask,::hx::Null< int >  __o_writeMask){
            		int readMask = __o_readMask.Default(255);
            		int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1807_setStencilReferenceValue)
HXLINE(1808)		this->_hx___state->stencilReferenceValue = referenceValue;
HXLINE(1809)		this->_hx___state->stencilReadMask = readMask;
HXLINE(1810)		this->_hx___state->stencilWriteMask = writeMask;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1839_setTextureAt)
HXDLIN(1839)		this->_hx___state->textures[sampler] = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,::hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
            		int bufferOffset = __o_bufferOffset.Default(0);
            		 ::Dynamic format = __o_format;
            		if (::hx::IsNull(__o_format)) format = 4;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1893_setVertexBufferAt)
HXLINE(1894)		if ((index < 0)) {
HXLINE(1894)			return;
            		}
HXLINE(1896)		if (::hx::IsNull( buffer )) {
HXLINE(1898)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable_vertex_attrib_array(index);
HXLINE(1899)			this->_hx___bindGLArrayBuffer(null());
HXLINE(1900)			return;
            		}
HXLINE(1903)		this->_hx___bindGLArrayBuffer(buffer->_hx___id);
HXLINE(1904)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(index);
HXLINE(1906)		int byteOffset = (bufferOffset * 4);
HXLINE(1908)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==0) ){
HXLINE(1911)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(index,4,this->gl->UNSIGNED_BYTE,true,buffer->_hx___stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1911)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(1923)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(index,1,this->gl->FLOAT,false,buffer->_hx___stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1923)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(1920)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(index,2,this->gl->FLOAT,false,buffer->_hx___stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1920)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(1917)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(index,3,this->gl->FLOAT,false,buffer->_hx___stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1917)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(1914)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(index,4,this->gl->FLOAT,false,buffer->_hx___stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1914)			goto _hx_goto_35;
            		}
            		/* default */{
HXLINE(1926)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_35:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

void Context3D_obj::_hx___bindGLArrayBuffer( ::lime::graphics::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1932___bindGLArrayBuffer)
HXDLIN(1932)		if (::hx::IsInstanceNotEq( this->_hx___contextState->_hx___currentGLArrayBuffer,buffer )) {
HXLINE(1934)			{
HXLINE(1934)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1934)				int target = this->gl->ARRAY_BUFFER;
HXDLIN(1934)				{
HXLINE(1934)					if ((target == this1->ARRAY_BUFFER)) {
HXLINE(1934)						this1->_hx___arrayBufferBinding = buffer;
            					}
HXDLIN(1934)					if ((target == this1->ELEMENT_ARRAY_BUFFER)) {
HXLINE(1934)						this1->_hx___elementBufferBinding = buffer;
            					}
HXDLIN(1934)					int _hx_tmp;
HXDLIN(1934)					if (::hx::IsNull( buffer )) {
HXLINE(1934)						_hx_tmp = 0;
            					}
            					else {
HXLINE(1934)						_hx_tmp = buffer->id;
            					}
HXDLIN(1934)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(target,_hx_tmp);
            				}
            			}
HXLINE(1935)			this->_hx___contextState->_hx___currentGLArrayBuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLArrayBuffer,(void))

void Context3D_obj::_hx___bindGLElementArrayBuffer( ::lime::graphics::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1941___bindGLElementArrayBuffer)
HXDLIN(1941)		if (::hx::IsInstanceNotEq( this->_hx___contextState->_hx___currentGLElementArrayBuffer,buffer )) {
HXLINE(1943)			{
HXLINE(1943)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1943)				int target = this->gl->ELEMENT_ARRAY_BUFFER;
HXDLIN(1943)				{
HXLINE(1943)					if ((target == this1->ARRAY_BUFFER)) {
HXLINE(1943)						this1->_hx___arrayBufferBinding = buffer;
            					}
HXDLIN(1943)					if ((target == this1->ELEMENT_ARRAY_BUFFER)) {
HXLINE(1943)						this1->_hx___elementBufferBinding = buffer;
            					}
HXDLIN(1943)					int _hx_tmp;
HXDLIN(1943)					if (::hx::IsNull( buffer )) {
HXLINE(1943)						_hx_tmp = 0;
            					}
            					else {
HXLINE(1943)						_hx_tmp = buffer->id;
            					}
HXDLIN(1943)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(target,_hx_tmp);
            				}
            			}
HXLINE(1944)			this->_hx___contextState->_hx___currentGLElementArrayBuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLElementArrayBuffer,(void))

void Context3D_obj::_hx___bindGLFramebuffer( ::lime::graphics::opengl::GLObject framebuffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1950___bindGLFramebuffer)
HXDLIN(1950)		if (::hx::IsInstanceNotEq( this->_hx___contextState->_hx___currentGLFramebuffer,framebuffer )) {
HXLINE(1952)			{
HXLINE(1952)				this->gl->_hx___framebufferBinding = framebuffer;
HXDLIN(1952)				int _hx_tmp;
HXDLIN(1952)				if (::hx::IsNull( framebuffer )) {
HXLINE(1952)					_hx_tmp = 0;
            				}
            				else {
HXLINE(1952)					_hx_tmp = framebuffer->id;
            				}
HXDLIN(1952)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_framebuffer(this->gl->FRAMEBUFFER,_hx_tmp);
            			}
HXLINE(1953)			this->_hx___contextState->_hx___currentGLFramebuffer = framebuffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLFramebuffer,(void))

void Context3D_obj::_hx___bindGLTexture2D( ::lime::graphics::opengl::GLObject texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1958___bindGLTexture2D)
HXLINE(1963)		{
HXLINE(1963)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1963)			int target = this->gl->TEXTURE_2D;
HXDLIN(1963)			{
HXLINE(1963)				if ((target == this1->TEXTURE_2D)) {
HXLINE(1963)					this1->_hx___texture2DBinding = texture;
            				}
HXDLIN(1963)				if ((target == this1->TEXTURE_CUBE_MAP)) {
HXLINE(1963)					this1->_hx___textureCubeMapBinding = texture;
            				}
HXDLIN(1963)				int _hx_tmp;
HXDLIN(1963)				if (::hx::IsNull( texture )) {
HXLINE(1963)					_hx_tmp = 0;
            				}
            				else {
HXLINE(1963)					_hx_tmp = texture->id;
            				}
HXDLIN(1963)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_texture(target,_hx_tmp);
            			}
            		}
HXLINE(1964)		this->_hx___contextState->_hx___currentGLTexture2D = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLTexture2D,(void))

void Context3D_obj::_hx___bindGLTextureCubeMap( ::lime::graphics::opengl::GLObject texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1970___bindGLTextureCubeMap)
HXLINE(1975)		{
HXLINE(1975)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1975)			int target = this->gl->TEXTURE_CUBE_MAP;
HXDLIN(1975)			{
HXLINE(1975)				if ((target == this1->TEXTURE_2D)) {
HXLINE(1975)					this1->_hx___texture2DBinding = texture;
            				}
HXDLIN(1975)				if ((target == this1->TEXTURE_CUBE_MAP)) {
HXLINE(1975)					this1->_hx___textureCubeMapBinding = texture;
            				}
HXDLIN(1975)				int _hx_tmp;
HXDLIN(1975)				if (::hx::IsNull( texture )) {
HXLINE(1975)					_hx_tmp = 0;
            				}
            				else {
HXLINE(1975)					_hx_tmp = texture->id;
            				}
HXDLIN(1975)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_texture(target,_hx_tmp);
            			}
            		}
HXLINE(1976)		this->_hx___contextState->_hx___currentGLTextureCubeMap = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLTextureCubeMap,(void))

void Context3D_obj::_hx___dispose(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1982___dispose)
HXLINE(1983)		this->driverInfo = (this->driverInfo + HX_(" (Disposed)",7c,80,28,51));
HXLINE(1985)		if (::hx::IsNotNull( this->_hx___stage3D )) {
HXLINE(1987)			this->_hx___stage3D->_hx___indexBuffer = null();
HXLINE(1988)			this->_hx___stage3D->_hx___vertexBuffer = null();
HXLINE(1989)			this->_hx___stage3D->context3D = null();
HXLINE(1990)			this->_hx___stage3D = null();
            		}
HXLINE(1993)		this->_hx___backBufferTexture = null();
HXLINE(1994)		this->_hx___context = null();
HXLINE(1995)		this->_hx___renderStage3DProgram = null();
HXLINE(1996)		this->_hx___fragmentConstants = null();
HXLINE(1997)		this->_hx___frontBufferTexture = null();
HXLINE(1998)		this->_hx___positionScale = null();
HXLINE(1999)		this->_hx___present = false;
HXLINE(2000)		this->_hx___quadIndexBuffer = null();
HXLINE(2001)		this->_hx___stage = null();
HXLINE(2002)		this->_hx___vertexConstants = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___dispose,(void))

void Context3D_obj::_hx___drawTriangles(::hx::Null< int >  __o_firstIndex,int count){
            		int firstIndex = __o_firstIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2006___drawTriangles)
HXLINE(2008)		if (::hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(2011)			bool _hx_tmp;
HXDLIN(2011)			if (::hx::IsInstanceEq( this->_hx___stage->context3D,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2011)				_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            			}
            			else {
HXLINE(2011)				_hx_tmp = false;
            			}
HXDLIN(2011)			if (_hx_tmp) {
HXLINE(2013)				this->_hx___stage->_hx___renderer->_hx___clear();
            			}
            			else {
HXLINE(2015)				if (!(this->_hx___cleared)) {
HXLINE(2018)					this->clear(0,0,0,0,1,0,1);
            				}
            			}
            		}
HXLINE(2022)		this->_hx___flushGL();
HXLINE(2025)		if (::hx::IsNotNull( this->_hx___state->program )) {
HXLINE(2027)			this->_hx___state->program->_hx___flush();
            		}
HXLINE(2030)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_draw_arrays(this->gl->TRIANGLES,firstIndex,count);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___drawTriangles,(void))

void Context3D_obj::_hx___flushGL(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2034___flushGL)
HXLINE(2035)		this->_hx___flushGLProgram();
HXLINE(2036)		this->_hx___flushGLFramebuffer();
HXLINE(2037)		this->_hx___flushGLViewport();
HXLINE(2039)		this->_hx___flushGLBlend();
HXLINE(2040)		bool _hx_tmp;
HXDLIN(2040)		bool _hx_tmp1;
HXDLIN(2040)		bool _hx_tmp2;
HXDLIN(2040)		if ((this->_hx___contextState->colorMaskRed == this->_hx___state->colorMaskRed)) {
HXLINE(2040)			_hx_tmp2 = (this->_hx___contextState->colorMaskGreen != this->_hx___state->colorMaskGreen);
            		}
            		else {
HXLINE(2040)			_hx_tmp2 = true;
            		}
HXDLIN(2040)		if (!(_hx_tmp2)) {
HXLINE(2040)			_hx_tmp1 = (this->_hx___contextState->colorMaskBlue != this->_hx___state->colorMaskBlue);
            		}
            		else {
HXLINE(2040)			_hx_tmp1 = true;
            		}
HXDLIN(2040)		if (!(_hx_tmp1)) {
HXLINE(2040)			_hx_tmp = (this->_hx___contextState->colorMaskAlpha != this->_hx___state->colorMaskAlpha);
            		}
            		else {
HXLINE(2040)			_hx_tmp = true;
            		}
HXDLIN(2040)		if (_hx_tmp) {
HXLINE(2040)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_color_mask(this->_hx___state->colorMaskRed,this->_hx___state->colorMaskGreen,this->_hx___state->colorMaskBlue,this->_hx___state->colorMaskAlpha);
HXDLIN(2040)			this->_hx___contextState->colorMaskRed = this->_hx___state->colorMaskRed;
HXDLIN(2040)			this->_hx___contextState->colorMaskGreen = this->_hx___state->colorMaskGreen;
HXDLIN(2040)			this->_hx___contextState->colorMaskBlue = this->_hx___state->colorMaskBlue;
HXDLIN(2040)			this->_hx___contextState->colorMaskAlpha = this->_hx___state->colorMaskAlpha;
            		}
HXLINE(2041)		this->_hx___flushGLCulling();
HXLINE(2042)		this->_hx___flushGLDepth();
HXLINE(2043)		this->_hx___flushGLScissor();
HXLINE(2044)		this->_hx___flushGLStencil();
HXLINE(2045)		this->_hx___flushGLTextures();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGL,(void))

void Context3D_obj::_hx___flushGLBlend(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2050___flushGLBlend)
HXDLIN(2050)		bool _hx_tmp;
HXDLIN(2050)		bool _hx_tmp1;
HXDLIN(2050)		bool _hx_tmp2;
HXDLIN(2050)		if (::hx::IsEq( this->_hx___contextState->blendDestinationRGBFactor,this->_hx___state->blendDestinationRGBFactor )) {
HXDLIN(2050)			_hx_tmp2 = ::hx::IsNotEq( this->_hx___contextState->blendSourceRGBFactor,this->_hx___state->blendSourceRGBFactor );
            		}
            		else {
HXDLIN(2050)			_hx_tmp2 = true;
            		}
HXDLIN(2050)		if (!(_hx_tmp2)) {
HXDLIN(2050)			_hx_tmp1 = ::hx::IsNotEq( this->_hx___contextState->blendDestinationAlphaFactor,this->_hx___state->blendDestinationAlphaFactor );
            		}
            		else {
HXDLIN(2050)			_hx_tmp1 = true;
            		}
HXDLIN(2050)		if (!(_hx_tmp1)) {
HXDLIN(2050)			_hx_tmp = ::hx::IsNotEq( this->_hx___contextState->blendSourceAlphaFactor,this->_hx___state->blendSourceAlphaFactor );
            		}
            		else {
HXDLIN(2050)			_hx_tmp = true;
            		}
HXDLIN(2050)		if (_hx_tmp) {
HXLINE(2055)			this->_hx___setGLBlend(true);
HXLINE(2057)			bool _hx_tmp3;
HXDLIN(2057)			if (::hx::IsEq( this->_hx___state->blendDestinationRGBFactor,this->_hx___state->blendDestinationAlphaFactor )) {
HXLINE(2057)				_hx_tmp3 = ::hx::IsEq( this->_hx___state->blendSourceRGBFactor,this->_hx___state->blendSourceAlphaFactor );
            			}
            			else {
HXLINE(2057)				_hx_tmp3 = false;
            			}
HXDLIN(2057)			if (_hx_tmp3) {
HXLINE(2060)				int sfactor = this->_hx___getGLBlend(this->_hx___state->blendSourceRGBFactor);
HXDLIN(2060)				int dfactor = this->_hx___getGLBlend(this->_hx___state->blendDestinationRGBFactor);
HXDLIN(2060)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_blend_func(sfactor,dfactor);
            			}
            			else {
HXLINE(2064)				int srcRGB = this->_hx___getGLBlend(this->_hx___state->blendSourceRGBFactor);
HXDLIN(2064)				int dstRGB = this->_hx___getGLBlend(this->_hx___state->blendDestinationRGBFactor);
HXDLIN(2064)				int srcAlpha = this->_hx___getGLBlend(this->_hx___state->blendSourceAlphaFactor);
HXDLIN(2064)				int dstAlpha = this->_hx___getGLBlend(this->_hx___state->blendDestinationAlphaFactor);
HXDLIN(2064)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_blend_func_separate(srcRGB,dstRGB,srcAlpha,dstAlpha);
            			}
HXLINE(2068)			this->_hx___contextState->blendDestinationRGBFactor = this->_hx___state->blendDestinationRGBFactor;
HXLINE(2069)			this->_hx___contextState->blendSourceRGBFactor = this->_hx___state->blendSourceRGBFactor;
HXLINE(2070)			this->_hx___contextState->blendDestinationAlphaFactor = this->_hx___state->blendDestinationAlphaFactor;
HXLINE(2071)			this->_hx___contextState->blendSourceAlphaFactor = this->_hx___state->blendSourceAlphaFactor;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLBlend,(void))

void Context3D_obj::_hx___flushGLCulling(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2092___flushGLCulling)
HXDLIN(2092)		if (::hx::IsNotEq( this->_hx___contextState->culling,this->_hx___state->culling )) {
HXLINE(2094)			if (::hx::IsEq( this->_hx___state->culling,3 )) {
HXLINE(2096)				this->_hx___setGLCullFace(false);
            			}
            			else {
HXLINE(2100)				this->_hx___setGLCullFace(true);
HXLINE(2102)				 ::Dynamic _hx_switch_0 = this->_hx___state->culling;
            				if (  (_hx_switch_0==0) ){
HXLINE(2106)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_cull_face(this->gl->BACK);
HXDLIN(2106)					goto _hx_goto_46;
            				}
            				if (  (_hx_switch_0==1) ){
HXLINE(2108)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_cull_face(this->gl->FRONT);
HXDLIN(2108)					goto _hx_goto_46;
            				}
            				if (  (_hx_switch_0==2) ){
HXLINE(2110)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_cull_face(this->gl->FRONT_AND_BACK);
HXDLIN(2110)					goto _hx_goto_46;
            				}
            				if (  (_hx_switch_0==3) ){
HXLINE(2104)					goto _hx_goto_46;
            				}
            				/* default */{
HXLINE(2112)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            				}
            				_hx_goto_46:;
            			}
HXLINE(2116)			this->_hx___contextState->culling = this->_hx___state->culling;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLCulling,(void))

void Context3D_obj::_hx___flushGLDepth(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2121___flushGLDepth)
HXLINE(2122)		bool depthMask;
HXDLIN(2122)		if (this->_hx___state->depthMask) {
HXLINE(2123)			if (::hx::IsNotNull( this->_hx___state->renderToTexture )) {
HXLINE(2122)				depthMask = this->_hx___state->renderToTextureDepthStencil;
            			}
            			else {
HXLINE(2122)				depthMask = this->_hx___state->backBufferEnableDepthAndStencil;
            			}
            		}
            		else {
HXLINE(2122)			depthMask = false;
            		}
HXLINE(2125)		if ((this->_hx___contextState->depthMask != depthMask)) {
HXLINE(2127)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_mask(depthMask);
HXLINE(2128)			this->_hx___contextState->depthMask = depthMask;
            		}
HXLINE(2131)		if (::hx::IsNotEq( this->_hx___contextState->depthCompareMode,this->_hx___state->depthCompareMode )) {
HXLINE(2133)			 ::Dynamic _hx_switch_0 = this->_hx___state->depthCompareMode;
            			if (  (_hx_switch_0==0) ){
HXLINE(2136)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->ALWAYS);
HXDLIN(2136)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==1) ){
HXLINE(2138)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->EQUAL);
HXDLIN(2138)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==2) ){
HXLINE(2140)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->GREATER);
HXDLIN(2140)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==3) ){
HXLINE(2142)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->GEQUAL);
HXDLIN(2142)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==4) ){
HXLINE(2144)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->LESS);
HXDLIN(2144)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==5) ){
HXLINE(2146)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->LEQUAL);
HXDLIN(2146)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==6) ){
HXLINE(2148)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->NEVER);
HXDLIN(2148)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==7) ){
HXLINE(2150)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_depth_func(this->gl->NOTEQUAL);
HXDLIN(2150)				goto _hx_goto_48;
            			}
            			/* default */{
HXLINE(2152)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_48:;
HXLINE(2155)			this->_hx___contextState->depthCompareMode = this->_hx___state->depthCompareMode;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLDepth,(void))

void Context3D_obj::_hx___flushGLFramebuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2161___flushGLFramebuffer)
HXDLIN(2161)		if (::hx::IsNotNull( this->_hx___state->renderToTexture )) {
HXLINE(2163)			bool _hx_tmp;
HXDLIN(2163)			if (::hx::IsInstanceEq( this->_hx___contextState->renderToTexture,this->_hx___state->renderToTexture )) {
HXLINE(2163)				_hx_tmp = (this->_hx___contextState->renderToTextureSurfaceSelector != this->_hx___state->renderToTextureSurfaceSelector);
            			}
            			else {
HXLINE(2163)				_hx_tmp = true;
            			}
HXDLIN(2163)			if (_hx_tmp) {
HXLINE(2168)				this->_hx___bindGLFramebuffer(this->_hx___state->renderToTexture->_hx___getGLFramebuffer(this->_hx___state->renderToTextureDepthStencil,this->_hx___state->renderToTextureAntiAlias,this->_hx___state->renderToTextureSurfaceSelector));
HXLINE(2170)				this->_hx___contextState->renderToTexture = this->_hx___state->renderToTexture;
HXLINE(2171)				this->_hx___contextState->renderToTextureAntiAlias = this->_hx___state->renderToTextureAntiAlias;
HXLINE(2172)				this->_hx___contextState->renderToTextureDepthStencil = this->_hx___state->renderToTextureDepthStencil;
HXLINE(2173)				this->_hx___contextState->renderToTextureSurfaceSelector = this->_hx___state->renderToTextureSurfaceSelector;
            			}
HXLINE(2176)			this->_hx___setGLDepthTest(this->_hx___state->renderToTextureDepthStencil);
HXLINE(2177)			this->_hx___setGLStencilTest(this->_hx___state->renderToTextureDepthStencil);
HXLINE(2179)			this->_hx___setGLFrontFace(true);
            		}
            		else {
HXLINE(2183)			bool _hx_tmp1;
HXDLIN(2183)			bool _hx_tmp2;
HXDLIN(2183)			if (::hx::IsNull( this->_hx___stage )) {
HXLINE(2183)				_hx_tmp2 = (this->backBufferWidth == 0);
            			}
            			else {
HXLINE(2183)				_hx_tmp2 = false;
            			}
HXDLIN(2183)			if (_hx_tmp2) {
HXLINE(2183)				_hx_tmp1 = (this->backBufferHeight == 0);
            			}
            			else {
HXLINE(2183)				_hx_tmp1 = false;
            			}
HXDLIN(2183)			if (_hx_tmp1) {
HXLINE(2185)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Context3D backbuffer has not been configured",c6,54,6f,c8),null()));
            			}
HXLINE(2188)			bool _hx_tmp3;
HXDLIN(2188)			bool _hx_tmp4;
HXDLIN(2188)			if (::hx::IsNull( this->_hx___contextState->renderToTexture )) {
HXLINE(2188)				_hx_tmp4 = ::hx::IsInstanceNotEq( this->_hx___contextState->_hx___currentGLFramebuffer,this->_hx___state->_hx___primaryGLFramebuffer );
            			}
            			else {
HXLINE(2188)				_hx_tmp4 = true;
            			}
HXDLIN(2188)			if (!(_hx_tmp4)) {
HXLINE(2188)				_hx_tmp3 = (this->_hx___contextState->backBufferEnableDepthAndStencil != this->_hx___state->backBufferEnableDepthAndStencil);
            			}
            			else {
HXLINE(2188)				_hx_tmp3 = true;
            			}
HXDLIN(2188)			if (_hx_tmp3) {
HXLINE(2193)				this->_hx___bindGLFramebuffer(this->_hx___state->_hx___primaryGLFramebuffer);
HXLINE(2195)				this->_hx___contextState->renderToTexture = null();
HXLINE(2196)				this->_hx___contextState->backBufferEnableDepthAndStencil = this->_hx___state->backBufferEnableDepthAndStencil;
            			}
HXLINE(2199)			this->_hx___setGLDepthTest(this->_hx___state->backBufferEnableDepthAndStencil);
HXLINE(2200)			this->_hx___setGLStencilTest(this->_hx___state->backBufferEnableDepthAndStencil);
HXLINE(2202)			this->_hx___setGLFrontFace(::hx::IsInstanceNotEq( this->_hx___stage->context3D,::hx::ObjectPtr<OBJ_>(this) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLFramebuffer,(void))

void Context3D_obj::_hx___flushGLProgram(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2207___flushGLProgram)
HXLINE(2208)		 ::openfl::display::Shader shader = this->_hx___state->shader;
HXLINE(2209)		 ::openfl::display3D::Program3D program = this->_hx___state->program;
HXLINE(2211)		if (::hx::IsInstanceNotEq( this->_hx___contextState->shader,shader )) {
HXLINE(2215)			if (::hx::IsNotNull( this->_hx___contextState->shader )) {
HXLINE(2217)				this->_hx___contextState->shader->_hx___disable();
            			}
HXLINE(2220)			if (::hx::IsNotNull( shader )) {
HXLINE(2222)				shader->_hx___enable();
            			}
HXLINE(2225)			this->_hx___contextState->shader = shader;
            		}
HXLINE(2228)		if (::hx::IsInstanceNotEq( this->_hx___contextState->program,program )) {
HXLINE(2230)			if (::hx::IsNotNull( this->_hx___contextState->program )) {
HXLINE(2232)				this->_hx___contextState->program->_hx___disable();
            			}
HXLINE(2235)			if (::hx::IsNotNull( program )) {
HXLINE(2237)				program->_hx___enable();
            			}
HXLINE(2240)			this->_hx___contextState->program = program;
            		}
HXLINE(2243)		bool _hx_tmp;
HXDLIN(2243)		if (::hx::IsNotNull( program )) {
HXLINE(2243)			_hx_tmp = ::hx::IsEq( program->_hx___format,0 );
            		}
            		else {
HXLINE(2243)			_hx_tmp = false;
            		}
HXDLIN(2243)		if (_hx_tmp) {
HXLINE(2245)			{
HXLINE(2245)				 ::lime::utils::ArrayBufferView this1 = this->_hx___positionScale;
HXDLIN(2245)				Float val;
HXDLIN(2245)				bool val1;
HXDLIN(2245)				if (::hx::IsInstanceEq( this->_hx___stage->context3D,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2245)					val1 = ::hx::IsNull( this->_hx___state->renderToTexture );
            				}
            				else {
HXLINE(2245)					val1 = false;
            				}
HXDLIN(2245)				if (val1) {
HXLINE(2245)					val = ((Float)1.0);
            				}
            				else {
HXLINE(2245)					val = ((Float)-1.0);
            				}
HXDLIN(2245)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
HXLINE(2246)			program->_hx___setPositionScale(this->_hx___positionScale);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLProgram,(void))

void Context3D_obj::_hx___flushGLScissor(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2252___flushGLScissor)
HXDLIN(2252)		if (!(this->_hx___state->scissorEnabled)) {
HXLINE(2254)			if ((this->_hx___contextState->scissorEnabled != this->_hx___state->scissorEnabled)) {
HXLINE(2256)				this->_hx___setGLScissorTest(false);
HXLINE(2257)				this->_hx___contextState->scissorEnabled = false;
            			}
            		}
            		else {
HXLINE(2262)			this->_hx___setGLScissorTest(true);
HXLINE(2263)			this->_hx___contextState->scissorEnabled = true;
HXLINE(2265)			int scissorX = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->x);
HXLINE(2266)			int scissorY = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->y);
HXLINE(2267)			int scissorWidth = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->width);
HXLINE(2268)			int scissorHeight = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->height);
HXLINE(2270)			if (this->_hx___backBufferWantsBestResolution) {
HXLINE(2272)				scissorX = ::Std_obj::_hx_int((this->_hx___state->scissorRectangle->x * this->_hx___stage->window->_hx___scale));
HXLINE(2273)				scissorY = ::Std_obj::_hx_int((this->_hx___state->scissorRectangle->y * this->_hx___stage->window->_hx___scale));
HXLINE(2274)				scissorWidth = ::Std_obj::_hx_int((this->_hx___state->scissorRectangle->width * this->_hx___stage->window->_hx___scale));
HXLINE(2275)				scissorHeight = ::Std_obj::_hx_int((this->_hx___state->scissorRectangle->height * this->_hx___stage->window->_hx___scale));
            			}
HXLINE(2279)			bool _hx_tmp;
HXDLIN(2279)			if (::hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(2279)				_hx_tmp = ::hx::IsNull( this->_hx___stage3D );
            			}
            			else {
HXLINE(2279)				_hx_tmp = false;
            			}
HXDLIN(2279)			if (_hx_tmp) {
HXLINE(2281)				int contextHeight = ::Std_obj::_hx_int((( (Float)(this->_hx___stage->window->_hx___height) ) * this->_hx___stage->window->_hx___scale));
HXLINE(2282)				scissorY = ((contextHeight - ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->height)) - scissorY);
            			}
HXLINE(2285)			bool _hx_tmp1;
HXDLIN(2285)			bool _hx_tmp2;
HXDLIN(2285)			bool _hx_tmp3;
HXDLIN(2285)			if ((this->_hx___contextState->scissorRectangle->x == scissorX)) {
HXLINE(2285)				_hx_tmp3 = (this->_hx___contextState->scissorRectangle->y != scissorY);
            			}
            			else {
HXLINE(2285)				_hx_tmp3 = true;
            			}
HXDLIN(2285)			if (!(_hx_tmp3)) {
HXLINE(2285)				_hx_tmp2 = (this->_hx___contextState->scissorRectangle->width != scissorWidth);
            			}
            			else {
HXLINE(2285)				_hx_tmp2 = true;
            			}
HXDLIN(2285)			if (!(_hx_tmp2)) {
HXLINE(2285)				_hx_tmp1 = (this->_hx___contextState->scissorRectangle->height != scissorHeight);
            			}
            			else {
HXLINE(2285)				_hx_tmp1 = true;
            			}
HXDLIN(2285)			if (_hx_tmp1) {
HXLINE(2290)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_scissor(scissorX,scissorY,scissorWidth,scissorHeight);
HXLINE(2291)				this->_hx___contextState->scissorRectangle->setTo(( (Float)(scissorX) ),( (Float)(scissorY) ),( (Float)(scissorWidth) ),( (Float)(scissorHeight) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLScissor,(void))

void Context3D_obj::_hx___flushGLStencil(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2297___flushGLStencil)
HXLINE(2298)		bool _hx_tmp;
HXDLIN(2298)		bool _hx_tmp1;
HXDLIN(2298)		bool _hx_tmp2;
HXDLIN(2298)		if (::hx::IsEq( this->_hx___contextState->stencilTriangleFace,this->_hx___state->stencilTriangleFace )) {
HXLINE(2298)			_hx_tmp2 = ::hx::IsNotEq( this->_hx___contextState->stencilPass,this->_hx___state->stencilPass );
            		}
            		else {
HXLINE(2298)			_hx_tmp2 = true;
            		}
HXDLIN(2298)		if (!(_hx_tmp2)) {
HXLINE(2298)			_hx_tmp1 = ::hx::IsNotEq( this->_hx___contextState->stencilDepthFail,this->_hx___state->stencilDepthFail );
            		}
            		else {
HXLINE(2298)			_hx_tmp1 = true;
            		}
HXDLIN(2298)		if (!(_hx_tmp1)) {
HXLINE(2298)			_hx_tmp = ::hx::IsNotEq( this->_hx___contextState->stencilFail,this->_hx___state->stencilFail );
            		}
            		else {
HXLINE(2298)			_hx_tmp = true;
            		}
HXDLIN(2298)		if (_hx_tmp) {
HXLINE(2303)			{
HXLINE(2303)				int face = this->_hx___getGLTriangleFace(this->_hx___state->stencilTriangleFace);
HXDLIN(2303)				int fail = this->_hx___getGLStencilAction(this->_hx___state->stencilFail);
HXDLIN(2303)				int zfail = this->_hx___getGLStencilAction(this->_hx___state->stencilDepthFail);
HXDLIN(2303)				int zpass = this->_hx___getGLStencilAction(this->_hx___state->stencilPass);
HXDLIN(2303)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_stencil_op_separate(face,fail,zfail,zpass);
            			}
HXLINE(2305)			this->_hx___contextState->stencilTriangleFace = this->_hx___state->stencilTriangleFace;
HXLINE(2306)			this->_hx___contextState->stencilPass = this->_hx___state->stencilPass;
HXLINE(2307)			this->_hx___contextState->stencilDepthFail = this->_hx___state->stencilDepthFail;
HXLINE(2308)			this->_hx___contextState->stencilFail = this->_hx___state->stencilFail;
            		}
HXLINE(2311)		if ((this->_hx___contextState->stencilWriteMask != this->_hx___state->stencilWriteMask)) {
HXLINE(2313)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_stencil_mask(this->_hx___state->stencilWriteMask);
HXLINE(2314)			this->_hx___contextState->stencilWriteMask = this->_hx___state->stencilWriteMask;
            		}
HXLINE(2317)		bool _hx_tmp3;
HXDLIN(2317)		bool _hx_tmp4;
HXDLIN(2317)		if (::hx::IsEq( this->_hx___contextState->stencilCompareMode,this->_hx___state->stencilCompareMode )) {
HXLINE(2317)			_hx_tmp4 = (this->_hx___contextState->stencilReferenceValue != this->_hx___state->stencilReferenceValue);
            		}
            		else {
HXLINE(2317)			_hx_tmp4 = true;
            		}
HXDLIN(2317)		if (!(_hx_tmp4)) {
HXLINE(2317)			_hx_tmp3 = (this->_hx___contextState->stencilReadMask != this->_hx___state->stencilReadMask);
            		}
            		else {
HXLINE(2317)			_hx_tmp3 = true;
            		}
HXDLIN(2317)		if (_hx_tmp3) {
HXLINE(2322)			{
HXLINE(2322)				int func = this->_hx___getGLCompareMode(this->_hx___state->stencilCompareMode);
HXDLIN(2322)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_stencil_func(func,this->_hx___state->stencilReferenceValue,this->_hx___state->stencilReadMask);
            			}
HXLINE(2323)			this->_hx___contextState->stencilCompareMode = this->_hx___state->stencilCompareMode;
HXLINE(2324)			this->_hx___contextState->stencilReferenceValue = this->_hx___state->stencilReferenceValue;
HXLINE(2325)			this->_hx___contextState->stencilReadMask = this->_hx___state->stencilReadMask;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLStencil,(void))

void Context3D_obj::_hx___flushGLTextures(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2330___flushGLTextures)
HXLINE(2331)		int sampler = 0;
HXLINE(2332)		 ::openfl::display3D::textures::TextureBase texture;
HXDLIN(2332)		 ::openfl::display::_internal::SamplerState samplerState;
HXLINE(2334)		{
HXLINE(2334)			int _g = 0;
HXDLIN(2334)			int _g1 = this->_hx___state->textures->length;
HXDLIN(2334)			while((_g < _g1)){
HXLINE(2334)				_g = (_g + 1);
HXDLIN(2334)				int i = (_g - 1);
HXLINE(2336)				texture = this->_hx___state->textures->__get(i).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE(2337)				samplerState = this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::display::_internal::SamplerState >();
HXLINE(2338)				if (::hx::IsNull( samplerState )) {
HXLINE(2340)					this->_hx___state->samplerStates[i] =  ::openfl::display::_internal::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE(2341)					samplerState = this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::display::_internal::SamplerState >();
            				}
HXLINE(2344)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_active_texture((this->gl->TEXTURE0 + sampler));
HXLINE(2346)				if (::hx::IsNotNull( texture )) {
HXLINE(2351)					if ((texture->_hx___textureTarget == this->gl->TEXTURE_2D)) {
HXLINE(2353)						this->_hx___bindGLTexture2D(texture->_hx___getTexture());
            					}
            					else {
HXLINE(2357)						this->_hx___bindGLTextureCubeMap(texture->_hx___getTexture());
            					}
HXLINE(2362)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(this->gl->TEXTURE_2D);
HXLINE(2365)					this->_hx___contextState->textures[i] = texture;
HXLINE(2369)					texture->_hx___setSamplerState(samplerState);
            				}
            				else {
HXLINE(2373)					this->_hx___bindGLTexture2D(null());
            				}
HXLINE(2376)				bool _hx_tmp;
HXDLIN(2376)				bool _hx_tmp1;
HXDLIN(2376)				if (::hx::IsNotNull( this->_hx___state->program )) {
HXLINE(2376)					_hx_tmp1 = ::hx::IsEq( this->_hx___state->program->_hx___format,0 );
            				}
            				else {
HXLINE(2376)					_hx_tmp1 = false;
            				}
HXDLIN(2376)				if (_hx_tmp1) {
HXLINE(2376)					_hx_tmp = samplerState->textureAlpha;
            				}
            				else {
HXLINE(2376)					_hx_tmp = false;
            				}
HXDLIN(2376)				if (_hx_tmp) {
HXLINE(2378)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_active_texture(((this->gl->TEXTURE0 + sampler) + 4));
HXLINE(2380)					bool _hx_tmp2;
HXDLIN(2380)					if (::hx::IsNotNull( texture )) {
HXLINE(2380)						_hx_tmp2 = ::hx::IsNotNull( texture->_hx___alphaTexture );
            					}
            					else {
HXLINE(2380)						_hx_tmp2 = false;
            					}
HXDLIN(2380)					if (_hx_tmp2) {
HXLINE(2382)						if ((texture->_hx___alphaTexture->_hx___textureTarget == this->gl->TEXTURE_2D)) {
HXLINE(2384)							this->_hx___bindGLTexture2D(texture->_hx___alphaTexture->_hx___getTexture());
            						}
            						else {
HXLINE(2388)							this->_hx___bindGLTextureCubeMap(texture->_hx___alphaTexture->_hx___getTexture());
            						}
HXLINE(2391)						texture->_hx___alphaTexture->_hx___setSamplerState(samplerState);
HXLINE(2392)						::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform1i(this->_hx___state->program->_hx___agalAlphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,1);
HXLINE(2396)						::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(this->gl->TEXTURE_2D);
            					}
            					else {
HXLINE(2401)						this->_hx___bindGLTexture2D(null());
HXLINE(2402)						if (::hx::IsNotNull( this->_hx___state->program->_hx___agalAlphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >() )) {
HXLINE(2404)							::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform1i(this->_hx___state->program->_hx___agalAlphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,0);
            						}
            					}
            				}
HXLINE(2409)				sampler = (sampler + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLTextures,(void))

void Context3D_obj::_hx___flushGLViewport(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2417___flushGLViewport)
HXDLIN(2417)		if (::hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(2419)			if (::hx::IsInstanceEq( this->_hx___stage->context3D,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2421)				int scaledBackBufferWidth = this->backBufferWidth;
HXLINE(2422)				int scaledBackBufferHeight = this->backBufferHeight;
HXLINE(2424)				bool _hx_tmp;
HXDLIN(2424)				if (::hx::IsNull( this->_hx___stage3D )) {
HXLINE(2424)					_hx_tmp = !(this->_hx___backBufferWantsBestResolution);
            				}
            				else {
HXLINE(2424)					_hx_tmp = false;
            				}
HXDLIN(2424)				if (_hx_tmp) {
HXLINE(2426)					scaledBackBufferWidth = ::Std_obj::_hx_int((( (Float)(this->backBufferWidth) ) * this->_hx___stage->window->_hx___scale));
HXLINE(2427)					scaledBackBufferHeight = ::Std_obj::_hx_int((( (Float)(this->backBufferHeight) ) * this->_hx___stage->window->_hx___scale));
            				}
HXLINE(2430)				int x;
HXDLIN(2430)				if (::hx::IsNull( this->_hx___stage3D )) {
HXLINE(2430)					x = 0;
            				}
            				else {
HXLINE(2430)					x = ::Std_obj::_hx_int(this->_hx___stage3D->get_x());
            				}
HXLINE(2431)				Float y = ((( (Float)(this->_hx___stage->window->_hx___height) ) * this->_hx___stage->window->_hx___scale) - ( (Float)(scaledBackBufferHeight) ));
HXDLIN(2431)				Float y1;
HXDLIN(2431)				if (::hx::IsNull( this->_hx___stage3D )) {
HXLINE(2431)					y1 = ( (Float)(0) );
            				}
            				else {
HXLINE(2431)					y1 = this->_hx___stage3D->get_y();
            				}
HXDLIN(2431)				int y2 = ::Std_obj::_hx_int((y - y1));
HXLINE(2432)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_viewport(x,y2,scaledBackBufferWidth,scaledBackBufferHeight);
            			}
            			else {
HXLINE(2436)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_viewport(0,0,this->backBufferWidth,this->backBufferHeight);
            			}
            		}
            		else {
HXLINE(2441)			int width = 0;
HXDLIN(2441)			int height = 0;
HXLINE(2444)			if (::Std_obj::isOfType(this->_hx___state->renderToTexture,::hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(2446)				 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(this->_hx___state->renderToTexture) );
HXLINE(2447)				width = texture2D->_hx___width;
HXLINE(2448)				height = texture2D->_hx___height;
            			}
            			else {
HXLINE(2450)				if (::Std_obj::isOfType(this->_hx___state->renderToTexture,::hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(2452)					 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(this->_hx___state->renderToTexture) );
HXLINE(2453)					width = rectTexture->_hx___width;
HXLINE(2454)					height = rectTexture->_hx___height;
            				}
            				else {
HXLINE(2456)					if (::Std_obj::isOfType(this->_hx___state->renderToTexture,::hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE(2458)						 ::openfl::display3D::textures::CubeTexture cubeTexture = ( ( ::openfl::display3D::textures::CubeTexture)(this->_hx___state->renderToTexture) );
HXLINE(2459)						width = cubeTexture->_hx___size;
HXLINE(2460)						height = cubeTexture->_hx___size;
            					}
            				}
            			}
HXLINE(2463)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_viewport(0,0,width,height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLViewport,(void))

int Context3D_obj::_hx___getGLBlend( ::Dynamic blendFactor){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2469___getGLBlend)
HXDLIN(2469)		 ::Dynamic _hx_switch_0 = blendFactor;
            		if (  (_hx_switch_0==0) ){
HXLINE(2472)			return this->gl->DST_ALPHA;
HXDLIN(2472)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2474)			return this->gl->DST_COLOR;
HXDLIN(2474)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2476)			return this->gl->ONE;
HXDLIN(2476)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2478)			return this->gl->ONE_MINUS_DST_ALPHA;
HXDLIN(2478)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(2480)			return this->gl->ONE_MINUS_DST_COLOR;
HXDLIN(2480)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE(2482)			return this->gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(2482)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==6) ){
HXLINE(2484)			return this->gl->ONE_MINUS_SRC_COLOR;
HXDLIN(2484)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE(2486)			return this->gl->SRC_ALPHA;
HXDLIN(2486)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE(2488)			return this->gl->SRC_COLOR;
HXDLIN(2488)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE(2490)			return this->gl->ZERO;
HXDLIN(2490)			goto _hx_goto_57;
            		}
            		/* default */{
HXLINE(2492)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_57:;
HXLINE(2469)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLBlend,return )

int Context3D_obj::_hx___getGLCompareMode( ::Dynamic mode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2500___getGLCompareMode)
HXDLIN(2500)		 ::Dynamic _hx_switch_0 = mode;
            		if (  (_hx_switch_0==0) ){
HXLINE(2502)			return this->gl->ALWAYS;
HXDLIN(2502)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2503)			return this->gl->EQUAL;
HXDLIN(2503)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2504)			return this->gl->GREATER;
HXDLIN(2504)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2505)			return this->gl->GEQUAL;
HXDLIN(2505)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(2506)			return this->gl->LESS;
HXDLIN(2506)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE(2507)			return this->gl->LEQUAL;
HXDLIN(2507)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==6) ){
HXLINE(2508)			return this->gl->NEVER;
HXDLIN(2508)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE(2509)			return this->gl->NOTEQUAL;
HXDLIN(2509)			goto _hx_goto_59;
            		}
            		/* default */{
HXLINE(2510)			return this->gl->EQUAL;
            		}
            		_hx_goto_59:;
HXLINE(2500)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLCompareMode,return )

int Context3D_obj::_hx___getGLStencilAction( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2516___getGLStencilAction)
HXDLIN(2516)		 ::Dynamic _hx_switch_0 = action;
            		if (  (_hx_switch_0==0) ){
HXLINE(2518)			return this->gl->DECR;
HXDLIN(2518)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2519)			return this->gl->DECR_WRAP;
HXDLIN(2519)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2520)			return this->gl->INCR;
HXDLIN(2520)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2521)			return this->gl->INCR_WRAP;
HXDLIN(2521)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(2522)			return this->gl->INVERT;
HXDLIN(2522)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE(2523)			return this->gl->KEEP;
HXDLIN(2523)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==6) ){
HXLINE(2524)			return this->gl->REPLACE;
HXDLIN(2524)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE(2525)			return this->gl->ZERO;
HXDLIN(2525)			goto _hx_goto_61;
            		}
            		/* default */{
HXLINE(2526)			return this->gl->KEEP;
            		}
            		_hx_goto_61:;
HXLINE(2516)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLStencilAction,return )

int Context3D_obj::_hx___getGLTriangleFace( ::Dynamic face){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2532___getGLTriangleFace)
HXDLIN(2532)		 ::Dynamic _hx_switch_0 = face;
            		if (  (_hx_switch_0==0) ){
HXLINE(2535)			return this->gl->BACK;
HXDLIN(2535)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2534)			return this->gl->FRONT;
HXDLIN(2534)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2536)			return this->gl->FRONT_AND_BACK;
HXDLIN(2536)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2537)			return this->gl->NONE;
HXDLIN(2537)			goto _hx_goto_63;
            		}
            		/* default */{
HXLINE(2538)			return this->gl->FRONT_AND_BACK;
            		}
            		_hx_goto_63:;
HXLINE(2532)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLTriangleFace,return )

void Context3D_obj::_hx___renderStage3D( ::openfl::display::Stage3D stage3D){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2543___renderStage3D)
HXLINE(2546)		 ::openfl::display3D::Context3D context = stage3D->context3D;
HXLINE(2548)		bool _hx_tmp;
HXDLIN(2548)		bool _hx_tmp1;
HXDLIN(2548)		bool _hx_tmp2;
HXDLIN(2548)		bool _hx_tmp3;
HXDLIN(2548)		bool _hx_tmp4;
HXDLIN(2548)		if (::hx::IsNotNull( context )) {
HXLINE(2548)			_hx_tmp4 = ::hx::IsInstanceNotEq( context,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(2548)			_hx_tmp4 = false;
            		}
HXDLIN(2548)		if (_hx_tmp4) {
HXLINE(2548)			_hx_tmp3 = ::hx::IsNotNull( context->_hx___frontBufferTexture );
            		}
            		else {
HXLINE(2548)			_hx_tmp3 = false;
            		}
HXDLIN(2548)		if (_hx_tmp3) {
HXLINE(2548)			_hx_tmp2 = stage3D->visible;
            		}
            		else {
HXLINE(2548)			_hx_tmp2 = false;
            		}
HXDLIN(2548)		if (_hx_tmp2) {
HXLINE(2548)			_hx_tmp1 = (this->backBufferHeight > 0);
            		}
            		else {
HXLINE(2548)			_hx_tmp1 = false;
            		}
HXDLIN(2548)		if (_hx_tmp1) {
HXLINE(2548)			_hx_tmp = (this->backBufferWidth > 0);
            		}
            		else {
HXLINE(2548)			_hx_tmp = false;
            		}
HXDLIN(2548)		if (_hx_tmp) {
HXLINE(2557)			if (::hx::IsNull( this->_hx___renderStage3DProgram )) {
HXLINE(2559)				 ::openfl::utils::AGALMiniAssembler vertexAssembler =  ::openfl::utils::AGALMiniAssembler_obj::__alloc( HX_CTX ,null());
HXLINE(2560)				vertexAssembler->assemble(::openfl::display3D::_Context3DProgramType::Context3DProgramType_Impl__obj::toString(1),(HX_("m44 op, va0, vc0\n",78,3e,5a,08) + HX_("mov v0, va1",2c,96,ba,67)),null(),null());
HXLINE(2562)				 ::openfl::utils::AGALMiniAssembler fragmentAssembler =  ::openfl::utils::AGALMiniAssembler_obj::__alloc( HX_CTX ,null());
HXLINE(2563)				fragmentAssembler->assemble(::openfl::display3D::_Context3DProgramType::Context3DProgramType_Impl__obj::toString(0),(HX_("tex ft1, v0, fs0 <2d,nearest,nomip>\n",ca,8f,17,34) + HX_("mov oc, ft1",4f,aa,cb,a8)),null(),null());
HXLINE(2565)				this->_hx___renderStage3DProgram = this->createProgram(null());
HXLINE(2566)				this->_hx___renderStage3DProgram->upload(vertexAssembler->agalcode,fragmentAssembler->agalcode);
            			}
HXLINE(2569)			this->setProgram(this->_hx___renderStage3DProgram);
HXLINE(2571)			this->setBlendFactors(2,9);
HXLINE(2572)			this->setColorMask(true,true,true,true);
HXLINE(2573)			this->setCulling(3);
HXLINE(2574)			this->setDepthTest(false,0);
HXLINE(2575)			this->setStencilActions(null(),null(),null(),null(),null());
HXLINE(2576)			this->setStencilReferenceValue(0,0,0);
HXLINE(2577)			this->setScissorRectangle(null());
HXLINE(2579)			this->setTextureAt(0,context->_hx___frontBufferTexture);
HXLINE(2580)			this->setVertexBufferAt(0,stage3D->_hx___vertexBuffer,0,3);
HXLINE(2581)			this->setVertexBufferAt(1,stage3D->_hx___vertexBuffer,3,2);
HXLINE(2582)			this->setProgramConstantsFromMatrix(1,0,stage3D->_hx___renderTransform,true);
HXLINE(2583)			this->drawTriangles(stage3D->_hx___indexBuffer,null(),null());
HXLINE(2585)			this->_hx___present = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___renderStage3D,(void))

void Context3D_obj::_hx___setGLBlend(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2591___setGLBlend)
HXDLIN(2591)		if ((this->_hx___contextState->_hx___enableGLBlend != enable)) {
HXLINE(2593)			if (enable) {
HXLINE(2595)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(this->gl->BLEND);
            			}
            			else {
HXLINE(2599)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(this->gl->BLEND);
            			}
HXLINE(2601)			this->_hx___contextState->_hx___enableGLBlend = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLBlend,(void))

void Context3D_obj::_hx___setGLBlendEquation(int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2607___setGLBlendEquation)
HXDLIN(2607)		if ((this->_hx___contextState->_hx___glBlendEquation != value)) {
HXLINE(2609)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_blend_equation(value);
HXLINE(2610)			this->_hx___contextState->_hx___glBlendEquation = value;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLBlendEquation,(void))

void Context3D_obj::_hx___setGLCullFace(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2616___setGLCullFace)
HXDLIN(2616)		if ((this->_hx___contextState->_hx___enableGLCullFace != enable)) {
HXLINE(2618)			if (enable) {
HXLINE(2620)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(this->gl->CULL_FACE);
            			}
            			else {
HXLINE(2624)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(this->gl->CULL_FACE);
            			}
HXLINE(2626)			this->_hx___contextState->_hx___enableGLCullFace = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLCullFace,(void))

void Context3D_obj::_hx___setGLDepthTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2632___setGLDepthTest)
HXDLIN(2632)		if ((this->_hx___contextState->_hx___enableGLDepthTest != enable)) {
HXLINE(2634)			if (enable) {
HXLINE(2636)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(this->gl->DEPTH_TEST);
            			}
            			else {
HXLINE(2640)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(this->gl->DEPTH_TEST);
            			}
HXLINE(2642)			this->_hx___contextState->_hx___enableGLDepthTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLDepthTest,(void))

void Context3D_obj::_hx___setGLFrontFace(bool counterClockWise){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2648___setGLFrontFace)
HXDLIN(2648)		if ((this->_hx___contextState->_hx___frontFaceGLCCW != counterClockWise)) {
HXLINE(2650)			{
HXLINE(2650)				int mode;
HXDLIN(2650)				if (counterClockWise) {
HXLINE(2650)					mode = this->gl->CCW;
            				}
            				else {
HXLINE(2650)					mode = this->gl->CW;
            				}
HXDLIN(2650)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_front_face(mode);
            			}
HXLINE(2651)			this->_hx___contextState->_hx___frontFaceGLCCW = counterClockWise;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLFrontFace,(void))

void Context3D_obj::_hx___setGLScissorTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2657___setGLScissorTest)
HXDLIN(2657)		if ((this->_hx___contextState->_hx___enableGLScissorTest != enable)) {
HXLINE(2659)			if (enable) {
HXLINE(2661)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(this->gl->SCISSOR_TEST);
            			}
            			else {
HXLINE(2665)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(this->gl->SCISSOR_TEST);
            			}
HXLINE(2667)			this->_hx___contextState->_hx___enableGLScissorTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLScissorTest,(void))

void Context3D_obj::_hx___setGLStencilTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2673___setGLStencilTest)
HXDLIN(2673)		if ((this->_hx___contextState->_hx___enableGLStencilTest != enable)) {
HXLINE(2675)			if (enable) {
HXLINE(2677)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(this->gl->STENCIL_TEST);
            			}
            			else {
HXLINE(2681)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(this->gl->STENCIL_TEST);
            			}
HXLINE(2683)			this->_hx___contextState->_hx___enableGLStencilTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLStencilTest,(void))

::String Context3D_obj::_hx___driverInfo;

int Context3D_obj::_hx___glDepthStencil;

int Context3D_obj::_hx___glMaxTextureMaxAnisotropy;

int Context3D_obj::_hx___glMaxViewportDims;

int Context3D_obj::_hx___glMemoryCurrentAvailable;

int Context3D_obj::_hx___glMemoryTotalAvailable;

int Context3D_obj::_hx___glTextureMaxAnisotropy;


::hx::ObjectPtr< Context3D_obj > Context3D_obj::__new( ::openfl::display::Stage stage, ::openfl::display3D::_internal::Context3DState contextState, ::openfl::display::Stage3D stage3D) {
	::hx::ObjectPtr< Context3D_obj > __this = new Context3D_obj();
	__this->__construct(stage,contextState,stage3D);
	return __this;
}

::hx::ObjectPtr< Context3D_obj > Context3D_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::Stage stage, ::openfl::display3D::_internal::Context3DState contextState, ::openfl::display::Stage3D stage3D) {
	Context3D_obj *__this = (Context3D_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Context3D_obj), true, "openfl.display3D.Context3D"));
	*(void **)__this = Context3D_obj::_hx_vtable;
	__this->__construct(stage,contextState,stage3D);
	return __this;
}

Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_MARK_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_MARK_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_MARK_MEMBER_NAME(_hx___backBufferTexture,"__backBufferTexture");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolutionOnBrowserZoom,"__backBufferWantsBestResolutionOnBrowserZoom");
	HX_MARK_MEMBER_NAME(_hx___cleared,"__cleared");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___contextState,"__contextState");
	HX_MARK_MEMBER_NAME(_hx___renderStage3DProgram,"__renderStage3DProgram");
	HX_MARK_MEMBER_NAME(_hx___enableErrorChecking,"__enableErrorChecking");
	HX_MARK_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_MARK_MEMBER_NAME(_hx___frontBufferTexture,"__frontBufferTexture");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___present,"__present");
	HX_MARK_MEMBER_NAME(_hx___programs,"__programs");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBuffer,"__quadIndexBuffer");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBufferCount,"__quadIndexBufferCount");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBufferElements,"__quadIndexBufferElements");
	HX_MARK_MEMBER_NAME(_hx___stage,"__stage");
	HX_MARK_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_MARK_MEMBER_NAME(_hx___state,"__state");
	HX_MARK_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_VISIT_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_VISIT_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_VISIT_MEMBER_NAME(_hx___backBufferTexture,"__backBufferTexture");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolutionOnBrowserZoom,"__backBufferWantsBestResolutionOnBrowserZoom");
	HX_VISIT_MEMBER_NAME(_hx___cleared,"__cleared");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___contextState,"__contextState");
	HX_VISIT_MEMBER_NAME(_hx___renderStage3DProgram,"__renderStage3DProgram");
	HX_VISIT_MEMBER_NAME(_hx___enableErrorChecking,"__enableErrorChecking");
	HX_VISIT_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_VISIT_MEMBER_NAME(_hx___frontBufferTexture,"__frontBufferTexture");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___present,"__present");
	HX_VISIT_MEMBER_NAME(_hx___programs,"__programs");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBuffer,"__quadIndexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBufferCount,"__quadIndexBufferCount");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBufferElements,"__quadIndexBufferElements");
	HX_VISIT_MEMBER_NAME(_hx___stage,"__stage");
	HX_VISIT_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_VISIT_MEMBER_NAME(_hx___state,"__state");
	HX_VISIT_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Context3D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return ::hx::Val( gl ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__stage") ) { return ::hx::Val( _hx___stage ); }
		if (HX_FIELD_EQ(inName,"__state") ) { return ::hx::Val( _hx___state ); }
		if (HX_FIELD_EQ(inName,"present") ) { return ::hx::Val( present_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleared") ) { return ::hx::Val( _hx___cleared ); }
		if (HX_FIELD_EQ(inName,"__context") ) { return ::hx::Val( _hx___context ); }
		if (HX_FIELD_EQ(inName,"__present") ) { return ::hx::Val( _hx___present ); }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { return ::hx::Val( _hx___stage3D ); }
		if (HX_FIELD_EQ(inName,"__dispose") ) { return ::hx::Val( _hx___dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGL") ) { return ::hx::Val( _hx___flushGL_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return ::hx::Val( driverInfo ); }
		if (HX_FIELD_EQ(inName,"__programs") ) { return ::hx::Val( _hx___programs ); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return ::hx::Val( setCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return ::hx::Val( setProgram_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return ::hx::Val( setColorMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return ::hx::Val( setDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return ::hx::Val( setTextureAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLBlend") ) { return ::hx::Val( _hx___getGLBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLBlend") ) { return ::hx::Val( _hx___setGLBlend_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createProgram") ) { return ::hx::Val( createProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return ::hx::Val( drawTriangles_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__contextState") ) { return ::hx::Val( _hx___contextState ); }
		if (HX_FIELD_EQ(inName,"__flushGLBlend") ) { return ::hx::Val( _hx___flushGLBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLDepth") ) { return ::hx::Val( _hx___flushGLDepth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { return ::hx::Val( backBufferWidth ); }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return ::hx::Val( _hx___positionScale ); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return ::hx::Val( setBlendFactors_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawTriangles") ) { return ::hx::Val( _hx___drawTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderStage3D") ) { return ::hx::Val( _hx___renderStage3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLCullFace") ) { return ::hx::Val( _hx___setGLCullFace_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { return ::hx::Val( backBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__flushGLCulling") ) { return ::hx::Val( _hx___flushGLCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLProgram") ) { return ::hx::Val( _hx___flushGLProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLScissor") ) { return ::hx::Val( _hx___flushGLScissor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLStencil") ) { return ::hx::Val( _hx___flushGLStencil_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLDepthTest") ) { return ::hx::Val( _hx___setGLDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLFrontFace") ) { return ::hx::Val( _hx___setGLFrontFace_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__quadIndexBuffer") ) { return ::hx::Val( _hx___quadIndexBuffer ); }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { return ::hx::Val( _hx___vertexConstants ); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return ::hx::Val( createIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return ::hx::Val( setSamplerStateAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return ::hx::Val( setStencilActions_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return ::hx::Val( setVertexBufferAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLTexture2D") ) { return ::hx::Val( _hx___bindGLTexture2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLTextures") ) { return ::hx::Val( _hx___flushGLTextures_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLViewport") ) { return ::hx::Val( _hx___flushGLViewport_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { return ::hx::Val( maxBackBufferWidth ); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return ::hx::Val( createVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return ::hx::Val( setRenderToTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { return ::hx::Val( _hx___getGLCompareMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLScissorTest") ) { return ::hx::Val( _hx___setGLScissorTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLStencilTest") ) { return ::hx::Val( _hx___setGLStencilTest_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { return ::hx::Val( maxBackBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__backBufferTexture") ) { return ::hx::Val( _hx___backBufferTexture ); }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { return ::hx::Val( _hx___fragmentConstants ); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return ::hx::Val( configureBackBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return ::hx::Val( setScissorRectangle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLArrayBuffer") ) { return ::hx::Val( _hx___bindGLArrayBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLFramebuffer") ) { return ::hx::Val( _hx___bindGLFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLTriangleFace") ) { return ::hx::Val( _hx___getGLTriangleFace_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__frontBufferTexture") ) { return ::hx::Val( _hx___frontBufferTexture ); }
		if (HX_FIELD_EQ(inName,"__flushGLFramebuffer") ) { return ::hx::Val( _hx___flushGLFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { return ::hx::Val( _hx___getGLStencilAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLBlendEquation") ) { return ::hx::Val( _hx___setGLBlendEquation_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { return ::hx::Val( _hx___backBufferAntiAlias ); }
		if (HX_FIELD_EQ(inName,"__enableErrorChecking") ) { return ::hx::Val( _hx___enableErrorChecking ); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return ::hx::Val( setRenderToBackBuffer_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderStage3DProgram") ) { return ::hx::Val( _hx___renderStage3DProgram ); }
		if (HX_FIELD_EQ(inName,"__quadIndexBufferCount") ) { return ::hx::Val( _hx___quadIndexBufferCount ); }
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return ::hx::Val( createRectangleTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLTextureCubeMap") ) { return ::hx::Val( _hx___bindGLTextureCubeMap_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setBlendFactorsSeparate") ) { return ::hx::Val( setBlendFactorsSeparate_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return ::hx::Val( setStencilReferenceValue_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__quadIndexBufferElements") ) { return ::hx::Val( _hx___quadIndexBufferElements ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__bindGLElementArrayBuffer") ) { return ::hx::Val( _hx___bindGLElementArrayBuffer_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return ::hx::Val( setProgramConstantsFromMatrix_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { return ::hx::Val( _hx___backBufferWantsBestResolution ); }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolutionOnBrowserZoom") ) { return ::hx::Val( _hx___backBufferWantsBestResolutionOnBrowserZoom ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__driverInfo") ) { outValue = ( _hx___driverInfo ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__glDepthStencil") ) { outValue = ( _hx___glDepthStencil ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__glMaxViewportDims") ) { outValue = ( _hx___glMaxViewportDims ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__glMemoryTotalAvailable") ) { outValue = ( _hx___glMemoryTotalAvailable ); return true; }
		if (HX_FIELD_EQ(inName,"__glTextureMaxAnisotropy") ) { outValue = ( _hx___glTextureMaxAnisotropy ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__glMemoryCurrentAvailable") ) { outValue = ( _hx___glMemoryCurrentAvailable ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__glMaxTextureMaxAnisotropy") ) { outValue = ( _hx___glMaxTextureMaxAnisotropy ); return true; }
	}
	return false;
}

::hx::Val Context3D_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__stage") ) { _hx___stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__state") ) { _hx___state=inValue.Cast<  ::openfl::display3D::_internal::Context3DState >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleared") ) { _hx___cleared=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__present") ) { _hx___present=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { _hx___stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__programs") ) { _hx___programs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__contextState") ) { _hx___contextState=inValue.Cast<  ::openfl::display3D::_internal::Context3DState >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { backBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { backBufferHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__quadIndexBuffer") ) { _hx___quadIndexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { _hx___vertexConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { maxBackBufferWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { maxBackBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__backBufferTexture") ) { _hx___backBufferTexture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { _hx___fragmentConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__frontBufferTexture") ) { _hx___frontBufferTexture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { _hx___backBufferAntiAlias=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__enableErrorChecking") ) { _hx___enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderStage3DProgram") ) { _hx___renderStage3DProgram=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__quadIndexBufferCount") ) { _hx___quadIndexBufferCount=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__quadIndexBufferElements") ) { _hx___quadIndexBufferElements=inValue.Cast< int >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { _hx___backBufferWantsBestResolution=inValue.Cast< bool >(); return inValue; }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolutionOnBrowserZoom") ) { _hx___backBufferWantsBestResolutionOnBrowserZoom=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__driverInfo") ) { _hx___driverInfo=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__glDepthStencil") ) { _hx___glDepthStencil=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__glMaxViewportDims") ) { _hx___glMaxViewportDims=ioValue.Cast< int >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__glMemoryTotalAvailable") ) { _hx___glMemoryTotalAvailable=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"__glTextureMaxAnisotropy") ) { _hx___glTextureMaxAnisotropy=ioValue.Cast< int >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__glMemoryCurrentAvailable") ) { _hx___glMemoryCurrentAvailable=ioValue.Cast< int >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__glMaxTextureMaxAnisotropy") ) { _hx___glMaxTextureMaxAnisotropy=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("backBufferHeight",ce,3d,76,f3));
	outFields->push(HX_("backBufferWidth",ff,f9,53,8c));
	outFields->push(HX_("driverInfo",b6,18,7b,e3));
	outFields->push(HX_("maxBackBufferHeight",92,ac,2a,8e));
	outFields->push(HX_("maxBackBufferWidth",bb,8f,62,be));
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("__backBufferAntiAlias",e7,9b,20,bd));
	outFields->push(HX_("__backBufferTexture",f4,e5,95,65));
	outFields->push(HX_("__backBufferWantsBestResolution",0c,81,2c,ec));
	outFields->push(HX_("__backBufferWantsBestResolutionOnBrowserZoom",50,f3,6e,fd));
	outFields->push(HX_("__cleared",0c,58,93,2c));
	outFields->push(HX_("__context",cf,e6,c5,9a));
	outFields->push(HX_("__contextState",c2,f0,30,2b));
	outFields->push(HX_("__renderStage3DProgram",6b,88,79,ad));
	outFields->push(HX_("__enableErrorChecking",5f,5d,0d,28));
	outFields->push(HX_("__fragmentConstants",7f,a5,a6,65));
	outFields->push(HX_("__frontBufferTexture",72,b0,71,38));
	outFields->push(HX_("__positionScale",01,d2,7f,6a));
	outFields->push(HX_("__present",db,8b,2a,bb));
	outFields->push(HX_("__programs",8f,5c,60,29));
	outFields->push(HX_("__quadIndexBuffer",0b,2d,32,36));
	outFields->push(HX_("__quadIndexBufferCount",c4,5f,48,67));
	outFields->push(HX_("__quadIndexBufferElements",62,a2,7c,95));
	outFields->push(HX_("__stage",9e,c3,69,ee));
	outFields->push(HX_("__stage3D",cf,93,18,af));
	outFields->push(HX_("__state",f1,ce,69,ee));
	outFields->push(HX_("__vertexConstants",6b,1f,14,b9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Context3D_obj,backBufferHeight),HX_("backBufferHeight",ce,3d,76,f3)},
	{::hx::fsInt,(int)offsetof(Context3D_obj,backBufferWidth),HX_("backBufferWidth",ff,f9,53,8c)},
	{::hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_("driverInfo",b6,18,7b,e3)},
	{::hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferHeight),HX_("maxBackBufferHeight",92,ac,2a,8e)},
	{::hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferWidth),HX_("maxBackBufferWidth",bb,8f,62,be)},
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Context3D_obj,gl),HX_("gl",25,5a,00,00)},
	{::hx::fsInt,(int)offsetof(Context3D_obj,_hx___backBufferAntiAlias),HX_("__backBufferAntiAlias",e7,9b,20,bd)},
	{::hx::fsObject /*  ::openfl::display3D::textures::RectangleTexture */ ,(int)offsetof(Context3D_obj,_hx___backBufferTexture),HX_("__backBufferTexture",f4,e5,95,65)},
	{::hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolution),HX_("__backBufferWantsBestResolution",0c,81,2c,ec)},
	{::hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolutionOnBrowserZoom),HX_("__backBufferWantsBestResolutionOnBrowserZoom",50,f3,6e,fd)},
	{::hx::fsBool,(int)offsetof(Context3D_obj,_hx___cleared),HX_("__cleared",0c,58,93,2c)},
	{::hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(Context3D_obj,_hx___context),HX_("__context",cf,e6,c5,9a)},
	{::hx::fsObject /*  ::openfl::display3D::_internal::Context3DState */ ,(int)offsetof(Context3D_obj,_hx___contextState),HX_("__contextState",c2,f0,30,2b)},
	{::hx::fsObject /*  ::openfl::display3D::Program3D */ ,(int)offsetof(Context3D_obj,_hx___renderStage3DProgram),HX_("__renderStage3DProgram",6b,88,79,ad)},
	{::hx::fsBool,(int)offsetof(Context3D_obj,_hx___enableErrorChecking),HX_("__enableErrorChecking",5f,5d,0d,28)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3D_obj,_hx___fragmentConstants),HX_("__fragmentConstants",7f,a5,a6,65)},
	{::hx::fsObject /*  ::openfl::display3D::textures::RectangleTexture */ ,(int)offsetof(Context3D_obj,_hx___frontBufferTexture),HX_("__frontBufferTexture",72,b0,71,38)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3D_obj,_hx___positionScale),HX_("__positionScale",01,d2,7f,6a)},
	{::hx::fsBool,(int)offsetof(Context3D_obj,_hx___present),HX_("__present",db,8b,2a,bb)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Context3D_obj,_hx___programs),HX_("__programs",8f,5c,60,29)},
	{::hx::fsObject /*  ::openfl::display3D::IndexBuffer3D */ ,(int)offsetof(Context3D_obj,_hx___quadIndexBuffer),HX_("__quadIndexBuffer",0b,2d,32,36)},
	{::hx::fsInt,(int)offsetof(Context3D_obj,_hx___quadIndexBufferCount),HX_("__quadIndexBufferCount",c4,5f,48,67)},
	{::hx::fsInt,(int)offsetof(Context3D_obj,_hx___quadIndexBufferElements),HX_("__quadIndexBufferElements",62,a2,7c,95)},
	{::hx::fsObject /*  ::openfl::display::Stage */ ,(int)offsetof(Context3D_obj,_hx___stage),HX_("__stage",9e,c3,69,ee)},
	{::hx::fsObject /*  ::openfl::display::Stage3D */ ,(int)offsetof(Context3D_obj,_hx___stage3D),HX_("__stage3D",cf,93,18,af)},
	{::hx::fsObject /*  ::openfl::display3D::_internal::Context3DState */ ,(int)offsetof(Context3D_obj,_hx___state),HX_("__state",f1,ce,69,ee)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3D_obj,_hx___vertexConstants),HX_("__vertexConstants",6b,1f,14,b9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Context3D_obj::_hx___driverInfo,HX_("__driverInfo",d6,93,0e,1c)},
	{::hx::fsInt,(void *) &Context3D_obj::_hx___glDepthStencil,HX_("__glDepthStencil",1e,c0,95,83)},
	{::hx::fsInt,(void *) &Context3D_obj::_hx___glMaxTextureMaxAnisotropy,HX_("__glMaxTextureMaxAnisotropy",ea,71,58,8e)},
	{::hx::fsInt,(void *) &Context3D_obj::_hx___glMaxViewportDims,HX_("__glMaxViewportDims",b0,ca,60,28)},
	{::hx::fsInt,(void *) &Context3D_obj::_hx___glMemoryCurrentAvailable,HX_("__glMemoryCurrentAvailable",96,8c,12,63)},
	{::hx::fsInt,(void *) &Context3D_obj::_hx___glMemoryTotalAvailable,HX_("__glMemoryTotalAvailable",2b,ce,6d,69)},
	{::hx::fsInt,(void *) &Context3D_obj::_hx___glTextureMaxAnisotropy,HX_("__glTextureMaxAnisotropy",d0,57,23,08)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_("backBufferHeight",ce,3d,76,f3),
	HX_("backBufferWidth",ff,f9,53,8c),
	HX_("driverInfo",b6,18,7b,e3),
	HX_("maxBackBufferHeight",92,ac,2a,8e),
	HX_("maxBackBufferWidth",bb,8f,62,be),
	HX_("gl",25,5a,00,00),
	HX_("__backBufferAntiAlias",e7,9b,20,bd),
	HX_("__backBufferTexture",f4,e5,95,65),
	HX_("__backBufferWantsBestResolution",0c,81,2c,ec),
	HX_("__backBufferWantsBestResolutionOnBrowserZoom",50,f3,6e,fd),
	HX_("__cleared",0c,58,93,2c),
	HX_("__context",cf,e6,c5,9a),
	HX_("__contextState",c2,f0,30,2b),
	HX_("__renderStage3DProgram",6b,88,79,ad),
	HX_("__enableErrorChecking",5f,5d,0d,28),
	HX_("__fragmentConstants",7f,a5,a6,65),
	HX_("__frontBufferTexture",72,b0,71,38),
	HX_("__positionScale",01,d2,7f,6a),
	HX_("__present",db,8b,2a,bb),
	HX_("__programs",8f,5c,60,29),
	HX_("__quadIndexBuffer",0b,2d,32,36),
	HX_("__quadIndexBufferCount",c4,5f,48,67),
	HX_("__quadIndexBufferElements",62,a2,7c,95),
	HX_("__stage",9e,c3,69,ee),
	HX_("__stage3D",cf,93,18,af),
	HX_("__state",f1,ce,69,ee),
	HX_("__vertexConstants",6b,1f,14,b9),
	HX_("clear",8d,71,5b,48),
	HX_("configureBackBuffer",0d,3c,11,04),
	HX_("createIndexBuffer",16,40,47,48),
	HX_("createProgram",e8,22,3c,dc),
	HX_("createRectangleTexture",88,8b,b3,f2),
	HX_("createVertexBuffer",a0,ec,c7,6a),
	HX_("drawTriangles",07,44,68,de),
	HX_("present",fb,3a,dc,39),
	HX_("setBlendFactors",35,4b,cd,f5),
	HX_("setBlendFactorsSeparate",b8,e3,58,51),
	HX_("setColorMask",ed,8b,13,48),
	HX_("setCulling",ee,06,67,a6),
	HX_("setDepthTest",f3,e2,cc,c7),
	HX_("setProgram",02,6f,d8,46),
	HX_("setProgramConstantsFromMatrix",d8,d0,45,be),
	HX_("setRenderToBackBuffer",9a,84,fb,ad),
	HX_("setRenderToTexture",e8,2c,92,46),
	HX_("setSamplerStateAt",7e,30,51,ac),
	HX_("setScissorRectangle",35,04,2c,03),
	HX_("setStencilActions",a3,ec,a6,2c),
	HX_("setStencilReferenceValue",c0,df,a3,11),
	HX_("setTextureAt",ac,ee,98,d3),
	HX_("setVertexBufferAt",d9,58,f9,c7),
	HX_("__bindGLArrayBuffer",57,ea,20,16),
	HX_("__bindGLElementArrayBuffer",ff,26,62,10),
	HX_("__bindGLFramebuffer",cb,a7,8c,d2),
	HX_("__bindGLTexture2D",cb,a0,28,31),
	HX_("__bindGLTextureCubeMap",ee,58,b1,ec),
	HX_("__dispose",7f,d1,9a,3c),
	HX_("__drawTriangles",e7,7c,1a,66),
	HX_("__flushGL",c9,2a,9b,eb),
	HX_("__flushGLBlend",c8,74,8a,c5),
	HX_("__flushGLCulling",a7,ba,f2,dd),
	HX_("__flushGLDepth",7a,7d,bf,e7),
	HX_("__flushGLFramebuffer",a4,d4,08,ba),
	HX_("__flushGLProgram",bb,22,64,7e),
	HX_("__flushGLScissor",53,00,52,8f),
	HX_("__flushGLStencil",33,96,6e,0a),
	HX_("__flushGLTextures",21,4f,e1,f8),
	HX_("__flushGLViewport",4f,a4,b7,2f),
	HX_("__getGLBlend",36,8d,59,ee),
	HX_("__getGLCompareMode",4d,ad,57,0d),
	HX_("__getGLStencilAction",b7,a4,86,0d),
	HX_("__getGLTriangleFace",40,95,87,c3),
	HX_("__renderStage3D",19,ef,69,b1),
	HX_("__setGLBlend",aa,2b,d7,f1),
	HX_("__setGLBlendEquation",56,5d,f8,75),
	HX_("__setGLCullFace",b6,81,af,ac),
	HX_("__setGLDepthTest",ce,86,e6,10),
	HX_("__setGLFrontFace",bf,65,2a,ee),
	HX_("__setGLScissorTest",a7,26,13,08),
	HX_("__setGLStencilTest",87,2c,60,ef),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___driverInfo,"__driverInfo");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glDepthStencil,"__glDepthStencil");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glMaxTextureMaxAnisotropy,"__glMaxTextureMaxAnisotropy");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glMaxViewportDims,"__glMaxViewportDims");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glMemoryCurrentAvailable,"__glMemoryCurrentAvailable");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glMemoryTotalAvailable,"__glMemoryTotalAvailable");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glTextureMaxAnisotropy,"__glTextureMaxAnisotropy");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___driverInfo,"__driverInfo");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glDepthStencil,"__glDepthStencil");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glMaxTextureMaxAnisotropy,"__glMaxTextureMaxAnisotropy");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glMaxViewportDims,"__glMaxViewportDims");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glMemoryCurrentAvailable,"__glMemoryCurrentAvailable");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glMemoryTotalAvailable,"__glMemoryTotalAvailable");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glTextureMaxAnisotropy,"__glTextureMaxAnisotropy");
};

#endif

::hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_("__driverInfo",d6,93,0e,1c),
	HX_("__glDepthStencil",1e,c0,95,83),
	HX_("__glMaxTextureMaxAnisotropy",ea,71,58,8e),
	HX_("__glMaxViewportDims",b0,ca,60,28),
	HX_("__glMemoryCurrentAvailable",96,8c,12,63),
	HX_("__glMemoryTotalAvailable",2b,ce,6d,69),
	HX_("__glTextureMaxAnisotropy",d0,57,23,08),
	::String(null())
};

void Context3D_obj::__register()
{
	Context3D_obj _hx_dummy;
	Context3D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display3D.Context3D",a7,bf,a0,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_255_boot)
HXDLIN( 255)		_hx___glDepthStencil = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_256_boot)
HXDLIN( 256)		_hx___glMaxTextureMaxAnisotropy = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_257_boot)
HXDLIN( 257)		_hx___glMaxViewportDims = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_258_boot)
HXDLIN( 258)		_hx___glMemoryCurrentAvailable = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_259_boot)
HXDLIN( 259)		_hx___glMemoryTotalAvailable = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_260_boot)
HXDLIN( 260)		_hx___glTextureMaxAnisotropy = -1;
            	}
}

} // end namespace openfl
} // end namespace display3D
