// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetCache
#include <openfl/utils/AssetCache.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3b51c86a24135fbd_20_new,"openfl.utils.AssetCache","new",0x1485f77f,"openfl.utils.AssetCache.new","openfl/utils/AssetCache.hx",20,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_130_getBitmapData,"openfl.utils.AssetCache","getBitmapData",0x142af5ce,"openfl.utils.AssetCache.getBitmapData","openfl/utils/AssetCache.hx",130,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_141_getFont,"openfl.utils.AssetCache","getFont",0xa580b024,"openfl.utils.AssetCache.getFont","openfl/utils/AssetCache.hx",141,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_163_hasBitmapData,"openfl.utils.AssetCache","hasBitmapData",0xd20f5192,"openfl.utils.AssetCache.hasBitmapData","openfl/utils/AssetCache.hx",163,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_174_hasFont,"openfl.utils.AssetCache","hasFont",0xa24220e8,"openfl.utils.AssetCache.hasFont","openfl/utils/AssetCache.hx",174,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_185_hasSound,"openfl.utils.AssetCache","hasSound",0xd3d57f96,"openfl.utils.AssetCache.hasSound","openfl/utils/AssetCache.hx",185,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_238_setBitmapData,"openfl.utils.AssetCache","setBitmapData",0x5930d7da,"openfl.utils.AssetCache.setBitmapData","openfl/utils/AssetCache.hx",238,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_249_setFont,"openfl.utils.AssetCache","setFont",0x98824130,"openfl.utils.AssetCache.setFont","openfl/utils/AssetCache.hx",249,0xffd5b4cf)
HX_LOCAL_STACK_FRAME(_hx_pos_3b51c86a24135fbd_266_get_enabled,"openfl.utils.AssetCache","get_enabled",0xec9842b7,"openfl.utils.AssetCache.get_enabled","openfl/utils/AssetCache.hx",266,0xffd5b4cf)
namespace openfl{
namespace utils{

void AssetCache_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_3b51c86a24135fbd_20_new)
HXLINE(  42)		this->_hx___enabled = true;
HXLINE(  59)		this->bitmapData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  60)		this->font =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  61)		this->sound =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic AssetCache_obj::__CreateEmpty() { return new AssetCache_obj; }

void *AssetCache_obj::_hx_vtable = 0;

Dynamic AssetCache_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AssetCache_obj > _hx_result = new AssetCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetCache_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d7331b3;
}

static ::openfl::utils::IAssetCache_obj _hx_openfl_utils_AssetCache__hx_openfl_utils_IAssetCache= {
	( bool (::hx::Object::*)())&::openfl::utils::AssetCache_obj::get_enabled,
	(  ::openfl::display::BitmapData (::hx::Object::*)(::String))&::openfl::utils::AssetCache_obj::getBitmapData,
	(  ::openfl::text::Font (::hx::Object::*)(::String))&::openfl::utils::AssetCache_obj::getFont,
	( bool (::hx::Object::*)(::String))&::openfl::utils::AssetCache_obj::hasBitmapData,
	( bool (::hx::Object::*)(::String))&::openfl::utils::AssetCache_obj::hasFont,
	( bool (::hx::Object::*)(::String))&::openfl::utils::AssetCache_obj::hasSound,
	( void (::hx::Object::*)(::String, ::openfl::display::BitmapData))&::openfl::utils::AssetCache_obj::setBitmapData,
	( void (::hx::Object::*)(::String, ::openfl::text::Font))&::openfl::utils::AssetCache_obj::setFont,
};

void *AssetCache_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x8a5cf29a: return &_hx_openfl_utils_AssetCache__hx_openfl_utils_IAssetCache;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::openfl::display::BitmapData AssetCache_obj::getBitmapData(::String id){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_130_getBitmapData)
HXDLIN( 130)		return ( ( ::openfl::display::BitmapData)(this->bitmapData->get(id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,getBitmapData,return )

 ::openfl::text::Font AssetCache_obj::getFont(::String id){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_141_getFont)
HXDLIN( 141)		return ( ( ::openfl::text::Font)(this->font->get(id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,getFont,return )

bool AssetCache_obj::hasBitmapData(::String id){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_163_hasBitmapData)
HXDLIN( 163)		return this->bitmapData->exists(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,hasBitmapData,return )

bool AssetCache_obj::hasFont(::String id){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_174_hasFont)
HXDLIN( 174)		return this->font->exists(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,hasFont,return )

bool AssetCache_obj::hasSound(::String id){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_185_hasSound)
HXDLIN( 185)		return this->sound->exists(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,hasSound,return )

void AssetCache_obj::setBitmapData(::String id, ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_238_setBitmapData)
HXDLIN( 238)		this->bitmapData->set(id,bitmapData);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetCache_obj,setBitmapData,(void))

void AssetCache_obj::setFont(::String id, ::openfl::text::Font font){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_249_setFont)
HXDLIN( 249)		this->font->set(id,font);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetCache_obj,setFont,(void))

bool AssetCache_obj::get_enabled(){
            	HX_STACKFRAME(&_hx_pos_3b51c86a24135fbd_266_get_enabled)
HXDLIN( 266)		return this->_hx___enabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetCache_obj,get_enabled,return )


::hx::ObjectPtr< AssetCache_obj > AssetCache_obj::__new() {
	::hx::ObjectPtr< AssetCache_obj > __this = new AssetCache_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AssetCache_obj > AssetCache_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AssetCache_obj *__this = (AssetCache_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AssetCache_obj), true, "openfl.utils.AssetCache"));
	*(void **)__this = AssetCache_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AssetCache_obj::AssetCache_obj()
{
}

void AssetCache_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetCache);
	HX_MARK_MEMBER_NAME(bitmapData,"bitmapData");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(sound,"sound");
	HX_MARK_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_MARK_END_CLASS();
}

void AssetCache_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitmapData,"bitmapData");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(sound,"sound");
	HX_VISIT_MEMBER_NAME(_hx___enabled,"__enabled");
}

::hx::Val AssetCache_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return ::hx::Val( font ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { return ::hx::Val( sound ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_enabled() ); }
		if (HX_FIELD_EQ(inName,"getFont") ) { return ::hx::Val( getFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasFont") ) { return ::hx::Val( hasFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFont") ) { return ::hx::Val( setFont_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasSound") ) { return ::hx::Val( hasSound_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { return ::hx::Val( _hx___enabled ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { return ::hx::Val( bitmapData ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_enabled") ) { return ::hx::Val( get_enabled_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { return ::hx::Val( getBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasBitmapData") ) { return ::hx::Val( hasBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBitmapData") ) { return ::hx::Val( setBitmapData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AssetCache_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { sound=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { _hx___enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { bitmapData=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetCache_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("bitmapData",b9,b5,c0,33));
	outFields->push(HX_("font",cf,5d,c0,43));
	outFields->push(HX_("sound",cf,8c,cc,80));
	outFields->push(HX_("__enabled",61,55,7f,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AssetCache_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(AssetCache_obj,bitmapData),HX_("bitmapData",b9,b5,c0,33)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(AssetCache_obj,font),HX_("font",cf,5d,c0,43)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(AssetCache_obj,sound),HX_("sound",cf,8c,cc,80)},
	{::hx::fsBool,(int)offsetof(AssetCache_obj,_hx___enabled),HX_("__enabled",61,55,7f,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AssetCache_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetCache_obj_sMemberFields[] = {
	HX_("bitmapData",b9,b5,c0,33),
	HX_("font",cf,5d,c0,43),
	HX_("sound",cf,8c,cc,80),
	HX_("__enabled",61,55,7f,ff),
	HX_("getBitmapData",ef,11,33,90),
	HX_("getFont",85,0d,43,16),
	HX_("hasBitmapData",b3,6d,17,4e),
	HX_("hasFont",49,7e,04,13),
	HX_("hasSound",15,d7,24,0d),
	HX_("setBitmapData",fb,f3,38,d5),
	HX_("setFont",91,9e,44,09),
	HX_("get_enabled",98,64,2b,04),
	::String(null()) };

::hx::Class AssetCache_obj::__mClass;

void AssetCache_obj::__register()
{
	AssetCache_obj _hx_dummy;
	AssetCache_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.utils.AssetCache",0d,cc,3e,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AssetCache_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AssetCache_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetCache_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace utils
