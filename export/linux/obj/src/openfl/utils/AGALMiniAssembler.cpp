// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_utils_AGALMiniAssembler
#include <openfl/utils/AGALMiniAssembler.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__AGALMiniAssembler_OpCode
#include <openfl/utils/_AGALMiniAssembler/OpCode.h>
#endif
#ifndef INCLUDED_openfl_utils__AGALMiniAssembler_Register
#include <openfl/utils/_AGALMiniAssembler/Register.h>
#endif
#ifndef INCLUDED_openfl_utils__AGALMiniAssembler_Sampler
#include <openfl/utils/_AGALMiniAssembler/Sampler.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_878a01ff4ba15759_40_new,"openfl.utils.AGALMiniAssembler","new",0xa6ddea8f,"openfl.utils.AGALMiniAssembler.new","openfl/utils/AGALMiniAssembler.hx",40,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_184_assemble,"openfl.utils.AGALMiniAssembler","assemble",0x3c794483,"openfl.utils.AGALMiniAssembler.assemble","openfl/utils/AGALMiniAssembler.hx",184,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_674_initregmap,"openfl.utils.AGALMiniAssembler","initregmap",0x0ed0be89,"openfl.utils.AGALMiniAssembler.initregmap","openfl/utils/AGALMiniAssembler.hx",674,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_775_match,"openfl.utils.AGALMiniAssembler","match",0xf40b8d34,"openfl.utils.AGALMiniAssembler.match","openfl/utils/AGALMiniAssembler.hx",775,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_697_init,"openfl.utils.AGALMiniAssembler","init",0x58080a01,"openfl.utils.AGALMiniAssembler.init","openfl/utils/AGALMiniAssembler.hx",697,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_40_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",40,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_42_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",42,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_43_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",43,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_44_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",44,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_156_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",156,0x125eff83)
namespace openfl{
namespace utils{

void AGALMiniAssembler_obj::__construct(::hx::Null< bool >  __o_debugging){
            		bool debugging = __o_debugging.Default(false);
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_40_new)
HXLINE( 162)		this->debugEnabled = false;
HXLINE( 166)		this->debugEnabled = debugging;
HXLINE( 168)		if (!(::openfl::utils::AGALMiniAssembler_obj::initialized)) {
HXLINE( 170)			::openfl::utils::AGALMiniAssembler_obj::init();
            		}
            	}

Dynamic AGALMiniAssembler_obj::__CreateEmpty() { return new AGALMiniAssembler_obj; }

void *AGALMiniAssembler_obj::_hx_vtable = 0;

Dynamic AGALMiniAssembler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AGALMiniAssembler_obj > _hx_result = new AGALMiniAssembler_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AGALMiniAssembler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x65c43237;
}

 ::openfl::utils::ByteArrayData AGALMiniAssembler_obj::assemble(::String mode,::String source,::hx::Null< int >  __o_version,::hx::Null< bool >  __o_ignoreLimits){
            		int version = __o_version.Default(1);
            		bool ignoreLimits = __o_ignoreLimits.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_184_assemble)
HXLINE( 185)		int start = ::openfl::Lib_obj::getTimer();
HXLINE( 187)		this->agalcode =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 188)		this->error = HX_("",00,00,00,00);
HXLINE( 190)		bool isFrag = false;
HXLINE( 192)		if ((mode == HX_("fragment",d0,5f,e5,ad))) {
HXLINE( 194)			isFrag = true;
            		}
            		else {
HXLINE( 196)			if ((mode != HX_("vertex",64,db,47,a1))) {
HXLINE( 198)				this->error = ((((((HX_("ERROR: mode needs to be \"",d8,b7,4c,b2) + HX_("fragment",d0,5f,e5,ad)) + HX_("\" or \"",a3,20,aa,4e)) + HX_("vertex",64,db,47,a1)) + HX_("\" but is \"",69,33,a7,e2)) + mode) + HX_("\".",cc,1d,00,00));
            			}
            		}
HXLINE( 201)		this->agalcode->_hx___endian = 1;
HXLINE( 202)		this->agalcode->writeByte(160);
HXLINE( 203)		this->agalcode->writeUnsignedInt(version);
HXLINE( 204)		this->agalcode->writeByte(161);
HXLINE( 205)		{
HXLINE( 205)			int _hx_tmp;
HXDLIN( 205)			if (isFrag) {
HXLINE( 205)				_hx_tmp = 1;
            			}
            			else {
HXLINE( 205)				_hx_tmp = 0;
            			}
HXDLIN( 205)			this->agalcode->writeByte(_hx_tmp);
            		}
HXLINE( 207)		this->initregmap(version,ignoreLimits);
HXLINE( 209)		::Array< ::String > lines = ::StringTools_obj::replace(source,HX_("\r",0d,00,00,00),HX_("\n",0a,00,00,00)).split(HX_("\n",0a,00,00,00));
HXLINE( 210)		int nops = 0;
HXLINE( 211)		int lng = lines->length;
HXLINE( 213)		 ::EReg reg1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("<.*>",c6,d9,cb,27),HX_("g",67,00,00,00));
HXLINE( 214)		 ::EReg reg2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("([\\w\\.\\-\\+]+)",fb,41,d4,12),HX_("gi",22,5a,00,00));
HXLINE( 215)		 ::EReg reg3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\\w{3}",4c,2f,6f,dd),HX_("ig",de,5b,00,00));
HXLINE( 216)		 ::EReg reg4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?",ca,7c,76,12),HX_("gi",22,5a,00,00));
HXLINE( 217)		 ::EReg reg5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\[.*\\]",bc,fb,d3,4c),HX_("ig",de,5b,00,00));
HXLINE( 218)		 ::EReg reg6 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\\b[A-Za-z]{1,3}",fa,3b,55,e1),HX_("ig",de,5b,00,00));
HXLINE( 219)		 ::EReg reg7 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\d+",a3,26,46,00),HX_("",00,00,00,00));
HXLINE( 220)		 ::EReg reg8 =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\.[xyzw]{1,4})",c8,ae,42,2b),HX_("",00,00,00,00));
HXLINE( 221)		 ::EReg reg9 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[A-Za-z]{1,3}",de,ce,de,ac),HX_("ig",de,5b,00,00));
HXLINE( 222)		 ::EReg reg10 =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\.[xyzw]{1,1})",05,68,40,2b),HX_("",00,00,00,00));
HXLINE( 223)		 ::EReg reg11 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\+\\d{1,3}",89,08,70,4a),HX_("ig",de,5b,00,00));
HXLINE( 225)		int i = 0;
HXLINE( 227)		while(true){
HXLINE( 227)			bool _hx_tmp1;
HXDLIN( 227)			if ((i < lng)) {
HXLINE( 227)				_hx_tmp1 = (this->error == HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 227)				_hx_tmp1 = false;
            			}
HXDLIN( 227)			if (!(_hx_tmp1)) {
HXLINE( 227)				goto _hx_goto_1;
            			}
HXLINE( 229)			::String line = ::StringTools_obj::trim(lines->__get(i));
HXLINE( 232)			int startcomment = line.indexOf(HX_("//",20,29,00,00),null());
HXLINE( 233)			if ((startcomment != -1)) {
HXLINE( 235)				line = line.substr(0,startcomment);
            			}
HXLINE( 239)			int optsi;
HXDLIN( 239)			if (reg1->match(line)) {
HXLINE( 239)				optsi = ( (int)(reg1->matchedPos()->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic)) );
            			}
            			else {
HXLINE( 239)				optsi = -1;
            			}
HXLINE( 240)			::Array< ::String > opts = null();
HXLINE( 242)			if ((optsi != -1)) {
HXLINE( 244)				opts = this->match(line.substr(optsi,null()),reg2);
HXLINE( 245)				line = line.substr(0,optsi);
            			}
HXLINE( 249)			::String opCode = null();
HXLINE( 250)			 ::openfl::utils::_AGALMiniAssembler::OpCode opFound = null();
HXLINE( 252)			if (reg3->match(line)) {
HXLINE( 254)				opCode = reg3->matched(0);
HXLINE( 255)				opFound = ( ( ::openfl::utils::_AGALMiniAssembler::OpCode)(::openfl::utils::AGALMiniAssembler_obj::OPMAP->get(opCode)) );
            			}
HXLINE( 258)			if (::hx::IsNull( opFound )) {
HXLINE( 260)				if ((line.length >= 3)) {
HXLINE( 262)					::lime::utils::Log_obj::warn((((HX_("warning: bad line ",cf,50,44,4f) + i) + HX_(": ",a6,32,00,00)) + lines->__get(i)),::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),262,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            				}
HXLINE( 265)				i = (i + 1);
HXLINE( 266)				continue;
            			}
HXLINE( 270)			if (this->debugEnabled) {
HXLINE( 272)				::lime::utils::Log_obj::info(opFound,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),272,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            			}
HXLINE( 275)			if (::hx::IsNull( opFound )) {
HXLINE( 277)				if ((line.length >= 3)) {
HXLINE( 279)					::lime::utils::Log_obj::warn((((HX_("warning: bad line ",cf,50,44,4f) + i) + HX_(": ",a6,32,00,00)) + lines->__get(i)),::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),279,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            				}
HXLINE( 282)				i = (i + 1);
HXLINE( 283)				continue;
            			}
HXLINE( 286)			int line1 = line.indexOf(opFound->name,null());
HXDLIN( 286)			line = line.substr((line1 + opFound->name.length),null());
HXLINE( 288)			bool _hx_tmp2;
HXDLIN( 288)			if (((opFound->flags & 256) != 0)) {
HXLINE( 288)				_hx_tmp2 = (version < 2);
            			}
            			else {
HXLINE( 288)				_hx_tmp2 = false;
            			}
HXDLIN( 288)			if (_hx_tmp2) {
HXLINE( 290)				this->error = HX_("error: opcode requires version 2.",d2,34,38,ba);
HXLINE( 291)				goto _hx_goto_1;
            			}
HXLINE( 294)			bool _hx_tmp3;
HXDLIN( 294)			if (((opFound->flags & 64) != 0)) {
HXLINE( 294)				_hx_tmp3 = isFrag;
            			}
            			else {
HXLINE( 294)				_hx_tmp3 = false;
            			}
HXDLIN( 294)			if (_hx_tmp3) {
HXLINE( 296)				this->error = HX_("error: opcode is only allowed in vertex programs.",a4,4b,76,ab);
HXLINE( 297)				goto _hx_goto_1;
            			}
HXLINE( 300)			bool _hx_tmp4;
HXDLIN( 300)			if (((opFound->flags & 32) != 0)) {
HXLINE( 300)				_hx_tmp4 = !(isFrag);
            			}
            			else {
HXLINE( 300)				_hx_tmp4 = false;
            			}
HXDLIN( 300)			if (_hx_tmp4) {
HXLINE( 302)				this->error = HX_("error: opcode is only allowed in fragment programs.",50,b1,63,46);
HXLINE( 303)				goto _hx_goto_1;
            			}
HXLINE( 306)			if (this->verbose) {
HXLINE( 308)				::String _hx_tmp5 = (HX_("emit opcode=",e2,2a,94,83) + ::Std_obj::string(opFound));
HXDLIN( 308)				::lime::utils::Log_obj::info(_hx_tmp5,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),308,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            			}
HXLINE( 311)			this->agalcode->writeUnsignedInt(opFound->emitCode);
HXLINE( 312)			nops = (nops + 1);
HXLINE( 314)			if ((nops > 4096)) {
HXLINE( 316)				this->error = ((HX_("error: too many opcodes. maximum is ",26,64,b3,3b) + 4096) + HX_(".",2e,00,00,00));
HXLINE( 317)				goto _hx_goto_1;
            			}
HXLINE( 321)			::Array< ::String > regs = this->match(line,reg4);
HXLINE( 323)			if ((regs->length != opFound->numRegister)) {
HXLINE( 325)				this->error = ((((HX_("error: wrong number of operands. found ",ad,a0,73,c8) + regs->length) + HX_(" but expected ",e9,a0,e7,6d)) + opFound->numRegister) + HX_(".",2e,00,00,00));
HXLINE( 326)				goto _hx_goto_1;
            			}
HXLINE( 329)			bool badreg = false;
HXLINE( 330)			int pad = 160;
HXLINE( 331)			int regLength = regs->length;
HXLINE( 333)			{
HXLINE( 333)				int _g = 0;
HXDLIN( 333)				while((_g < regLength)){
HXLINE( 333)					_g = (_g + 1);
HXDLIN( 333)					int j = (_g - 1);
HXLINE( 335)					bool isRelative = false;
HXLINE( 336)					::Array< ::String > relreg = this->match(regs->__get(j),reg5);
HXLINE( 338)					if ((relreg->length > 0)) {
HXLINE( 340)						regs[j] = ::StringTools_obj::replace(regs->__get(j),relreg->__get(0),HX_("0",30,00,00,00));
HXLINE( 342)						if (this->verbose) {
HXLINE( 344)							::lime::utils::Log_obj::info(HX_("IS REL",03,c6,b4,0f),::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),344,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            						}
HXLINE( 347)						isRelative = true;
            					}
HXLINE( 350)					::Array< ::String > res = this->match(regs->__get(j),reg6);
HXLINE( 351)					if ((res->length == 0)) {
HXLINE( 353)						this->error = ((((HX_("error: could not parse operand ",5e,e6,18,8a) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(").",e5,23,00,00));
HXLINE( 354)						badreg = true;
HXLINE( 355)						goto _hx_goto_2;
            					}
HXLINE( 358)					 ::openfl::utils::_AGALMiniAssembler::Register regFound = ( ( ::openfl::utils::_AGALMiniAssembler::Register)(::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(res->__get(0))) );
HXLINE( 361)					if (this->debugEnabled) {
HXLINE( 363)						::lime::utils::Log_obj::info(regFound,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),363,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            					}
HXLINE( 366)					if (::hx::IsNull( regFound )) {
HXLINE( 368)						this->error = ((((HX_("error: could not find register name for operand ",d3,f6,78,ae) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(").",e5,23,00,00));
HXLINE( 369)						badreg = true;
HXLINE( 370)						goto _hx_goto_2;
            					}
HXLINE( 373)					if (isFrag) {
HXLINE( 375)						if (((regFound->flags & 32) == 0)) {
HXLINE( 377)							this->error = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") only allowed in vertex programs.",e9,f2,50,fb));
HXLINE( 378)							badreg = true;
HXLINE( 379)							goto _hx_goto_2;
            						}
HXLINE( 382)						if (isRelative) {
HXLINE( 384)							this->error = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") relative adressing not allowed in fragment programs.",34,7c,f5,9f));
HXLINE( 385)							badreg = true;
HXLINE( 386)							goto _hx_goto_2;
            						}
            					}
            					else {
HXLINE( 391)						if (((regFound->flags & 64) == 0)) {
HXLINE( 393)							this->error = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") only allowed in fragment programs.",d5,73,aa,3f));
HXLINE( 394)							badreg = true;
HXLINE( 395)							goto _hx_goto_2;
            						}
            					}
HXLINE( 399)					int _hx_tmp6 = regs->__get(j).indexOf(regFound->name,null());
HXDLIN( 399)					regs[j] = regs->__get(j).substr((_hx_tmp6 + regFound->name.length),null());
HXLINE( 401)					::Array< ::String > idxmatch;
HXDLIN( 401)					if (isRelative) {
HXLINE( 401)						idxmatch = this->match(relreg->__get(0),reg7);
            					}
            					else {
HXLINE( 401)						idxmatch = this->match(regs->__get(j),reg7);
            					}
HXLINE( 402)					int regidx = 0;
HXLINE( 404)					if ((idxmatch->length > 0)) {
HXLINE( 406)						regidx = ( (int)(::Std_obj::parseInt(idxmatch->__get(0))) );
            					}
HXLINE( 409)					int a = regFound->range;
HXDLIN( 409)					bool aNeg = (regidx < 0);
HXDLIN( 409)					bool _hx_tmp7;
HXDLIN( 409)					if ((aNeg != (a < 0))) {
HXLINE( 409)						_hx_tmp7 = aNeg;
            					}
            					else {
HXLINE( 409)						_hx_tmp7 = (regidx > a);
            					}
HXDLIN( 409)					if (_hx_tmp7) {
HXLINE( 411)						::String _hx_tmp8 = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") index exceeds limit of ",5e,a7,88,f8));
HXDLIN( 411)						int this1 = (regFound->range + 1);
HXDLIN( 411)						Float _hx_tmp9;
HXDLIN( 411)						if ((this1 < 0)) {
HXLINE( 411)							_hx_tmp9 = (((Float)4294967296.0) + this1);
            						}
            						else {
HXLINE( 411)							_hx_tmp9 = (this1 + ((Float)0.0));
            						}
HXDLIN( 411)						this->error = ((_hx_tmp8 + ::Std_obj::string(_hx_tmp9)) + HX_(".",2e,00,00,00));
HXLINE( 412)						badreg = true;
HXLINE( 413)						goto _hx_goto_2;
            					}
HXLINE( 416)					int regmask = 0;
HXLINE( 417)					::Array< ::String > maskmatch = this->match(regs->__get(j),reg8);
HXLINE( 418)					bool isDest;
HXDLIN( 418)					if ((j == 0)) {
HXLINE( 418)						isDest = ((opFound->flags & 128) == 0);
            					}
            					else {
HXLINE( 418)						isDest = false;
            					}
HXLINE( 419)					bool isSampler;
HXDLIN( 419)					if ((j == 2)) {
HXLINE( 419)						isSampler = ((opFound->flags & 8) != 0);
            					}
            					else {
HXLINE( 419)						isSampler = false;
            					}
HXLINE( 420)					int reltype = 0;
HXLINE( 421)					int relsel = 0;
HXLINE( 422)					int reloffset = 0;
HXLINE( 424)					bool _hx_tmp10;
HXDLIN( 424)					if (isDest) {
HXLINE( 424)						_hx_tmp10 = isRelative;
            					}
            					else {
HXLINE( 424)						_hx_tmp10 = false;
            					}
HXDLIN( 424)					if (_hx_tmp10) {
HXLINE( 426)						this->error = HX_("error: relative can not be destination",54,bb,32,e3);
HXLINE( 427)						badreg = true;
HXLINE( 428)						goto _hx_goto_2;
            					}
HXLINE( 431)					if ((maskmatch->length > 0)) {
HXLINE( 433)						regmask = 0;
HXLINE( 434)						int cv = 0;
HXLINE( 435)						int maskLength = maskmatch->__get(0).length;
HXLINE( 436)						int k = 1;
HXLINE( 438)						while((k < maskLength)){
HXLINE( 440)							cv = (( (int)(maskmatch->__get(0).charCodeAt(k)) ) - 120);
HXLINE( 442)							bool aNeg1 = (cv < 0);
HXDLIN( 442)							bool _hx_tmp11;
HXDLIN( 442)							if ((aNeg1 != false)) {
HXLINE( 442)								_hx_tmp11 = aNeg1;
            							}
            							else {
HXLINE( 442)								_hx_tmp11 = (cv > 2);
            							}
HXDLIN( 442)							if (_hx_tmp11) {
HXLINE( 444)								cv = 3;
            							}
HXLINE( 447)							if (isDest) {
HXLINE( 449)								regmask = (regmask | (1 << cv));
            							}
            							else {
HXLINE( 453)								regmask = (regmask | (cv << ((k - 1) << 1)));
            							}
HXLINE( 456)							k = (k + 1);
            						}
HXLINE( 459)						if (!(isDest)) {
HXLINE( 461)							while((k <= 4)){
HXLINE( 463)								regmask = (regmask | (cv << ((k - 1) << 1)));
HXLINE( 464)								k = (k + 1);
            							}
            						}
            					}
            					else {
HXLINE( 470)						if (isDest) {
HXLINE( 470)							regmask = 15;
            						}
            						else {
HXLINE( 470)							regmask = 228;
            						}
            					}
HXLINE( 473)					if (isRelative) {
HXLINE( 475)						::Array< ::String > relname = this->match(relreg->__get(0),reg9);
HXLINE( 476)						 ::openfl::utils::_AGALMiniAssembler::Register regFoundRel = ( ( ::openfl::utils::_AGALMiniAssembler::Register)(::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(relname->__get(0))) );
HXLINE( 478)						if (::hx::IsNull( regFoundRel )) {
HXLINE( 480)							this->error = HX_("error: bad index register",1a,79,3a,ab);
HXLINE( 481)							badreg = true;
HXLINE( 482)							goto _hx_goto_2;
            						}
HXLINE( 485)						reltype = regFoundRel->emitCode;
HXLINE( 486)						::Array< ::String > selmatch = this->match(relreg->__get(0),reg10);
HXLINE( 488)						if ((selmatch->length == 0)) {
HXLINE( 490)							this->error = HX_("error: bad index register select",42,31,f8,d3);
HXLINE( 491)							badreg = true;
HXLINE( 492)							goto _hx_goto_2;
            						}
HXLINE( 495)						relsel = (( (int)(selmatch->__get(0).charCodeAt(1)) ) - 120);
HXLINE( 497)						bool aNeg2 = (relsel < 0);
HXDLIN( 497)						bool _hx_tmp12;
HXDLIN( 497)						if ((aNeg2 != false)) {
HXLINE( 497)							_hx_tmp12 = aNeg2;
            						}
            						else {
HXLINE( 497)							_hx_tmp12 = (relsel > 2);
            						}
HXDLIN( 497)						if (_hx_tmp12) {
HXLINE( 499)							relsel = 3;
            						}
HXLINE( 502)						::Array< ::String > relofs = this->match(relreg->__get(0),reg11);
HXLINE( 504)						if ((relofs->length > 0)) {
HXLINE( 506)							reloffset = ( (int)(::Std_obj::parseInt(relofs->__get(0))) );
            						}
HXLINE( 509)						bool _hx_tmp13;
HXDLIN( 509)						if ((reloffset >= 0)) {
HXLINE( 509)							_hx_tmp13 = (reloffset > 255);
            						}
            						else {
HXLINE( 509)							_hx_tmp13 = true;
            						}
HXDLIN( 509)						if (_hx_tmp13) {
HXLINE( 511)							this->error = ((HX_("error: index offset ",f1,9c,33,57) + reloffset) + HX_(" out of bounds. [0..255]",de,2b,59,f3));
HXLINE( 512)							badreg = true;
HXLINE( 513)							goto _hx_goto_2;
            						}
HXLINE( 516)						if (this->verbose) {
HXLINE( 518)							::String _hx_tmp14 = ((((HX_("RELATIVE: type=",91,08,0e,50) + reltype) + HX_("==",60,35,00,00)) + relname->__get(0)) + HX_(" sel=",83,1b,23,b9));
HXDLIN( 518)							int _hx_int = relsel;
HXDLIN( 518)							Float _hx_tmp15;
HXDLIN( 518)							if ((_hx_int < 0)) {
HXLINE( 518)								_hx_tmp15 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE( 518)								_hx_tmp15 = (_hx_int + ((Float)0.0));
            							}
HXDLIN( 518)							::String _hx_tmp16 = ((_hx_tmp14 + ::Std_obj::string(_hx_tmp15)) + HX_("==",60,35,00,00));
HXDLIN( 518)							::String _hx_tmp17 = ((_hx_tmp16 + selmatch->__get(0)) + HX_(" idx=",80,41,86,b2));
HXDLIN( 518)							int int1 = regidx;
HXDLIN( 518)							Float _hx_tmp18;
HXDLIN( 518)							if ((int1 < 0)) {
HXLINE( 518)								_hx_tmp18 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE( 518)								_hx_tmp18 = (int1 + ((Float)0.0));
            							}
HXDLIN( 518)							::String _hx_tmp19 = (((_hx_tmp17 + ::Std_obj::string(_hx_tmp18)) + HX_(" offset=",2a,4d,b3,fd)) + reloffset);
HXDLIN( 518)							::lime::utils::Log_obj::info(_hx_tmp19,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),518,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            						}
            					}
HXLINE( 523)					if (this->verbose) {
HXLINE( 525)						::String _hx_tmp20 = ((HX_("  emit argcode=",c7,a3,7b,7d) + ::Std_obj::string(regFound)) + HX_("[",5b,00,00,00));
HXDLIN( 525)						int int2 = regidx;
HXDLIN( 525)						Float _hx_tmp21;
HXDLIN( 525)						if ((int2 < 0)) {
HXLINE( 525)							_hx_tmp21 = (((Float)4294967296.0) + int2);
            						}
            						else {
HXLINE( 525)							_hx_tmp21 = (int2 + ((Float)0.0));
            						}
HXDLIN( 525)						::String _hx_tmp22 = ((((_hx_tmp20 + ::Std_obj::string(_hx_tmp21)) + HX_("][",5e,51,00,00)) + regmask) + HX_("]",5d,00,00,00));
HXDLIN( 525)						::lime::utils::Log_obj::info(_hx_tmp22,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),525,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            					}
HXLINE( 528)					if (isDest) {
HXLINE( 530)						this->agalcode->writeShort(regidx);
HXLINE( 531)						this->agalcode->writeByte(regmask);
HXLINE( 532)						this->agalcode->writeByte(regFound->emitCode);
HXLINE( 533)						pad = (pad - 32);
            					}
            					else {
HXLINE( 537)						if (isSampler) {
HXLINE( 539)							if (this->verbose) {
HXLINE( 541)								::lime::utils::Log_obj::info(HX_("  emit sampler",3b,ce,fa,fa),::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),541,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            							}
HXLINE( 544)							int samplerbits = 5;
HXLINE( 545)							int optsLength;
HXDLIN( 545)							if (::hx::IsNull( opts )) {
HXLINE( 545)								optsLength = 0;
            							}
            							else {
HXLINE( 545)								optsLength = opts->length;
            							}
HXLINE( 546)							Float bias = ((Float)0.0);
HXLINE( 548)							{
HXLINE( 548)								int _g1 = 0;
HXDLIN( 548)								int _g2 = optsLength;
HXDLIN( 548)								while((_g1 < _g2)){
HXLINE( 548)									_g1 = (_g1 + 1);
HXDLIN( 548)									int k1 = (_g1 - 1);
HXLINE( 550)									if (this->verbose) {
HXLINE( 552)										::lime::utils::Log_obj::info((HX_("    opt: ",99,49,70,b6) + opts->__get(k1)),::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),552,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            									}
HXLINE( 555)									 ::openfl::utils::_AGALMiniAssembler::Sampler optfound = ( ( ::openfl::utils::_AGALMiniAssembler::Sampler)(::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->get(opts->__get(k1))) );
HXLINE( 557)									if (::hx::IsNull( optfound )) {
HXLINE( 561)										bias = ::Std_obj::parseFloat(opts->__get(k1));
HXLINE( 563)										if (this->verbose) {
HXLINE( 565)											::lime::utils::Log_obj::info((HX_("    bias: ",5f,a5,fa,a4) + bias),::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),565,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            										}
            									}
            									else {
HXLINE( 570)										if ((optfound->flag != 16)) {
HXLINE( 572)											samplerbits = (samplerbits & ~((15 << optfound->flag)));
            										}
HXLINE( 575)										samplerbits = (samplerbits | (optfound->mask << optfound->flag));
            									}
            								}
            							}
HXLINE( 579)							this->agalcode->writeShort(regidx);
HXLINE( 580)							{
HXLINE( 580)								 ::openfl::utils::ByteArrayData this2 = this->agalcode;
HXDLIN( 580)								this2->writeByte(::Std_obj::_hx_int((bias * ((Float)8.0))));
            							}
HXLINE( 581)							this->agalcode->writeByte(0);
HXLINE( 582)							this->agalcode->writeUnsignedInt(samplerbits);
HXLINE( 584)							if (this->verbose) {
HXLINE( 586)								::lime::utils::Log_obj::info((HX_("    bits: ",2c,b3,89,b1) + (samplerbits - 5)),::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),586,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            							}
HXLINE( 589)							pad = (pad - 64);
            						}
            						else {
HXLINE( 593)							if ((j == 0)) {
HXLINE( 595)								this->agalcode->writeUnsignedInt(0);
HXLINE( 596)								pad = (pad - 32);
            							}
HXLINE( 599)							this->agalcode->writeShort(regidx);
HXLINE( 600)							this->agalcode->writeByte(reloffset);
HXLINE( 601)							this->agalcode->writeByte(regmask);
HXLINE( 602)							this->agalcode->writeByte(regFound->emitCode);
HXLINE( 603)							this->agalcode->writeByte(reltype);
HXLINE( 604)							{
HXLINE( 604)								int _hx_tmp23;
HXDLIN( 604)								if (isRelative) {
HXLINE( 604)									_hx_tmp23 = (relsel | 32768);
            								}
            								else {
HXLINE( 604)									_hx_tmp23 = 0;
            								}
HXDLIN( 604)								this->agalcode->writeShort(_hx_tmp23);
            							}
HXLINE( 606)							pad = (pad - 64);
            						}
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 612)			int j1 = 0;
HXLINE( 613)			while((j1 < pad)){
HXLINE( 615)				this->agalcode->writeByte(0);
HXLINE( 616)				j1 = (j1 + 8);
            			}
HXLINE( 619)			if (badreg) {
HXLINE( 621)				goto _hx_goto_1;
            			}
HXLINE( 624)			i = (i + 1);
            		}
            		_hx_goto_1:;
HXLINE( 627)		if ((this->error != HX_("",00,00,00,00))) {
HXLINE( 629)			this->error = (this->error + (((HX_("\n  at line ",49,c3,70,34) + i) + HX_(" ",20,00,00,00)) + lines->__get(i)));
HXLINE( 630)			::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(this->agalcode,0);
HXLINE( 631)			::lime::utils::Log_obj::info(this->error,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),631,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            		}
HXLINE( 635)		if (this->debugEnabled) {
HXLINE( 637)			::String dbgLine = HX_("generated bytecode:",94,4e,7c,79);
HXLINE( 640)			{
HXLINE( 640)				int _g3 = 0;
HXDLIN( 640)				int _g4 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->agalcode);
HXDLIN( 640)				while((_g3 < _g4)){
HXLINE( 640)					_g3 = (_g3 + 1);
HXDLIN( 640)					int index = (_g3 - 1);
HXLINE( 642)					if ((::hx::Mod(index,16) == 0)) {
HXLINE( 644)						dbgLine = (dbgLine + HX_("\n",0a,00,00,00));
            					}
HXLINE( 647)					if ((::hx::Mod(index,4) == 0)) {
HXLINE( 649)						dbgLine = (dbgLine + HX_(" ",20,00,00,00));
            					}
HXLINE( 652)					::String byteStr = ::StringTools_obj::hex(( (int)(this->agalcode->b->__get(index)) ),2);
HXLINE( 654)					if ((byteStr.length < 2)) {
HXLINE( 656)						byteStr = (HX_("0",30,00,00,00) + byteStr);
            					}
HXLINE( 659)					dbgLine = (dbgLine + byteStr);
            				}
            			}
HXLINE( 662)			::lime::utils::Log_obj::info(dbgLine,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),662,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            		}
HXLINE( 665)		if (this->verbose) {
HXLINE( 667)			::String _hx_tmp24 = ((HX_("AGALMiniAssembler.assemble time: ",4b,2c,a6,f9) + (( (Float)((::openfl::Lib_obj::getTimer() - start)) ) / ( (Float)(1000) ))) + HX_("s",73,00,00,00));
HXDLIN( 667)			::lime::utils::Log_obj::info(_hx_tmp24,::hx::SourceInfo(HX_("openfl/utils/AGALMiniAssembler.hx",83,ff,5e,12),667,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            		}
HXLINE( 670)		return this->agalcode;
            	}


HX_DEFINE_DYNAMIC_FUNC4(AGALMiniAssembler_obj,assemble,return )

void AGALMiniAssembler_obj::initregmap(int version,bool ignorelimits){
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_674_initregmap)
HXLINE( 675)		{
HXLINE( 675)			int v;
HXDLIN( 675)			if (ignorelimits) {
HXLINE( 675)				v = 1024;
            			}
            			else {
HXLINE( 675)				bool v1;
HXDLIN( 675)				if ((version != 1)) {
HXLINE( 675)					v1 = (version == 2);
            				}
            				else {
HXLINE( 675)					v1 = true;
            				}
HXDLIN( 675)				if (v1) {
HXLINE( 675)					v = 7;
            				}
            				else {
HXLINE( 675)					v = 15;
            				}
            			}
HXDLIN( 675)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("va",2b,67,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("va",2b,67,00,00),HX_("vertex attribute",60,ec,e8,40),0,v,66));
            		}
HXLINE( 676)		{
HXLINE( 676)			int v2;
HXDLIN( 676)			if (ignorelimits) {
HXLINE( 676)				v2 = 1024;
            			}
            			else {
HXLINE( 676)				if ((version == 1)) {
HXLINE( 676)					v2 = 127;
            				}
            				else {
HXLINE( 676)					v2 = 249;
            				}
            			}
HXDLIN( 676)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("vc",2d,67,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vc",2d,67,00,00),HX_("vertex constant",a0,79,46,53),1,v2,66));
            		}
HXLINE( 677)		{
HXLINE( 677)			int v3;
HXDLIN( 677)			if (ignorelimits) {
HXLINE( 677)				v3 = 1024;
            			}
            			else {
HXLINE( 677)				if ((version == 1)) {
HXLINE( 677)					v3 = 7;
            				}
            				else {
HXLINE( 677)					v3 = 25;
            				}
            			}
HXDLIN( 677)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("vt",3e,67,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vt",3e,67,00,00),HX_("vertex temporary",d5,c5,fd,1d),2,v3,67));
            		}
HXLINE( 678)		{
HXLINE( 678)			int v4;
HXDLIN( 678)			if (ignorelimits) {
HXLINE( 678)				v4 = 1024;
            			}
            			else {
HXLINE( 678)				v4 = 0;
            			}
HXDLIN( 678)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("vo",39,67,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vo",39,67,00,00),HX_("vertex output",3d,00,1e,e4),3,v4,65));
            		}
HXLINE( 679)		{
HXLINE( 679)			int v5;
HXDLIN( 679)			if (ignorelimits) {
HXLINE( 679)				v5 = 1024;
            			}
            			else {
HXLINE( 679)				if ((version == 1)) {
HXLINE( 679)					v5 = 7;
            				}
            				else {
HXLINE( 679)					v5 = 9;
            				}
            			}
HXDLIN( 679)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("vi",33,67,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vi",33,67,00,00),HX_("varying",70,bc,7b,e7),4,v5,99));
            		}
HXLINE( 680)		{
HXLINE( 680)			int v6;
HXDLIN( 680)			if (ignorelimits) {
HXLINE( 680)				v6 = 1024;
            			}
            			else {
HXLINE( 680)				if ((version == 1)) {
HXLINE( 680)					v6 = 27;
            				}
            				else {
HXLINE( 680)					if ((version == 2)) {
HXLINE( 680)						v6 = 63;
            					}
            					else {
HXLINE( 680)						v6 = 199;
            					}
            				}
            			}
HXDLIN( 680)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("fc",3d,59,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fc",3d,59,00,00),HX_("fragment constant",b4,07,43,d0),1,v6,34));
            		}
HXLINE( 681)		{
HXLINE( 681)			int v7;
HXDLIN( 681)			if (ignorelimits) {
HXLINE( 681)				v7 = 1024;
            			}
            			else {
HXLINE( 681)				if ((version == 1)) {
HXLINE( 681)					v7 = 7;
            				}
            				else {
HXLINE( 681)					v7 = 25;
            				}
            			}
HXDLIN( 681)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("ft",4e,59,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("ft",4e,59,00,00),HX_("fragment temporary",41,89,fd,fd),2,v7,35));
            		}
HXLINE( 682)		{
HXLINE( 682)			int v8;
HXDLIN( 682)			if (ignorelimits) {
HXLINE( 682)				v8 = 1024;
            			}
            			else {
HXLINE( 682)				v8 = 7;
            			}
HXDLIN( 682)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("fs",4d,59,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fs",4d,59,00,00),HX_("texture sampler",c3,a4,85,37),5,v8,34));
            		}
HXLINE( 683)		{
HXLINE( 683)			int v9;
HXDLIN( 683)			if (ignorelimits) {
HXLINE( 683)				v9 = 1024;
            			}
            			else {
HXLINE( 683)				if ((version == 1)) {
HXLINE( 683)					v9 = 0;
            				}
            				else {
HXLINE( 683)					v9 = 3;
            				}
            			}
HXDLIN( 683)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("fo",49,59,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fo",49,59,00,00),HX_("fragment output",51,21,41,79),3,v9,33));
            		}
HXLINE( 684)		{
HXLINE( 684)			int v10;
HXDLIN( 684)			if (ignorelimits) {
HXLINE( 684)				v10 = 1024;
            			}
            			else {
HXLINE( 684)				if ((version == 1)) {
HXLINE( 684)					v10 = -1;
            				}
            				else {
HXLINE( 684)					v10 = 0;
            				}
            			}
HXDLIN( 684)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("fd",3e,59,00,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fd",3e,59,00,00),HX_("fragment depth output",ce,1a,fc,b5),6,v10,33));
            		}
HXLINE( 685)		{
HXLINE( 685)			int v11;
HXDLIN( 685)			if (ignorelimits) {
HXLINE( 685)				v11 = 1024;
            			}
            			else {
HXLINE( 685)				v11 = 0;
            			}
HXDLIN( 685)			::openfl::utils::AGALMiniAssembler_obj::REGMAP->set(HX_("iid",84,08,50,00), ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("iid",84,08,50,00),HX_("instance id",86,af,f1,28),7,v11,66));
            		}
HXLINE( 688)		{
HXLINE( 688)			::Dynamic this1 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 688)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("op",21,61,00,00),::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vo",39,67,00,00)));
            		}
HXLINE( 689)		{
HXLINE( 689)			::Dynamic this2 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 689)			( ( ::haxe::ds::StringMap)(this2) )->set(HX_("i",69,00,00,00),::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vi",33,67,00,00)));
            		}
HXLINE( 690)		{
HXLINE( 690)			::Dynamic this3 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 690)			( ( ::haxe::ds::StringMap)(this3) )->set(HX_("v",76,00,00,00),::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vi",33,67,00,00)));
            		}
HXLINE( 691)		{
HXLINE( 691)			::Dynamic this4 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 691)			( ( ::haxe::ds::StringMap)(this4) )->set(HX_("oc",14,61,00,00),::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("fo",49,59,00,00)));
            		}
HXLINE( 692)		{
HXLINE( 692)			::Dynamic this5 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 692)			( ( ::haxe::ds::StringMap)(this5) )->set(HX_("od",15,61,00,00),::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("fd",3e,59,00,00)));
            		}
HXLINE( 693)		{
HXLINE( 693)			::Dynamic this6 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 693)			( ( ::haxe::ds::StringMap)(this6) )->set(HX_("fi",43,59,00,00),::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vi",33,67,00,00)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(AGALMiniAssembler_obj,initregmap,(void))

::Array< ::String > AGALMiniAssembler_obj::match(::String value, ::EReg reg){
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_775_match)
HXLINE( 776)		::Array< ::String > matches = ::Array_obj< ::String >::__new(0);
HXLINE( 777)		int index = 0;
HXLINE( 778)		::String match;
HXLINE( 780)		while(reg->matchSub(value,index,null())){
HXLINE( 782)			match = reg->matched(0);
HXLINE( 783)			matches->push(match);
HXLINE( 784)			index = ( (int)((reg->matchedPos()->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + match.length)) );
            		}
HXLINE( 787)		return matches;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AGALMiniAssembler_obj,match,return )

 ::haxe::ds::StringMap AGALMiniAssembler_obj::OPMAP;

 ::haxe::ds::StringMap AGALMiniAssembler_obj::REGMAP;

 ::haxe::ds::StringMap AGALMiniAssembler_obj::SAMPLEMAP;

bool AGALMiniAssembler_obj::initialized;

void AGALMiniAssembler_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_697_init)
HXLINE( 698)		::openfl::utils::AGALMiniAssembler_obj::initialized = true;
HXLINE( 701)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("mov",d4,16,53,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("mov",d4,16,53,00),2,0,0));
HXLINE( 702)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("add",21,f2,49,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("add",21,f2,49,00),3,1,0));
HXLINE( 703)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("sub",80,a9,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sub",80,a9,57,00),3,2,0));
HXLINE( 704)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("mul",04,1c,53,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("mul",04,1c,53,00),3,3,0));
HXLINE( 705)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("div",51,3d,4c,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("div",51,3d,4c,00),3,4,0));
HXLINE( 706)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("rcp",9f,d7,56,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("rcp",9f,d7,56,00),2,5,0));
HXLINE( 707)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("min",92,11,53,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("min",92,11,53,00),3,6,0));
HXLINE( 708)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("max",a4,0a,53,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("max",a4,0a,53,00),3,7,0));
HXLINE( 709)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("frc",97,c9,4d,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("frc",97,c9,4d,00),2,8,0));
HXLINE( 710)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("sqt",16,a6,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sqt",16,a6,57,00),2,9,0));
HXLINE( 711)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("rsq",90,e5,56,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("rsq",90,e5,56,00),2,10,0));
HXLINE( 712)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("pow",98,5d,55,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("pow",98,5d,55,00),3,11,0));
HXLINE( 713)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("log",84,54,52,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("log",84,54,52,00),2,12,0));
HXLINE( 714)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("exp",9d,0c,4d,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("exp",9d,0c,4d,00),2,13,0));
HXLINE( 715)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("nrm",a9,db,53,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("nrm",a9,db,53,00),2,14,0));
HXLINE( 716)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("sin",18,9f,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sin",18,9f,57,00),2,15,0));
HXLINE( 717)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("cos",47,80,4b,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("cos",47,80,4b,00),2,16,0));
HXLINE( 718)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("crs",e4,82,4b,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("crs",e4,82,4b,00),3,17,0));
HXLINE( 719)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("dp3",27,43,4c,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("dp3",27,43,4c,00),3,18,0));
HXLINE( 720)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("dp4",28,43,4c,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("dp4",28,43,4c,00),3,19,0));
HXLINE( 721)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("abs",72,f0,49,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("abs",72,f0,49,00),2,20,0));
HXLINE( 722)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("neg",50,d0,53,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("neg",50,d0,53,00),2,21,0));
HXLINE( 723)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("sat",26,98,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sat",26,98,57,00),2,22,0));
HXLINE( 724)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("m33",4d,e2,52,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("m33",4d,e2,52,00),3,23,16));
HXLINE( 725)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("m44",2d,e3,52,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("m44",2d,e3,52,00),3,24,16));
HXLINE( 726)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("m34",4e,e2,52,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("m34",4e,e2,52,00),3,25,16));
HXLINE( 727)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("ddx",f8,38,4c,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ddx",f8,38,4c,00),2,26,288));
HXLINE( 728)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("ddy",f9,38,4c,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ddy",f9,38,4c,00),2,27,288));
HXLINE( 729)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("ife",e8,05,50,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ife",e8,05,50,00),2,28,897));
HXLINE( 730)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("ine",e0,0c,50,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ine",e0,0c,50,00),2,29,897));
HXLINE( 731)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("ifg",ea,05,50,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ifg",ea,05,50,00),2,30,897));
HXLINE( 732)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("ifl",ef,05,50,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ifl",ef,05,50,00),2,31,897));
HXLINE( 733)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("els",2c,02,4d,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("els",2c,02,4d,00),0,32,1921));
HXLINE( 734)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("eif",82,ff,4c,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("eif",82,ff,4c,00),0,33,1409));
HXLINE( 737)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("kil",0e,8d,51,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("kil",0e,8d,51,00),1,39,160));
HXLINE( 738)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("tex",e7,5d,58,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("tex",e7,5d,58,00),3,40,40));
HXLINE( 739)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("sge",51,9d,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sge",51,9d,57,00),3,41,0));
HXLINE( 740)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("slt",bb,a1,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("slt",bb,a1,57,00),3,42,0));
HXLINE( 741)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("sgn",5a,9d,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sgn",5a,9d,57,00),2,43,0));
HXLINE( 742)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("seq",9f,9b,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("seq",9f,9b,57,00),3,44,0));
HXLINE( 743)		::openfl::utils::AGALMiniAssembler_obj::OPMAP->set(HX_("sne",6a,a3,57,00), ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sne",6a,a3,57,00),3,45,0));
HXLINE( 745)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("rgba",b4,d0,a8,4b), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("rgba",b4,d0,a8,4b),8,0));
HXLINE( 746)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("compressed",81,4c,da,67), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("compressed",81,4c,da,67),8,1));
HXLINE( 747)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("compressedalpha",3d,67,f2,b6), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("compressedalpha",3d,67,f2,b6),8,2));
HXLINE( 748)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("dxt1",d1,c9,74,42), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("dxt1",d1,c9,74,42),8,1));
HXLINE( 749)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("dxt5",d5,c9,74,42), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("dxt5",d5,c9,74,42),8,2));
HXLINE( 750)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("video",7b,14,fc,36), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("video",7b,14,fc,36),8,3));
HXLINE( 751)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("2d",f2,2b,00,00), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("2d",f2,2b,00,00),12,0));
HXLINE( 752)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("3d",d1,2c,00,00), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("3d",d1,2c,00,00),12,2));
HXLINE( 753)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("cube",f5,3c,c9,41), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("cube",f5,3c,c9,41),12,1));
HXLINE( 754)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("mipnearest",4a,21,95,d0), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("mipnearest",4a,21,95,d0),24,1));
HXLINE( 755)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("miplinear",79,ca,7e,64), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("miplinear",79,ca,7e,64),24,2));
HXLINE( 756)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("mipnone",4c,7e,07,76), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("mipnone",4c,7e,07,76),24,0));
HXLINE( 757)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("nomip",f3,8f,c5,9f), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("nomip",f3,8f,c5,9f),24,0));
HXLINE( 758)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("nearest",5e,18,ca,65), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("nearest",5e,18,ca,65),28,0));
HXLINE( 759)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("linear",e5,51,a0,ec), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("linear",e5,51,a0,ec),28,1));
HXLINE( 760)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("anisotropic2x",77,56,26,f5), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic2x",77,56,26,f5),28,2));
HXLINE( 761)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("anisotropic4x",35,58,26,f5), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic4x",35,58,26,f5),28,3));
HXLINE( 762)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("anisotropic8x",b1,5b,26,f5), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic8x",b1,5b,26,f5),28,4));
HXLINE( 763)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("anisotropic16x",62,56,64,8c), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic16x",62,56,64,8c),28,5));
HXLINE( 764)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("centroid",40,e0,e5,97), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("centroid",40,e0,e5,97),16,1));
HXLINE( 765)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("single",88,66,21,b9), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("single",88,66,21,b9),16,2));
HXLINE( 766)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("ignoresampler",36,32,06,d4), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("ignoresampler",36,32,06,d4),16,4));
HXLINE( 767)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("repeat",5b,97,7c,06), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("repeat",5b,97,7c,06),20,1));
HXLINE( 768)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("wrap",ca,39,ff,4e), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("wrap",ca,39,ff,4e),20,1));
HXLINE( 769)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("clamp",fb,72,58,48), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("clamp",fb,72,58,48),20,0));
HXLINE( 770)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("clamp_u_repeat_v",a0,8d,a7,28), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("clamp_u_repeat_v",a0,8d,a7,28),20,2));
HXLINE( 771)		::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->set(HX_("repeat_u_clamp_v",c4,04,17,dd), ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("repeat_u_clamp_v",c4,04,17,dd),20,3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AGALMiniAssembler_obj,init,(void))


::hx::ObjectPtr< AGALMiniAssembler_obj > AGALMiniAssembler_obj::__new(::hx::Null< bool >  __o_debugging) {
	::hx::ObjectPtr< AGALMiniAssembler_obj > __this = new AGALMiniAssembler_obj();
	__this->__construct(__o_debugging);
	return __this;
}

::hx::ObjectPtr< AGALMiniAssembler_obj > AGALMiniAssembler_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_debugging) {
	AGALMiniAssembler_obj *__this = (AGALMiniAssembler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AGALMiniAssembler_obj), true, "openfl.utils.AGALMiniAssembler"));
	*(void **)__this = AGALMiniAssembler_obj::_hx_vtable;
	__this->__construct(__o_debugging);
	return __this;
}

AGALMiniAssembler_obj::AGALMiniAssembler_obj()
{
}

void AGALMiniAssembler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AGALMiniAssembler);
	HX_MARK_MEMBER_NAME(agalcode,"agalcode");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(verbose,"verbose");
	HX_MARK_MEMBER_NAME(debugEnabled,"debugEnabled");
	HX_MARK_END_CLASS();
}

void AGALMiniAssembler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(agalcode,"agalcode");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(verbose,"verbose");
	HX_VISIT_MEMBER_NAME(debugEnabled,"debugEnabled");
}

::hx::Val AGALMiniAssembler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"match") ) { return ::hx::Val( match_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { return ::hx::Val( verbose ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"agalcode") ) { return ::hx::Val( agalcode ); }
		if (HX_FIELD_EQ(inName,"assemble") ) { return ::hx::Val( assemble_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initregmap") ) { return ::hx::Val( initregmap_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"debugEnabled") ) { return ::hx::Val( debugEnabled ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AGALMiniAssembler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"OPMAP") ) { outValue = ( OPMAP ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"REGMAP") ) { outValue = ( REGMAP ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"SAMPLEMAP") ) { outValue = ( SAMPLEMAP ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
	}
	return false;
}

::hx::Val AGALMiniAssembler_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { verbose=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"agalcode") ) { agalcode=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"debugEnabled") ) { debugEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AGALMiniAssembler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"OPMAP") ) { OPMAP=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"REGMAP") ) { REGMAP=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"SAMPLEMAP") ) { SAMPLEMAP=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void AGALMiniAssembler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("agalcode",fe,5c,e9,a0));
	outFields->push(HX_("error",c8,cb,29,73));
	outFields->push(HX_("verbose",82,d7,b9,71));
	outFields->push(HX_("debugEnabled",6e,1a,2c,da));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AGALMiniAssembler_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::utils::ByteArrayData */ ,(int)offsetof(AGALMiniAssembler_obj,agalcode),HX_("agalcode",fe,5c,e9,a0)},
	{::hx::fsString,(int)offsetof(AGALMiniAssembler_obj,error),HX_("error",c8,cb,29,73)},
	{::hx::fsBool,(int)offsetof(AGALMiniAssembler_obj,verbose),HX_("verbose",82,d7,b9,71)},
	{::hx::fsBool,(int)offsetof(AGALMiniAssembler_obj,debugEnabled),HX_("debugEnabled",6e,1a,2c,da)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo AGALMiniAssembler_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AGALMiniAssembler_obj::OPMAP,HX_("OPMAP",fb,8b,c3,b1)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AGALMiniAssembler_obj::REGMAP,HX_("REGMAP",c8,69,12,b3)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AGALMiniAssembler_obj::SAMPLEMAP,HX_("SAMPLEMAP",92,10,e0,58)},
	{::hx::fsBool,(void *) &AGALMiniAssembler_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String AGALMiniAssembler_obj_sMemberFields[] = {
	HX_("agalcode",fe,5c,e9,a0),
	HX_("error",c8,cb,29,73),
	HX_("verbose",82,d7,b9,71),
	HX_("debugEnabled",6e,1a,2c,da),
	HX_("assemble",12,a9,1b,c5),
	HX_("initregmap",d8,a4,40,d0),
	HX_("match",45,49,23,03),
	::String(null()) };

static void AGALMiniAssembler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OPMAP,"OPMAP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REGMAP,"REGMAP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLEMAP,"SAMPLEMAP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AGALMiniAssembler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OPMAP,"OPMAP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REGMAP,"REGMAP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLEMAP,"SAMPLEMAP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::initialized,"initialized");
};

#endif

::hx::Class AGALMiniAssembler_obj::__mClass;

static ::String AGALMiniAssembler_obj_sStaticFields[] = {
	HX_("OPMAP",fb,8b,c3,b1),
	HX_("REGMAP",c8,69,12,b3),
	HX_("SAMPLEMAP",92,10,e0,58),
	HX_("initialized",14,f5,0f,37),
	HX_("init",10,3b,bb,45),
	::String(null())
};

void AGALMiniAssembler_obj::__register()
{
	AGALMiniAssembler_obj _hx_dummy;
	AGALMiniAssembler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AGALMiniAssembler_obj::__GetStatic;
	__mClass->mSetStaticField = &AGALMiniAssembler_obj::__SetStatic;
	__mClass->mMarkFunc = AGALMiniAssembler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AGALMiniAssembler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AGALMiniAssembler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AGALMiniAssembler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AGALMiniAssembler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AGALMiniAssembler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AGALMiniAssembler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AGALMiniAssembler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_40_boot)
HXDLIN(  40)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("checkstyle:ConstantName",20,38,cc,f4))->init(1,HX_("checkstyle:FieldDocComment",70,56,1b,20)))))));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_42_boot)
HXDLIN(  42)		OPMAP =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_43_boot)
HXDLIN(  43)		REGMAP =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_44_boot)
HXDLIN(  44)		SAMPLEMAP =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_156_boot)
HXDLIN( 156)		initialized = false;
            	}
}

} // end namespace openfl
} // end namespace utils
