// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_StyleSheet
#include <openfl/text/StyleSheet.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif
#ifndef INCLUDED_openfl_text__internal_GlyphPosition
#include <openfl/text/_internal/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl_text__internal_HTMLParser
#include <openfl/text/_internal/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextEngine
#include <openfl/text/_internal/TextEngine.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextFormatRange
#include <openfl/text/_internal/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextLayoutGroup
#include <openfl/text/_internal/TextLayoutGroup.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_125_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",125,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_860_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",860,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_886_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",886,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1041_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",1041,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1065_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",1065,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1098_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",1098,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1129_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",1129,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1233_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",1233,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1327_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",1327,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1365_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",1365,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1425_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1425,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1600___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",1600,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1605___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",1605,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1609___caretBeginningOfNextLine,"openfl.text.TextField","__caretBeginningOfNextLine",0x9988917c,"openfl.text.TextField.__caretBeginningOfNextLine","openfl/text/TextField.hx",1609,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1623___caretBeginningOfPreviousLine,"openfl.text.TextField","__caretBeginningOfPreviousLine",0x6f5ad940,"openfl.text.TextField.__caretBeginningOfPreviousLine","openfl/text/TextField.hx",1623,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1642___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",1642,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1657___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",1657,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1664___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",1664,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1675___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",1675,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1682___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",1682,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1693___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",1693,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1707___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",1707,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1737___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",1737,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1785___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1785,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1799___getCharBoundaries,"openfl.text.TextField","__getCharBoundaries",0x097fccb0,"openfl.text.TextField.__getCharBoundaries","openfl/text/TextField.hx",1799,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1831___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1831,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1868___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1868,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1884___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1884,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1933___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1933,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1965___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1965,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1989___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",1989,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2005___replaceSelectedText,"openfl.text.TextField","__replaceSelectedText",0x229f8d38,"openfl.text.TextField.__replaceSelectedText","openfl/text/TextField.hx",2005,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2028___replaceText,"openfl.text.TextField","__replaceText",0x6f2a5d3d,"openfl.text.TextField.__replaceText","openfl/text/TextField.hx",2028,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2159___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",2159,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2174___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",2174,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2190___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",2190,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2211___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",2211,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2217___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",2217,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2248___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",2248,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2322___updateScrollV,"openfl.text.TextField","__updateScrollV",0x4ea991dc,"openfl.text.TextField.__updateScrollV","openfl/text/TextField.hx",2322,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2384___updateMouseDrag,"openfl.text.TextField","__updateMouseDrag",0x2a5075ac,"openfl.text.TextField.__updateMouseDrag","openfl/text/TextField.hx",2384,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2414___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",2414,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2474___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",2474,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2501_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",2501,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2546_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",2546,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2550_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",2550,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2566_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",2566,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2577_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",2577,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2585_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",2585,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2590_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",2590,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2594_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",2594,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2610_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",2610,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2638_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",2638,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2659_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",2659,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2665_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",2665,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2689_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",2689,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2747_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2747,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2762_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2762,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2776_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2776,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2783_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2783,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2791_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2791,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2801_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2801,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2806_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2806,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2810_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2810,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2834_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2834,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2838_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2838,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2857_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2857,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2861_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2861,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2877_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2877,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2881_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2881,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2929_set_styleSheet,"openfl.text.TextField","set_styleSheet",0x462a2b8f,"openfl.text.TextField.set_styleSheet","openfl/text/TextField.hx",2929,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2955_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",2955,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2960_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2960,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2964_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2964,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3021_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",3021,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3027_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",3027,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3034_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",3034,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3038_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",3038,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3075_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",3075,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3081_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",3081,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3101_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",3101,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3114_get_x,"openfl.text.TextField","get_x",0xd93e9aab,"openfl.text.TextField.get_x","openfl/text/TextField.hx",3114,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3118_set_x,"openfl.text.TextField","set_x",0xc20d90b7,"openfl.text.TextField.set_x","openfl/text/TextField.hx",3118,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3126_get_y,"openfl.text.TextField","get_y",0xd93e9aac,"openfl.text.TextField.get_y","openfl/text/TextField.hx",3126,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3130_set_y,"openfl.text.TextField","set_y",0xc20d90b8,"openfl.text.TextField.set_y","openfl/text/TextField.hx",3130,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3138_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",3138,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3174_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",3174,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3217_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",3217,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3222_this_onEnterFrame,"openfl.text.TextField","this_onEnterFrame",0xf6c59f11,"openfl.text.TextField.this_onEnterFrame","openfl/text/TextField.hx",3222,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3228_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",3228,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3239_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",3239,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3257_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",3257,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3268_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",3268,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3295_this_onMouseWheel,"openfl.text.TextField","this_onMouseWheel",0xdbfcc352,"openfl.text.TextField.this_onMouseWheel","openfl/text/TextField.hx",3295,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3303_this_onDoubleClick,"openfl.text.TextField","this_onDoubleClick",0xbfe820db,"openfl.text.TextField.this_onDoubleClick","openfl/text/TextField.hx",3303,0xccf02094)
static const ::String _hx_array_data_efd5a8ca_118[] = {
	HX_("\n",0a,00,00,00),HX_(".",2e,00,00,00),HX_("!",21,00,00,00),HX_("?",3f,00,00,00),HX_(",",2c,00,00,00),HX_(" ",20,00,00,00),HX_(";",3b,00,00,00),HX_(":",3a,00,00,00),HX_("(",28,00,00,00),HX_(")",29,00,00,00),HX_("-",2d,00,00,00),HX_("_",5f,00,00,00),HX_("/",2f,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3353_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",3353,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3579_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",3579,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_125_new)
HXLINE( 677)		this->_hx___mouseScrollVCounter = 0;
HXLINE( 266)		this->condenseWhite = false;
HXLINE( 813)		super::__construct();
HXLINE( 815)		this->_hx___drawableType = 7;
HXLINE( 816)		this->_hx___caretIndex = -1;
HXLINE( 817)		this->_hx___selectionIndex = -1;
HXLINE( 818)		this->_hx___displayAsPassword = false;
HXLINE( 819)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 820)		this->_hx___textEngine =  ::openfl::text::_internal::TextEngine_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 821)		this->_hx___layoutDirty = true;
HXLINE( 822)		this->_hx___offsetX = ( (Float)(0) );
HXLINE( 823)		this->_hx___offsetY = ( (Float)(0) );
HXLINE( 824)		this->_hx___mouseWheelEnabled = true;
HXLINE( 825)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 827)		this->doubleClickEnabled = true;
HXLINE( 829)		if (::hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 831)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),12,0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),3,0,0,0,0);
HXLINE( 832)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = 0;
HXLINE( 833)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 834)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = 0;
HXLINE( 835)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 838)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 839)		this->_hx___textEngine->textFormatRanges->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,0,0));
HXLINE( 841)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 842)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 843)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 844)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
HXLINE( 845)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->this_onMouseWheel_dyn(),null(),null(),null());
HXLINE( 847)		this->addEventListener(HX_("doubleClick",77,03,76,cd),this->this_onDoubleClick_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x6b353933 || inClassId==(int)0x7f0de750;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_860_appendText)
HXLINE( 861)		bool _hx_tmp;
HXDLIN( 861)		if (::hx::IsNotNull( text )) {
HXLINE( 861)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 861)			_hx_tmp = true;
            		}
HXDLIN( 861)		if (_hx_tmp) {
HXLINE( 861)			return;
            		}
HXLINE( 863)		this->_hx___dirty = true;
HXLINE( 864)		this->_hx___layoutDirty = true;
HXLINE( 865)		if (!(this->_hx___renderDirty)) {
HXLINE( 865)			this->_hx___renderDirty = true;
HXDLIN( 865)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 867)		this->_hx___updateText((this->_hx___text + text));
HXLINE( 869)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 869)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->end = this->_hx___text.length;
HXLINE( 871)		this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_886_getCharBoundaries)
HXLINE( 887)		bool _hx_tmp;
HXDLIN( 887)		if ((charIndex >= 0)) {
HXLINE( 887)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE( 887)			_hx_tmp = true;
            		}
HXDLIN( 887)		if (_hx_tmp) {
HXLINE( 887)			return null();
            		}
HXLINE( 889)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 891)		if (this->_hx___getCharBoundaries(charIndex,rect)) {
HXLINE( 893)			return rect;
            		}
            		else {
HXLINE( 897)			return null();
            		}
HXLINE( 891)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1041_getLineIndexOfChar)
HXLINE(1042)		bool _hx_tmp;
HXDLIN(1042)		if ((charIndex >= 0)) {
HXLINE(1042)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1042)			_hx_tmp = true;
            		}
HXDLIN(1042)		if (_hx_tmp) {
HXLINE(1042)			return -1;
            		}
HXLINE(1044)		this->_hx___updateLayout();
HXLINE(1046)		{
HXLINE(1046)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1046)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1046)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1048)				bool _hx_tmp1;
HXDLIN(1048)				if ((group1->startIndex <= charIndex)) {
HXLINE(1048)					_hx_tmp1 = (group1->endIndex >= charIndex);
            				}
            				else {
HXLINE(1048)					_hx_tmp1 = false;
            				}
HXDLIN(1048)				if (_hx_tmp1) {
HXLINE(1050)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1054)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1065_getLineLength)
HXLINE(1066)		this->_hx___updateLayout();
HXLINE(1068)		bool _hx_tmp;
HXDLIN(1068)		if ((lineIndex >= 0)) {
HXLINE(1068)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1068)			_hx_tmp = true;
            		}
HXDLIN(1068)		if (_hx_tmp) {
HXLINE(1068)			return 0;
            		}
HXLINE(1070)		int startIndex = -1;
HXLINE(1071)		int endIndex = -1;
HXLINE(1073)		{
HXLINE(1073)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1073)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1073)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1075)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1077)					if ((startIndex == -1)) {
HXLINE(1077)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1079)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1081)						endIndex = group1->startIndex;
HXLINE(1082)						goto _hx_goto_5;
            					}
            				}
            			}
            			_hx_goto_5:;
            		}
HXLINE(1086)		if ((endIndex == -1)) {
HXLINE(1086)			endIndex = this->_hx___text.length;
            		}
HXLINE(1087)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1098_getLineMetrics)
HXLINE(1099)		this->_hx___updateLayout();
HXLINE(1101)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE(1102)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE(1103)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE(1104)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE(1105)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE(1109)		Float margin;
HXDLIN(1109)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==0) ){
HXLINE(1109)			margin = ((this->_hx___textEngine->width - lineWidth) / ( (Float)(2) ));
HXDLIN(1109)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==1) ||  (_hx_switch_0==4) ){
HXLINE(1109)			margin = ((this->_hx___textEngine->width - lineWidth) - ( (Float)(2) ));
HXDLIN(1109)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==2) ||  (_hx_switch_0==3) ||  (_hx_switch_0==5) ){
HXLINE(1109)			margin = ( (Float)(2) );
HXDLIN(1109)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE(1116)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1129_getLineOffset)
HXLINE(1130)		this->_hx___updateLayout();
HXLINE(1132)		bool _hx_tmp;
HXDLIN(1132)		if ((lineIndex >= 0)) {
HXLINE(1132)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1132)			_hx_tmp = true;
            		}
HXDLIN(1132)		if (_hx_tmp) {
HXLINE(1132)			return -1;
            		}
HXLINE(1134)		{
HXLINE(1134)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1134)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1134)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1136)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1138)					return group1->startIndex;
            				}
            			}
            		}
HXLINE(1142)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1233_getTextFormat)
HXLINE(1234)		 ::openfl::text::TextFormat format = null();
HXLINE(1236)		bool _hx_tmp;
HXDLIN(1236)		bool _hx_tmp1;
HXDLIN(1236)		bool _hx_tmp2;
HXDLIN(1236)		if ((beginIndex < this->get_text().length)) {
HXLINE(1236)			_hx_tmp2 = (beginIndex < -1);
            		}
            		else {
HXLINE(1236)			_hx_tmp2 = true;
            		}
HXDLIN(1236)		if (!(_hx_tmp2)) {
HXLINE(1236)			_hx_tmp1 = (endIndex > this->get_text().length);
            		}
            		else {
HXLINE(1236)			_hx_tmp1 = true;
            		}
HXDLIN(1236)		if (!(_hx_tmp1)) {
HXLINE(1236)			_hx_tmp = (endIndex < -1);
            		}
            		else {
HXLINE(1236)			_hx_tmp = true;
            		}
HXDLIN(1236)		if (_hx_tmp) {
HXLINE(1237)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds",37,5a,d3,87)));
            		}
HXLINE(1239)		if ((beginIndex == -1)) {
HXLINE(1239)			beginIndex = 0;
            		}
HXLINE(1240)		if ((endIndex == -1)) {
HXLINE(1240)			endIndex = this->get_text().length;
            		}
HXLINE(1242)		if ((beginIndex >= endIndex)) {
HXLINE(1242)			return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1244)		{
HXLINE(1244)			 ::Dynamic group = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(1244)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1244)				 ::openfl::text::_internal::TextFormatRange group1 = ( ( ::openfl::text::_internal::TextFormatRange)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1246)				bool _hx_tmp3;
HXDLIN(1246)				bool _hx_tmp4;
HXDLIN(1246)				if ((group1->start <= beginIndex)) {
HXLINE(1246)					_hx_tmp4 = (group1->end > beginIndex);
            				}
            				else {
HXLINE(1246)					_hx_tmp4 = false;
            				}
HXDLIN(1246)				if (!(_hx_tmp4)) {
HXLINE(1246)					if ((group1->start < endIndex)) {
HXLINE(1246)						_hx_tmp3 = (group1->end >= endIndex);
            					}
            					else {
HXLINE(1246)						_hx_tmp3 = false;
            					}
            				}
            				else {
HXLINE(1246)					_hx_tmp3 = true;
            				}
HXDLIN(1246)				if (_hx_tmp3) {
HXLINE(1248)					if (::hx::IsNull( format )) {
HXLINE(1250)						format = group1->format->clone();
            					}
            					else {
HXLINE(1254)						if ((group1->format->font != format->font)) {
HXLINE(1254)							format->font = null();
            						}
HXLINE(1255)						if (::hx::IsNotEq( group1->format->size,format->size )) {
HXLINE(1255)							format->size = null();
            						}
HXLINE(1256)						if (::hx::IsNotEq( group1->format->color,format->color )) {
HXLINE(1256)							format->color = null();
            						}
HXLINE(1257)						if (::hx::IsNotEq( group1->format->bold,format->bold )) {
HXLINE(1257)							format->bold = null();
            						}
HXLINE(1258)						if (::hx::IsNotEq( group1->format->italic,format->italic )) {
HXLINE(1258)							format->italic = null();
            						}
HXLINE(1259)						if (::hx::IsNotEq( group1->format->underline,format->underline )) {
HXLINE(1259)							format->underline = null();
            						}
HXLINE(1260)						if ((group1->format->url != format->url)) {
HXLINE(1260)							format->url = null();
            						}
HXLINE(1261)						if ((group1->format->target != format->target)) {
HXLINE(1261)							format->target = null();
            						}
HXLINE(1262)						if (::hx::IsNotEq( group1->format->align,format->align )) {
HXLINE(1262)							format->align = null();
            						}
HXLINE(1263)						if (::hx::IsNotEq( group1->format->leftMargin,format->leftMargin )) {
HXLINE(1263)							format->leftMargin = null();
            						}
HXLINE(1264)						if (::hx::IsNotEq( group1->format->rightMargin,format->rightMargin )) {
HXLINE(1264)							format->rightMargin = null();
            						}
HXLINE(1265)						if (::hx::IsNotEq( group1->format->indent,format->indent )) {
HXLINE(1265)							format->indent = null();
            						}
HXLINE(1266)						if (::hx::IsNotEq( group1->format->leading,format->leading )) {
HXLINE(1266)							format->leading = null();
            						}
HXLINE(1267)						if (::hx::IsNotEq( group1->format->blockIndent,format->blockIndent )) {
HXLINE(1267)							format->blockIndent = null();
            						}
HXLINE(1268)						if (::hx::IsNotEq( group1->format->bullet,format->bullet )) {
HXLINE(1268)							format->bullet = null();
            						}
HXLINE(1269)						if (::hx::IsNotEq( group1->format->kerning,format->kerning )) {
HXLINE(1269)							format->kerning = null();
            						}
HXLINE(1270)						if (::hx::IsNotEq( group1->format->letterSpacing,format->letterSpacing )) {
HXLINE(1270)							format->letterSpacing = null();
            						}
HXLINE(1271)						if (::hx::IsPointerNotEq( group1->format->tabStops,format->tabStops )) {
HXLINE(1271)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE(1276)		if (::hx::IsNull( format )) {
HXLINE(1276)			format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1277)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1327_replaceSelectedText)
HXDLIN(1327)		this->_hx___replaceSelectedText(value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1365_setSelection)
HXLINE(1366)		this->_hx___selectionIndex = beginIndex;
HXLINE(1367)		this->_hx___caretIndex = endIndex;
HXLINE(1369)		this->_hx___updateScrollV();
HXLINE(1370)		this->_hx___updateScrollH();
HXLINE(1372)		bool _hx_tmp;
HXDLIN(1372)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1372)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(1372)			_hx_tmp = false;
            		}
HXDLIN(1372)		if (_hx_tmp) {
HXLINE(1374)			this->_hx___stopCursorTimer();
HXLINE(1375)			this->_hx___startCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1425_setTextFormat)
HXLINE(1426)		int max = this->get_text().length;
HXLINE(1427)		 ::openfl::text::_internal::TextFormatRange range;
HXLINE(1429)		if ((beginIndex == -1)) {
HXLINE(1431)			if ((endIndex == -1)) {
HXLINE(1431)				endIndex = max;
            			}
HXLINE(1432)			beginIndex = 0;
            		}
            		else {
HXLINE(1434)			if ((endIndex == -1)) {
HXLINE(1436)				endIndex = (beginIndex + 1);
            			}
            		}
HXLINE(1439)		if ((beginIndex == endIndex)) {
HXLINE(1439)			return;
            		}
HXLINE(1440)		bool _hx_tmp;
HXDLIN(1440)		bool _hx_tmp1;
HXDLIN(1440)		bool _hx_tmp2;
HXDLIN(1440)		bool _hx_tmp3;
HXDLIN(1440)		if ((beginIndex >= 0)) {
HXLINE(1440)			_hx_tmp3 = (endIndex <= 0);
            		}
            		else {
HXLINE(1440)			_hx_tmp3 = true;
            		}
HXDLIN(1440)		if (!(_hx_tmp3)) {
HXLINE(1440)			_hx_tmp2 = (endIndex < beginIndex);
            		}
            		else {
HXLINE(1440)			_hx_tmp2 = true;
            		}
HXDLIN(1440)		if (!(_hx_tmp2)) {
HXLINE(1440)			_hx_tmp1 = (beginIndex >= max);
            		}
            		else {
HXLINE(1440)			_hx_tmp1 = true;
            		}
HXDLIN(1440)		if (!(_hx_tmp1)) {
HXLINE(1440)			_hx_tmp = (endIndex > max);
            		}
            		else {
HXLINE(1440)			_hx_tmp = true;
            		}
HXDLIN(1440)		if (_hx_tmp) {
HXLINE(1440)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE(1458)		bool _hx_tmp4;
HXDLIN(1458)		if ((beginIndex == 0)) {
HXLINE(1458)			_hx_tmp4 = (endIndex == max);
            		}
            		else {
HXLINE(1458)			_hx_tmp4 = false;
            		}
HXDLIN(1458)		if (_hx_tmp4) {
HXLINE(1461)			this->_hx___textEngine->textFormatRanges->set_length(1);
HXLINE(1463)			range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(1464)			range->start = 0;
HXLINE(1465)			range->end = max;
HXLINE(1466)			range->format->_hx___merge(format);
            		}
            		else {
HXLINE(1470)			int index = 0;
HXLINE(1471)			 ::openfl::text::_internal::TextFormatRange newRange;
HXLINE(1473)			while((index < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(1475)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(1477)				if ((range->end <= beginIndex)) {
HXLINE(1480)					index = (index + 1);
            				}
            				else {
HXLINE(1482)					if ((range->start >= endIndex)) {
HXLINE(1485)						goto _hx_goto_15;
            					}
            					else {
HXLINE(1487)						bool _hx_tmp5;
HXDLIN(1487)						if ((range->start <= beginIndex)) {
HXLINE(1487)							_hx_tmp5 = (range->end >= endIndex);
            						}
            						else {
HXLINE(1487)							_hx_tmp5 = false;
            						}
HXDLIN(1487)						if (_hx_tmp5) {
HXLINE(1489)							bool _hx_tmp6;
HXDLIN(1489)							if ((range->start == beginIndex)) {
HXLINE(1489)								_hx_tmp6 = (range->end == endIndex);
            							}
            							else {
HXLINE(1489)								_hx_tmp6 = false;
            							}
HXDLIN(1489)							if (_hx_tmp6) {
HXLINE(1492)								range->format = range->format->clone();
HXLINE(1493)								range->format->_hx___merge(format);
HXLINE(1494)								goto _hx_goto_15;
            							}
            							else {
HXLINE(1496)								if ((range->start == beginIndex)) {
HXLINE(1499)									newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1500)									newRange->format->_hx___merge(format);
HXLINE(1501)									this->_hx___textEngine->textFormatRanges->insertAt(index,newRange);
HXLINE(1502)									range->start = endIndex;
HXLINE(1503)									index = (index + 2);
            								}
            								else {
HXLINE(1505)									if ((range->end == endIndex)) {
HXLINE(1508)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1509)										newRange->format->_hx___merge(format);
HXLINE(1510)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1512)										range->end = beginIndex;
HXLINE(1513)										goto _hx_goto_15;
            									}
            									else {
HXLINE(1518)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1519)										newRange->format->_hx___merge(format);
HXLINE(1520)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1522)										 ::openfl::text::TextFormat newRange1 = range->format->clone();
HXDLIN(1522)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,newRange1,endIndex,range->end);
HXLINE(1523)										this->_hx___textEngine->textFormatRanges->insertAt((index + 2),newRange);
HXLINE(1525)										range->end = beginIndex;
HXLINE(1526)										goto _hx_goto_15;
            									}
            								}
            							}
            						}
            						else {
HXLINE(1529)							bool _hx_tmp7;
HXDLIN(1529)							if ((range->start >= beginIndex)) {
HXLINE(1529)								_hx_tmp7 = (range->end <= endIndex);
            							}
            							else {
HXLINE(1529)								_hx_tmp7 = false;
            							}
HXDLIN(1529)							if (_hx_tmp7) {
HXLINE(1532)								if ((range->start == beginIndex)) {
HXLINE(1535)									range->format = range->format->clone();
HXLINE(1536)									range->format->_hx___merge(format);
HXLINE(1537)									range->end = endIndex;
            								}
            								else {
HXLINE(1542)									this->_hx___textEngine->textFormatRanges->removeAt(index).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
            								}
            							}
            							else {
HXLINE(1545)								bool _hx_tmp8;
HXDLIN(1545)								if ((range->start > beginIndex)) {
HXLINE(1545)									_hx_tmp8 = (range->end > beginIndex);
            								}
            								else {
HXLINE(1545)									_hx_tmp8 = false;
            								}
HXDLIN(1545)								if (_hx_tmp8) {
HXLINE(1548)									range->start = endIndex;
HXLINE(1549)									goto _hx_goto_15;
            								}
            								else {
HXLINE(1551)									bool _hx_tmp9;
HXDLIN(1551)									if ((range->start < beginIndex)) {
HXLINE(1551)										_hx_tmp9 = (range->end <= endIndex);
            									}
            									else {
HXLINE(1551)										_hx_tmp9 = false;
            									}
HXDLIN(1551)									if (_hx_tmp9) {
HXLINE(1554)										newRange =  ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,range->format->clone(),beginIndex,endIndex);
HXLINE(1555)										newRange->format->_hx___merge(format);
HXLINE(1556)										this->_hx___textEngine->textFormatRanges->insertAt((index + 1),newRange);
HXLINE(1557)										range->end = beginIndex;
HXLINE(1558)										index = (index + 2);
            									}
            									else {
HXLINE(1563)										index = (index + 1);
HXLINE(1564)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),1564,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("setTextFormat",06,4e,f7,d5)));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE(1591)		this->_hx___dirty = true;
HXLINE(1592)		this->_hx___layoutDirty = true;
HXLINE(1593)		if (!(this->_hx___renderDirty)) {
HXLINE(1593)			this->_hx___renderDirty = true;
HXDLIN(1593)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1600___allowMouseFocus)
HXDLIN(1600)		return this->mouseEnabled;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1605___caretBeginningOfLine)
HXDLIN(1605)		this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretBeginningOfNextLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1609___caretBeginningOfNextLine)
HXLINE(1610)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1612)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1614)			this->_hx___caretIndex = this->getLineOffset((lineIndex + 1));
            		}
            		else {
HXLINE(1618)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfNextLine,(void))

void TextField_obj::_hx___caretBeginningOfPreviousLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1623___caretBeginningOfPreviousLine)
HXLINE(1624)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1626)		if ((lineIndex > 0)) {
HXLINE(1628)			int index = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
HXLINE(1630)			if ((this->_hx___caretIndex == index)) {
HXLINE(1632)				this->_hx___caretIndex = this->getLineOffset((lineIndex - 1));
            			}
            			else {
HXLINE(1636)				this->_hx___caretIndex = index;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfPreviousLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1642___caretEndOfLine)
HXLINE(1643)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1645)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1647)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + 1)) - 1);
            		}
            		else {
HXLINE(1651)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1657___caretNextCharacter)
HXDLIN(1657)		if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(1659)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1664___caretNextLine)
HXLINE(1665)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1667)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1669)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(this->get_caretIndex(),(lineIndex + 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1675___caretPreviousCharacter)
HXDLIN(1675)		if ((this->_hx___caretIndex > 0)) {
HXLINE(1677)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1682___caretPreviousLine)
HXLINE(1683)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(1685)		if ((lineIndex > 0)) {
HXLINE(1687)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(this->get_caretIndex(),(lineIndex - 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1693___disableInput)
HXDLIN(1693)		bool _hx_tmp;
HXDLIN(1693)		if (this->_hx___inputEnabled) {
HXDLIN(1693)			_hx_tmp = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(1693)			_hx_tmp = false;
            		}
HXDLIN(1693)		if (_hx_tmp) {
HXLINE(1696)			this->stage->window->_hx___backend->setTextInputEnabled(false);
HXLINE(1697)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1698)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1701)			this->_hx___inputEnabled = false;
HXLINE(1702)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1707___dispatch)
HXLINE(1708)		bool _hx_tmp;
HXDLIN(1708)		if ((event->eventPhase == 2)) {
HXLINE(1708)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE(1708)			_hx_tmp = false;
            		}
HXDLIN(1708)		if (_hx_tmp) {
HXLINE(1711)			Float group = this->get_mouseX();
HXDLIN(1711)			 ::openfl::text::_internal::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1713)			if (::hx::IsNotNull( group1 )) {
HXLINE(1715)				::String url = group1->format->url;
HXLINE(1717)				bool _hx_tmp1;
HXDLIN(1717)				if (::hx::IsNotNull( url )) {
HXLINE(1717)					_hx_tmp1 = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1717)					_hx_tmp1 = false;
            				}
HXDLIN(1717)				if (_hx_tmp1) {
HXLINE(1719)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE(1721)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),true,false,url.substr(6,null())));
            					}
            					else {
HXLINE(1725)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE(1731)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1737___enableInput)
HXDLIN(1737)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1741)			 ::openfl::geom::Rectangle bounds = this->getBounds(this->stage);
HXLINE(1753)			this->stage->window->setTextInputRect( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,bounds->x,bounds->y,bounds->width,bounds->height));
HXLINE(1756)			this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1758)			if (!(this->_hx___inputEnabled)) {
HXLINE(1760)				this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1762)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1764)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1765)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1768)				this->_hx___inputEnabled = true;
HXLINE(1769)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1785___getBounds)
HXLINE(1786)		this->_hx___updateLayout();
HXLINE(1788)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1789)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1790)		bounds->offset(this->_hx___offsetX,this->_hx___offsetY);
HXLINE(1791)		bounds->_hx___transform(bounds,matrix);
HXLINE(1793)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1795)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool TextField_obj::_hx___getCharBoundaries(int charIndex, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1799___getCharBoundaries)
HXLINE(1800)		bool _hx_tmp;
HXDLIN(1800)		if ((charIndex >= 0)) {
HXLINE(1800)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE(1800)			_hx_tmp = true;
            		}
HXDLIN(1800)		if (_hx_tmp) {
HXLINE(1800)			return false;
            		}
HXLINE(1802)		this->_hx___updateLayout();
HXLINE(1804)		{
HXLINE(1804)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1804)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1804)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1806)				bool _hx_tmp1;
HXDLIN(1806)				if ((charIndex >= group1->startIndex)) {
HXLINE(1806)					_hx_tmp1 = (charIndex < group1->endIndex);
            				}
            				else {
HXLINE(1806)					_hx_tmp1 = false;
            				}
HXDLIN(1806)				if (_hx_tmp1) {
HXLINE(1808)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1810)						Float x = group1->offsetX;
HXLINE(1812)						{
HXLINE(1812)							int _g = 0;
HXDLIN(1812)							int _g1 = (charIndex - group1->startIndex);
HXDLIN(1812)							while((_g < _g1)){
HXLINE(1812)								_g = (_g + 1);
HXDLIN(1812)								int i = (_g - 1);
HXLINE(1814)								Float x1;
HXDLIN(1814)								bool x2;
HXDLIN(1814)								if ((i >= 0)) {
HXLINE(1814)									x2 = (i < group1->positions->length);
            								}
            								else {
HXLINE(1814)									x2 = false;
            								}
HXDLIN(1814)								if (x2) {
HXLINE(1814)									x1 = group1->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1814)									x1 = ( (Float)(0) );
            								}
HXDLIN(1814)								x = (x + x1);
            							}
            						}
HXLINE(1818)						int index = (charIndex - group1->startIndex);
HXDLIN(1818)						Float lastPosition;
HXDLIN(1818)						bool lastPosition1;
HXDLIN(1818)						if ((index >= 0)) {
HXLINE(1818)							lastPosition1 = (index < group1->positions->length);
            						}
            						else {
HXLINE(1818)							lastPosition1 = false;
            						}
HXDLIN(1818)						if (lastPosition1) {
HXLINE(1818)							lastPosition = group1->positions->__get(index).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE(1818)							lastPosition = ( (Float)(0) );
            						}
HXLINE(1820)						rect->setTo(x,group1->offsetY,lastPosition,(group1->ascent + group1->descent));
HXLINE(1821)						return true;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g2 = _hx_e;
HXLINE(1823)							{
HXLINE(1823)								null();
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE(1827)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharBoundaries,return )

int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1831___getCharIndexOnDifferentLine)
HXLINE(1832)		bool _hx_tmp;
HXDLIN(1832)		if ((charIndex >= 0)) {
HXLINE(1832)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1832)			_hx_tmp = true;
            		}
HXDLIN(1832)		if (_hx_tmp) {
HXLINE(1832)			return -1;
            		}
HXLINE(1833)		bool _hx_tmp1;
HXDLIN(1833)		if ((lineIndex >= 0)) {
HXLINE(1833)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1833)			_hx_tmp1 = true;
            		}
HXDLIN(1833)		if (_hx_tmp1) {
HXLINE(1833)			return -1;
            		}
HXLINE(1835)		 ::Dynamic x = null();
HXDLIN(1835)		 ::Dynamic y = null();
HXLINE(1837)		{
HXLINE(1837)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1837)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1837)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1839)				bool _hx_tmp2;
HXDLIN(1839)				if ((charIndex >= group1->startIndex)) {
HXLINE(1839)					_hx_tmp2 = (charIndex <= group1->endIndex);
            				}
            				else {
HXLINE(1839)					_hx_tmp2 = false;
            				}
HXDLIN(1839)				if (_hx_tmp2) {
HXLINE(1841)					x = group1->offsetX;
HXLINE(1843)					{
HXLINE(1843)						int _g = 0;
HXDLIN(1843)						int _g1 = (charIndex - group1->startIndex);
HXDLIN(1843)						while((_g < _g1)){
HXLINE(1843)							_g = (_g + 1);
HXDLIN(1843)							int i = (_g - 1);
HXLINE(1845)							Float x1;
HXDLIN(1845)							bool x2;
HXDLIN(1845)							if ((i >= 0)) {
HXLINE(1845)								x2 = (i < group1->positions->length);
            							}
            							else {
HXLINE(1845)								x2 = false;
            							}
HXDLIN(1845)							if (x2) {
HXLINE(1845)								x1 = group1->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1845)								x1 = ( (Float)(0) );
            							}
HXDLIN(1845)							x = (x + x1);
            						}
            					}
HXLINE(1848)					if (::hx::IsNotNull( y )) {
HXLINE(1848)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
HXLINE(1851)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1853)					y = (group1->offsetY + (group1->height / ( (Float)(2) )));
HXLINE(1855)					{
HXLINE(1855)						int _g2 = 0;
HXDLIN(1855)						int _g3 = (this->get_scrollV() - 1);
HXDLIN(1855)						while((_g2 < _g3)){
HXLINE(1855)							_g2 = (_g2 + 1);
HXLINE(1857)							y = (y - this->_hx___textEngine->lineHeights->get((_g2 - 1)));
            						}
            					}
HXLINE(1860)					if (::hx::IsNotNull( x )) {
HXLINE(1860)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
            			}
            		}
HXLINE(1864)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

::String TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1868___getCursor)
HXLINE(1869)		Float group = this->get_mouseX();
HXDLIN(1869)		 ::openfl::text::_internal::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1871)		bool _hx_tmp;
HXDLIN(1871)		if (::hx::IsNotNull( group1 )) {
HXLINE(1871)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1871)			_hx_tmp = false;
            		}
HXDLIN(1871)		if (_hx_tmp) {
HXLINE(1873)			return HX_("button",f2,61,e0,d9);
            		}
            		else {
HXLINE(1875)			if (this->_hx___textEngine->selectable) {
HXLINE(1877)				return HX_("ibeam",58,ca,26,b6);
            			}
            		}
HXLINE(1880)		return null();
            	}


 ::openfl::text::_internal::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,::hx::Null< bool >  __o_precise){
            		bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1884___getGroup)
HXLINE(1885)		this->_hx___updateLayout();
HXLINE(1887)		x = (x + this->get_scrollH());
HXLINE(1889)		{
HXLINE(1889)			int _g = 0;
HXDLIN(1889)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1889)			while((_g < _g1)){
HXLINE(1889)				_g = (_g + 1);
HXLINE(1891)				y = (y + this->_hx___textEngine->lineHeights->get((_g - 1)));
            			}
            		}
HXLINE(1894)		bool _hx_tmp;
HXDLIN(1894)		if (!(precise)) {
HXLINE(1894)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1894)			_hx_tmp = false;
            		}
HXDLIN(1894)		if (_hx_tmp) {
HXLINE(1894)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1896)		bool firstGroup = true;
HXLINE(1897)		 ::openfl::text::_internal::TextLayoutGroup group;
HXDLIN(1897)		 ::openfl::text::_internal::TextLayoutGroup nextGroup;
HXLINE(1899)		{
HXLINE(1899)			int _g2 = 0;
HXDLIN(1899)			int _g3 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1899)			while((_g2 < _g3)){
HXLINE(1899)				_g2 = (_g2 + 1);
HXDLIN(1899)				int i = (_g2 - 1);
HXLINE(1901)				group = this->_hx___textEngine->layoutGroups->get(i).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1903)				if ((i < (this->_hx___textEngine->layoutGroups->get_length() - 1))) {
HXLINE(1905)					nextGroup = this->_hx___textEngine->layoutGroups->get((i + 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
            				}
            				else {
HXLINE(1909)					nextGroup = null();
            				}
HXLINE(1912)				if (firstGroup) {
HXLINE(1914)					if ((y < group->offsetY)) {
HXLINE(1914)						y = group->offsetY;
            					}
HXLINE(1915)					if ((x < group->offsetX)) {
HXLINE(1915)						x = group->offsetX;
            					}
HXLINE(1916)					firstGroup = false;
            				}
HXLINE(1919)				bool _hx_tmp1;
HXDLIN(1919)				bool _hx_tmp2;
HXDLIN(1919)				if ((y >= group->offsetY)) {
HXLINE(1919)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1919)					_hx_tmp2 = false;
            				}
HXDLIN(1919)				if (!(_hx_tmp2)) {
HXLINE(1919)					if (!(precise)) {
HXLINE(1919)						_hx_tmp1 = ::hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1919)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1919)					_hx_tmp1 = true;
            				}
HXDLIN(1919)				if (_hx_tmp1) {
HXLINE(1921)					bool _hx_tmp3;
HXDLIN(1921)					bool _hx_tmp4;
HXDLIN(1921)					if ((x >= group->offsetX)) {
HXLINE(1921)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1921)						_hx_tmp4 = false;
            					}
HXDLIN(1921)					if (!(_hx_tmp4)) {
HXLINE(1922)						if (!(precise)) {
HXLINE(1922)							if (::hx::IsNotNull( nextGroup )) {
HXLINE(1921)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1921)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1921)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1921)						_hx_tmp3 = true;
            					}
HXDLIN(1921)					if (_hx_tmp3) {
HXLINE(1924)						return group;
            					}
            				}
            			}
            		}
HXLINE(1929)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1933___getPosition)
HXLINE(1934)		 ::openfl::text::_internal::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1936)		if (::hx::IsNull( group )) {
HXLINE(1938)			return this->_hx___text.length;
            		}
HXLINE(1941)		Float advance = ((Float)0.0);
HXLINE(1943)		{
HXLINE(1943)			int _g = 0;
HXDLIN(1943)			int _g1 = group->positions->length;
HXDLIN(1943)			while((_g < _g1)){
HXLINE(1943)				_g = (_g + 1);
HXDLIN(1943)				int i = (_g - 1);
HXLINE(1945)				Float advance1;
HXDLIN(1945)				bool advance2;
HXDLIN(1945)				if ((i >= 0)) {
HXLINE(1945)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(1945)					advance2 = false;
            				}
HXDLIN(1945)				if (advance2) {
HXLINE(1945)					advance1 = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(1945)					advance1 = ( (Float)(0) );
            				}
HXDLIN(1945)				advance = (advance + advance1);
HXLINE(1947)				if ((x <= (group->offsetX + advance))) {
HXLINE(1949)					Float _hx_tmp;
HXDLIN(1949)					bool _hx_tmp1;
HXDLIN(1949)					if ((i >= 0)) {
HXLINE(1949)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(1949)						_hx_tmp1 = false;
            					}
HXDLIN(1949)					if (_hx_tmp1) {
HXLINE(1949)						_hx_tmp = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1949)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN(1949)					Float _hx_tmp2;
HXDLIN(1949)					bool _hx_tmp3;
HXDLIN(1949)					if ((i >= 0)) {
HXLINE(1949)						_hx_tmp3 = (i < group->positions->length);
            					}
            					else {
HXLINE(1949)						_hx_tmp3 = false;
            					}
HXDLIN(1949)					if (_hx_tmp3) {
HXLINE(1949)						_hx_tmp2 = group->positions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1949)						_hx_tmp2 = ( (Float)(0) );
            					}
HXDLIN(1949)					if ((x <= ((group->offsetX + (advance - _hx_tmp)) + (_hx_tmp2 / ( (Float)(2) ))))) {
HXLINE(1951)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1955)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1955)							return ((group->startIndex + i) + 1);
            						}
            						else {
HXLINE(1955)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1960)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1965___hitTest)
HXLINE(1966)		bool _hx_tmp;
HXDLIN(1966)		bool _hx_tmp1;
HXDLIN(1966)		if (hitObject->get_visible()) {
HXLINE(1966)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1966)			_hx_tmp1 = true;
            		}
HXDLIN(1966)		if (!(_hx_tmp1)) {
HXLINE(1966)			if (interactiveOnly) {
HXLINE(1966)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1966)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1966)			_hx_tmp = true;
            		}
HXDLIN(1966)		if (_hx_tmp) {
HXLINE(1966)			return false;
            		}
HXLINE(1967)		bool _hx_tmp2;
HXDLIN(1967)		if (::hx::IsNotNull( this->get_mask() )) {
HXLINE(1967)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1967)			_hx_tmp2 = false;
            		}
HXDLIN(1967)		if (_hx_tmp2) {
HXLINE(1967)			return false;
            		}
HXLINE(1969)		this->_hx___getRenderTransform();
HXLINE(1970)		this->_hx___updateLayout();
HXLINE(1972)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1972)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1972)		Float px;
HXDLIN(1972)		if ((norm == 0)) {
HXLINE(1972)			px = -(_this->tx);
            		}
            		else {
HXLINE(1972)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(1973)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(1973)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(1973)		Float py;
HXDLIN(1973)		if ((norm1 == 0)) {
HXLINE(1973)			py = -(_this1->ty);
            		}
            		else {
HXLINE(1973)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(1975)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1977)			if (::hx::IsNotNull( stack )) {
HXLINE(1979)				stack->push(hitObject);
            			}
HXLINE(1982)			return true;
            		}
HXLINE(1985)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1989___hitTestMask)
HXLINE(1990)		this->_hx___getRenderTransform();
HXLINE(1991)		this->_hx___updateLayout();
HXLINE(1993)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1993)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1993)		Float px;
HXDLIN(1993)		if ((norm == 0)) {
HXLINE(1993)			px = -(_this->tx);
            		}
            		else {
HXLINE(1993)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(1994)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(1994)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(1994)		Float py;
HXDLIN(1994)		if ((norm1 == 0)) {
HXLINE(1994)			py = -(_this1->ty);
            		}
            		else {
HXLINE(1994)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(1996)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1998)			return true;
            		}
HXLINE(2001)		return false;
            	}


void TextField_obj::_hx___replaceSelectedText(::String value,::hx::Null< bool >  __o_restrict){
            		bool restrict = __o_restrict.Default(true);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2005___replaceSelectedText)
HXLINE(2006)		if (::hx::IsNull( value )) {
HXLINE(2006)			value = HX_("",00,00,00,00);
            		}
HXLINE(2007)		bool _hx_tmp;
HXDLIN(2007)		if ((value == HX_("",00,00,00,00))) {
HXLINE(2007)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2007)			_hx_tmp = false;
            		}
HXDLIN(2007)		if (_hx_tmp) {
HXLINE(2007)			return;
            		}
HXLINE(2009)		int startIndex;
HXDLIN(2009)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE(2009)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2009)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE(2010)		int endIndex;
HXDLIN(2010)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE(2010)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2010)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE(2012)		bool _hx_tmp1;
HXDLIN(2012)		bool _hx_tmp2;
HXDLIN(2012)		if ((startIndex == endIndex)) {
HXLINE(2012)			_hx_tmp2 = (this->_hx___textEngine->maxChars > 0);
            		}
            		else {
HXLINE(2012)			_hx_tmp2 = false;
            		}
HXDLIN(2012)		if (_hx_tmp2) {
HXLINE(2012)			_hx_tmp1 = (this->_hx___text.length == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE(2012)			_hx_tmp1 = false;
            		}
HXDLIN(2012)		if (_hx_tmp1) {
HXLINE(2012)			return;
            		}
HXLINE(2014)		if ((startIndex > this->_hx___text.length)) {
HXLINE(2014)			startIndex = this->_hx___text.length;
            		}
HXLINE(2015)		if ((endIndex > this->_hx___text.length)) {
HXLINE(2015)			endIndex = this->_hx___text.length;
            		}
HXLINE(2016)		if ((endIndex < startIndex)) {
HXLINE(2018)			int cache = endIndex;
HXLINE(2019)			endIndex = startIndex;
HXLINE(2020)			startIndex = cache;
            		}
HXLINE(2022)		if ((startIndex < 0)) {
HXLINE(2022)			startIndex = 0;
            		}
HXLINE(2024)		this->_hx___replaceText(startIndex,endIndex,value,restrict);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___replaceSelectedText,(void))

void TextField_obj::_hx___replaceText(int beginIndex,int endIndex,::String newText,bool restrict){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2028___replaceText)
HXLINE(2029)		bool _hx_tmp;
HXDLIN(2029)		bool _hx_tmp1;
HXDLIN(2029)		bool _hx_tmp2;
HXDLIN(2029)		if ((endIndex >= beginIndex)) {
HXLINE(2029)			_hx_tmp2 = (beginIndex < 0);
            		}
            		else {
HXLINE(2029)			_hx_tmp2 = true;
            		}
HXDLIN(2029)		if (!(_hx_tmp2)) {
HXLINE(2029)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(2029)			_hx_tmp1 = true;
            		}
HXDLIN(2029)		if (!(_hx_tmp1)) {
HXLINE(2029)			_hx_tmp = ::hx::IsNull( newText );
            		}
            		else {
HXLINE(2029)			_hx_tmp = true;
            		}
HXDLIN(2029)		if (_hx_tmp) {
HXLINE(2029)			return;
            		}
HXLINE(2031)		if (restrict) {
HXLINE(2033)			newText = this->_hx___textEngine->restrictText(newText);
HXLINE(2035)			if ((this->_hx___textEngine->maxChars > 0)) {
HXLINE(2038)				int maxLength = ((this->_hx___textEngine->maxChars - this->_hx___text.length) + (endIndex - beginIndex));
HXLINE(2040)				if ((maxLength <= 0)) {
HXLINE(2042)					newText = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(2044)					if ((maxLength < newText.length)) {
HXLINE(2046)						newText = newText.substr(0,maxLength);
            					}
            				}
            			}
            		}
HXLINE(2051)		::String _hx_tmp3 = (this->_hx___text.substring(0,beginIndex) + newText);
HXDLIN(2051)		this->_hx___updateText((_hx_tmp3 + this->_hx___text.substring(endIndex,null())));
HXLINE(2053)		int offset = (newText.length - (endIndex - beginIndex));
HXLINE(2055)		int i = 0;
HXLINE(2056)		 ::openfl::text::_internal::TextFormatRange range;
HXLINE(2058)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(2060)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(2062)			if ((beginIndex == endIndex)) {
HXLINE(2064)				if ((range->start == range->end)) {
HXLINE(2067)					if ((range->start != 0)) {
HXLINE(2069)						::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),::hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),2069,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__replaceText",e1,ab,0d,aa)));
            					}
            					else {
HXLINE(2073)						range->end = (range->end + offset);
            					}
            				}
            				else {
HXLINE(2076)					if ((range->end >= beginIndex)) {
HXLINE(2080)						if ((range->start >= beginIndex)) {
HXLINE(2083)							range->start = (range->start + offset);
HXLINE(2084)							range->end = (range->end + offset);
            						}
            						else {
HXLINE(2086)							bool _hx_tmp4;
HXDLIN(2086)							if ((range->start < beginIndex)) {
HXLINE(2086)								_hx_tmp4 = (range->end >= endIndex);
            							}
            							else {
HXLINE(2086)								_hx_tmp4 = false;
            							}
HXDLIN(2086)							if (_hx_tmp4) {
HXLINE(2090)								range->end = (range->end + offset);
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE(2095)				if ((range->end > beginIndex)) {
HXLINE(2099)					if ((range->start > endIndex)) {
HXLINE(2102)						range->start = (range->start + offset);
HXLINE(2103)						range->end = (range->end + offset);
            					}
            					else {
HXLINE(2105)						bool _hx_tmp5;
HXDLIN(2105)						if ((range->start <= beginIndex)) {
HXLINE(2105)							_hx_tmp5 = (range->end > endIndex);
            						}
            						else {
HXLINE(2105)							_hx_tmp5 = false;
            						}
HXDLIN(2105)						if (_hx_tmp5) {
HXLINE(2108)							range->end = (range->end + offset);
            						}
            						else {
HXLINE(2110)							bool _hx_tmp6;
HXDLIN(2110)							if ((range->start >= beginIndex)) {
HXLINE(2110)								_hx_tmp6 = (range->end <= endIndex);
            							}
            							else {
HXLINE(2110)								_hx_tmp6 = false;
            							}
HXDLIN(2110)							if (_hx_tmp6) {
HXLINE(2113)								::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2113)								i = (i - 1);
HXDLIN(2113)								::cpp::VirtualArray items = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(2113)								this1->__SetField(HX_("__tempIndex",3e,e8,54,22),(i + 1),::hx::paccDynamic);
HXDLIN(2113)								{
HXLINE(2113)									int _g_current = 0;
HXDLIN(2113)									while((_g_current < items->get_length())){
HXLINE(2113)										_g_current = (_g_current + 1);
HXDLIN(2113)										( ( ::openfl::_Vector::ObjectVector)(this1) )->insertAt(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( ( ::openfl::text::_internal::TextFormatRange)(items->__get((_g_current - 1))) ));
HXDLIN(2113)										::hx::FieldRef((this1).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            									}
            								}
HXDLIN(2113)								( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),1);
            							}
            							else {
HXLINE(2115)								bool _hx_tmp7;
HXDLIN(2115)								bool _hx_tmp8;
HXDLIN(2115)								if ((range->end > endIndex)) {
HXLINE(2115)									_hx_tmp8 = (range->start > beginIndex);
            								}
            								else {
HXLINE(2115)									_hx_tmp8 = false;
            								}
HXDLIN(2115)								if (_hx_tmp8) {
HXLINE(2115)									_hx_tmp7 = (range->start <= endIndex);
            								}
            								else {
HXLINE(2115)									_hx_tmp7 = false;
            								}
HXDLIN(2115)								if (_hx_tmp7) {
HXLINE(2119)									range->start = beginIndex;
HXLINE(2120)									range->end = (range->end + offset);
            								}
            								else {
HXLINE(2122)									bool _hx_tmp9;
HXDLIN(2122)									bool _hx_tmp10;
HXDLIN(2122)									if ((range->start < beginIndex)) {
HXLINE(2122)										_hx_tmp10 = (range->end > beginIndex);
            									}
            									else {
HXLINE(2122)										_hx_tmp10 = false;
            									}
HXDLIN(2122)									if (_hx_tmp10) {
HXLINE(2122)										_hx_tmp9 = (range->end <= endIndex);
            									}
            									else {
HXLINE(2122)										_hx_tmp9 = false;
            									}
HXDLIN(2122)									if (_hx_tmp9) {
HXLINE(2125)										range->end = beginIndex;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(2129)			i = (i + 1);
            		}
HXLINE(2133)		if ((this->_hx___textEngine->textFormatRanges->get_length() == 0)) {
HXLINE(2136)			::Dynamic this2 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2136)			 ::openfl::text::TextFormat value = this->get_defaultTextFormat()->clone();
HXDLIN(2136)			( ( ::openfl::_Vector::ObjectVector)(this2) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value,0,newText.length));
            		}
            		else {
HXLINE(2138)			bool _hx_tmp11;
HXDLIN(2138)			if ((beginIndex == endIndex)) {
HXLINE(2138)				_hx_tmp11 = (this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->start > 0);
            			}
            			else {
HXLINE(2138)				_hx_tmp11 = false;
            			}
HXDLIN(2138)			if (_hx_tmp11) {
HXLINE(2141)				::Dynamic this3 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2141)				 ::openfl::text::TextFormat value1 = this->get_defaultTextFormat()->clone();
HXDLIN(2141)				( ( ::openfl::_Vector::ObjectVector)(this3) )->unshift( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value1,0,this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->start));
            			}
            			else {
HXLINE(2143)				bool _hx_tmp12;
HXDLIN(2143)				if ((beginIndex != endIndex)) {
HXLINE(2143)					::Dynamic this4 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2143)					 ::openfl::text::_internal::TextFormatRange _hx_tmp13 = ( ( ::openfl::_Vector::ObjectVector)(this4) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(2143)					_hx_tmp12 = (_hx_tmp13->end < this->_hx___text.length);
            				}
            				else {
HXLINE(2143)					_hx_tmp12 = false;
            				}
HXDLIN(2143)				if (_hx_tmp12) {
HXLINE(2146)					::Dynamic this5 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2146)					 ::openfl::text::TextFormat value2 = this->get_defaultTextFormat()->clone();
HXLINE(2147)					::Dynamic this6 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2147)					 ::openfl::text::_internal::TextFormatRange value3 = ( ( ::openfl::_Vector::ObjectVector)(this6) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(2146)					( ( ::openfl::_Vector::ObjectVector)(this5) )->push( ::openfl::text::_internal::TextFormatRange_obj::__alloc( HX_CTX ,value2,value3->end,this->_hx___text.length));
            				}
            			}
            		}
HXLINE(2150)		this->_hx___selectionIndex = (this->_hx___caretIndex = (beginIndex + newText.length));
HXLINE(2152)		this->_hx___dirty = true;
HXLINE(2153)		this->_hx___layoutDirty = true;
HXLINE(2154)		if (!(this->_hx___renderDirty)) {
HXLINE(2154)			this->_hx___renderDirty = true;
HXDLIN(2154)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextField_obj,_hx___replaceText,(void))

void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2159___startCursorTimer)
HXDLIN(2159)		if (::hx::IsEq( this->get_type(),1 )) {
HXLINE(2161)			this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),600);
HXLINE(2162)			this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(2163)			this->_hx___dirty = true;
HXLINE(2164)			if (!(this->_hx___renderDirty)) {
HXLINE(2164)				this->_hx___renderDirty = true;
HXDLIN(2164)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2166)			if (this->get_selectable()) {
HXLINE(2168)				this->_hx___dirty = true;
HXLINE(2169)				if (!(this->_hx___renderDirty)) {
HXLINE(2169)					this->_hx___renderDirty = true;
HXDLIN(2169)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2174___startTextInput)
HXLINE(2175)		if ((this->_hx___caretIndex < 0)) {
HXLINE(2177)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE(2178)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(2185)		this->_hx___enableInput();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2190___stopCursorTimer)
HXLINE(2191)		if (::hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(2193)			this->_hx___cursorTimer->stop();
HXLINE(2194)			this->_hx___cursorTimer = null();
            		}
HXLINE(2197)		if (this->_hx___showCursor) {
HXLINE(2199)			this->_hx___showCursor = false;
HXLINE(2200)			this->_hx___dirty = true;
HXLINE(2201)			if (!(this->_hx___renderDirty)) {
HXLINE(2201)				this->_hx___renderDirty = true;
HXDLIN(2201)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2211___stopTextInput)
HXDLIN(2211)		this->_hx___disableInput();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2217___updateLayout)
HXDLIN(2217)		if (this->_hx___layoutDirty) {
HXLINE(2219)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(2220)			this->_hx___textEngine->update();
HXLINE(2222)			if (::hx::IsNotEq( this->_hx___textEngine->autoSize,2 )) {
HXLINE(2224)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(2226)					 ::Dynamic _hx_switch_0 = this->_hx___textEngine->autoSize;
            					if (  (_hx_switch_0==0) ){
HXLINE(2232)						Float _hx_tmp = this->get_x();
HXDLIN(2232)						this->set_x((_hx_tmp + ((cacheWidth - this->_hx___textEngine->width) / ( (Float)(2) ))));
HXDLIN(2232)						goto _hx_goto_53;
            					}
            					if (  (_hx_switch_0==3) ){
HXLINE(2229)						Float _hx_tmp1 = this->get_x();
HXDLIN(2229)						this->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(2229)						goto _hx_goto_53;
            					}
            					/* default */{
            					}
            					_hx_goto_53:;
            				}
HXLINE(2238)				this->_hx___textEngine->getBounds();
            			}
HXLINE(2241)			this->_hx___layoutDirty = false;
HXLINE(2243)			this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2248___updateScrollH)
HXLINE(2249)		this->_hx___updateLayout();
HXLINE(2251)		Float _hx_tmp = this->get_textWidth();
HXDLIN(2251)		if ((_hx_tmp <= (this->get_width() - ( (Float)(4) )))) {
HXLINE(2253)			this->set_scrollH(0);
HXLINE(2254)			return;
            		}
HXLINE(2257)		int tempScrollH = this->get_scrollH();
HXLINE(2261)		bool _hx_tmp1;
HXDLIN(2261)		if ((this->_hx___caretIndex != 0)) {
HXLINE(2261)			int _hx_tmp2 = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
HXDLIN(2261)			_hx_tmp1 = (_hx_tmp2 == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2261)			_hx_tmp1 = true;
            		}
HXDLIN(2261)		if (_hx_tmp1) {
HXLINE(2264)			tempScrollH = 0;
            		}
            		else {
HXLINE(2268)			 ::openfl::geom::Rectangle caret = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2269)			bool written = false;
HXLINE(2271)			if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(2273)				written = this->_hx___getCharBoundaries(this->_hx___caretIndex,caret);
            			}
HXLINE(2275)			if (!(written)) {
HXLINE(2279)				this->_hx___getCharBoundaries((this->_hx___caretIndex - 1),caret);
HXLINE(2280)				caret->x = (caret->x + caret->width);
            			}
HXLINE(2283)			while(true){
HXLINE(2283)				bool _hx_tmp3;
HXDLIN(2283)				if ((caret->x < tempScrollH)) {
HXLINE(2283)					_hx_tmp3 = (tempScrollH > 0);
            				}
            				else {
HXLINE(2283)					_hx_tmp3 = false;
            				}
HXDLIN(2283)				if (!(_hx_tmp3)) {
HXLINE(2283)					goto _hx_goto_55;
            				}
HXLINE(2285)				tempScrollH = (tempScrollH - 24);
            			}
            			_hx_goto_55:;
HXLINE(2287)			while(true){
HXLINE(2287)				Float caret1 = caret->x;
HXDLIN(2287)				if (!((caret1 > ((tempScrollH + this->get_width()) - ( (Float)(4) ))))) {
HXLINE(2287)					goto _hx_goto_56;
            				}
HXLINE(2289)				tempScrollH = (tempScrollH + 24);
            			}
            			_hx_goto_56:;
HXLINE(2292)			::openfl::geom::Rectangle_obj::_hx___pool->release(caret);
            		}
HXLINE(2295)		bool _hx_tmp4;
HXDLIN(2295)		if ((tempScrollH > 0)) {
HXLINE(2295)			_hx_tmp4 = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(2295)			_hx_tmp4 = false;
            		}
HXDLIN(2295)		if (_hx_tmp4) {
HXLINE(2298)			int lineLength = this->getLineLength(this->getLineIndexOfChar(this->_hx___caretIndex));
HXLINE(2299)			int _hx_tmp5 = this->get_scrollH();
HXDLIN(2299)			if ((((_hx_tmp5 + this->get_width()) - ( (Float)(4) )) > lineLength)) {
HXLINE(2301)				this->set_scrollH(::Math_obj::ceil(((( (Float)(lineLength) ) - this->get_width()) + 4)));
            			}
            		}
HXLINE(2305)		if ((tempScrollH < 0)) {
HXLINE(2307)			this->set_scrollH(0);
            		}
            		else {
HXLINE(2309)			if ((tempScrollH > this->get_maxScrollH())) {
HXLINE(2311)				this->set_scrollH(this->get_maxScrollH());
            			}
            			else {
HXLINE(2315)				this->set_scrollH(tempScrollH);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2322___updateScrollV)
HXLINE(2323)		this->_hx___updateLayout();
HXLINE(2325)		Float _hx_tmp = this->get_textHeight();
HXDLIN(2325)		if ((_hx_tmp <= (this->get_height() - ( (Float)(4) )))) {
HXLINE(2327)			this->set_scrollV(1);
HXLINE(2328)			return;
            		}
HXLINE(2331)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(2333)		bool _hx_tmp1;
HXDLIN(2333)		if ((lineIndex == -1)) {
HXLINE(2333)			_hx_tmp1 = (this->_hx___caretIndex > 0);
            		}
            		else {
HXLINE(2333)			_hx_tmp1 = false;
            		}
HXDLIN(2333)		if (_hx_tmp1) {
HXLINE(2336)			lineIndex = (this->getLineIndexOfChar((this->_hx___caretIndex - 1)) + 1);
            		}
HXLINE(2339)		if (((lineIndex + 1) < this->get_scrollV())) {
HXLINE(2341)			this->set_scrollV((lineIndex + 1));
            		}
            		else {
HXLINE(2343)			if (((lineIndex + 1) > this->get_bottomScrollV())) {
HXLINE(2345)				int i = lineIndex;
HXDLIN(2345)				Float tempHeight = ((Float)0.0);
HXLINE(2347)				if ((i >= this->_hx___textEngine->lineHeights->get_length())) {
HXLINE(2349)					i = (this->_hx___textEngine->lineHeights->get_length() - 1);
            				}
HXLINE(2352)				while((i >= 0)){
HXLINE(2354)					tempHeight = (tempHeight + this->_hx___textEngine->lineHeights->get(i));
HXLINE(2356)					if ((tempHeight > (this->get_height() - ( (Float)(4) )))) {
HXLINE(2358)						int i1;
HXDLIN(2358)						if (((tempHeight - this->get_height()) < 0)) {
HXLINE(2358)							i1 = 1;
            						}
            						else {
HXLINE(2358)							i1 = 2;
            						}
HXDLIN(2358)						i = (i + i1);
HXLINE(2359)						goto _hx_goto_58;
            					}
HXLINE(2361)					i = (i - 1);
            				}
            				_hx_goto_58:;
HXLINE(2373)				this->set_scrollV(i);
            			}
            			else {
HXLINE(2379)				this->set_scrollV(this->get_scrollV());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollV,(void))

void TextField_obj::_hx___updateMouseDrag(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2384___updateMouseDrag)
HXLINE(2385)		if (::hx::IsNull( this->stage )) {
HXLINE(2385)			return;
            		}
HXLINE(2387)		Float _hx_tmp = this->get_mouseX();
HXDLIN(2387)		if ((_hx_tmp > (this->get_width() - ( (Float)(1) )))) {
HXLINE(2389)			int _hx_tmp1 = this->get_scrollH();
HXDLIN(2389)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN(2389)			this->set_scrollH((_hx_tmp1 + ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min(((_hx_tmp2 - this->get_width()) * ((Float).1)),( (Float)(10) )),( (Float)(1) )))));
            		}
            		else {
HXLINE(2391)			if ((this->get_mouseX() < 1)) {
HXLINE(2393)				int _hx_tmp3 = this->get_scrollH();
HXDLIN(2393)				this->set_scrollH((_hx_tmp3 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((this->get_mouseX() * ((Float)-.1)),( (Float)(10) )),( (Float)(1) )))));
            			}
            		}
HXLINE(2396)		this->_hx___mouseScrollVCounter++;
HXLINE(2398)		int _hx_tmp4 = this->_hx___mouseScrollVCounter;
HXDLIN(2398)		if ((_hx_tmp4 > (this->stage->get_frameRate() / ( (Float)(10) )))) {
HXLINE(2400)			Float _hx_tmp5 = this->get_mouseY();
HXDLIN(2400)			if ((_hx_tmp5 > (this->get_height() - ( (Float)(2) )))) {
HXLINE(2402)				int _hx_tmp6 = this->get_scrollV();
HXDLIN(2402)				Float _hx_tmp7 = this->get_mouseY();
HXDLIN(2402)				Float _hx_tmp8 = (_hx_tmp6 + ::Math_obj::max(::Math_obj::min(((_hx_tmp7 - this->get_height()) * ((Float).03)),( (Float)(5) )),( (Float)(1) )));
HXDLIN(2402)				this->set_scrollV(::Std_obj::_hx_int(::Math_obj::min(_hx_tmp8,( (Float)(this->get_maxScrollV()) ))));
            			}
            			else {
HXLINE(2404)				if ((this->get_mouseY() < 2)) {
HXLINE(2406)					int _hx_tmp9 = this->get_scrollV();
HXDLIN(2406)					this->set_scrollV((_hx_tmp9 - ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min((this->get_mouseY() * ((Float)-.03)),( (Float)(5) )),( (Float)(1) )))));
            				}
            			}
HXLINE(2408)			this->_hx___mouseScrollVCounter = 0;
            		}
HXLINE(2410)		this->stage_onMouseMove(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateMouseDrag,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2414___updateText)
HXLINE(2424)		this->_hx___textEngine->set_text(value);
HXLINE(2425)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(2427)		bool _hx_tmp;
HXDLIN(2427)		if (::hx::IsNotNull( this->stage )) {
HXLINE(2427)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(2427)			_hx_tmp = false;
            		}
HXDLIN(2427)		if (_hx_tmp) {
HXLINE(2431)			if ((this->_hx___text.length < this->_hx___selectionIndex)) {
HXLINE(2433)				this->_hx___selectionIndex = this->_hx___text.length;
            			}
HXLINE(2435)			if ((this->_hx___text.length < this->_hx___caretIndex)) {
HXLINE(2437)				this->_hx___caretIndex = this->_hx___text.length;
            			}
            		}
            		else {
HXLINE(2444)			if (this->_hx___isHTML) {
HXLINE(2446)				this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            			}
            			else {
HXLINE(2450)				this->_hx___selectionIndex = 0;
HXLINE(2451)				this->_hx___caretIndex = 0;
            			}
            		}
HXLINE(2455)		if (!(this->_hx___displayAsPassword)) {
HXLINE(2457)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(2461)			int length = this->get_text().length;
HXLINE(2462)			::String mask = HX_("",00,00,00,00);
HXLINE(2464)			{
HXLINE(2464)				int _g = 0;
HXDLIN(2464)				while((_g < length)){
HXLINE(2464)					_g = (_g + 1);
HXLINE(2466)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(2469)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2474___updateTransforms)
HXLINE(2475)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(2476)		{
HXLINE(2476)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2476)			Float px = this->_hx___offsetX;
HXDLIN(2476)			Float py = this->_hx___offsetY;
HXDLIN(2476)			_this->tx = (((px * _this->a) + (py * _this->c)) + _this->tx);
HXDLIN(2476)			_this->ty = (((px * _this->b) + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2501_set_autoSize)
HXLINE(2502)		if (::hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(2504)			this->_hx___dirty = true;
HXLINE(2505)			this->_hx___layoutDirty = true;
HXLINE(2506)			if (!(this->_hx___renderDirty)) {
HXLINE(2506)				this->_hx___renderDirty = true;
HXDLIN(2506)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2509)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2546_get_border)
HXDLIN(2546)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2550_set_border)
HXLINE(2551)		if ((value != this->_hx___textEngine->border)) {
HXLINE(2553)			this->_hx___dirty = true;
HXLINE(2554)			if (!(this->_hx___renderDirty)) {
HXLINE(2554)				this->_hx___renderDirty = true;
HXDLIN(2554)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2557)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2566_set_borderColor)
HXLINE(2567)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(2569)			this->_hx___dirty = true;
HXLINE(2570)			if (!(this->_hx___renderDirty)) {
HXLINE(2570)				this->_hx___renderDirty = true;
HXDLIN(2570)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2573)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2577_get_bottomScrollV)
HXLINE(2578)		this->_hx___updateLayout();
HXLINE(2580)		return this->_hx___textEngine->get_bottomScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2585_get_caretIndex)
HXDLIN(2585)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2590_get_defaultTextFormat)
HXDLIN(2590)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2594_set_defaultTextFormat)
HXLINE(2595)		this->_hx___textFormat->_hx___merge(value);
HXLINE(2597)		this->_hx___layoutDirty = true;
HXLINE(2598)		this->_hx___dirty = true;
HXLINE(2599)		if (!(this->_hx___renderDirty)) {
HXLINE(2599)			this->_hx___renderDirty = true;
HXDLIN(2599)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2601)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2610_set_displayAsPassword)
HXLINE(2611)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(2613)			this->_hx___dirty = true;
HXLINE(2614)			this->_hx___layoutDirty = true;
HXLINE(2615)			if (!(this->_hx___renderDirty)) {
HXLINE(2615)				this->_hx___renderDirty = true;
HXDLIN(2615)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2617)			this->_hx___displayAsPassword = value;
HXLINE(2618)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2621)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2638_set_embedFonts)
HXDLIN(2638)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2659_get_height)
HXLINE(2660)		this->_hx___updateLayout();
HXLINE(2661)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2661)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2665_set_height)
HXLINE(2666)		if ((value != this->_hx___textEngine->height)) {
HXLINE(2668)			this->_hx___setTransformDirty();
HXLINE(2669)			this->_hx___dirty = true;
HXLINE(2670)			this->_hx___layoutDirty = true;
HXLINE(2671)			if (!(this->_hx___renderDirty)) {
HXLINE(2671)				this->_hx___renderDirty = true;
HXDLIN(2671)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2673)			this->_hx___textEngine->height = value;
            		}
HXLINE(2676)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2676)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::set_htmlText(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2689_set_htmlText)
HXLINE(2690)		bool _hx_tmp;
HXDLIN(2690)		if (this->_hx___isHTML) {
HXLINE(2690)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2690)			_hx_tmp = true;
            		}
HXDLIN(2690)		if (_hx_tmp) {
HXLINE(2692)			this->_hx___dirty = true;
HXLINE(2693)			this->_hx___layoutDirty = true;
HXLINE(2694)			if (!(this->_hx___renderDirty)) {
HXLINE(2694)				this->_hx___renderDirty = true;
HXDLIN(2694)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2697)		this->_hx___isHTML = true;
HXLINE(2700)		if (this->condenseWhite) {
HXLINE(2702)			value =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\s+",b4,33,46,00),HX_("g",67,00,00,00))->replace(value,HX_(" ",20,00,00,00));
            		}
HXLINE(2705)		this->_hx___htmlText = value;
HXLINE(2708)		bool value1 = this->get_multiline();
HXDLIN(2708)		value = ::openfl::text::_internal::HTMLParser_obj::parse(value,value1,this->_hx___styleSheet,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2740)		this->_hx___updateText(value);
HXLINE(2743)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2747_get_length)
HXLINE(2748)		if (::hx::IsNotNull( this->_hx___text )) {
HXLINE(2750)			return this->_hx___text.length;
            		}
HXLINE(2753)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2762_set_maxChars)
HXLINE(2763)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2765)			this->_hx___textEngine->maxChars = value;
HXLINE(2767)			this->_hx___dirty = true;
HXLINE(2768)			this->_hx___layoutDirty = true;
HXLINE(2769)			if (!(this->_hx___renderDirty)) {
HXLINE(2769)				this->_hx___renderDirty = true;
HXDLIN(2769)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2772)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2776_get_maxScrollH)
HXLINE(2777)		this->_hx___updateLayout();
HXLINE(2779)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2783_get_maxScrollV)
HXLINE(2784)		this->_hx___updateLayout();
HXLINE(2786)		return this->_hx___textEngine->get_maxScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2791_get_mouseWheelEnabled)
HXDLIN(2791)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2801_get_multiline)
HXDLIN(2801)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2806_set_multiline)
HXDLIN(2806)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2810_get_numLines)
HXLINE(2811)		this->_hx___updateLayout();
HXLINE(2813)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2834_get_scrollH)
HXDLIN(2834)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2838_set_scrollH)
HXLINE(2839)		this->_hx___updateLayout();
HXLINE(2841)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2841)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2842)		if ((value < 0)) {
HXLINE(2842)			value = 0;
            		}
HXLINE(2844)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2846)			this->_hx___dirty = true;
HXLINE(2847)			if (!(this->_hx___renderDirty)) {
HXLINE(2847)				this->_hx___renderDirty = true;
HXDLIN(2847)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2848)			this->_hx___textEngine->scrollH = value;
HXLINE(2849)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2852)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2857_get_scrollV)
HXDLIN(2857)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2861_set_scrollV)
HXLINE(2862)		this->_hx___updateLayout();
HXLINE(2864)		bool _hx_tmp;
HXDLIN(2864)		if ((value == this->_hx___textEngine->get_scrollV())) {
HXLINE(2864)			_hx_tmp = (this->_hx___textEngine->get_scrollV() == 0);
            		}
            		else {
HXLINE(2864)			_hx_tmp = true;
            		}
HXDLIN(2864)		if (_hx_tmp) {
HXLINE(2866)			this->_hx___dirty = true;
HXLINE(2867)			if (!(this->_hx___renderDirty)) {
HXLINE(2867)				this->_hx___renderDirty = true;
HXDLIN(2867)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2868)			this->_hx___textEngine->set_scrollV(value);
HXLINE(2869)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2872)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2877_get_selectable)
HXDLIN(2877)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2881_set_selectable)
HXLINE(2882)		bool _hx_tmp;
HXDLIN(2882)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2882)			_hx_tmp = ::hx::IsEq( this->get_type(),1 );
            		}
            		else {
HXLINE(2882)			_hx_tmp = false;
            		}
HXDLIN(2882)		if (_hx_tmp) {
HXLINE(2884)			bool _hx_tmp1;
HXDLIN(2884)			if (::hx::IsNotNull( this->stage )) {
HXLINE(2884)				_hx_tmp1 = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2884)				_hx_tmp1 = false;
            			}
HXDLIN(2884)			if (_hx_tmp1) {
HXLINE(2886)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2888)				if (!(value)) {
HXLINE(2890)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2894)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

 ::openfl::text::StyleSheet TextField_obj::set_styleSheet( ::openfl::text::StyleSheet value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2929_set_styleSheet)
HXLINE(2930)		bool _hx_tmp;
HXDLIN(2930)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(2930)			_hx_tmp = ::hx::IsNull( value );
            		}
            		else {
HXLINE(2930)			_hx_tmp = false;
            		}
HXDLIN(2930)		if (!(_hx_tmp)) {
HXLINE(2935)			if (::hx::IsNotNull( value )) {
HXLINE(2939)				bool _hx_tmp1;
HXDLIN(2939)				if (this->_hx___isHTML) {
HXLINE(2939)					_hx_tmp1 = ::hx::IsInstanceNotEq( value,this->_hx___styleSheet );
            				}
            				else {
HXLINE(2939)					_hx_tmp1 = false;
            				}
HXDLIN(2939)				if (_hx_tmp1) {
HXLINE(2941)					this->_hx___dirty = true;
HXLINE(2942)					this->_hx___layoutDirty = true;
HXLINE(2943)					if (!(this->_hx___renderDirty)) {
HXLINE(2943)						this->_hx___renderDirty = true;
HXDLIN(2943)						this->_hx___setParentRenderDirty();
            					}
HXLINE(2944)					this->set_htmlText(this->_hx___htmlText);
            				}
HXLINE(2948)				this->set_type(0);
            			}
            		}
HXLINE(2950)		return (this->_hx___styleSheet = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_styleSheet,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2955_get_tabEnabled)
HXDLIN(2955)		if (::hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(2955)			return ::hx::IsEq( this->_hx___textEngine->type,1 );
            		}
            		else {
HXDLIN(2955)			return ( (bool)(this->_hx___tabEnabled) );
            		}
HXDLIN(2955)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2960_get_text)
HXDLIN(2960)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2964_set_text)
HXLINE(2965)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(2967)			return this->set_htmlText(value);
            		}
HXLINE(2970)		bool _hx_tmp;
HXDLIN(2970)		if (!(this->_hx___isHTML)) {
HXLINE(2970)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2970)			_hx_tmp = true;
            		}
HXDLIN(2970)		if (_hx_tmp) {
HXLINE(2972)			this->_hx___dirty = true;
HXLINE(2973)			this->_hx___layoutDirty = true;
HXLINE(2974)			if (!(this->_hx___renderDirty)) {
HXLINE(2974)				this->_hx___renderDirty = true;
HXDLIN(2974)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2978)			return value;
            		}
HXLINE(2981)		if ((this->_hx___textEngine->textFormatRanges->get_length() > 1)) {
HXLINE(2983)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2983)			int deleteCount = (this->_hx___textEngine->textFormatRanges->get_length() - 1);
HXDLIN(2983)			::cpp::VirtualArray items = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(2983)			this1->__SetField(HX_("__tempIndex",3e,e8,54,22),1,::hx::paccDynamic);
HXDLIN(2983)			{
HXLINE(2983)				int _g_current = 0;
HXDLIN(2983)				while((_g_current < items->get_length())){
HXLINE(2983)					_g_current = (_g_current + 1);
HXDLIN(2983)					( ( ::openfl::_Vector::ObjectVector)(this1) )->insertAt(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( ( ::openfl::text::_internal::TextFormatRange)(items->__get((_g_current - 1))) ));
HXDLIN(2983)					::hx::FieldRef((this1).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            				}
            			}
HXDLIN(2983)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),deleteCount);
            		}
HXLINE(2987)		 ::openfl::text::_internal::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXLINE(2988)		range->format = this->_hx___textFormat;
HXLINE(2989)		range->start = 0;
HXLINE(2990)		range->end = value.length;
HXLINE(2992)		this->_hx___isHTML = false;
HXLINE(2994)		this->_hx___updateText(value);
HXLINE(2996)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3021_get_textWidth)
HXLINE(3022)		this->_hx___updateLayout();
HXLINE(3023)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3027_get_textHeight)
HXLINE(3028)		this->_hx___updateLayout();
HXLINE(3029)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3034_get_type)
HXDLIN(3034)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3038_set_type)
HXLINE(3039)		if (::hx::IsNotNull( this->_hx___styleSheet )) {
HXLINE(3043)			value = 0;
            		}
HXLINE(3046)		if (::hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(3050)			this->_hx___textEngine->type = value;
HXLINE(3051)			if (::hx::IsEq( value,1 )) {
HXLINE(3053)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(3055)				this->this_onFocusIn(null());
HXLINE(3056)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(3060)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(3062)				this->_hx___stopTextInput();
HXLINE(3063)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(3066)			this->_hx___dirty = true;
HXLINE(3067)			this->_hx___layoutDirty = true;
HXLINE(3068)			if (!(this->_hx___renderDirty)) {
HXLINE(3068)				this->_hx___renderDirty = true;
HXDLIN(3068)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3071)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3075_get_width)
HXLINE(3076)		this->_hx___updateLayout();
HXLINE(3077)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3081_set_width)
HXLINE(3082)		if ((value != this->_hx___textEngine->width)) {
HXLINE(3084)			this->_hx___setTransformDirty();
HXLINE(3085)			this->_hx___dirty = true;
HXLINE(3086)			this->_hx___layoutDirty = true;
HXLINE(3087)			if (!(this->_hx___renderDirty)) {
HXLINE(3087)				this->_hx___renderDirty = true;
HXDLIN(3087)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3089)			this->_hx___textEngine->width = value;
            		}
HXLINE(3092)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3101_set_wordWrap)
HXLINE(3102)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(3104)			this->_hx___dirty = true;
HXLINE(3105)			this->_hx___layoutDirty = true;
HXLINE(3106)			if (!(this->_hx___renderDirty)) {
HXLINE(3106)				this->_hx___renderDirty = true;
HXDLIN(3106)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3109)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

Float TextField_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3114_get_x)
HXDLIN(3114)		return (this->_hx___transform->tx + this->_hx___offsetX);
            	}


Float TextField_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3118_set_x)
HXLINE(3119)		if ((value != (this->_hx___transform->tx + this->_hx___offsetX))) {
HXLINE(3119)			this->_hx___setTransformDirty();
            		}
HXLINE(3120)		this->_hx___transform->tx = (value - this->_hx___offsetX);
HXLINE(3121)		return value;
            	}


Float TextField_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3126_get_y)
HXDLIN(3126)		return (this->_hx___transform->ty + this->_hx___offsetY);
            	}


Float TextField_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3130_set_y)
HXLINE(3131)		if ((value != (this->_hx___transform->ty + this->_hx___offsetY))) {
HXLINE(3131)			this->_hx___setTransformDirty();
            		}
HXLINE(3132)		this->_hx___transform->ty = (value - this->_hx___offsetY);
HXLINE(3133)		return value;
            	}


void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3138_stage_onMouseMove)
HXLINE(3139)		if (::hx::IsNull( this->stage )) {
HXLINE(3139)			return;
            		}
HXLINE(3141)		bool _hx_tmp;
HXDLIN(3141)		if (this->get_selectable()) {
HXLINE(3141)			_hx_tmp = (this->_hx___selectionIndex >= 0);
            		}
            		else {
HXLINE(3141)			_hx_tmp = false;
            		}
HXDLIN(3141)		if (_hx_tmp) {
HXLINE(3143)			this->_hx___updateLayout();
HXLINE(3145)			Float position = this->get_mouseX();
HXDLIN(3145)			Float position1 = (position + this->get_scrollH());
HXDLIN(3145)			int position2 = this->_hx___getPosition(position1,this->get_mouseY());
HXLINE(3147)			if ((position2 != this->_hx___caretIndex)) {
HXLINE(3149)				this->_hx___caretIndex = position2;
HXLINE(3165)				{
HXLINE(3166)					this->_hx___dirty = true;
HXLINE(3167)					if (!(this->_hx___renderDirty)) {
HXLINE(3167)						this->_hx___renderDirty = true;
HXDLIN(3167)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3174_stage_onMouseUp)
HXLINE(3175)		 ::openfl::display::Stage stage = ( ( ::openfl::display::Stage)(event->currentTarget) );
HXLINE(3177)		stage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null());
HXLINE(3178)		stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(3179)		stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(3181)		if (::hx::IsNull( this->stage )) {
HXLINE(3181)			return;
            		}
HXLINE(3183)		if (::hx::IsInstanceEq( stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3185)			this->_hx___getWorldTransform();
HXLINE(3186)			this->_hx___updateLayout();
HXLINE(3188)			Float upPos = this->get_mouseX();
HXDLIN(3188)			Float upPos1 = (upPos + this->get_scrollH());
HXDLIN(3188)			int upPos2 = this->_hx___getPosition(upPos1,this->get_mouseY());
HXLINE(3189)			int leftPos = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3190)			int rightPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3195)			this->_hx___selectionIndex = leftPos;
HXLINE(3196)			this->_hx___caretIndex = rightPos;
HXLINE(3198)			if (this->_hx___inputEnabled) {
HXLINE(3200)				this->this_onFocusIn(null());
HXLINE(3202)				this->_hx___stopCursorTimer();
HXLINE(3203)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3217_this_onAddedToStage)
HXDLIN(3217)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onEnterFrame( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3222_this_onEnterFrame)
HXDLIN(3222)		this->_hx___updateMouseDrag();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onEnterFrame,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3228_this_onFocusIn)
HXDLIN(3228)		bool _hx_tmp;
HXDLIN(3228)		bool _hx_tmp1;
HXDLIN(3228)		if (::hx::IsEq( this->get_type(),1 )) {
HXDLIN(3228)			_hx_tmp1 = ::hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(3228)			_hx_tmp1 = false;
            		}
HXDLIN(3228)		if (_hx_tmp1) {
HXDLIN(3228)			_hx_tmp = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(3228)			_hx_tmp = false;
            		}
HXDLIN(3228)		if (_hx_tmp) {
HXLINE(3230)			this->_hx___startTextInput();
            		}
            		else {
HXLINE(3232)			bool _hx_tmp2;
HXDLIN(3232)			bool _hx_tmp3;
HXDLIN(3232)			bool _hx_tmp4;
HXDLIN(3232)			if (::hx::IsNotEq( this->get_type(),1 )) {
HXLINE(3232)				_hx_tmp4 = this->get_selectable();
            			}
            			else {
HXLINE(3232)				_hx_tmp4 = false;
            			}
HXDLIN(3232)			if (_hx_tmp4) {
HXLINE(3232)				_hx_tmp3 = ::hx::IsNotNull( this->stage );
            			}
            			else {
HXLINE(3232)				_hx_tmp3 = false;
            			}
HXDLIN(3232)			if (_hx_tmp3) {
HXLINE(3232)				_hx_tmp2 = ::hx::IsInstanceEq( this->stage->get_focus(),::hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(3232)				_hx_tmp2 = false;
            			}
HXDLIN(3232)			if (_hx_tmp2) {
HXLINE(3234)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3239_this_onFocusOut)
HXLINE(3240)		this->_hx___stopCursorTimer();
HXLINE(3244)		this->_hx___stopTextInput();
HXLINE(3246)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3248)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3249)			this->_hx___dirty = true;
HXLINE(3250)			if (!(this->_hx___renderDirty)) {
HXLINE(3250)				this->_hx___renderDirty = true;
HXDLIN(3250)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3257_this_onKeyDown)
HXDLIN(3257)		bool _hx_tmp;
HXDLIN(3257)		bool _hx_tmp1;
HXDLIN(3257)		bool _hx_tmp2;
HXDLIN(3257)		if (this->get_selectable()) {
HXDLIN(3257)			_hx_tmp2 = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXDLIN(3257)			_hx_tmp2 = false;
            		}
HXDLIN(3257)		if (_hx_tmp2) {
HXDLIN(3257)			_hx_tmp1 = (event->keyCode == 67);
            		}
            		else {
HXDLIN(3257)			_hx_tmp1 = false;
            		}
HXDLIN(3257)		if (_hx_tmp1) {
HXDLIN(3257)			if (!(event->commandKey)) {
HXDLIN(3257)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(3257)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(3257)			_hx_tmp = false;
            		}
HXDLIN(3257)		if (_hx_tmp) {
HXLINE(3259)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3261)				::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3268_this_onMouseDown)
HXLINE(3269)		bool _hx_tmp;
HXDLIN(3269)		if (!(this->get_selectable())) {
HXLINE(3269)			_hx_tmp = ::hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(3269)			_hx_tmp = false;
            		}
HXDLIN(3269)		if (_hx_tmp) {
HXLINE(3269)			return;
            		}
HXLINE(3271)		this->_hx___updateLayout();
HXLINE(3273)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(3273)		Float _hx_tmp2 = (_hx_tmp1 + this->get_scrollH());
HXDLIN(3273)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp2,this->get_mouseY());
HXLINE(3274)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3277)		{
HXLINE(3278)			this->_hx___dirty = true;
HXLINE(3279)			if (!(this->_hx___renderDirty)) {
HXLINE(3279)				this->_hx___renderDirty = true;
HXDLIN(3279)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3284)		if (::hx::IsNull( this->stage )) {
HXLINE(3284)			return;
            		}
HXLINE(3287)		this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null(),null(),null());
HXLINE(3289)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(3290)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::this_onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3295_this_onMouseWheel)
HXDLIN(3295)		if (this->get_mouseWheelEnabled()) {
HXLINE(3297)			int _hx_tmp = this->get_scrollV();
HXDLIN(3297)			int _hx_tmp1 = (_hx_tmp - event->delta);
HXDLIN(3297)			this->set_scrollV(::Std_obj::_hx_int(::Math_obj::min(( (Float)(_hx_tmp1) ),( (Float)(this->get_maxScrollV()) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseWheel,(void))

void TextField_obj::this_onDoubleClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3303_this_onDoubleClick)
HXDLIN(3303)		if (this->get_selectable()) {
HXLINE(3305)			this->_hx___updateLayout();
HXLINE(3307)			::Array< ::String > delimiters = ::Array_obj< ::String >::fromData( _hx_array_data_efd5a8ca_118,13);
HXLINE(3309)			::String txtStr = this->_hx___text;
HXLINE(3310)			int leftPos = -1;
HXLINE(3311)			int rightPos = txtStr.length;
HXLINE(3312)			int pos = 0;
HXLINE(3313)			int startPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(1) )));
HXLINE(3314)			bool _hx_tmp;
HXDLIN(3314)			bool _hx_tmp1;
HXDLIN(3314)			if ((txtStr.length > 0)) {
HXLINE(3314)				_hx_tmp1 = (this->_hx___caretIndex >= 0);
            			}
            			else {
HXLINE(3314)				_hx_tmp1 = false;
            			}
HXDLIN(3314)			if (_hx_tmp1) {
HXLINE(3314)				_hx_tmp = (rightPos >= this->_hx___caretIndex);
            			}
            			else {
HXLINE(3314)				_hx_tmp = false;
            			}
HXDLIN(3314)			if (_hx_tmp) {
HXLINE(3316)				{
HXLINE(3316)					int _g = 0;
HXDLIN(3316)					while((_g < delimiters->length)){
HXLINE(3316)						::String c = delimiters->__get(_g);
HXDLIN(3316)						_g = (_g + 1);
HXLINE(3318)						pos = txtStr.lastIndexOf(c,(startPos - 1));
HXLINE(3319)						if ((pos > leftPos)) {
HXLINE(3319)							leftPos = (pos + 1);
            						}
HXLINE(3321)						pos = txtStr.indexOf(c,startPos);
HXLINE(3322)						bool _hx_tmp2;
HXDLIN(3322)						if ((pos < rightPos)) {
HXLINE(3322)							_hx_tmp2 = (pos != -1);
            						}
            						else {
HXLINE(3322)							_hx_tmp2 = false;
            						}
HXDLIN(3322)						if (_hx_tmp2) {
HXLINE(3322)							rightPos = pos;
            						}
            					}
            				}
HXLINE(3325)				if ((leftPos != rightPos)) {
HXLINE(3327)					this->setSelection(leftPos,rightPos);
HXLINE(3341)					{
HXLINE(3342)						this->_hx___dirty = true;
HXLINE(3343)						if (!(this->_hx___renderDirty)) {
HXLINE(3343)							this->_hx___renderDirty = true;
HXDLIN(3343)							this->_hx___setParentRenderDirty();
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onDoubleClick,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3353_window_onKeyDown)
HXDLIN(3353)		switch((int)(key)){
            			case (int)8: {
HXLINE(3376)				bool _hx_tmp;
HXDLIN(3376)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3376)					_hx_tmp = (this->_hx___caretIndex > 0);
            				}
            				else {
HXLINE(3376)					_hx_tmp = false;
            				}
HXDLIN(3376)				if (_hx_tmp) {
HXLINE(3378)					this->_hx___selectionIndex = (this->_hx___caretIndex - 1);
            				}
HXLINE(3381)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3383)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3384)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3386)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(3390)					this->_hx___stopCursorTimer();
HXLINE(3391)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(3567)				if (this->get_selectable()) {
HXLINE(3568)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3570)						this->setSelection(0,this->_hx___text.length);
            					}
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(3517)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3519)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3521)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(3543)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3545)					if (::hx::IsNotNull( ::lime::_hx_system::Clipboard_obj::get_text() )) {
HXLINE(3547)						 ::openfl::events::TextEvent te =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,::lime::_hx_system::Clipboard_obj::get_text());
HXLINE(3549)						this->dispatchEvent(te);
HXLINE(3551)						if (!(te->isDefaultPrevented())) {
HXLINE(3553)							this->_hx___replaceSelectedText(::lime::_hx_system::Clipboard_obj::get_text(),true);
HXLINE(3555)							this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            						}
            					}
            				}
            				else {
HXLINE(3562)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3562)					( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextFormatRange >()->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(3528)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3530)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3532)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(3534)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3535)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(3395)				bool _hx_tmp1;
HXDLIN(3395)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3395)					_hx_tmp1 = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(3395)					_hx_tmp1 = false;
            				}
HXDLIN(3395)				if (_hx_tmp1) {
HXLINE(3397)					this->_hx___selectionIndex = (this->_hx___caretIndex + 1);
            				}
HXLINE(3400)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3402)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3403)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3405)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(3409)					this->_hx___stopCursorTimer();
HXLINE(3410)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(3481)				if (this->get_selectable()) {
HXLINE(3482)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3484)						this->_hx___caretIndex = 0;
            					}
            					else {
HXLINE(3488)						this->_hx___caretBeginningOfLine();
            					}
HXLINE(3491)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3493)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3496)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741901: {
HXLINE(3498)				if (this->get_selectable()) {
HXLINE(3499)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3501)						this->_hx___caretIndex = this->_hx___text.length;
            					}
            					else {
HXLINE(3505)						this->_hx___caretEndOfLine();
            					}
HXLINE(3508)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3510)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3513)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(3430)				if (this->get_selectable()) {
HXLINE(3431)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3433)						this->_hx___caretBeginningOfNextLine();
            					}
            					else {
HXLINE(3437)						this->_hx___caretNextCharacter();
            					}
HXLINE(3440)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3442)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3445)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741904: {
HXLINE(3413)				if (this->get_selectable()) {
HXLINE(3414)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3416)						this->_hx___caretBeginningOfPreviousLine();
            					}
            					else {
HXLINE(3420)						this->_hx___caretPreviousCharacter();
            					}
HXLINE(3423)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3425)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3428)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741905: {
HXLINE(3447)				if (this->get_selectable()) {
HXLINE(3448)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3450)						this->_hx___caretIndex = this->_hx___text.length;
            					}
            					else {
HXLINE(3454)						this->_hx___caretNextLine();
            					}
HXLINE(3457)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3459)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3462)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)1073741906: {
HXLINE(3464)				if (this->get_selectable()) {
HXLINE(3465)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3467)						this->_hx___caretIndex = 0;
            					}
            					else {
HXLINE(3471)						this->_hx___caretPreviousLine();
            					}
HXLINE(3474)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3476)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3479)					this->setSelection(this->_hx___selectionIndex,this->_hx___caretIndex);
            				}
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(3356)				if (this->_hx___textEngine->multiline) {
HXLINE(3358)					 ::openfl::events::TextEvent te1 =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,HX_("\n",0a,00,00,00));
HXLINE(3360)					this->dispatchEvent(te1);
HXLINE(3362)					if (!(te1->isDefaultPrevented())) {
HXLINE(3364)						this->_hx___replaceSelectedText(HX_("\n",0a,00,00,00),true);
HXLINE(3366)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            				else {
HXLINE(3371)					this->_hx___stopCursorTimer();
HXLINE(3372)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3579_window_onTextInput)
HXLINE(3580)		this->_hx___replaceSelectedText(value,true);
HXLINE(3583)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;


::hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	::hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(condenseWhite,"condenseWhite");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseScrollVCounter,"__mouseScrollVCounter");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(condenseWhite,"condenseWhite");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseScrollVCounter,"__mouseScrollVCounter");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextField_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return ::hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return ::hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return ::hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return ::hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return ::hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return ::hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return ::hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return ::hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return ::hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return ::hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return ::hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return ::hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__domRender") ) { return ::hx::Val( _hx___domRender ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return ::hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return ::hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return ::hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return ::hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return ::hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return ::hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return ::hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { return ::hx::Val( _hx___styleSheet ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return ::hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return ::hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return ::hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return ::hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return ::hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return ::hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"condenseWhite") ) { return ::hx::Val( condenseWhite ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return ::hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return ::hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return ::hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return ::hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return ::hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return ::hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return ::hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return ::hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return ::hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__replaceText") ) { return ::hx::Val( _hx___replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return ::hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return ::hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return ::hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return ::hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return ::hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return ::hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return ::hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return ::hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return ::hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return ::hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return ::hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return ::hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_styleSheet") ) { return ::hx::Val( set_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return ::hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return ::hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return ::hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return ::hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return ::hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return ::hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return ::hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollV") ) { return ::hx::Val( _hx___updateScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return ::hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return ::hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return ::hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return ::hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return ::hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return ::hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return ::hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return ::hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return ::hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return ::hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return ::hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateMouseDrag") ) { return ::hx::Val( _hx___updateMouseDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return ::hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return ::hx::Val( stage_onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onEnterFrame") ) { return ::hx::Val( this_onEnterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseWheel") ) { return ::hx::Val( this_onMouseWheel_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return ::hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return ::hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return ::hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onDoubleClick") ) { return ::hx::Val( this_onDoubleClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return ::hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return ::hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return ::hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return ::hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return ::hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCharBoundaries") ) { return ::hx::Val( _hx___getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return ::hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return ::hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__mouseScrollVCounter") ) { return ::hx::Val( _hx___mouseScrollVCounter ); }
		if (HX_FIELD_EQ(inName,"__replaceSelectedText") ) { return ::hx::Val( _hx___replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return ::hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return ::hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return ::hx::Val( get_mouseWheelEnabled_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return ::hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return ::hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfNextLine") ) { return ::hx::Val( _hx___caretBeginningOfNextLine_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return ::hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfPreviousLine") ) { return ::hx::Val( _hx___caretBeginningOfPreviousLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
	}
	return false;
}

::hx::Val TextField_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__domRender") ) { _hx___domRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { _hx___styleSheet=inValue.Cast<  ::openfl::text::StyleSheet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::text::_internal::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"condenseWhite") ) { condenseWhite=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__mouseScrollVCounter") ) { _hx___mouseScrollVCounter=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("condenseWhite",4c,f5,1f,32));
	outFields->push(HX_("defaultTextFormat",e5,c7,e0,0a));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("mouseWheelEnabled",eb,16,54,65));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("__caretIndex",af,31,ef,15));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__dirty",f2,a8,2e,44));
	outFields->push(HX_("__displayAsPassword",ef,f3,86,9d));
	outFields->push(HX_("__domRender",58,38,ba,4f));
	outFields->push(HX_("__inputEnabled",b7,e0,1d,37));
	outFields->push(HX_("__isHTML",75,61,94,0a));
	outFields->push(HX_("__layoutDirty",e8,e9,31,d3));
	outFields->push(HX_("__mouseScrollVCounter",38,bc,63,27));
	outFields->push(HX_("__mouseWheelEnabled",cb,3f,44,18));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__selectionIndex",46,0a,c3,7d));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__styleSheet",ce,b6,a9,34));
	outFields->push(HX_("__text",cd,2f,f2,fb));
	outFields->push(HX_("__htmlText",d8,92,70,b3));
	outFields->push(HX_("__textEngine",6f,43,08,6c));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(TextField_obj,condenseWhite),HX_("condenseWhite",4c,f5,1f,32)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_("__caretIndex",af,31,ef,15)},
	{::hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_("__dirty",f2,a8,2e,44)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_("__displayAsPassword",ef,f3,86,9d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___domRender),HX_("__domRender",58,38,ba,4f)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_("__inputEnabled",b7,e0,1d,37)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_("__isHTML",75,61,94,0a)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_("__layoutDirty",e8,e9,31,d3)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___mouseScrollVCounter),HX_("__mouseScrollVCounter",38,bc,63,27)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_("__mouseWheelEnabled",cb,3f,44,18)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{::hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{::hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_("__selectionIndex",46,0a,c3,7d)},
	{::hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{::hx::fsObject /*  ::openfl::text::StyleSheet */ ,(int)offsetof(TextField_obj,_hx___styleSheet),HX_("__styleSheet",ce,b6,a9,34)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_("__text",cd,2f,f2,fb)},
	{::hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_("__htmlText",d8,92,70,b3)},
	{::hx::fsObject /*  ::openfl::text::_internal::TextEngine */ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_("__textEngine",6f,43,08,6c)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_("__defaultTextFormat",c5,f0,d0,bd)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_("condenseWhite",4c,f5,1f,32),
	HX_("__caretIndex",af,31,ef,15),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__dirty",f2,a8,2e,44),
	HX_("__displayAsPassword",ef,f3,86,9d),
	HX_("__domRender",58,38,ba,4f),
	HX_("__inputEnabled",b7,e0,1d,37),
	HX_("__isHTML",75,61,94,0a),
	HX_("__layoutDirty",e8,e9,31,d3),
	HX_("__mouseScrollVCounter",38,bc,63,27),
	HX_("__mouseWheelEnabled",cb,3f,44,18),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__selectionIndex",46,0a,c3,7d),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__styleSheet",ce,b6,a9,34),
	HX_("__text",cd,2f,f2,fb),
	HX_("__htmlText",d8,92,70,b3),
	HX_("__textEngine",6f,43,08,6c),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("appendText",a7,cf,05,5b),
	HX_("getCharBoundaries",74,85,a1,8b),
	HX_("getLineIndexOfChar",b5,68,99,a1),
	HX_("getLineLength",30,ec,21,d0),
	HX_("getLineMetrics",b9,ab,c6,f2),
	HX_("getLineOffset",dd,ee,59,91),
	HX_("getTextFormat",fa,6b,f1,90),
	HX_("replaceSelectedText",fc,fe,33,bb),
	HX_("setSelection",4a,b8,6a,b2),
	HX_("setTextFormat",06,4e,f7,d5),
	HX_("__allowMouseFocus",3c,92,71,07),
	HX_("__caretBeginningOfLine",45,c9,47,fd),
	HX_("__caretBeginningOfNextLine",58,ec,35,93),
	HX_("__caretBeginningOfPreviousLine",1c,d2,e4,ff),
	HX_("__caretEndOfLine",03,74,b1,5c),
	HX_("__caretNextCharacter",d3,7b,4f,ea),
	HX_("__caretNextLine",0a,68,ad,0d),
	HX_("__caretPreviousCharacter",8f,ce,6c,11),
	HX_("__caretPreviousLine",ce,0e,89,48),
	HX_("__disableInput",22,64,62,1d),
	HX_("__dispatch",da,41,9c,c1),
	HX_("__enableInput",67,4b,65,d1),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getCharBoundaries",54,ae,91,3e),
	HX_("__getCharIndexOnDifferentLine",08,76,0f,0a),
	HX_("__getCursor",ec,60,6b,e9),
	HX_("__getGroup",e9,35,04,9d),
	HX_("__getPosition",3f,a4,66,39),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__replaceSelectedText",dc,1f,28,29),
	HX_("__replaceText",e1,ab,0d,aa),
	HX_("__startCursorTimer",ed,46,a3,83),
	HX_("__startTextInput",7b,ae,85,aa),
	HX_("__stopCursorTimer",0d,cd,6c,26),
	HX_("__stopTextInput",9b,6c,cb,a1),
	HX_("__updateLayout",b3,d8,3c,79),
	HX_("__updateScrollH",72,d1,f8,83),
	HX_("__updateScrollV",80,d1,f8,83),
	HX_("__updateMouseDrag",50,e6,a9,c1),
	HX_("__updateText",76,32,42,3e),
	HX_("__updateTransforms",10,f4,b0,50),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("get_border",b5,bc,a1,54),
	HX_("set_border",29,5b,1f,58),
	HX_("set_borderColor",7a,71,82,93),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_caretIndex",d8,3e,51,53),
	HX_("get_defaultTextFormat",bc,ca,8e,89),
	HX_("set_defaultTextFormat",c8,98,97,dd),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("set_htmlText",35,f7,4a,da),
	HX_("get_length",af,04,8f,8f),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("get_maxScrollH",a0,35,f2,10),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("get_mouseWheelEnabled",c2,19,02,e4),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("get_numLines",e2,a5,2b,e7),
	HX_("get_scrollH",b2,93,d2,b6),
	HX_("set_scrollH",be,9a,3f,c1),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("set_styleSheet",6b,ac,2b,92),
	HX_("get_tabEnabled",f5,7e,fe,b5),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_textWidth",f0,19,b4,24),
	HX_("get_textHeight",bd,10,32,af),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("stage_onMouseMove",76,bc,61,de),
	HX_("stage_onMouseUp",80,ac,07,d1),
	HX_("this_onAddedToStage",23,9e,ce,72),
	HX_("this_onEnterFrame",b5,0f,1f,8e),
	HX_("this_onFocusIn",1d,62,fb,dc),
	HX_("this_onFocusOut",56,0b,ff,7e),
	HX_("this_onKeyDown",e1,85,bf,37),
	HX_("this_onMouseDown",67,5d,aa,6d),
	HX_("this_onMouseWheel",f6,33,56,73),
	HX_("this_onDoubleClick",b7,3f,d1,96),
	HX_("window_onKeyDown",f3,7d,3b,d1),
	HX_("window_onTextInput",ef,a0,6a,c0),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
};

#endif

::hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_("__defaultTextFormat",c5,f0,d0,bd),
	::String(null())
};

void TextField_obj::__register()
{
	TextField_obj _hx_dummy;
	TextField_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.text.TextField",ca,a8,d5,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace text
