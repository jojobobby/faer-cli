// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_core_ScreensView
#include <core/ScreensView.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_43e4590b066cbd70_11_new,"core.ScreensView","new",0x8ab35f4f,"core.ScreensView.new","core/ScreensView.hx",11,0x0183dec2)
HX_LOCAL_STACK_FRAME(_hx_pos_43e4590b066cbd70_14_setScreen,"core.ScreensView","setScreen",0x7d0c9cdd,"core.ScreensView.setScreen","core/ScreensView.hx",14,0x0183dec2)
HX_LOCAL_STACK_FRAME(_hx_pos_43e4590b066cbd70_24_removePrevious,"core.ScreensView","removePrevious",0xe28d820c,"core.ScreensView.removePrevious","core/ScreensView.hx",24,0x0183dec2)
namespace core{

void ScreensView_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_43e4590b066cbd70_11_new)
HXDLIN(  11)		super::__construct();
            	}

Dynamic ScreensView_obj::__CreateEmpty() { return new ScreensView_obj; }

void *ScreensView_obj::_hx_vtable = 0;

Dynamic ScreensView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScreensView_obj > _hx_result = new ScreensView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ScreensView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7f98c2f9;
		}
	}
}

void ScreensView_obj::setScreen( ::openfl::display::Sprite sprite){
            	HX_STACKFRAME(&_hx_pos_43e4590b066cbd70_14_setScreen)
HXLINE(  15)		if (::hx::IsInstanceEq( this->current,sprite )) {
HXLINE(  16)			return;
            		}
HXLINE(  18)		this->removePrevious();
HXLINE(  19)		this->current = sprite;
HXLINE(  20)		this->addChild(sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScreensView_obj,setScreen,(void))

void ScreensView_obj::removePrevious(){
            	HX_STACKFRAME(&_hx_pos_43e4590b066cbd70_24_removePrevious)
HXDLIN(  24)		bool _hx_tmp;
HXDLIN(  24)		if (::hx::IsNotNull( this->current )) {
HXDLIN(  24)			_hx_tmp = this->contains(this->current);
            		}
            		else {
HXDLIN(  24)			_hx_tmp = false;
            		}
HXDLIN(  24)		if (_hx_tmp) {
HXLINE(  25)			this->previous = this->current;
HXLINE(  26)			this->removeChild(this->current);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScreensView_obj,removePrevious,(void))


::hx::ObjectPtr< ScreensView_obj > ScreensView_obj::__new() {
	::hx::ObjectPtr< ScreensView_obj > __this = new ScreensView_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ScreensView_obj > ScreensView_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ScreensView_obj *__this = (ScreensView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScreensView_obj), true, "core.ScreensView"));
	*(void **)__this = ScreensView_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ScreensView_obj::ScreensView_obj()
{
}

void ScreensView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScreensView);
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_MEMBER_NAME(previous,"previous");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScreensView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(current,"current");
	HX_VISIT_MEMBER_NAME(previous,"previous");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ScreensView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { return ::hx::Val( current ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"previous") ) { return ::hx::Val( previous ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setScreen") ) { return ::hx::Val( setScreen_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"removePrevious") ) { return ::hx::Val( removePrevious_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScreensView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"previous") ) { previous=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScreensView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("current",39,9c,e3,cb));
	outFields->push(HX_("previous",37,bc,b0,23));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScreensView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(ScreensView_obj,current),HX_("current",39,9c,e3,cb)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(ScreensView_obj,previous),HX_("previous",37,bc,b0,23)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScreensView_obj_sStaticStorageInfo = 0;
#endif

static ::String ScreensView_obj_sMemberFields[] = {
	HX_("current",39,9c,e3,cb),
	HX_("previous",37,bc,b0,23),
	HX_("setScreen",ae,b0,04,a7),
	HX_("removePrevious",9b,f8,06,ee),
	::String(null()) };

::hx::Class ScreensView_obj::__mClass;

void ScreensView_obj::__register()
{
	ScreensView_obj _hx_dummy;
	ScreensView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("core.ScreensView",dd,0b,08,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScreensView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScreensView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScreensView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScreensView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace core
