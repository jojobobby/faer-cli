// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_ssl_Socket
#include <sys/ssl/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0d77c70160aa3f68_50_new,"sys.Http","new",0xa5e0041b,"sys.Http.new","/home/a/haxe/haxe/std/sys/Http.hx",50,0x6db1b259)
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_62_request,"sys.Http","request",0xbb950c8a,"sys.Http.request","/home/a/haxe/haxe/std/sys/Http.hx",62,0x6db1b259)
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_58_request,"sys.Http","request",0xbb950c8a,"sys.Http.request","/home/a/haxe/haxe/std/sys/Http.hx",58,0x6db1b259)
static const bool _hx_array_data_00b75aa9_3[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_92_customRequest,"sys.Http","customRequest",0xecf59319,"sys.Http.customRequest","/home/a/haxe/haxe/std/sys/Http.hx",92,0x6db1b259)
static const ::String _hx_array_data_00b75aa9_9[] = {
	HX_("--",60,27,00,00),
};
static const ::String _hx_array_data_00b75aa9_10[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_00b75aa9_11[] = {
	HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c),
};
static const ::String _hx_array_data_00b75aa9_12[] = {
	HX_("\"",22,00,00,00),
};
static const ::String _hx_array_data_00b75aa9_13[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_00b75aa9_14[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_00b75aa9_15[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_00b75aa9_16[] = {
	HX_("--",60,27,00,00),
};
static const ::String _hx_array_data_00b75aa9_17[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_00b75aa9_18[] = {
	HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c),
};
static const ::String _hx_array_data_00b75aa9_19[] = {
	HX_("\"; filename=\"",b3,3a,e5,4f),
};
static const ::String _hx_array_data_00b75aa9_20[] = {
	HX_("\"",22,00,00,00),
};
static const ::String _hx_array_data_00b75aa9_21[] = {
	HX_("\r\n",5d,0b,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_211_customRequest,"sys.Http","customRequest",0xecf59319,"sys.Http.customRequest","/home/a/haxe/haxe/std/sys/Http.hx",211,0x6db1b259)
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_274_writeBody,"sys.Http","writeBody",0xc731a11c,"sys.Http.writeBody","/home/a/haxe/haxe/std/sys/Http.hx",274,0x6db1b259)
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_299_readHttpResponse,"sys.Http","readHttpResponse",0xd67be204,"sys.Http.readHttpResponse","/home/a/haxe/haxe/std/sys/Http.hx",299,0x6db1b259)
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_461_readChunk,"sys.Http","readChunk",0x940c4532,"sys.Http.readChunk","/home/a/haxe/haxe/std/sys/Http.hx",461,0x6db1b259)
HX_LOCAL_STACK_FRAME(_hx_pos_0d77c70160aa3f68_48_boot,"sys.Http","boot",0x763c9417,"sys.Http.boot","/home/a/haxe/haxe/std/sys/Http.hx",48,0x6db1b259)
namespace sys{

void Http_obj::__construct(::String url){
            	HX_STACKFRAME(&_hx_pos_0d77c70160aa3f68_50_new)
HXLINE(  51)		this->cnxTimeout = ( (Float)(10) );
HXLINE(  55)		super::__construct(url);
            	}

Dynamic Http_obj::__CreateEmpty() { return new Http_obj; }

void *Http_obj::_hx_vtable = 0;

Dynamic Http_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Http_obj > _hx_result = new Http_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Http_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x02924475) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x02924475;
	} else {
		return inClassId==(int)0x10c0921f;
	}
}

void Http_obj::request( ::Dynamic post){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0,::Array< bool >,err, ::sys::Http,_gthis, ::haxe::io::BytesOutput,output, ::Dynamic,old) HXARGC(1)
            		void _hx_run(::String e){
            			HX_GC_STACKFRAME(&_hx_pos_0d77c70160aa3f68_62_request)
HXLINE(  63)			_gthis->responseBytes = output->getBytes();
HXLINE(  64)			err[0] = true;
HXLINE(  66)			_gthis->onError = old;
HXLINE(  67)			_gthis->onError(e);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_0d77c70160aa3f68_58_request)
HXDLIN(  58)		 ::sys::Http _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  59)		 ::haxe::io::BytesOutput output =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE(  60)		 ::Dynamic old = this->onError;
HXLINE(  61)		::Array< bool > err = ::Array_obj< bool >::fromData( _hx_array_data_00b75aa9_3,1);
HXLINE(  62)		this->onError =  ::Dynamic(new _hx_Closure_0(err,_gthis,output,old));
HXLINE(  69)		bool post1;
HXDLIN(  69)		if (!(( (bool)(post) ))) {
HXLINE(  69)			post1 = ::hx::IsNotNull( this->postBytes );
            		}
            		else {
HXLINE(  69)			post1 = true;
            		}
HXDLIN(  69)		if (!(post1)) {
HXLINE(  69)			post = ::hx::IsNotNull( this->postData );
            		}
            		else {
HXLINE(  69)			post = true;
            		}
HXLINE(  70)		this->customRequest(( (bool)(post) ),output,null(),null());
HXLINE(  71)		if (!(err->__get(0))) {
HXLINE(  72)			this->success(output->getBytes());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,request,(void))

void Http_obj::customRequest(bool post, ::haxe::io::Output api, ::sys::net::Socket sock,::String method){
            	HX_GC_STACKFRAME(&_hx_pos_0d77c70160aa3f68_92_customRequest)
HXLINE(  93)		this->responseAsString = null();
HXLINE(  94)		this->responseBytes = null();
HXLINE(  95)		 ::EReg url_regexp =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)$",00,3e,3a,6c),HX_("",00,00,00,00));
HXLINE(  96)		if (!(url_regexp->match(this->url))) {
HXLINE(  97)			this->onError(HX_("Invalid URL",86,55,d0,76));
HXLINE(  98)			return;
            		}
HXLINE( 100)		bool secure = (url_regexp->matched(1) == HX_("https://",cf,b4,ae,3e));
HXLINE( 101)		if (::hx::IsNull( sock )) {
HXLINE( 102)			if (secure) {
HXLINE( 110)				sock =  ::sys::ssl::Socket_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 117)				sock =  ::sys::net::Socket_obj::__alloc( HX_CTX );
            			}
HXLINE( 119)			sock->setTimeout(this->cnxTimeout);
            		}
HXLINE( 121)		::String host = url_regexp->matched(2);
HXLINE( 122)		::String portString = url_regexp->matched(3);
HXLINE( 123)		::String request = url_regexp->matched(4);
HXLINE( 127)		if ((request.charAt(0) != HX_("/",2f,00,00,00))) {
HXLINE( 128)			request = (HX_("/",2f,00,00,00) + request);
            		}
HXLINE( 130)		 ::Dynamic port;
HXDLIN( 130)		bool port1;
HXDLIN( 130)		if (::hx::IsNotNull( portString )) {
HXLINE( 130)			port1 = (portString == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 130)			port1 = true;
            		}
HXDLIN( 130)		if (port1) {
HXLINE( 130)			if (secure) {
HXLINE( 130)				port = 443;
            			}
            			else {
HXLINE( 130)				port = 80;
            			}
            		}
            		else {
HXLINE( 130)			port = ::Std_obj::parseInt(portString.substr(1,(portString.length - 1)));
            		}
HXLINE( 132)		bool multipart = ::hx::IsNotNull( this->file );
HXLINE( 133)		::String boundary = null();
HXLINE( 134)		::String uri = null();
HXLINE( 135)		if (multipart) {
HXLINE( 136)			post = true;
HXLINE( 137)			::String boundary1 = ::Std_obj::string(::Std_obj::random(1000));
HXDLIN( 137)			::String boundary2 = (boundary1 + ::Std_obj::string(::Std_obj::random(1000)));
HXDLIN( 137)			::String boundary3 = (boundary2 + ::Std_obj::string(::Std_obj::random(1000)));
HXDLIN( 137)			boundary = (boundary3 + ::Std_obj::string(::Std_obj::random(1000)));
HXLINE( 141)			while((boundary.length < 38)){
HXLINE( 142)				boundary = (HX_("-",2d,00,00,00) + boundary);
            			}
HXLINE( 143)			 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 144)			{
HXLINE( 144)				int _g = 0;
HXDLIN( 144)				::Array< ::Dynamic> _g1 = this->params;
HXDLIN( 144)				while((_g < _g1->length)){
HXLINE( 144)					 ::Dynamic p = _g1->__get(_g);
HXDLIN( 144)					_g = (_g + 1);
HXLINE( 145)					{
HXLINE( 145)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 145)							b->flush();
            						}
HXDLIN( 145)						if (::hx::IsNull( b->b )) {
HXLINE( 145)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_9,1);
            						}
            						else {
HXLINE( 145)							b->b->push(HX_("--",60,27,00,00));
            						}
            					}
HXLINE( 146)					{
HXLINE( 146)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 146)							b->flush();
            						}
HXDLIN( 146)						if (::hx::IsNull( b->b )) {
HXLINE( 146)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(boundary));
            						}
            						else {
HXLINE( 146)							::Array< ::String > b1 = b->b;
HXDLIN( 146)							b1->push(::Std_obj::string(boundary));
            						}
            					}
HXLINE( 147)					{
HXLINE( 147)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 147)							b->flush();
            						}
HXDLIN( 147)						if (::hx::IsNull( b->b )) {
HXLINE( 147)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_10,1);
            						}
            						else {
HXLINE( 147)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
HXLINE( 148)					{
HXLINE( 148)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 148)							b->flush();
            						}
HXDLIN( 148)						if (::hx::IsNull( b->b )) {
HXLINE( 148)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_11,1);
            						}
            						else {
HXLINE( 148)							b->b->push(HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c));
            						}
            					}
HXLINE( 149)					{
HXLINE( 149)						::String x = ( (::String)(p->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXDLIN( 149)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 149)							b->flush();
            						}
HXDLIN( 149)						if (::hx::IsNull( b->b )) {
HXLINE( 149)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            						}
            						else {
HXLINE( 149)							::Array< ::String > b2 = b->b;
HXDLIN( 149)							b2->push(::Std_obj::string(x));
            						}
            					}
HXLINE( 150)					{
HXLINE( 150)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 150)							b->flush();
            						}
HXDLIN( 150)						if (::hx::IsNull( b->b )) {
HXLINE( 150)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_12,1);
            						}
            						else {
HXLINE( 150)							b->b->push(HX_("\"",22,00,00,00));
            						}
            					}
HXLINE( 151)					{
HXLINE( 151)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 151)							b->flush();
            						}
HXDLIN( 151)						if (::hx::IsNull( b->b )) {
HXLINE( 151)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_13,1);
            						}
            						else {
HXLINE( 151)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
HXLINE( 152)					{
HXLINE( 152)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 152)							b->flush();
            						}
HXDLIN( 152)						if (::hx::IsNull( b->b )) {
HXLINE( 152)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_14,1);
            						}
            						else {
HXLINE( 152)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
HXLINE( 153)					{
HXLINE( 153)						::String x1 = ( (::String)(p->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN( 153)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 153)							b->flush();
            						}
HXDLIN( 153)						if (::hx::IsNull( b->b )) {
HXLINE( 153)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            						}
            						else {
HXLINE( 153)							::Array< ::String > b3 = b->b;
HXDLIN( 153)							b3->push(::Std_obj::string(x1));
            						}
            					}
HXLINE( 154)					{
HXLINE( 154)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 154)							b->flush();
            						}
HXDLIN( 154)						if (::hx::IsNull( b->b )) {
HXLINE( 154)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_15,1);
            						}
            						else {
HXLINE( 154)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
            				}
            			}
HXLINE( 156)			{
HXLINE( 156)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 156)					b->flush();
            				}
HXDLIN( 156)				if (::hx::IsNull( b->b )) {
HXLINE( 156)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_16,1);
            				}
            				else {
HXLINE( 156)					b->b->push(HX_("--",60,27,00,00));
            				}
            			}
HXLINE( 157)			{
HXLINE( 157)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 157)					b->flush();
            				}
HXDLIN( 157)				if (::hx::IsNull( b->b )) {
HXLINE( 157)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(boundary));
            				}
            				else {
HXLINE( 157)					::Array< ::String > b4 = b->b;
HXDLIN( 157)					b4->push(::Std_obj::string(boundary));
            				}
            			}
HXLINE( 158)			{
HXLINE( 158)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 158)					b->flush();
            				}
HXDLIN( 158)				if (::hx::IsNull( b->b )) {
HXLINE( 158)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_17,1);
            				}
            				else {
HXLINE( 158)					b->b->push(HX_("\r\n",5d,0b,00,00));
            				}
            			}
HXLINE( 159)			{
HXLINE( 159)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 159)					b->flush();
            				}
HXDLIN( 159)				if (::hx::IsNull( b->b )) {
HXLINE( 159)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_18,1);
            				}
            				else {
HXLINE( 159)					b->b->push(HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c));
            				}
            			}
HXLINE( 160)			{
HXLINE( 160)				::String x2 = ( (::String)(this->file->__Field(HX_("param",8d,80,55,bd),::hx::paccDynamic)) );
HXDLIN( 160)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 160)					b->flush();
            				}
HXDLIN( 160)				if (::hx::IsNull( b->b )) {
HXLINE( 160)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            				}
            				else {
HXLINE( 160)					::Array< ::String > b5 = b->b;
HXDLIN( 160)					b5->push(::Std_obj::string(x2));
            				}
            			}
HXLINE( 161)			{
HXLINE( 161)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 161)					b->flush();
            				}
HXDLIN( 161)				if (::hx::IsNull( b->b )) {
HXLINE( 161)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_19,1);
            				}
            				else {
HXLINE( 161)					b->b->push(HX_("\"; filename=\"",b3,3a,e5,4f));
            				}
            			}
HXLINE( 162)			{
HXLINE( 162)				::String x3 = ( (::String)(this->file->__Field(HX_("filename",c7,2e,6a,77),::hx::paccDynamic)) );
HXDLIN( 162)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 162)					b->flush();
            				}
HXDLIN( 162)				if (::hx::IsNull( b->b )) {
HXLINE( 162)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            				}
            				else {
HXLINE( 162)					::Array< ::String > b6 = b->b;
HXDLIN( 162)					b6->push(::Std_obj::string(x3));
            				}
            			}
HXLINE( 163)			{
HXLINE( 163)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 163)					b->flush();
            				}
HXDLIN( 163)				if (::hx::IsNull( b->b )) {
HXLINE( 163)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_20,1);
            				}
            				else {
HXLINE( 163)					b->b->push(HX_("\"",22,00,00,00));
            				}
            			}
HXLINE( 164)			{
HXLINE( 164)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 164)					b->flush();
            				}
HXDLIN( 164)				if (::hx::IsNull( b->b )) {
HXLINE( 164)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_00b75aa9_21,1);
            				}
            				else {
HXLINE( 164)					b->b->push(HX_("\r\n",5d,0b,00,00));
            				}
            			}
HXLINE( 165)			{
HXLINE( 165)				::String x4 = ( (::String)((((HX_("Content-Type: ",f4,2b,e6,1d) + this->file->__Field(HX_("mimeType",8e,56,09,5d),::hx::paccDynamic)) + HX_("\r\n",5d,0b,00,00)) + HX_("\r\n",5d,0b,00,00))) );
HXDLIN( 165)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 165)					b->flush();
            				}
HXDLIN( 165)				if (::hx::IsNull( b->b )) {
HXLINE( 165)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            				}
            				else {
HXLINE( 165)					::Array< ::String > b7 = b->b;
HXDLIN( 165)					b7->push(::Std_obj::string(x4));
            				}
            			}
HXLINE( 166)			uri = b->toString();
            		}
            		else {
HXLINE( 168)			int _g2 = 0;
HXDLIN( 168)			::Array< ::Dynamic> _g3 = this->params;
HXDLIN( 168)			while((_g2 < _g3->length)){
HXLINE( 168)				 ::Dynamic p1 = _g3->__get(_g2);
HXDLIN( 168)				_g2 = (_g2 + 1);
HXLINE( 169)				if (::hx::IsNull( uri )) {
HXLINE( 170)					uri = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 172)					uri = (uri + HX_("&",26,00,00,00));
            				}
HXLINE( 173)				::String uri1 = (::StringTools_obj::urlEncode(( (::String)(p1->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) )) + HX_("=",3d,00,00,00));
HXDLIN( 173)				uri = (uri + (uri1 + ::StringTools_obj::urlEncode(( (::String)((HX_("",00,00,00,00) + p1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic))) ))));
            			}
            		}
HXLINE( 177)		 ::haxe::io::BytesOutput b8 =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE( 178)		if (::hx::IsNotNull( method )) {
HXLINE( 179)			b8->writeString(method,null());
HXLINE( 180)			b8->writeString(HX_(" ",20,00,00,00),null());
            		}
            		else {
HXLINE( 181)			if (post) {
HXLINE( 182)				b8->writeString(HX_("POST ",c0,87,85,44),null());
            			}
            			else {
HXLINE( 184)				b8->writeString(HX_("GET ",ea,ca,22,2f),null());
            			}
            		}
HXLINE( 186)		if (::hx::IsNotNull( ::sys::Http_obj::PROXY )) {
HXLINE( 187)			b8->writeString(HX_("http://",52,75,cd,5a),null());
HXLINE( 188)			b8->writeString(host,null());
HXLINE( 189)			if (::hx::IsNotEq( port,80 )) {
HXLINE( 190)				b8->writeString(HX_(":",3a,00,00,00),null());
HXLINE( 191)				b8->writeString((HX_("",00,00,00,00) + port),null());
            			}
            		}
HXLINE( 194)		b8->writeString(request,null());
HXLINE( 196)		bool _hx_tmp;
HXDLIN( 196)		if (!(post)) {
HXLINE( 196)			_hx_tmp = ::hx::IsNotNull( uri );
            		}
            		else {
HXLINE( 196)			_hx_tmp = false;
            		}
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 197)			if ((request.indexOf(HX_("?",3f,00,00,00),0) >= 0)) {
HXLINE( 198)				b8->writeString(HX_("&",26,00,00,00),null());
            			}
            			else {
HXLINE( 200)				b8->writeString(HX_("?",3f,00,00,00),null());
            			}
HXLINE( 201)			b8->writeString(uri,null());
            		}
HXLINE( 203)		b8->writeString(((HX_(" HTTP/1.1\r\nHost: ",d8,a9,d9,24) + host) + HX_("\r\n",5d,0b,00,00)),null());
HXLINE( 204)		if (::hx::IsNotNull( this->postData )) {
HXLINE( 205)			this->postBytes = ::haxe::io::Bytes_obj::ofString(this->postData,null());
HXLINE( 206)			this->postData = null();
            		}
HXLINE( 208)		if (::hx::IsNotNull( this->postBytes )) {
HXLINE( 209)			b8->writeString(((HX_("Content-Length: ",20,de,22,7c) + this->postBytes->length) + HX_("\r\n",5d,0b,00,00)),null());
            		}
            		else {
HXLINE( 210)			bool _hx_tmp1;
HXDLIN( 210)			if (post) {
HXLINE( 210)				_hx_tmp1 = ::hx::IsNotNull( uri );
            			}
            			else {
HXLINE( 210)				_hx_tmp1 = false;
            			}
HXDLIN( 210)			if (_hx_tmp1) {
HXLINE( 211)				bool _hx_tmp2;
HXDLIN( 211)				if (!(multipart)) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            					bool _hx_run( ::Dynamic h){
            						HX_GC_STACKFRAME(&_hx_pos_0d77c70160aa3f68_211_customRequest)
HXLINE( 211)						return ::hx::IsEq( h->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("Content-Type",ce,69,5d,3c) );
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 211)					_hx_tmp2 = !(::Lambda_obj::exists(this->headers, ::Dynamic(new _hx_Closure_0())));
            				}
            				else {
HXLINE( 211)					_hx_tmp2 = true;
            				}
HXDLIN( 211)				if (_hx_tmp2) {
HXLINE( 212)					b8->writeString(HX_("Content-Type: ",f4,2b,e6,1d),null());
HXLINE( 213)					if (multipart) {
HXLINE( 214)						b8->writeString(HX_("multipart/form-data",f0,f8,88,db),null());
HXLINE( 215)						b8->writeString(HX_("; boundary=",ee,f7,f2,1a),null());
HXLINE( 216)						b8->writeString(boundary,null());
            					}
            					else {
HXLINE( 218)						b8->writeString(HX_("application/x-www-form-urlencoded",9e,61,91,fa),null());
            					}
HXLINE( 219)					b8->writeString(HX_("\r\n",5d,0b,00,00),null());
            				}
HXLINE( 221)				if (multipart) {
HXLINE( 222)					b8->writeString(( (::String)(((HX_("Content-Length: ",20,de,22,7c) + (((uri.length + this->file->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic)) + boundary.length) + 6)) + HX_("\r\n",5d,0b,00,00))) ),null());
            				}
            				else {
HXLINE( 224)					b8->writeString(((HX_("Content-Length: ",20,de,22,7c) + uri.length) + HX_("\r\n",5d,0b,00,00)),null());
            				}
            			}
            		}
HXLINE( 226)		b8->writeString(HX_("Connection: close\r\n",31,73,d3,b4),null());
HXLINE( 227)		{
HXLINE( 227)			int _g4 = 0;
HXDLIN( 227)			::Array< ::Dynamic> _g5 = this->headers;
HXDLIN( 227)			while((_g4 < _g5->length)){
HXLINE( 227)				 ::Dynamic h = _g5->__get(_g4);
HXDLIN( 227)				_g4 = (_g4 + 1);
HXLINE( 228)				b8->writeString(( (::String)(h->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),null());
HXLINE( 229)				b8->writeString(HX_(": ",a6,32,00,00),null());
HXLINE( 230)				b8->writeString(( (::String)(h->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ),null());
HXLINE( 231)				b8->writeString(HX_("\r\n",5d,0b,00,00),null());
            			}
            		}
HXLINE( 233)		b8->writeString(HX_("\r\n",5d,0b,00,00),null());
HXLINE( 234)		if (::hx::IsNotNull( this->postBytes )) {
HXLINE( 235)			b8->writeFullBytes(this->postBytes,0,this->postBytes->length);
            		}
            		else {
HXLINE( 236)			bool _hx_tmp3;
HXDLIN( 236)			if (post) {
HXLINE( 236)				_hx_tmp3 = ::hx::IsNotNull( uri );
            			}
            			else {
HXLINE( 236)				_hx_tmp3 = false;
            			}
HXDLIN( 236)			if (_hx_tmp3) {
HXLINE( 237)				b8->writeString(uri,null());
            			}
            		}
HXLINE( 238)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 239)			if (::hx::IsNotNull( ::sys::Http_obj::PROXY )) {
HXLINE( 240)				sock->connect( ::sys::net::Host_obj::__alloc( HX_CTX ,( (::String)(::sys::Http_obj::PROXY->__Field(HX_("host",68,cf,12,45),::hx::paccDynamic)) )),( (int)(::sys::Http_obj::PROXY->__Field(HX_("port",81,83,5c,4a),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE( 242)				sock->connect( ::sys::net::Host_obj::__alloc( HX_CTX ,host),( (int)(port) ));
            			}
HXLINE( 243)			if (multipart) {
HXLINE( 244)				this->writeBody(b8,( ( ::haxe::io::Input)(this->file->__Field(HX_("io",e6,5b,00,00),::hx::paccDynamic)) ),( (int)(this->file->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic)) ),boundary,sock);
            			}
            			else {
HXLINE( 246)				this->writeBody(b8,null(),0,null(),sock);
            			}
HXLINE( 247)			this->readHttpResponse(api,sock);
HXLINE( 248)			sock->close();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g6 = _hx_e;
HXLINE( 249)				{
HXLINE( 249)					null();
            				}
HXLINE( 250)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 251)					sock->close();
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g7 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 253)				 ::Dynamic _hx_tmp4 = this->onError;
HXDLIN( 253)				_hx_tmp4(::Std_obj::string(_g6));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Http_obj,customRequest,(void))

void Http_obj::writeBody( ::haxe::io::BytesOutput body, ::haxe::io::Input fileInput,int fileSize,::String boundary, ::sys::net::Socket sock){
            	HX_STACKFRAME(&_hx_pos_0d77c70160aa3f68_274_writeBody)
HXLINE( 275)		if (::hx::IsNotNull( body )) {
HXLINE( 276)			 ::haxe::io::Bytes bytes = body->getBytes();
HXLINE( 277)			sock->output->writeFullBytes(bytes,0,bytes->length);
            		}
HXLINE( 279)		if (::hx::IsNotNull( boundary )) {
HXLINE( 281)			 ::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(4096);
HXLINE( 282)			while((fileSize > 0)){
HXLINE( 283)				int size;
HXDLIN( 283)				if ((fileSize > 4096)) {
HXLINE( 283)					size = 4096;
            				}
            				else {
HXLINE( 283)					size = fileSize;
            				}
HXLINE( 284)				int len = 0;
HXLINE( 285)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 286)					len = fileInput->readBytes(buf,0,size);
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e = _hx_e;
HXLINE( 288)						goto _hx_goto_23;
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g = _hx_e;
HXLINE( 287)						{
HXLINE( 287)							null();
            						}
HXLINE( 285)						if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 288)							goto _hx_goto_23;
            						}
            						else {
HXLINE( 285)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 289)				sock->output->writeFullBytes(buf,0,len);
HXLINE( 290)				fileSize = (fileSize - len);
            			}
            			_hx_goto_23:;
HXLINE( 292)			sock->output->writeString(HX_("\r\n",5d,0b,00,00),null());
HXLINE( 293)			sock->output->writeString(HX_("--",60,27,00,00),null());
HXLINE( 294)			sock->output->writeString(boundary,null());
HXLINE( 295)			sock->output->writeString(HX_("--",60,27,00,00),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Http_obj,writeBody,(void))

void Http_obj::readHttpResponse( ::haxe::io::Output api, ::sys::net::Socket sock){
            	HX_GC_STACKFRAME(&_hx_pos_0d77c70160aa3f68_299_readHttpResponse)
HXLINE( 301)		 ::haxe::io::BytesBuffer b =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXLINE( 302)		int k = 4;
HXLINE( 303)		 ::haxe::io::Bytes s = ::haxe::io::Bytes_obj::alloc(4);
HXLINE( 304)		sock->setTimeout(this->cnxTimeout);
HXLINE( 305)		while(true){
HXLINE( 306)			int p = 0;
HXLINE( 307)			while((p != k)){
HXLINE( 308)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 309)					p = (p + sock->input->readBytes(s,p,(k - p)));
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e = _hx_e;
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g = _hx_e;
HXLINE( 311)						{
HXLINE( 311)							null();
            						}
HXLINE( 308)						if (!(::Std_obj::isOfType(_g->value,::hx::ClassOf< ::haxe::io::Eof >()))) {
HXLINE( 308)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE( 313)			{
HXLINE( 313)				bool _hx_tmp;
HXDLIN( 313)				if ((k >= 0)) {
HXLINE( 313)					_hx_tmp = (k > s->length);
            				}
            				else {
HXLINE( 313)					_hx_tmp = true;
            				}
HXDLIN( 313)				if (_hx_tmp) {
HXLINE( 313)					HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            				}
HXDLIN( 313)				::Array< unsigned char > b2 = s->b;
HXDLIN( 313)				{
HXLINE( 313)					int _g1 = 0;
HXDLIN( 313)					int _g2 = k;
HXDLIN( 313)					while((_g1 < _g2)){
HXLINE( 313)						_g1 = (_g1 + 1);
HXDLIN( 313)						b->b->push(b2->__get((_g1 - 1)));
            					}
            				}
            			}
HXLINE( 314)			switch((int)(k)){
            				case (int)1: {
HXLINE( 316)					int c = ( (int)(s->b->__get(0)) );
HXLINE( 317)					if ((c == 10)) {
HXLINE( 318)						goto _hx_goto_25;
            					}
HXLINE( 319)					if ((c == 13)) {
HXLINE( 320)						k = 3;
            					}
            					else {
HXLINE( 322)						k = 4;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 324)					int c1 = ( (int)(s->b->__get(1)) );
HXLINE( 325)					if ((c1 == 10)) {
HXLINE( 326)						if ((s->b->__get(0) == 13)) {
HXLINE( 327)							goto _hx_goto_25;
            						}
HXLINE( 328)						k = 4;
            					}
            					else {
HXLINE( 329)						if ((c1 == 13)) {
HXLINE( 330)							k = 3;
            						}
            						else {
HXLINE( 332)							k = 4;
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 334)					int c2 = ( (int)(s->b->__get(2)) );
HXLINE( 335)					if ((c2 == 10)) {
HXLINE( 336)						if ((s->b->__get(1) != 13)) {
HXLINE( 337)							k = 4;
            						}
            						else {
HXLINE( 338)							if ((s->b->__get(0) != 10)) {
HXLINE( 339)								k = 2;
            							}
            							else {
HXLINE( 341)								goto _hx_goto_25;
            							}
            						}
            					}
            					else {
HXLINE( 342)						if ((c2 == 13)) {
HXLINE( 343)							bool _hx_tmp1;
HXDLIN( 343)							if ((s->b->__get(1) == 10)) {
HXLINE( 343)								_hx_tmp1 = (s->b->__get(0) != 13);
            							}
            							else {
HXLINE( 343)								_hx_tmp1 = true;
            							}
HXDLIN( 343)							if (_hx_tmp1) {
HXLINE( 344)								k = 1;
            							}
            							else {
HXLINE( 346)								k = 3;
            							}
            						}
            						else {
HXLINE( 348)							k = 4;
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 350)					int c3 = ( (int)(s->b->__get(3)) );
HXLINE( 351)					if ((c3 == 10)) {
HXLINE( 352)						if ((s->b->__get(2) != 13)) {
HXLINE( 353)							continue;
            						}
            						else {
HXLINE( 354)							bool _hx_tmp2;
HXDLIN( 354)							if ((s->b->__get(1) == 10)) {
HXLINE( 354)								_hx_tmp2 = (s->b->__get(0) != 13);
            							}
            							else {
HXLINE( 354)								_hx_tmp2 = true;
            							}
HXDLIN( 354)							if (_hx_tmp2) {
HXLINE( 355)								k = 2;
            							}
            							else {
HXLINE( 357)								goto _hx_goto_25;
            							}
            						}
            					}
            					else {
HXLINE( 358)						if ((c3 == 13)) {
HXLINE( 359)							bool _hx_tmp3;
HXDLIN( 359)							if ((s->b->__get(2) == 10)) {
HXLINE( 359)								_hx_tmp3 = (s->b->__get(1) != 13);
            							}
            							else {
HXLINE( 359)								_hx_tmp3 = true;
            							}
HXDLIN( 359)							if (_hx_tmp3) {
HXLINE( 360)								k = 3;
            							}
            							else {
HXLINE( 362)								k = 1;
            							}
            						}
            					}
            				}
            				break;
            			}
            		}
            		_hx_goto_25:;
HXLINE( 369)		::Array< ::String > headers = b->getBytes()->toString().split(HX_("\r\n",5d,0b,00,00));
HXLINE( 371)		::String response = ( (::String)(headers->shift()) );
HXLINE( 372)		::Array< ::String > rp = response.split(HX_(" ",20,00,00,00));
HXLINE( 373)		 ::Dynamic status = ::Std_obj::parseInt(rp->__get(1));
HXLINE( 374)		bool _hx_tmp4;
HXDLIN( 374)		if (::hx::IsNotEq( status,0 )) {
HXLINE( 374)			_hx_tmp4 = ::hx::IsNull( status );
            		}
            		else {
HXLINE( 374)			_hx_tmp4 = true;
            		}
HXDLIN( 374)		if (_hx_tmp4) {
HXLINE( 375)			HX_STACK_DO_THROW(HX_("Response status error",39,25,42,e1));
            		}
HXLINE( 378)		headers->pop();
HXLINE( 379)		headers->pop();
HXLINE( 380)		this->responseHeaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 381)		 ::Dynamic size = null();
HXLINE( 382)		bool chunked = false;
HXLINE( 383)		{
HXLINE( 383)			int _g3 = 0;
HXDLIN( 383)			while((_g3 < headers->length)){
HXLINE( 383)				::String hline = headers->__get(_g3);
HXDLIN( 383)				_g3 = (_g3 + 1);
HXLINE( 384)				::Array< ::String > a = hline.split(HX_(": ",a6,32,00,00));
HXLINE( 385)				::String hname = ( (::String)(a->shift()) );
HXLINE( 386)				::String hval;
HXDLIN( 386)				if ((a->length == 1)) {
HXLINE( 386)					hval = a->__get(0);
            				}
            				else {
HXLINE( 386)					hval = a->join(HX_(": ",a6,32,00,00));
            				}
HXLINE( 387)				hval = ::StringTools_obj::ltrim(::StringTools_obj::rtrim(hval));
HXLINE( 389)				{
HXLINE( 390)					::String previousValue = this->responseHeaders->get_string(hname);
HXLINE( 391)					if (::hx::IsNotNull( previousValue )) {
HXLINE( 392)						if (::hx::IsNull( this->responseHeadersSameKey )) {
HXLINE( 393)							this->responseHeadersSameKey =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            						}
HXLINE( 395)						::Array< ::String > array = ( (::Array< ::String >)(this->responseHeadersSameKey->get(hname)) );
HXLINE( 396)						if (::hx::IsNull( array )) {
HXLINE( 397)							array = ::Array_obj< ::String >::__new();
HXLINE( 398)							array->push(previousValue);
HXLINE( 399)							this->responseHeadersSameKey->set(hname,array);
            						}
HXLINE( 401)						array->push(hval);
            					}
            				}
HXLINE( 404)				this->responseHeaders->set(hname,hval);
HXLINE( 405)				::String _hx_switch_0 = hname.toLowerCase();
            				if (  (_hx_switch_0==HX_("content-length",ba,f0,cc,86)) ){
HXLINE( 407)					size = ::Std_obj::parseInt(hval);
HXDLIN( 407)					goto _hx_goto_29;
            				}
            				if (  (_hx_switch_0==HX_("transfer-encoding",75,95,2e,69)) ){
HXLINE( 409)					chunked = (hval.toLowerCase() == HX_("chunked",0c,54,d3,50));
HXDLIN( 409)					goto _hx_goto_29;
            				}
            				_hx_goto_29:;
            			}
            		}
HXLINE( 413)		this->onStatus(status);
HXLINE( 415)		 ::EReg chunk_re =  ::EReg_obj::__alloc( HX_CTX ,HX_("^([0-9A-Fa-f]+)[ ]*\r\n",df,97,ed,19),HX_("m",6d,00,00,00));
HXLINE( 416)		this->chunk_size = null();
HXLINE( 417)		this->chunk_buf = null();
HXLINE( 420)		 ::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(1024);
HXLINE( 421)		if (chunked) {
HXLINE( 422)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 423)				while(this->readChunk(chunk_re,api,buf,sock->input->readBytes(buf,0,1024))){
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e1 = _hx_e;
HXLINE( 429)					HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g4 = _hx_e;
HXLINE( 428)					{
HXLINE( 428)						null();
            					}
HXLINE( 422)					if (::Std_obj::isOfType(_g4->value,::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 429)						HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            					}
            					else {
HXLINE( 422)						HX_STACK_DO_THROW(_g4);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		else {
HXLINE( 431)			if (::hx::IsNull( size )) {
HXLINE( 432)				if (!(this->noShutdown)) {
HXLINE( 433)					sock->shutdown(false,true);
            				}
HXLINE( 434)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 435)					while(true){
HXLINE( 436)						int len = sock->input->readBytes(buf,0,1024);
HXLINE( 437)						if ((len == 0)) {
HXLINE( 438)							goto _hx_goto_31;
            						}
HXLINE( 439)						api->writeBytes(buf,0,len);
            					}
            					_hx_goto_31:;
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e2 = _hx_e;
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g5 = _hx_e;
HXLINE( 441)						{
HXLINE( 441)							null();
            						}
HXLINE( 434)						if (!(::Std_obj::isOfType(_g5->value,::hx::ClassOf< ::haxe::io::Eof >()))) {
HXLINE( 434)							HX_STACK_DO_THROW(_g5);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			else {
HXLINE( 443)				api->prepare(( (int)(size) ));
HXLINE( 444)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 445)					while(::hx::IsGreater( size,0 )){
HXLINE( 446)						int len1;
HXDLIN( 446)						if (::hx::IsGreater( size,1024 )) {
HXLINE( 446)							len1 = 1024;
            						}
            						else {
HXLINE( 446)							len1 = ( (int)(size) );
            						}
HXDLIN( 446)						int len2 = sock->input->readBytes(buf,0,len1);
HXLINE( 447)						api->writeBytes(buf,0,len2);
HXLINE( 448)						size = (size - len2);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e3 = _hx_e;
HXLINE( 451)						HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g6 = _hx_e;
HXLINE( 450)						{
HXLINE( 450)							null();
            						}
HXLINE( 444)						if (::Std_obj::isOfType(_g6->value,::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 451)							HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            						}
            						else {
HXLINE( 444)							HX_STACK_DO_THROW(_g6);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE( 454)		bool _hx_tmp5;
HXDLIN( 454)		if (chunked) {
HXLINE( 454)			if (::hx::IsNull( this->chunk_size )) {
HXLINE( 454)				_hx_tmp5 = ::hx::IsNotNull( this->chunk_buf );
            			}
            			else {
HXLINE( 454)				_hx_tmp5 = true;
            			}
            		}
            		else {
HXLINE( 454)			_hx_tmp5 = false;
            		}
HXDLIN( 454)		if (_hx_tmp5) {
HXLINE( 455)			HX_STACK_DO_THROW(HX_("Invalid chunk",64,90,fb,29));
            		}
HXLINE( 456)		bool _hx_tmp6;
HXDLIN( 456)		if (::hx::IsGreaterEq( status,200 )) {
HXLINE( 456)			_hx_tmp6 = ::hx::IsGreaterEq( status,400 );
            		}
            		else {
HXLINE( 456)			_hx_tmp6 = true;
            		}
HXDLIN( 456)		if (_hx_tmp6) {
HXLINE( 457)			HX_STACK_DO_THROW((HX_("Http Error #",33,85,a5,2b) + status));
            		}
HXLINE( 458)		api->close();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Http_obj,readHttpResponse,(void))

bool Http_obj::readChunk( ::EReg chunk_re, ::haxe::io::Output api, ::haxe::io::Bytes buf,int len){
            	HX_GC_STACKFRAME(&_hx_pos_0d77c70160aa3f68_461_readChunk)
HXLINE( 462)		if (::hx::IsNull( this->chunk_size )) {
HXLINE( 463)			if (::hx::IsNotNull( this->chunk_buf )) {
HXLINE( 464)				 ::haxe::io::BytesBuffer b =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXLINE( 465)				{
HXLINE( 465)					 ::haxe::io::Bytes src = this->chunk_buf;
HXDLIN( 465)					::Array< unsigned char > b2 = src->b;
HXDLIN( 465)					{
HXLINE( 465)						int _g = 0;
HXDLIN( 465)						int _g1 = src->length;
HXDLIN( 465)						while((_g < _g1)){
HXLINE( 465)							_g = (_g + 1);
HXDLIN( 465)							b->b->push(b2->__get((_g - 1)));
            						}
            					}
            				}
HXLINE( 466)				{
HXLINE( 466)					bool _hx_tmp;
HXDLIN( 466)					if ((len >= 0)) {
HXLINE( 466)						_hx_tmp = (len > buf->length);
            					}
            					else {
HXLINE( 466)						_hx_tmp = true;
            					}
HXDLIN( 466)					if (_hx_tmp) {
HXLINE( 466)						HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            					}
HXDLIN( 466)					::Array< unsigned char > b21 = buf->b;
HXDLIN( 466)					{
HXLINE( 466)						int _g2 = 0;
HXDLIN( 466)						int _g3 = len;
HXDLIN( 466)						while((_g2 < _g3)){
HXLINE( 466)							_g2 = (_g2 + 1);
HXDLIN( 466)							b->b->push(b21->__get((_g2 - 1)));
            						}
            					}
            				}
HXLINE( 467)				buf = b->getBytes();
HXLINE( 468)				len = (len + this->chunk_buf->length);
HXLINE( 469)				this->chunk_buf = null();
            			}
HXLINE( 474)			if (chunk_re->match(buf->toString())) {
HXLINE( 476)				 ::Dynamic p = chunk_re->matchedPos();
HXLINE( 477)				if (::hx::IsLessEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),len )) {
HXLINE( 479)					this->chunk_size = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + chunk_re->matched(1)));
HXLINE( 480)					if (::hx::IsEq( this->chunk_size,0 )) {
HXLINE( 481)						this->chunk_size = null();
HXLINE( 482)						this->chunk_buf = null();
HXLINE( 483)						return false;
            					}
HXLINE( 485)					len = (len - ( (int)(p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic)) ));
HXLINE( 486)					return this->readChunk(chunk_re,api,buf->sub(( (int)(p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic)) ),len),len);
            				}
            			}
HXLINE( 490)			if ((len > 10)) {
HXLINE( 491)				this->onError(HX_("Invalid chunk",64,90,fb,29));
HXLINE( 492)				return false;
            			}
HXLINE( 494)			this->chunk_buf = buf->sub(0,len);
HXLINE( 495)			return true;
            		}
HXLINE( 498)		if (::hx::IsGreater( this->chunk_size,len )) {
HXLINE( 499)			this->chunk_size = (this->chunk_size - len);
HXLINE( 500)			api->writeBytes(buf,0,len);
HXLINE( 501)			return true;
            		}
HXLINE( 503)		int end = (this->chunk_size + 2);
HXLINE( 504)		if ((len >= end)) {
HXLINE( 505)			if (::hx::IsGreater( this->chunk_size,0 )) {
HXLINE( 506)				api->writeBytes(buf,0,( (int)(this->chunk_size) ));
            			}
HXLINE( 507)			len = (len - end);
HXLINE( 508)			this->chunk_size = null();
HXLINE( 509)			if ((len == 0)) {
HXLINE( 510)				return true;
            			}
HXLINE( 511)			return this->readChunk(chunk_re,api,buf->sub(end,len),len);
            		}
HXLINE( 513)		if (::hx::IsGreater( this->chunk_size,0 )) {
HXLINE( 514)			api->writeBytes(buf,0,( (int)(this->chunk_size) ));
            		}
HXLINE( 515)		this->chunk_size = (this->chunk_size - len);
HXLINE( 516)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Http_obj,readChunk,return )

 ::Dynamic Http_obj::PROXY;


::hx::ObjectPtr< Http_obj > Http_obj::__new(::String url) {
	::hx::ObjectPtr< Http_obj > __this = new Http_obj();
	__this->__construct(url);
	return __this;
}

::hx::ObjectPtr< Http_obj > Http_obj::__alloc(::hx::Ctx *_hx_ctx,::String url) {
	Http_obj *__this = (Http_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Http_obj), true, "sys.Http"));
	*(void **)__this = Http_obj::_hx_vtable;
	haxe::http::HttpBase_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(url);
	return __this;
}

Http_obj::Http_obj()
{
}

void Http_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Http);
	HX_MARK_MEMBER_NAME(noShutdown,"noShutdown");
	HX_MARK_MEMBER_NAME(cnxTimeout,"cnxTimeout");
	HX_MARK_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_MARK_MEMBER_NAME(responseHeadersSameKey,"responseHeadersSameKey");
	HX_MARK_MEMBER_NAME(chunk_size,"chunk_size");
	HX_MARK_MEMBER_NAME(chunk_buf,"chunk_buf");
	HX_MARK_MEMBER_NAME(file,"file");
	 ::haxe::http::HttpBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Http_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(noShutdown,"noShutdown");
	HX_VISIT_MEMBER_NAME(cnxTimeout,"cnxTimeout");
	HX_VISIT_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_VISIT_MEMBER_NAME(responseHeadersSameKey,"responseHeadersSameKey");
	HX_VISIT_MEMBER_NAME(chunk_size,"chunk_size");
	HX_VISIT_MEMBER_NAME(chunk_buf,"chunk_buf");
	HX_VISIT_MEMBER_NAME(file,"file");
	 ::haxe::http::HttpBase_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Http_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { return ::hx::Val( file ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"request") ) { return ::hx::Val( request_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chunk_buf") ) { return ::hx::Val( chunk_buf ); }
		if (HX_FIELD_EQ(inName,"writeBody") ) { return ::hx::Val( writeBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"readChunk") ) { return ::hx::Val( readChunk_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noShutdown") ) { return ::hx::Val( noShutdown ); }
		if (HX_FIELD_EQ(inName,"cnxTimeout") ) { return ::hx::Val( cnxTimeout ); }
		if (HX_FIELD_EQ(inName,"chunk_size") ) { return ::hx::Val( chunk_size ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"customRequest") ) { return ::hx::Val( customRequest_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { return ::hx::Val( responseHeaders ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"readHttpResponse") ) { return ::hx::Val( readHttpResponse_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"responseHeadersSameKey") ) { return ::hx::Val( responseHeadersSameKey ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Http_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"PROXY") ) { outValue = ( PROXY ); return true; }
	}
	return false;
}

::hx::Val Http_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chunk_buf") ) { chunk_buf=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noShutdown") ) { noShutdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cnxTimeout") ) { cnxTimeout=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chunk_size") ) { chunk_size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { responseHeaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"responseHeadersSameKey") ) { responseHeadersSameKey=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Http_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"PROXY") ) { PROXY=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Http_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("noShutdown",f7,c1,69,5b));
	outFields->push(HX_("cnxTimeout",b4,3a,75,76));
	outFields->push(HX_("responseHeaders",c5,0d,ca,43));
	outFields->push(HX_("responseHeadersSameKey",94,ee,cf,06));
	outFields->push(HX_("chunk_size",13,8b,ba,d8));
	outFields->push(HX_("chunk_buf",21,09,61,a7));
	outFields->push(HX_("file",7c,ce,bb,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Http_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Http_obj,noShutdown),HX_("noShutdown",f7,c1,69,5b)},
	{::hx::fsFloat,(int)offsetof(Http_obj,cnxTimeout),HX_("cnxTimeout",b4,3a,75,76)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Http_obj,responseHeaders),HX_("responseHeaders",c5,0d,ca,43)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Http_obj,responseHeadersSameKey),HX_("responseHeadersSameKey",94,ee,cf,06)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Http_obj,chunk_size),HX_("chunk_size",13,8b,ba,d8)},
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Http_obj,chunk_buf),HX_("chunk_buf",21,09,61,a7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Http_obj,file),HX_("file",7c,ce,bb,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Http_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Http_obj::PROXY,HX_("PROXY",4e,26,7e,46)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Http_obj_sMemberFields[] = {
	HX_("noShutdown",f7,c1,69,5b),
	HX_("cnxTimeout",b4,3a,75,76),
	HX_("responseHeaders",c5,0d,ca,43),
	HX_("responseHeadersSameKey",94,ee,cf,06),
	HX_("chunk_size",13,8b,ba,d8),
	HX_("chunk_buf",21,09,61,a7),
	HX_("file",7c,ce,bb,43),
	HX_("request",4f,df,84,44),
	HX_("customRequest",9e,47,93,ee),
	HX_("writeBody",21,6f,cf,49),
	HX_("readHttpResponse",9f,0e,50,47),
	HX_("readChunk",37,13,aa,16),
	::String(null()) };

static void Http_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Http_obj::PROXY,"PROXY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Http_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Http_obj::PROXY,"PROXY");
};

#endif

::hx::Class Http_obj::__mClass;

static ::String Http_obj_sStaticFields[] = {
	HX_("PROXY",4e,26,7e,46),
	::String(null())
};

void Http_obj::__register()
{
	Http_obj _hx_dummy;
	Http_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.Http",a9,5a,b7,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Http_obj::__GetStatic;
	__mClass->mSetStaticField = &Http_obj::__SetStatic;
	__mClass->mMarkFunc = Http_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Http_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Http_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Http_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Http_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Http_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Http_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Http_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0d77c70160aa3f68_48_boot)
HXDLIN(  48)		PROXY = null();
            	}
}

} // end namespace sys
