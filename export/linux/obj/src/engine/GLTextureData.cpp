// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_engine_GLTextureData
#include <engine/GLTextureData.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0d0e4f5550c7ba0d_7_new,"engine.GLTextureData","new",0xdeed73c6,"engine.GLTextureData.new","engine/GLTextureData.hx",7,0xb79c786b)
namespace engine{

void GLTextureData_obj::__construct(int w,int h, ::openfl::display::BitmapData tex){
            	HX_GC_STACKFRAME(&_hx_pos_0d0e4f5550c7ba0d_7_new)
HXLINE(  11)		this->yOffset = ((Float)0.0);
HXLINE(  10)		this->xOffset = ((Float)0.0);
HXLINE(   9)		this->height = 0;
HXLINE(   8)		this->width = 0;
HXLINE(  15)		this->width = tex->width;
HXLINE(  16)		this->height = tex->height;
HXLINE(  18)		 ::lime::utils::ArrayBufferView dataCopy = tex->image->get_data();
HXLINE(  19)		{
HXLINE(  19)			int _g = 0;
HXDLIN(  19)			int _g1 = ::Std_obj::_hx_int((( (Float)(dataCopy->byteLength) ) / ( (Float)(4) )));
HXDLIN(  19)			while((_g < _g1)){
HXLINE(  19)				_g = (_g + 1);
HXDLIN(  19)				int i = (_g - 1);
HXLINE(  20)				 ::Dynamic temp = ( ::__hxcpp_memory_get_byte(dataCopy->buffer->b,(dataCopy->byteOffset + (i * 4))) & 255);
HXLINE(  21)				{
HXLINE(  21)					int val = ( (int)(( ::__hxcpp_memory_get_byte(dataCopy->buffer->b,(dataCopy->byteOffset + ((i * 4) + 2))) & 255)) );
HXDLIN(  21)					 ::__hxcpp_memory_set_byte(dataCopy->buffer->b,(dataCopy->byteOffset + (i * 4)),val);
            				}
HXLINE(  22)				 ::__hxcpp_memory_set_byte(dataCopy->buffer->b,(dataCopy->byteOffset + ((i * 4) + 2)),( (int)(temp) ));
            			}
            		}
HXLINE(  25)		int id = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_texture();
HXDLIN(  25)		 ::lime::graphics::opengl::GLObject _hx_tmp;
HXDLIN(  25)		if ((id == 0)) {
HXLINE(  25)			_hx_tmp = null();
            		}
            		else {
HXLINE(  25)			 ::lime::graphics::opengl::GLObject object =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id);
HXDLIN(  25)			object->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id,4,::hx::DynamicPtr(object))) );
HXDLIN(  25)			_hx_tmp = object;
            		}
HXDLIN(  25)		this->texture = _hx_tmp;
HXLINE(  26)		{
HXLINE(  26)			 ::lime::graphics::opengl::GLObject texture = this->texture;
HXDLIN(  26)			{
HXLINE(  26)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(  26)				if ((3553 == _this->TEXTURE_2D)) {
HXLINE(  26)					_this->_hx___texture2DBinding = texture;
            				}
HXDLIN(  26)				if ((3553 == _this->TEXTURE_CUBE_MAP)) {
HXLINE(  26)					_this->_hx___textureCubeMapBinding = texture;
            				}
HXDLIN(  26)				int _hx_tmp1;
HXDLIN(  26)				if (::hx::IsNull( texture )) {
HXLINE(  26)					_hx_tmp1 = 0;
            				}
            				else {
HXLINE(  26)					_hx_tmp1 = texture->id;
            				}
HXDLIN(  26)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_texture(3553,_hx_tmp1);
            			}
            		}
HXLINE(  27)		{
HXLINE(  27)			Float data = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(dataCopy);
HXDLIN(  27)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_tex_image_2d(3553,0,6408,w,h,0,6408,5121,data);
            		}
HXLINE(  28)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_tex_parameteri(3553,10241,9728);
HXLINE(  29)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_tex_parameteri(3553,10240,9728);
HXLINE(  30)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_tex_parameteri(3553,10242,33071);
HXLINE(  31)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_tex_parameteri(3553,10243,33071);
            	}

Dynamic GLTextureData_obj::__CreateEmpty() { return new GLTextureData_obj; }

void *GLTextureData_obj::_hx_vtable = 0;

Dynamic GLTextureData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GLTextureData_obj > _hx_result = new GLTextureData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool GLTextureData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x21b4737e;
}


::hx::ObjectPtr< GLTextureData_obj > GLTextureData_obj::__new(int w,int h, ::openfl::display::BitmapData tex) {
	::hx::ObjectPtr< GLTextureData_obj > __this = new GLTextureData_obj();
	__this->__construct(w,h,tex);
	return __this;
}

::hx::ObjectPtr< GLTextureData_obj > GLTextureData_obj::__alloc(::hx::Ctx *_hx_ctx,int w,int h, ::openfl::display::BitmapData tex) {
	GLTextureData_obj *__this = (GLTextureData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GLTextureData_obj), true, "engine.GLTextureData"));
	*(void **)__this = GLTextureData_obj::_hx_vtable;
	__this->__construct(w,h,tex);
	return __this;
}

GLTextureData_obj::GLTextureData_obj()
{
}

void GLTextureData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLTextureData);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(xOffset,"xOffset");
	HX_MARK_MEMBER_NAME(yOffset,"yOffset");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_END_CLASS();
}

void GLTextureData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(xOffset,"xOffset");
	HX_VISIT_MEMBER_NAME(yOffset,"yOffset");
	HX_VISIT_MEMBER_NAME(texture,"texture");
}

::hx::Val GLTextureData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xOffset") ) { return ::hx::Val( xOffset ); }
		if (HX_FIELD_EQ(inName,"yOffset") ) { return ::hx::Val( yOffset ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GLTextureData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xOffset") ) { xOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yOffset") ) { yOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLTextureData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("xOffset",2b,b6,e3,12));
	outFields->push(HX_("yOffset",ec,2c,79,3c));
	outFields->push(HX_("texture",db,c8,e0,9e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GLTextureData_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(GLTextureData_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(GLTextureData_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(GLTextureData_obj,xOffset),HX_("xOffset",2b,b6,e3,12)},
	{::hx::fsFloat,(int)offsetof(GLTextureData_obj,yOffset),HX_("yOffset",ec,2c,79,3c)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(GLTextureData_obj,texture),HX_("texture",db,c8,e0,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GLTextureData_obj_sStaticStorageInfo = 0;
#endif

static ::String GLTextureData_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("xOffset",2b,b6,e3,12),
	HX_("yOffset",ec,2c,79,3c),
	HX_("texture",db,c8,e0,9e),
	::String(null()) };

::hx::Class GLTextureData_obj::__mClass;

void GLTextureData_obj::__register()
{
	GLTextureData_obj _hx_dummy;
	GLTextureData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("engine.GLTextureData",d4,d8,f2,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GLTextureData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GLTextureData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLTextureData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLTextureData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace engine
