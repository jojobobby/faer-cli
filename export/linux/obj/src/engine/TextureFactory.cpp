// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_engine_TextureFactory
#include <engine/TextureFactory.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_336cb82eb3e21cc8_12_disposeTextures,"engine.TextureFactory","disposeTextures",0x7ce2dd04,"engine.TextureFactory.disposeTextures","engine/TextureFactory.hx",12,0xaa554802)
HX_LOCAL_STACK_FRAME(_hx_pos_336cb82eb3e21cc8_17_disposeNormalTextures,"engine.TextureFactory","disposeNormalTextures",0x221b6b4b,"engine.TextureFactory.disposeNormalTextures","engine/TextureFactory.hx",17,0xaa554802)
HX_LOCAL_STACK_FRAME(_hx_pos_336cb82eb3e21cc8_9_boot,"engine.TextureFactory","boot",0x75d66d05,"engine.TextureFactory.boot","engine/TextureFactory.hx",9,0xaa554802)
HX_LOCAL_STACK_FRAME(_hx_pos_336cb82eb3e21cc8_10_boot,"engine.TextureFactory","boot",0x75d66d05,"engine.TextureFactory.boot","engine/TextureFactory.hx",10,0xaa554802)
namespace engine{

void TextureFactory_obj::__construct() { }

Dynamic TextureFactory_obj::__CreateEmpty() { return new TextureFactory_obj; }

void *TextureFactory_obj::_hx_vtable = 0;

Dynamic TextureFactory_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextureFactory_obj > _hx_result = new TextureFactory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextureFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e80eef5;
}

 ::haxe::ds::ObjectMap TextureFactory_obj::textures;

int TextureFactory_obj::count;

void TextureFactory_obj::disposeTextures(){
            	HX_STACKFRAME(&_hx_pos_336cb82eb3e21cc8_12_disposeTextures)
HXLINE(  13)		::engine::TextureFactory_obj::textures->clear();
HXLINE(  14)		::engine::TextureFactory_obj::count = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextureFactory_obj,disposeTextures,(void))

void TextureFactory_obj::disposeNormalTextures(){
            	HX_STACKFRAME(&_hx_pos_336cb82eb3e21cc8_17_disposeNormalTextures)
HXLINE(  18)		::engine::TextureFactory_obj::textures->clear();
HXLINE(  19)		::engine::TextureFactory_obj::count = 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextureFactory_obj,disposeNormalTextures,(void))


TextureFactory_obj::TextureFactory_obj()
{
}

bool TextureFactory_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { outValue = ( count ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textures") ) { outValue = ( textures ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"disposeTextures") ) { outValue = disposeTextures_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"disposeNormalTextures") ) { outValue = disposeNormalTextures_dyn(); return true; }
	}
	return false;
}

bool TextureFactory_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textures") ) { textures=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TextureFactory_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo TextureFactory_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::ObjectMap */ ,(void *) &TextureFactory_obj::textures,HX_("textures",38,f7,ce,65)},
	{::hx::fsInt,(void *) &TextureFactory_obj::count,HX_("count",cf,44,63,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void TextureFactory_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureFactory_obj::textures,"textures");
	HX_MARK_MEMBER_NAME(TextureFactory_obj::count,"count");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureFactory_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureFactory_obj::textures,"textures");
	HX_VISIT_MEMBER_NAME(TextureFactory_obj::count,"count");
};

#endif

::hx::Class TextureFactory_obj::__mClass;

static ::String TextureFactory_obj_sStaticFields[] = {
	HX_("textures",38,f7,ce,65),
	HX_("count",cf,44,63,4a),
	HX_("disposeTextures",f7,6a,3d,df),
	HX_("disposeNormalTextures",7e,71,3d,8f),
	::String(null())
};

void TextureFactory_obj::__register()
{
	TextureFactory_obj _hx_dummy;
	TextureFactory_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("engine.TextureFactory",7b,28,08,3f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextureFactory_obj::__GetStatic;
	__mClass->mSetStaticField = &TextureFactory_obj::__SetStatic;
	__mClass->mMarkFunc = TextureFactory_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextureFactory_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TextureFactory_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureFactory_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureFactory_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextureFactory_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_336cb82eb3e21cc8_9_boot)
HXDLIN(   9)		textures =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_336cb82eb3e21cc8_10_boot)
HXDLIN(  10)		count = 0;
            	}
}

} // end namespace engine
