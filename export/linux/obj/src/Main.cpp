// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_0e0693b5ce2fed3b
#define INCLUDED_0e0693b5ce2fed3b
#include "discord_register.h"
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_appengine_RequestHandler
#include <appengine/RequestHandler.h>
#endif
#ifndef INCLUDED_engine_GLTextureData
#include <engine/GLTextureData.h>
#endif
#ifndef INCLUDED_game_model_VialModel
#include <game/model/VialModel.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_map_Camera
#include <map/Camera.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_AssetLoader
#include <util/AssetLoader.h>
#endif
#ifndef INCLUDED_util_BinPacker
#include <util/BinPacker.h>
#endif
#ifndef INCLUDED_util_ConditionEffect
#include <util/ConditionEffect.h>
#endif
#ifndef INCLUDED_util_MathUtil
#include <util/MathUtil.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_52_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",52,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_127_onResize,"Main","onResize",0x2f30f728,"Main.onResize","Main.hx",127,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_134_onEnterFrame,"Main","onEnterFrame",0x016e4b29,"Main.onEnterFrame","Main.hx",134,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_98_onReady,"Main","onReady",0xe129a5af,"Main.onReady","Main.hx",98,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_102_onDisconnected,"Main","onDisconnected",0x471107ef,"Main.onDisconnected","Main.hx",102,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_106_onError,"Main","onError",0x6d98d114,"Main.onError","Main.hx",106,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_110_refreshCursor,"Main","refreshCursor",0x15991c3c,"Main.refreshCursor","Main.hx",110,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_150_onMouseDown,"Main","onMouseDown",0x100c4c73,"Main.onMouseDown","Main.hx",150,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_154_onMouseUp,"Main","onMouseUp",0x78a6e42c,"Main.onMouseUp","Main.hx",154,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_30_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",30,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_31_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",31,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_32_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",32,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_34_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",34,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_35_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",35,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_36_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",36,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_37_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",37,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_50_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",50,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_52_new)
HXLINE(  53)		super::__construct();
HXLINE(  55)		::Main_obj::tempAtlas =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,1024,1024,true,0);
HXLINE(  56)		::Main_obj::atlasPacker =  ::util::BinPacker_obj::__alloc( HX_CTX ,( (float)(1024) ),( (float)(1024) ));
HXLINE(  57)		::Main_obj::primaryStage3D = this->stage->stage3Ds->get(0).StaticCast<  ::openfl::display::Stage3D >();
HXLINE(  58)		::Main_obj::primaryStage = this->stage;
HXLINE(  60)		::util::Settings_obj::load();
HXLINE(  61)		::util::AssetLoader_obj::load();
HXLINE(  64)		::Main_obj::startTime = ::Std_obj::_hx_int((::Date_obj::now()->getTime() / ( (Float)(1000) )));
HXLINE(  65)		 DiscordEventHandlers handlers = DiscordEventHandlers();
HXLINE(  66)		handlers.ready = ::cpp::Function< void (const  DiscordUser*)>(::hx::AnyCast(&::Main_obj::onReady ));
HXLINE(  67)		handlers.errored = ::cpp::Function< void (int,const char*)>(::hx::AnyCast(&::Main_obj::onError ));
HXLINE(  68)		handlers.disconnected = ::cpp::Function< void (int,const char*)>(::hx::AnyCast(&::Main_obj::onDisconnected ));
HXLINE(  69)		const char* this1 = HX_("1095646272171552811",01,74,20,0a).utf8_str();
HXDLIN(  69)		Discord_Initialize(this1,&(handlers),1,null());
HXLINE(  72)		::Main_obj::refreshCursor();
HXLINE(  74)		::util::ConditionEffect_obj::initRects();
HXLINE(  75)		::map::Camera_obj::init();
HXLINE(  76)		::network::NetworkHandler_obj::init();
HXLINE(  77)		::appengine::RequestHandler_obj::init();
HXLINE(  78)		::util::MathUtil_obj::init();
HXLINE(  79)		::game::model::VialModel_obj::init();
HXLINE(  81)		::Global_obj::init(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  83)		this->stage->set_scaleMode(2);
HXLINE(  84)		this->stage->set_quality(2);
HXLINE(  86)		this->stage->addEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),null(),null(),null());
HXLINE(  87)		this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
HXLINE(  88)		this->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),::Main_obj::onMouseDown_dyn(),null(),null(),null());
HXLINE(  89)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),::Main_obj::onMouseUp_dyn(),null(),null(),null());
HXLINE(  90)		this->stage->addEventListener(HX_("rightMouseDown",ab,29,d7,cd),::Main_obj::onMouseDown_dyn(),null(),null(),null());
HXLINE(  91)		this->stage->addEventListener(HX_("rightMouseUp",64,83,21,ab),::Main_obj::onMouseUp_dyn(),null(),null(),null());
HXLINE(  92)		this->stage->addEventListener(HX_("middleMouseDown",12,2b,fe,01),::Main_obj::onMouseDown_dyn(),null(),null(),null());
HXLINE(  93)		this->stage->addEventListener(HX_("middleMouseUp",0b,8d,f5,3a),::Main_obj::onMouseUp_dyn(),null(),null(),null());
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::onResize( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_127_onResize)
HXLINE( 128)		::Main_obj::stageHeight = this->stage->stageHeight;
HXLINE( 129)		::Main_obj::stageWidth = this->stage->stageWidth;
HXLINE( 130)		::Main_obj::mouseXOffset = (::Main_obj::stageWidth >> 1);
HXLINE( 131)		::Main_obj::mouseYOffset = (::Main_obj::stageHeight >> 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onResize,(void))

void Main_obj::onEnterFrame( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_134_onEnterFrame)
HXLINE( 136)		Discord_RunCallbacks();
HXLINE( 139)		if (::hx::IsNull( ::Main_obj::baseCursorSprite )) {
HXLINE( 140)			return;
            		}
HXLINE( 142)		::Main_obj::clickCursorSprite->set_visible(::Main_obj::mouseDown);
HXLINE( 143)		::Main_obj::baseCursorSprite->set_visible(!(::Main_obj::mouseDown));
HXLINE( 145)		 ::openfl::display::Bitmap _hx_tmp = ::Main_obj::clickCursorSprite;
HXDLIN( 145)		 ::openfl::display::Bitmap _hx_tmp1 = ::Main_obj::baseCursorSprite;
HXDLIN( 145)		_hx_tmp->set_x(_hx_tmp1->set_x((this->stage->get_mouseX() - ((Float)16.))));
HXLINE( 146)		 ::openfl::display::Bitmap _hx_tmp2 = ::Main_obj::clickCursorSprite;
HXDLIN( 146)		 ::openfl::display::Bitmap _hx_tmp3 = ::Main_obj::baseCursorSprite;
HXDLIN( 146)		_hx_tmp2->set_y(_hx_tmp3->set_y((this->stage->get_mouseY() - ((Float)16.))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onEnterFrame,(void))

int Main_obj::PADDING;

int Main_obj::ATLAS_WIDTH;

int Main_obj::ATLAS_HEIGHT;

int Main_obj::mouseXOffset;

int Main_obj::mouseYOffset;

int Main_obj::stageWidth;

int Main_obj::stageHeight;

 ::openfl::display::Stage Main_obj::primaryStage;

 ::openfl::display::Stage3D Main_obj::primaryStage3D;

 ::openfl::display::BitmapData Main_obj::tempAtlas;

 ::util::BinPacker Main_obj::atlasPacker;

 ::engine::GLTextureData Main_obj::atlas;

int Main_obj::startTime;

bool Main_obj::rpcReady;

 ::openfl::display::Bitmap Main_obj::baseCursorSprite;

 ::openfl::display::Bitmap Main_obj::clickCursorSprite;

bool Main_obj::mouseDown;

void Main_obj::onReady(const  DiscordUser* request){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_98_onReady)
HXDLIN(  98)		::Main_obj::rpcReady = true;
            	}


void Main_obj::onDisconnected(int errorCode,const char* message){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_102_onDisconnected)
HXDLIN( 102)		::haxe::Log_obj::trace((((HX_("Discord RPC Disconnected (code ",61,63,0b,99) + errorCode) + HX_("): ",0f,4f,1f,00)) + ::hx::TCast< ::String >::cast(message)),::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),102,HX_("Main",59,64,2f,33),HX_("onDisconnected",7a,eb,5a,b8)));
            	}


void Main_obj::onError(int errorCode,const char* message){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_106_onError)
HXDLIN( 106)		::haxe::Log_obj::trace((((HX_("Discord RPC Error (code ",f2,21,26,9b) + errorCode) + HX_("): ",0f,4f,1f,00)) + ::hx::TCast< ::String >::cast(message)),::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),106,HX_("Main",59,64,2f,33),HX_("onError",29,6a,67,09)));
            	}


void Main_obj::refreshCursor(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_110_refreshCursor)
HXLINE( 111)		if ((::util::Settings_obj::selectedCursor == -1)) {
HXLINE( 112)			::openfl::ui::Mouse_obj::show();
HXLINE( 113)			return;
            		}
HXLINE( 116)		::openfl::ui::Mouse_obj::hide();
HXLINE( 117)		if (::Main_obj::primaryStage->contains(::Main_obj::baseCursorSprite)) {
HXLINE( 118)			::Main_obj::primaryStage->removeChild(::Main_obj::baseCursorSprite);
            		}
HXLINE( 119)		::Main_obj::baseCursorSprite =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("cursors",dd,6c,94,cc),( (int)(((::util::Settings_obj::selectedCursor * ( (signed char)(2) )) + 1)) )),null(),null());
HXLINE( 120)		::Main_obj::primaryStage->addChild(::Main_obj::baseCursorSprite);
HXLINE( 121)		if (::Main_obj::primaryStage->contains(::Main_obj::clickCursorSprite)) {
HXLINE( 122)			::Main_obj::primaryStage->removeChild(::Main_obj::clickCursorSprite);
            		}
HXLINE( 123)		::Main_obj::clickCursorSprite =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("cursors",dd,6c,94,cc),( (int)((::util::Settings_obj::selectedCursor * ( (signed char)(2) ))) )),null(),null());
HXLINE( 124)		::Main_obj::primaryStage->addChild(::Main_obj::clickCursorSprite);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,refreshCursor,(void))

void Main_obj::onMouseDown( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_150_onMouseDown)
HXDLIN( 150)		::Main_obj::mouseDown = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onMouseDown,(void))

void Main_obj::onMouseUp( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_154_onMouseUp)
HXDLIN( 154)		::Main_obj::mouseDown = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onMouseUp,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return ::hx::Val( onEnterFrame_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"atlas") ) { outValue = ( atlas ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rpcReady") ) { outValue = ( rpcReady ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tempAtlas") ) { outValue = ( tempAtlas ); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { outValue = ( mouseDown ); return true; }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { outValue = onMouseUp_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { outValue = ( stageWidth ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { outValue = ( stageHeight ); return true; }
		if (HX_FIELD_EQ(inName,"atlasPacker") ) { outValue = ( atlasPacker ); return true; }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { outValue = onMouseDown_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mouseXOffset") ) { outValue = ( mouseXOffset ); return true; }
		if (HX_FIELD_EQ(inName,"mouseYOffset") ) { outValue = ( mouseYOffset ); return true; }
		if (HX_FIELD_EQ(inName,"primaryStage") ) { outValue = ( primaryStage ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"refreshCursor") ) { outValue = refreshCursor_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"primaryStage3D") ) { outValue = ( primaryStage3D ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"baseCursorSprite") ) { outValue = ( baseCursorSprite ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clickCursorSprite") ) { outValue = ( clickCursorSprite ); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"atlas") ) { atlas=ioValue.Cast<  ::engine::GLTextureData >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rpcReady") ) { rpcReady=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tempAtlas") ) { tempAtlas=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { mouseDown=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { stageWidth=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { stageHeight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"atlasPacker") ) { atlasPacker=ioValue.Cast<  ::util::BinPacker >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mouseXOffset") ) { mouseXOffset=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseYOffset") ) { mouseYOffset=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"primaryStage") ) { primaryStage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"primaryStage3D") ) { primaryStage3D=ioValue.Cast<  ::openfl::display::Stage3D >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"baseCursorSprite") ) { baseCursorSprite=ioValue.Cast<  ::openfl::display::Bitmap >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clickCursorSprite") ) { clickCursorSprite=ioValue.Cast<  ::openfl::display::Bitmap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Main_obj::PADDING,HX_("PADDING",b1,2d,51,50)},
	{::hx::fsInt,(void *) &Main_obj::ATLAS_WIDTH,HX_("ATLAS_WIDTH",92,6c,10,b6)},
	{::hx::fsInt,(void *) &Main_obj::ATLAS_HEIGHT,HX_("ATLAS_HEIGHT",bb,0b,9e,4e)},
	{::hx::fsInt,(void *) &Main_obj::mouseXOffset,HX_("mouseXOffset",86,06,89,f4)},
	{::hx::fsInt,(void *) &Main_obj::mouseYOffset,HX_("mouseYOffset",47,7d,1e,1e)},
	{::hx::fsInt,(void *) &Main_obj::stageWidth,HX_("stageWidth",68,0a,b3,1d)},
	{::hx::fsInt,(void *) &Main_obj::stageHeight,HX_("stageHeight",45,89,45,95)},
	{::hx::fsObject /*  ::openfl::display::Stage */ ,(void *) &Main_obj::primaryStage,HX_("primaryStage",9c,3b,34,7f)},
	{::hx::fsObject /*  ::openfl::display::Stage3D */ ,(void *) &Main_obj::primaryStage3D,HX_("primaryStage3D",4d,87,6f,e1)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &Main_obj::tempAtlas,HX_("tempAtlas",97,51,f1,5c)},
	{::hx::fsObject /*  ::util::BinPacker */ ,(void *) &Main_obj::atlasPacker,HX_("atlasPacker",31,a3,4b,66)},
	{::hx::fsObject /*  ::engine::GLTextureData */ ,(void *) &Main_obj::atlas,HX_("atlas",4b,4d,dd,26)},
	{::hx::fsInt,(void *) &Main_obj::startTime,HX_("startTime",8f,45,f0,05)},
	{::hx::fsBool,(void *) &Main_obj::rpcReady,HX_("rpcReady",3e,8f,17,b9)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(void *) &Main_obj::baseCursorSprite,HX_("baseCursorSprite",2c,2d,8a,74)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(void *) &Main_obj::clickCursorSprite,HX_("clickCursorSprite",e3,b7,40,00)},
	{::hx::fsBool,(void *) &Main_obj::mouseDown,HX_("mouseDown",27,b1,c2,ee)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("onResize",73,50,28,e8),
	HX_("onEnterFrame",f4,a5,93,da),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::PADDING,"PADDING");
	HX_MARK_MEMBER_NAME(Main_obj::ATLAS_WIDTH,"ATLAS_WIDTH");
	HX_MARK_MEMBER_NAME(Main_obj::ATLAS_HEIGHT,"ATLAS_HEIGHT");
	HX_MARK_MEMBER_NAME(Main_obj::mouseXOffset,"mouseXOffset");
	HX_MARK_MEMBER_NAME(Main_obj::mouseYOffset,"mouseYOffset");
	HX_MARK_MEMBER_NAME(Main_obj::stageWidth,"stageWidth");
	HX_MARK_MEMBER_NAME(Main_obj::stageHeight,"stageHeight");
	HX_MARK_MEMBER_NAME(Main_obj::primaryStage,"primaryStage");
	HX_MARK_MEMBER_NAME(Main_obj::primaryStage3D,"primaryStage3D");
	HX_MARK_MEMBER_NAME(Main_obj::tempAtlas,"tempAtlas");
	HX_MARK_MEMBER_NAME(Main_obj::atlasPacker,"atlasPacker");
	HX_MARK_MEMBER_NAME(Main_obj::atlas,"atlas");
	HX_MARK_MEMBER_NAME(Main_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(Main_obj::rpcReady,"rpcReady");
	HX_MARK_MEMBER_NAME(Main_obj::baseCursorSprite,"baseCursorSprite");
	HX_MARK_MEMBER_NAME(Main_obj::clickCursorSprite,"clickCursorSprite");
	HX_MARK_MEMBER_NAME(Main_obj::mouseDown,"mouseDown");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::PADDING,"PADDING");
	HX_VISIT_MEMBER_NAME(Main_obj::ATLAS_WIDTH,"ATLAS_WIDTH");
	HX_VISIT_MEMBER_NAME(Main_obj::ATLAS_HEIGHT,"ATLAS_HEIGHT");
	HX_VISIT_MEMBER_NAME(Main_obj::mouseXOffset,"mouseXOffset");
	HX_VISIT_MEMBER_NAME(Main_obj::mouseYOffset,"mouseYOffset");
	HX_VISIT_MEMBER_NAME(Main_obj::stageWidth,"stageWidth");
	HX_VISIT_MEMBER_NAME(Main_obj::stageHeight,"stageHeight");
	HX_VISIT_MEMBER_NAME(Main_obj::primaryStage,"primaryStage");
	HX_VISIT_MEMBER_NAME(Main_obj::primaryStage3D,"primaryStage3D");
	HX_VISIT_MEMBER_NAME(Main_obj::tempAtlas,"tempAtlas");
	HX_VISIT_MEMBER_NAME(Main_obj::atlasPacker,"atlasPacker");
	HX_VISIT_MEMBER_NAME(Main_obj::atlas,"atlas");
	HX_VISIT_MEMBER_NAME(Main_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(Main_obj::rpcReady,"rpcReady");
	HX_VISIT_MEMBER_NAME(Main_obj::baseCursorSprite,"baseCursorSprite");
	HX_VISIT_MEMBER_NAME(Main_obj::clickCursorSprite,"clickCursorSprite");
	HX_VISIT_MEMBER_NAME(Main_obj::mouseDown,"mouseDown");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("PADDING",b1,2d,51,50),
	HX_("ATLAS_WIDTH",92,6c,10,b6),
	HX_("ATLAS_HEIGHT",bb,0b,9e,4e),
	HX_("mouseXOffset",86,06,89,f4),
	HX_("mouseYOffset",47,7d,1e,1e),
	HX_("stageWidth",68,0a,b3,1d),
	HX_("stageHeight",45,89,45,95),
	HX_("primaryStage",9c,3b,34,7f),
	HX_("primaryStage3D",4d,87,6f,e1),
	HX_("tempAtlas",97,51,f1,5c),
	HX_("atlasPacker",31,a3,4b,66),
	HX_("atlas",4b,4d,dd,26),
	HX_("startTime",8f,45,f0,05),
	HX_("rpcReady",3e,8f,17,b9),
	HX_("baseCursorSprite",2c,2d,8a,74),
	HX_("clickCursorSprite",e3,b7,40,00),
	HX_("mouseDown",27,b1,c2,ee),
	HX_("refreshCursor",11,33,23,3d),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_30_boot)
HXDLIN(  30)		PADDING = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_31_boot)
HXDLIN(  31)		ATLAS_WIDTH = 1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_32_boot)
HXDLIN(  32)		ATLAS_HEIGHT = 1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_34_boot)
HXDLIN(  34)		mouseXOffset = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_35_boot)
HXDLIN(  35)		mouseYOffset = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_36_boot)
HXDLIN(  36)		stageWidth = 1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_37_boot)
HXDLIN(  37)		stageHeight = 768;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_50_boot)
HXDLIN(  50)		mouseDown = false;
            	}
}

