// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_assets_IconFactory
#include <assets/IconFactory.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_BitmapUtil
#include <util/BitmapUtil.h>
#endif
#ifndef INCLUDED_util_GlowRedrawer
#include <util/GlowRedrawer.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2522dad418abf909_11_makeGems,"assets.IconFactory","makeGems",0x17216dba,"assets.IconFactory.makeGems","assets/IconFactory.hx",11,0xaeafc879)
HX_LOCAL_STACK_FRAME(_hx_pos_2522dad418abf909_15_makeGold,"assets.IconFactory","makeGold",0x17290356,"assets.IconFactory.makeGold","assets/IconFactory.hx",15,0xaeafc879)
HX_LOCAL_STACK_FRAME(_hx_pos_2522dad418abf909_18_cropAndGlowIcon,"assets.IconFactory","cropAndGlowIcon",0xae4cbc45,"assets.IconFactory.cropAndGlowIcon","assets/IconFactory.hx",18,0xaeafc879)
namespace assets{

void IconFactory_obj::__construct() { }

Dynamic IconFactory_obj::__CreateEmpty() { return new IconFactory_obj; }

void *IconFactory_obj::_hx_vtable = 0;

Dynamic IconFactory_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IconFactory_obj > _hx_result = new IconFactory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IconFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4e9af24e;
}

 ::openfl::display::BitmapData IconFactory_obj::makeGems(){
            	HX_STACKFRAME(&_hx_pos_2522dad418abf909_11_makeGems)
HXDLIN(  11)		return ::assets::IconFactory_obj::cropAndGlowIcon(::util::TextureRedrawer_obj::resize(::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),21),40,true,null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(IconFactory_obj,makeGems,return )

 ::openfl::display::BitmapData IconFactory_obj::makeGold(){
            	HX_STACKFRAME(&_hx_pos_2522dad418abf909_15_makeGold)
HXDLIN(  15)		return ::assets::IconFactory_obj::cropAndGlowIcon(::util::TextureRedrawer_obj::resize(::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),20),40,true,null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(IconFactory_obj,makeGold,return )

 ::openfl::display::BitmapData IconFactory_obj::cropAndGlowIcon( ::openfl::display::BitmapData data){
            	HX_STACKFRAME(&_hx_pos_2522dad418abf909_18_cropAndGlowIcon)
HXLINE(  19)		data = ::util::GlowRedrawer_obj::outlineGlow(data,-1,null(),null(),null());
HXLINE(  20)		data = ::util::BitmapUtil_obj::cropToBitmapData(data,10,10,(data->width - 20),(data->height - 20));
HXLINE(  21)		return data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IconFactory_obj,cropAndGlowIcon,return )


IconFactory_obj::IconFactory_obj()
{
}

bool IconFactory_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"makeGems") ) { outValue = makeGems_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makeGold") ) { outValue = makeGold_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cropAndGlowIcon") ) { outValue = cropAndGlowIcon_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *IconFactory_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *IconFactory_obj_sStaticStorageInfo = 0;
#endif

::hx::Class IconFactory_obj::__mClass;

static ::String IconFactory_obj_sStaticFields[] = {
	HX_("makeGems",12,f2,ff,3a),
	HX_("makeGold",ae,87,07,3b),
	HX_("cropAndGlowIcon",ed,f2,5d,8e),
	::String(null())
};

void IconFactory_obj::__register()
{
	IconFactory_obj _hx_dummy;
	IconFactory_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("assets.IconFactory",c6,f9,70,05);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IconFactory_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(IconFactory_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< IconFactory_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IconFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IconFactory_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace assets
