// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_assets_Animation
#include <assets/Animation.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif
#ifndef INCLUDED_openfl_utils_Timer
#include <openfl/utils/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b684325068bd4ddb_9_new,"assets.Animation","new",0x9637b4ab,"assets.Animation.new","assets/Animation.hx",9,0xccbd46a6)
HX_LOCAL_STACK_FRAME(_hx_pos_b684325068bd4ddb_34_setFrames,"assets.Animation","setFrames",0xfaddd373,"assets.Animation.setFrames","assets/Animation.hx",34,0xccbd46a6)
HX_LOCAL_STACK_FRAME(_hx_pos_b684325068bd4ddb_53_start,"assets.Animation","start",0x45e9416d,"assets.Animation.start","assets/Animation.hx",53,0xccbd46a6)
HX_LOCAL_STACK_FRAME(_hx_pos_b684325068bd4ddb_62_stop,"assets.Animation","stop",0xdddfcd57,"assets.Animation.stop","assets/Animation.hx",62,0xccbd46a6)
HX_LOCAL_STACK_FRAME(_hx_pos_b684325068bd4ddb_68_dispose,"assets.Animation","dispose",0x09ffe66a,"assets.Animation.dispose","assets/Animation.hx",68,0xccbd46a6)
HX_LOCAL_STACK_FRAME(_hx_pos_b684325068bd4ddb_78_makeBitmap,"assets.Animation","makeBitmap",0x2ec3ef92,"assets.Animation.makeBitmap","assets/Animation.hx",78,0xccbd46a6)
HX_LOCAL_STACK_FRAME(_hx_pos_b684325068bd4ddb_84_makeTimer,"assets.Animation","makeTimer",0xd27ee582,"assets.Animation.makeTimer","assets/Animation.hx",84,0xccbd46a6)
HX_LOCAL_STACK_FRAME(_hx_pos_b684325068bd4ddb_90_iterate,"assets.Animation","iterate",0x3183dfc5,"assets.Animation.iterate","assets/Animation.hx",90,0xccbd46a6)
namespace assets{

void Animation_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b684325068bd4ddb_9_new)
HXLINE(  17)		this->count = 0;
HXLINE(  16)		this->index = 0;
HXLINE(  15)		this->isStarted = false;
HXLINE(  13)		this->frames = ::Array_obj< ::Dynamic>::__new();
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->timer = this->makeTimer();
HXLINE(  23)		this->bitmap = this->makeBitmap();
            	}

Dynamic Animation_obj::__CreateEmpty() { return new Animation_obj; }

void *Animation_obj::_hx_vtable = 0;

Dynamic Animation_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Animation_obj > _hx_result = new Animation_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Animation_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7fc27d01;
		}
	}
}

void Animation_obj::setFrames(::Array< ::Dynamic> newFrames){
            	HX_STACKFRAME(&_hx_pos_b684325068bd4ddb_34_setFrames)
HXLINE(  36)		this->frames->removeRange(0,this->frames->length);
HXLINE(  37)		this->index = 0;
HXLINE(  38)		{
HXLINE(  38)			int _g = 0;
HXDLIN(  38)			while((_g < newFrames->length)){
HXLINE(  38)				 ::openfl::display::BitmapData frame = newFrames->__get(_g).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN(  38)				_g = (_g + 1);
HXLINE(  39)				this->count = this->frames->push(frame);
            			}
            		}
HXLINE(  41)		if (this->isStarted) {
HXLINE(  42)			this->start();
            		}
            		else {
HXLINE(  44)			this->iterate(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animation_obj,setFrames,(void))

void Animation_obj::start(){
            	HX_STACKFRAME(&_hx_pos_b684325068bd4ddb_53_start)
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		if (!(this->isStarted)) {
HXLINE(  54)			_hx_tmp = (this->count > 0);
            		}
            		else {
HXLINE(  54)			_hx_tmp = false;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  55)			this->timer->start();
HXLINE(  56)			this->iterate(null());
            		}
HXLINE(  59)		this->isStarted = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,start,(void))

void Animation_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_b684325068bd4ddb_62_stop)
HXLINE(  63)		if (this->isStarted) {
HXLINE(  64)			this->timer->stop();
            		}
HXLINE(  65)		this->isStarted = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,stop,(void))

void Animation_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_b684325068bd4ddb_68_dispose)
HXLINE(  70)		this->stop();
HXLINE(  71)		this->index = 0;
HXLINE(  72)		this->count = 0;
HXLINE(  73)		this->frames->removeRange(0,this->frames->length);
HXLINE(  74)		{
HXLINE(  74)			int _g = 0;
HXDLIN(  74)			::Array< ::Dynamic> _g1 = this->frames;
HXDLIN(  74)			while((_g < _g1->length)){
HXLINE(  74)				 ::openfl::display::BitmapData frame = _g1->__get(_g).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN(  74)				_g = (_g + 1);
HXLINE(  75)				frame->dispose();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,dispose,(void))

 ::openfl::display::Bitmap Animation_obj::makeBitmap(){
            	HX_GC_STACKFRAME(&_hx_pos_b684325068bd4ddb_78_makeBitmap)
HXLINE(  79)		 ::openfl::display::Bitmap bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  80)		this->addChild(bitmap);
HXLINE(  81)		return bitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,makeBitmap,return )

 ::openfl::utils::Timer Animation_obj::makeTimer(){
            	HX_GC_STACKFRAME(&_hx_pos_b684325068bd4ddb_84_makeTimer)
HXLINE(  85)		 ::openfl::utils::Timer timer =  ::openfl::utils::Timer_obj::__alloc( HX_CTX ,( (Float)(200) ),null());
HXLINE(  86)		timer->addEventListener(HX_("timer",c5,bf,35,10),this->iterate_dyn(),null(),null(),null());
HXLINE(  87)		return timer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,makeTimer,return )

void Animation_obj::iterate( ::openfl::events::TimerEvent event){
            	HX_STACKFRAME(&_hx_pos_b684325068bd4ddb_90_iterate)
HXLINE(  91)		this->index = ::hx::Mod(++this->index,this->count);
HXLINE(  92)		this->bitmap->set_bitmapData(this->frames->__get(this->index).StaticCast<  ::openfl::display::BitmapData >());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animation_obj,iterate,(void))


::hx::ObjectPtr< Animation_obj > Animation_obj::__new() {
	::hx::ObjectPtr< Animation_obj > __this = new Animation_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Animation_obj > Animation_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Animation_obj *__this = (Animation_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Animation_obj), true, "assets.Animation"));
	*(void **)__this = Animation_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Animation_obj::Animation_obj()
{
}

void Animation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Animation);
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(isStarted,"isStarted");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(count,"count");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Animation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(isStarted,"isStarted");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(count,"count");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Animation_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return ::hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"index") ) { return ::hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"count") ) { return ::hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return ::hx::Val( bitmap ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return ::hx::Val( frames ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterate") ) { return ::hx::Val( iterate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { return ::hx::Val( isStarted ); }
		if (HX_FIELD_EQ(inName,"setFrames") ) { return ::hx::Val( setFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeTimer") ) { return ::hx::Val( makeTimer_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"makeBitmap") ) { return ::hx::Val( makeBitmap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Animation_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::openfl::utils::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { isStarted=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Animation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bitmap",ef,0f,0c,f1));
	outFields->push(HX_("frames",a6,af,85,ac));
	outFields->push(HX_("timer",c5,bf,35,10));
	outFields->push(HX_("isStarted",77,a6,19,39));
	outFields->push(HX_("index",12,9b,14,be));
	outFields->push(HX_("count",cf,44,63,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Animation_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(Animation_obj,bitmap),HX_("bitmap",ef,0f,0c,f1)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Animation_obj,frames),HX_("frames",a6,af,85,ac)},
	{::hx::fsObject /*  ::openfl::utils::Timer */ ,(int)offsetof(Animation_obj,timer),HX_("timer",c5,bf,35,10)},
	{::hx::fsBool,(int)offsetof(Animation_obj,isStarted),HX_("isStarted",77,a6,19,39)},
	{::hx::fsInt,(int)offsetof(Animation_obj,index),HX_("index",12,9b,14,be)},
	{::hx::fsInt,(int)offsetof(Animation_obj,count),HX_("count",cf,44,63,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Animation_obj_sStaticStorageInfo = 0;
#endif

static ::String Animation_obj_sMemberFields[] = {
	HX_("bitmap",ef,0f,0c,f1),
	HX_("frames",a6,af,85,ac),
	HX_("timer",c5,bf,35,10),
	HX_("isStarted",77,a6,19,39),
	HX_("index",12,9b,14,be),
	HX_("count",cf,44,63,4a),
	HX_("setFrames",e8,24,2d,0c),
	HX_("start",62,74,0b,84),
	HX_("stop",02,f0,5b,4c),
	HX_("dispose",9f,80,4c,bb),
	HX_("makeBitmap",7d,e4,db,42),
	HX_("makeTimer",f7,36,ce,e3),
	HX_("iterate",fa,79,d0,e2),
	::String(null()) };

::hx::Class Animation_obj::__mClass;

void Animation_obj::__register()
{
	Animation_obj _hx_dummy;
	Animation_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("assets.Animation",39,83,27,88);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Animation_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Animation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Animation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Animation_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace assets
