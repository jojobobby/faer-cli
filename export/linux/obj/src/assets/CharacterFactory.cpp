// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_assets_Animation
#include <assets/Animation.h>
#endif
#ifndef INCLUDED_assets_CharacterFactory
#include <assets/CharacterFactory.h>
#endif
#ifndef INCLUDED_assets_CharacterTemplate
#include <assets/CharacterTemplate.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif
#ifndef INCLUDED_util_AnimatedChars
#include <util/AnimatedChars.h>
#endif
#ifndef INCLUDED_util_BitmapUtil
#include <util/BitmapUtil.h>
#endif
#ifndef INCLUDED_util_GlowRedrawer
#include <util/GlowRedrawer.h>
#endif
#ifndef INCLUDED_util_MaskedImage
#include <util/MaskedImage.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_63f68d87af2a034d_13_makeCharacter,"assets.CharacterFactory","makeCharacter",0xa6efd879,"assets.CharacterFactory.makeCharacter","assets/CharacterFactory.hx",13,0x81059a51)
HX_LOCAL_STACK_FRAME(_hx_pos_63f68d87af2a034d_16_makeIcon,"assets.CharacterFactory","makeIcon",0x48f61ca9,"assets.CharacterFactory.makeIcon","assets/CharacterFactory.hx",16,0x81059a51)
HX_LOCAL_STACK_FRAME(_hx_pos_63f68d87af2a034d_24_makeWalkingIcon,"assets.CharacterFactory","makeWalkingIcon",0x981d5062,"assets.CharacterFactory.makeWalkingIcon","assets/CharacterFactory.hx",24,0x81059a51)
HX_LOCAL_STACK_FRAME(_hx_pos_63f68d87af2a034d_37_makeFrame,"assets.CharacterFactory","makeFrame",0xde0eccfd,"assets.CharacterFactory.makeFrame","assets/CharacterFactory.hx",37,0x81059a51)
namespace assets{

void CharacterFactory_obj::__construct() { }

Dynamic CharacterFactory_obj::__CreateEmpty() { return new CharacterFactory_obj; }

void *CharacterFactory_obj::_hx_vtable = 0;

Dynamic CharacterFactory_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterFactory_obj > _hx_result = new CharacterFactory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CharacterFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x545bc704;
}

 ::util::AnimatedChar CharacterFactory_obj::makeCharacter( ::assets::CharacterTemplate _hx_template){
            	HX_STACKFRAME(&_hx_pos_63f68d87af2a034d_13_makeCharacter)
HXDLIN(  13)		return ::util::AnimatedChars_obj::getAnimatedChar(_hx_template->file,_hx_template->index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CharacterFactory_obj,makeCharacter,return )

 ::openfl::display::BitmapData CharacterFactory_obj::makeIcon( ::assets::CharacterTemplate _hx_template,::hx::Null< int >  __o_size){
            		int size = __o_size.Default(100);
            	HX_STACKFRAME(&_hx_pos_63f68d87af2a034d_16_makeIcon)
HXLINE(  18)		 ::openfl::display::BitmapData data = ::assets::CharacterFactory_obj::makeFrame(::assets::CharacterFactory_obj::makeCharacter(_hx_template),0,( (Float)(0) ),size);
HXLINE(  19)		data = ::util::GlowRedrawer_obj::outlineGlow(data,0,null(),null(),null());
HXLINE(  20)		data = ::util::BitmapUtil_obj::cropToBitmapData(data,6,6,(data->width - 12),(data->height - 6));
HXLINE(  21)		return data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CharacterFactory_obj,makeIcon,return )

 ::assets::Animation CharacterFactory_obj::makeWalkingIcon( ::assets::CharacterTemplate _hx_template,::hx::Null< int >  __o_size){
            		int size = __o_size.Default(100);
            	HX_GC_STACKFRAME(&_hx_pos_63f68d87af2a034d_24_makeWalkingIcon)
HXLINE(  25)		 ::util::AnimatedChar character = ::assets::CharacterFactory_obj::makeCharacter(_hx_template);
HXLINE(  26)		 ::openfl::display::BitmapData first = ::assets::CharacterFactory_obj::makeFrame(character,1,((Float)0.5),size);
HXLINE(  27)		first = ::util::GlowRedrawer_obj::outlineGlow(first,0,null(),null(),null());
HXLINE(  28)		 ::openfl::display::BitmapData second = ::assets::CharacterFactory_obj::makeFrame(character,1,( (Float)(0) ),size);
HXLINE(  29)		second = ::util::GlowRedrawer_obj::outlineGlow(second,0,null(),null(),null());
HXLINE(  30)		 ::assets::Animation animation =  ::assets::Animation_obj::__alloc( HX_CTX );
HXLINE(  31)		animation->setFrames(::Array_obj< ::Dynamic>::__new(2)->init(0,first)->init(1,second));
HXLINE(  32)		return animation;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CharacterFactory_obj,makeWalkingIcon,return )

 ::openfl::display::BitmapData CharacterFactory_obj::makeFrame( ::util::AnimatedChar character,int action,Float offset,int size){
            	HX_STACKFRAME(&_hx_pos_63f68d87af2a034d_37_makeFrame)
HXDLIN(  37)		return ::util::TextureRedrawer_obj::resize(character->imageFromDir(0,action,offset)->image,size,false,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CharacterFactory_obj,makeFrame,return )


CharacterFactory_obj::CharacterFactory_obj()
{
}

bool CharacterFactory_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"makeIcon") ) { outValue = makeIcon_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"makeFrame") ) { outValue = makeFrame_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"makeCharacter") ) { outValue = makeCharacter_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"makeWalkingIcon") ) { outValue = makeWalkingIcon_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CharacterFactory_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CharacterFactory_obj_sStaticStorageInfo = 0;
#endif

::hx::Class CharacterFactory_obj::__mClass;

static ::String CharacterFactory_obj_sStaticFields[] = {
	HX_("makeCharacter",db,d3,7a,3a),
	HX_("makeIcon",87,dc,50,3c),
	HX_("makeWalkingIcon",44,68,e7,60),
	HX_("makeFrame",5f,ef,1b,da),
	::String(null())
};

void CharacterFactory_obj::__register()
{
	CharacterFactory_obj _hx_dummy;
	CharacterFactory_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("assets.CharacterFactory",8c,ac,1f,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterFactory_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterFactory_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CharacterFactory_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterFactory_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace assets
