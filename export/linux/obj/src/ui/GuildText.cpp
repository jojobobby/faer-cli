// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_GuildText
#include <ui/GuildText.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_util_GuildUtil
#include <util/GuildUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d05911339d34db6f_8_new,"ui.GuildText","new",0xf5bd4d38,"ui.GuildText.new","ui/GuildText.hx",8,0x8040beb9)
namespace ui{

void GuildText_obj::__construct(::String name,int rank,::hx::Null< int >  __o_w){
            		int w = __o_w.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d05911339d34db6f_8_new)
HXLINE(  10)		this->rank = 0;
HXLINE(   9)		this->guildName = HX_("",00,00,00,00);
HXLINE(  15)		super::__construct();
HXLINE(  17)		this->icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  18)		this->icon->set_y(( (Float)(-8) ));
HXLINE(  19)		this->icon->set_x(( (Float)(-8) ));
HXLINE(  20)		int stWidth;
HXDLIN(  20)		if ((w == 0)) {
HXLINE(  20)			stWidth = 0;
            		}
            		else {
HXLINE(  20)			stWidth = ::Std_obj::_hx_int((( (Float)(w) ) - (this->icon->get_width() - ( (Float)(16) ))));
            		}
HXLINE(  21)		this->guildText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,false,stWidth,0,null());
HXLINE(  22)		 ::ui::SimpleText _hx_tmp = this->guildText;
HXDLIN(  22)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  23)		this->guildText->set_x(( (Float)(24) ));
HXLINE(  24)		bool _hx_tmp1;
HXDLIN(  24)		if ((this->guildName == name)) {
HXLINE(  24)			_hx_tmp1 = (rank == rank);
            		}
            		else {
HXLINE(  24)			_hx_tmp1 = false;
            		}
HXDLIN(  24)		if (!(_hx_tmp1)) {
HXLINE(  24)			this->guildName = name;
HXDLIN(  24)			this->rank = rank;
HXDLIN(  24)			bool _hx_tmp2;
HXDLIN(  24)			if (::hx::IsNotNull( this->guildName )) {
HXLINE(  24)				_hx_tmp2 = (this->guildName == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  24)				_hx_tmp2 = true;
            			}
HXDLIN(  24)			if (_hx_tmp2) {
HXLINE(  24)				bool _hx_tmp3;
HXDLIN(  24)				if (::hx::IsNotNull( this->icon )) {
HXLINE(  24)					_hx_tmp3 = this->contains(this->icon);
            				}
            				else {
HXLINE(  24)					_hx_tmp3 = false;
            				}
HXDLIN(  24)				if (_hx_tmp3) {
HXLINE(  24)					this->removeChild(this->icon);
            				}
HXDLIN(  24)				bool _hx_tmp4;
HXDLIN(  24)				if (::hx::IsNotNull( this->guildText )) {
HXLINE(  24)					_hx_tmp4 = this->contains(this->guildText);
            				}
            				else {
HXLINE(  24)					_hx_tmp4 = false;
            				}
HXDLIN(  24)				if (_hx_tmp4) {
HXLINE(  24)					this->removeChild(this->guildText);
            				}
            			}
            			else {
HXLINE(  24)				 ::openfl::display::Bitmap _hx_tmp5 = this->icon;
HXDLIN(  24)				_hx_tmp5->set_bitmapData(::util::GuildUtil_obj::rankToIcon(this->rank,20));
HXDLIN(  24)				bool _hx_tmp6;
HXDLIN(  24)				if (::hx::IsNotNull( this->icon )) {
HXLINE(  24)					_hx_tmp6 = !(this->contains(this->icon));
            				}
            				else {
HXLINE(  24)					_hx_tmp6 = false;
            				}
HXDLIN(  24)				if (_hx_tmp6) {
HXLINE(  24)					this->addChild(this->icon);
            				}
HXDLIN(  24)				this->guildText->set_text(this->guildName);
HXDLIN(  24)				this->guildText->useTextDimensions();
HXDLIN(  24)				bool _hx_tmp7;
HXDLIN(  24)				if (::hx::IsNotNull( this->guildText )) {
HXLINE(  24)					_hx_tmp7 = !(this->contains(this->guildText));
            				}
            				else {
HXLINE(  24)					_hx_tmp7 = false;
            				}
HXDLIN(  24)				if (_hx_tmp7) {
HXLINE(  24)					this->addChild(this->guildText);
            				}
            			}
            		}
            	}

Dynamic GuildText_obj::__CreateEmpty() { return new GuildText_obj; }

void *GuildText_obj::_hx_vtable = 0;

Dynamic GuildText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GuildText_obj > _hx_result = new GuildText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool GuildText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x25c7cc8c || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}


::hx::ObjectPtr< GuildText_obj > GuildText_obj::__new(::String name,int rank,::hx::Null< int >  __o_w) {
	::hx::ObjectPtr< GuildText_obj > __this = new GuildText_obj();
	__this->__construct(name,rank,__o_w);
	return __this;
}

::hx::ObjectPtr< GuildText_obj > GuildText_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,int rank,::hx::Null< int >  __o_w) {
	GuildText_obj *__this = (GuildText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GuildText_obj), true, "ui.GuildText"));
	*(void **)__this = GuildText_obj::_hx_vtable;
	__this->__construct(name,rank,__o_w);
	return __this;
}

GuildText_obj::GuildText_obj()
{
}

void GuildText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GuildText);
	HX_MARK_MEMBER_NAME(guildName,"guildName");
	HX_MARK_MEMBER_NAME(rank,"rank");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(guildText,"guildText");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GuildText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(guildName,"guildName");
	HX_VISIT_MEMBER_NAME(rank,"rank");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(guildText,"guildText");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GuildText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rank") ) { return ::hx::Val( rank ); }
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"guildName") ) { return ::hx::Val( guildName ); }
		if (HX_FIELD_EQ(inName,"guildText") ) { return ::hx::Val( guildText ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GuildText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rank") ) { rank=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"guildName") ) { guildName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"guildText") ) { guildText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GuildText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("guildName",9e,b5,f2,07));
	outFields->push(HX_("rank",ac,4d,a4,4b));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("guildText",00,10,ed,0b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GuildText_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(GuildText_obj,guildName),HX_("guildName",9e,b5,f2,07)},
	{::hx::fsInt,(int)offsetof(GuildText_obj,rank),HX_("rank",ac,4d,a4,4b)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(GuildText_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(GuildText_obj,guildText),HX_("guildText",00,10,ed,0b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GuildText_obj_sStaticStorageInfo = 0;
#endif

static ::String GuildText_obj_sMemberFields[] = {
	HX_("guildName",9e,b5,f2,07),
	HX_("rank",ac,4d,a4,4b),
	HX_("icon",79,e7,b2,45),
	HX_("guildText",00,10,ed,0b),
	::String(null()) };

::hx::Class GuildText_obj::__mClass;

void GuildText_obj::__register()
{
	GuildText_obj _hx_dummy;
	GuildText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.GuildText",46,91,d8,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GuildText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GuildText_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GuildText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GuildText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
