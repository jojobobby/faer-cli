// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_ui_options_KeyCodeBox
#include <ui/options/KeyCodeBox.h>
#endif
#ifndef INCLUDED_ui_options_KeyMapper
#include <ui/options/KeyMapper.h>
#endif
#ifndef INCLUDED_ui_options_Option
#include <ui/options/Option.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_589bc47da12e669f_7_new,"ui.options.KeyMapper","new",0x6c68dce8,"ui.options.KeyMapper.new","ui/options/KeyMapper.hx",7,0x8db81b8a)
HX_LOCAL_STACK_FRAME(_hx_pos_589bc47da12e669f_20_refresh,"ui.options.KeyMapper","refresh",0xa52aca63,"ui.options.KeyMapper.refresh","ui/options/KeyMapper.hx",20,0x8db81b8a)
HX_LOCAL_STACK_FRAME(_hx_pos_589bc47da12e669f_23_setDisabled,"ui.options.KeyMapper","setDisabled",0x16a5dfc6,"ui.options.KeyMapper.setDisabled","ui/options/KeyMapper.hx",23,0x8db81b8a)
HX_LOCAL_STACK_FRAME(_hx_pos_589bc47da12e669f_30_onChange,"ui.options.KeyMapper","onChange",0xe7c80e67,"ui.options.KeyMapper.onChange","ui/options/KeyMapper.hx",30,0x8db81b8a)
namespace ui{
namespace options{

void KeyMapper_obj::__construct(::String paramName,::String desc,::String tooltipText,::hx::Null< bool >  __o_disabled){
            		bool disabled = __o_disabled.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_589bc47da12e669f_7_new)
HXLINE(   9)		this->disabled = false;
HXLINE(  12)		super::__construct(paramName,desc,tooltipText);
HXLINE(  13)		this->keyCodeBox =  ::ui::options::KeyCodeBox_obj::__alloc( HX_CTX ,( (int)(::Reflect_obj::getProperty(::hx::ClassOf< ::util::Settings >(),paramName)) ));
HXLINE(  14)		this->keyCodeBox->addEventListener(HX_("change",70,91,72,b7),this->onChange_dyn(),null(),null(),null());
HXLINE(  15)		this->addChild(this->keyCodeBox);
HXLINE(  16)		this->setDisabled(disabled);
            	}

Dynamic KeyMapper_obj::__CreateEmpty() { return new KeyMapper_obj; }

void *KeyMapper_obj::_hx_vtable = 0;

Dynamic KeyMapper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyMapper_obj > _hx_result = new KeyMapper_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool KeyMapper_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4247c316) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4247c316;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x75a8715f;
		}
	}
}

void KeyMapper_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_589bc47da12e669f_20_refresh)
HXDLIN(  20)		 ::ui::options::KeyCodeBox _hx_tmp = this->keyCodeBox;
HXDLIN(  20)		_hx_tmp->setKeyCode(( (int)(::Reflect_obj::getProperty(::hx::ClassOf< ::util::Settings >(),this->paramName)) ));
            	}


void KeyMapper_obj::setDisabled(bool disabled){
            	HX_STACKFRAME(&_hx_pos_589bc47da12e669f_23_setDisabled)
HXLINE(  24)		this->disabled = disabled;
HXLINE(  25)		 ::openfl::geom::ColorTransform _hx_tmp;
HXDLIN(  25)		if (this->disabled) {
HXLINE(  25)			_hx_tmp = ::util::ColorUtils_obj::darkCT;
            		}
            		else {
HXLINE(  25)			_hx_tmp = ::util::ColorUtils_obj::identity;
            		}
HXDLIN(  25)		this->get_transform()->set_colorTransform(_hx_tmp);
HXLINE(  26)		this->mouseEnabled = !(this->disabled);
HXLINE(  27)		this->mouseChildren = !(this->disabled);
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyMapper_obj,setDisabled,(void))

void KeyMapper_obj::onChange( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_589bc47da12e669f_30_onChange)
HXLINE(  31)		::String _hx_tmp = this->paramName;
HXDLIN(  31)		::Reflect_obj::setProperty(::hx::ClassOf< ::util::Settings >(),_hx_tmp,this->keyCodeBox->value());
HXLINE(  32)		::util::Settings_obj::save();
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyMapper_obj,onChange,(void))


::hx::ObjectPtr< KeyMapper_obj > KeyMapper_obj::__new(::String paramName,::String desc,::String tooltipText,::hx::Null< bool >  __o_disabled) {
	::hx::ObjectPtr< KeyMapper_obj > __this = new KeyMapper_obj();
	__this->__construct(paramName,desc,tooltipText,__o_disabled);
	return __this;
}

::hx::ObjectPtr< KeyMapper_obj > KeyMapper_obj::__alloc(::hx::Ctx *_hx_ctx,::String paramName,::String desc,::String tooltipText,::hx::Null< bool >  __o_disabled) {
	KeyMapper_obj *__this = (KeyMapper_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyMapper_obj), true, "ui.options.KeyMapper"));
	*(void **)__this = KeyMapper_obj::_hx_vtable;
	__this->__construct(paramName,desc,tooltipText,__o_disabled);
	return __this;
}

KeyMapper_obj::KeyMapper_obj()
{
}

void KeyMapper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyMapper);
	HX_MARK_MEMBER_NAME(keyCodeBox,"keyCodeBox");
	HX_MARK_MEMBER_NAME(disabled,"disabled");
	 ::ui::options::Option_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void KeyMapper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyCodeBox,"keyCodeBox");
	HX_VISIT_MEMBER_NAME(disabled,"disabled");
	 ::ui::options::Option_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val KeyMapper_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"disabled") ) { return ::hx::Val( disabled ); }
		if (HX_FIELD_EQ(inName,"onChange") ) { return ::hx::Val( onChange_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keyCodeBox") ) { return ::hx::Val( keyCodeBox ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setDisabled") ) { return ::hx::Val( setDisabled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyMapper_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"disabled") ) { disabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keyCodeBox") ) { keyCodeBox=inValue.Cast<  ::ui::options::KeyCodeBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyMapper_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyCodeBox",ff,9e,f8,bb));
	outFields->push(HX_("disabled",7c,41,04,7c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyMapper_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::options::KeyCodeBox */ ,(int)offsetof(KeyMapper_obj,keyCodeBox),HX_("keyCodeBox",ff,9e,f8,bb)},
	{::hx::fsBool,(int)offsetof(KeyMapper_obj,disabled),HX_("disabled",7c,41,04,7c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KeyMapper_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyMapper_obj_sMemberFields[] = {
	HX_("keyCodeBox",ff,9e,f8,bb),
	HX_("disabled",7c,41,04,7c),
	HX_("refresh",db,d9,20,ed),
	HX_("setDisabled",3e,0b,65,ac),
	HX_("onChange",ef,87,1f,97),
	::String(null()) };

::hx::Class KeyMapper_obj::__mClass;

void KeyMapper_obj::__register()
{
	KeyMapper_obj _hx_dummy;
	KeyMapper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.options.KeyMapper",f6,88,36,57);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyMapper_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyMapper_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyMapper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyMapper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace options
