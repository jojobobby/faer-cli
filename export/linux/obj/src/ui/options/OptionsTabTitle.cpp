// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_options_OptionsTabTitle
#include <ui/options/OptionsTabTitle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c1fe9a16bf3baf3_8_new,"ui.options.OptionsTabTitle","new",0xe97cdfa9,"ui.options.OptionsTabTitle.new","ui/options/OptionsTabTitle.hx",8,0x77d85969)
HX_LOCAL_STACK_FRAME(_hx_pos_1c1fe9a16bf3baf3_36_setSelected,"ui.options.OptionsTabTitle","setSelected",0xe7f4f466,"ui.options.OptionsTabTitle.setSelected","ui/options/OptionsTabTitle.hx",36,0x77d85969)
HX_LOCAL_STACK_FRAME(_hx_pos_1c1fe9a16bf3baf3_42_redraw,"ui.options.OptionsTabTitle","redraw",0x8f82c98e,"ui.options.OptionsTabTitle.redraw","ui/options/OptionsTabTitle.hx",42,0x77d85969)
HX_LOCAL_STACK_FRAME(_hx_pos_1c1fe9a16bf3baf3_45_getColor,"ui.options.OptionsTabTitle","getColor",0x76e16904,"ui.options.OptionsTabTitle.getColor","ui/options/OptionsTabTitle.hx",45,0x77d85969)
HX_LOCAL_STACK_FRAME(_hx_pos_1c1fe9a16bf3baf3_53_onMouseOver,"ui.options.OptionsTabTitle","onMouseOver",0x1e772d43,"ui.options.OptionsTabTitle.onMouseOver","ui/options/OptionsTabTitle.hx",53,0x77d85969)
HX_LOCAL_STACK_FRAME(_hx_pos_1c1fe9a16bf3baf3_57_onRollOut,"ui.options.OptionsTabTitle","onRollOut",0x8039ddbb,"ui.options.OptionsTabTitle.onRollOut","ui/options/OptionsTabTitle.hx",57,0x77d85969)
namespace ui{
namespace options{

void OptionsTabTitle_obj::__construct(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_1c1fe9a16bf3baf3_8_new)
HXLINE(  13)		this->selected = false;
HXLINE(  11)		this->text = HX_("",00,00,00,00);
HXLINE(  16)		super::__construct();
HXLINE(  18)		this->text = text;
HXLINE(  19)		this->textField =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,11776947,false,0,0,null());
HXLINE(  20)		this->textField->setBold(true);
HXLINE(  21)		this->textField->set_text(this->text);
HXLINE(  22)		this->textField->updateMetrics();
HXLINE(  23)		 ::ui::SimpleText _hx_tmp = this->textField;
HXDLIN(  23)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE(  24)		this->addChild(this->textField);
HXLINE(  27)		this->get_graphics()->clear();
HXLINE(  28)		this->get_graphics()->beginFill(16777215,0);
HXLINE(  29)		 ::openfl::display::Graphics _hx_tmp1 = this->get_graphics();
HXDLIN(  29)		Float _hx_tmp2 = (this->textField->get_x() - ( (Float)(4) ));
HXDLIN(  29)		Float _hx_tmp3 = (this->textField->get_y() - ( (Float)(4) ));
HXDLIN(  29)		Float _hx_tmp4 = (this->textField->get_width() + 8);
HXDLIN(  29)		_hx_tmp1->drawRect(_hx_tmp2,_hx_tmp3,_hx_tmp4,(this->textField->get_height() + 8));
HXLINE(  31)		this->selected = false;
HXLINE(  32)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE(  33)		this->addEventListener(HX_("rollOut",11,f9,11,5d),this->onRollOut_dyn(),null(),null(),null());
            	}

Dynamic OptionsTabTitle_obj::__CreateEmpty() { return new OptionsTabTitle_obj; }

void *OptionsTabTitle_obj::_hx_vtable = 0;

Dynamic OptionsTabTitle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OptionsTabTitle_obj > _hx_result = new OptionsTabTitle_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OptionsTabTitle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x11edd8bb) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x11edd8bb;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void OptionsTabTitle_obj::setSelected(bool selected){
            	HX_STACKFRAME(&_hx_pos_1c1fe9a16bf3baf3_36_setSelected)
HXLINE(  37)		this->selected = selected;
HXLINE(  38)		this->redraw(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsTabTitle_obj,setSelected,(void))

void OptionsTabTitle_obj::redraw(bool over){
            	HX_STACKFRAME(&_hx_pos_1c1fe9a16bf3baf3_42_redraw)
HXDLIN(  42)		 ::ui::SimpleText _hx_tmp = this->textField->setSize(16);
HXDLIN(  42)		_hx_tmp->setColor(this->getColor(over));
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsTabTitle_obj,redraw,(void))

int OptionsTabTitle_obj::getColor(bool isOver){
            	HX_STACKFRAME(&_hx_pos_1c1fe9a16bf3baf3_45_getColor)
HXLINE(  46)		if (this->selected) {
HXLINE(  47)			return 16762880;
            		}
HXLINE(  49)		if (isOver) {
HXLINE(  49)			return 16777215;
            		}
            		else {
HXLINE(  49)			return 11776947;
            		}
HXDLIN(  49)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsTabTitle_obj,getColor,return )

void OptionsTabTitle_obj::onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_1c1fe9a16bf3baf3_53_onMouseOver)
HXDLIN(  53)		this->redraw(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsTabTitle_obj,onMouseOver,(void))

void OptionsTabTitle_obj::onRollOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_1c1fe9a16bf3baf3_57_onRollOut)
HXDLIN(  57)		this->redraw(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsTabTitle_obj,onRollOut,(void))


::hx::ObjectPtr< OptionsTabTitle_obj > OptionsTabTitle_obj::__new(::String text) {
	::hx::ObjectPtr< OptionsTabTitle_obj > __this = new OptionsTabTitle_obj();
	__this->__construct(text);
	return __this;
}

::hx::ObjectPtr< OptionsTabTitle_obj > OptionsTabTitle_obj::__alloc(::hx::Ctx *_hx_ctx,::String text) {
	OptionsTabTitle_obj *__this = (OptionsTabTitle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OptionsTabTitle_obj), true, "ui.options.OptionsTabTitle"));
	*(void **)__this = OptionsTabTitle_obj::_hx_vtable;
	__this->__construct(text);
	return __this;
}

OptionsTabTitle_obj::OptionsTabTitle_obj()
{
}

void OptionsTabTitle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionsTabTitle);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(selected,"selected");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OptionsTabTitle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OptionsTabTitle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"redraw") ) { return ::hx::Val( redraw_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"getColor") ) { return ::hx::Val( getColor_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"onRollOut") ) { return ::hx::Val( onRollOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setSelected") ) { return ::hx::Val( setSelected_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OptionsTabTitle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionsTabTitle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OptionsTabTitle_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(OptionsTabTitle_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(OptionsTabTitle_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsBool,(int)offsetof(OptionsTabTitle_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OptionsTabTitle_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionsTabTitle_obj_sMemberFields[] = {
	HX_("text",ad,cc,f9,4c),
	HX_("textField",cd,24,81,99),
	HX_("selected",5b,2a,6d,b1),
	HX_("setSelected",1d,f4,cd,e1),
	HX_("redraw",37,e5,97,fe),
	HX_("getColor",ed,80,33,aa),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onRollOut",b2,b1,bc,34),
	::String(null()) };

::hx::Class OptionsTabTitle_obj::__mClass;

void OptionsTabTitle_obj::__register()
{
	OptionsTabTitle_obj _hx_dummy;
	OptionsTabTitle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.options.OptionsTabTitle",37,d7,7f,cd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OptionsTabTitle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OptionsTabTitle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionsTabTitle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionsTabTitle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace options
