// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_ui_options_KeyCodeBox
#include <ui/options/KeyCodeBox.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_KeyCodeUtil
#include <util/KeyCodeUtil.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_be4dae6cc4e43418_13_new,"ui.options.KeyCodeBox","new",0x211db17b,"ui.options.KeyCodeBox.new","ui/options/KeyCodeBox.hx",13,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_35_value,"ui.options.KeyCodeBox","value",0x81911d4c,"ui.options.KeyCodeBox.value","ui/options/KeyCodeBox.hx",35,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_38_setKeyCode,"ui.options.KeyCodeBox","setKeyCode",0xc7738f2f,"ui.options.KeyCodeBox.setKeyCode","ui/options/KeyCodeBox.hx",38,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_47_setText,"ui.options.KeyCodeBox","setText",0x801e180a,"ui.options.KeyCodeBox.setText","ui/options/KeyCodeBox.hx",47,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_53_setNormalMode,"ui.options.KeyCodeBox","setNormalMode",0x7a1fc047,"ui.options.KeyCodeBox.setNormalMode","ui/options/KeyCodeBox.hx",53,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_68_setInputMode,"ui.options.KeyCodeBox","setInputMode",0xed27f410,"ui.options.KeyCodeBox.setInputMode","ui/options/KeyCodeBox.hx",68,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_84_onNormalClick,"ui.options.KeyCodeBox","onNormalClick",0xa23cda9d,"ui.options.KeyCodeBox.onNormalClick","ui/options/KeyCodeBox.hx",84,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_87_onInputKeyDown,"ui.options.KeyCodeBox","onInputKeyDown",0x7ec3713b,"ui.options.KeyCodeBox.onInputKeyDown","ui/options/KeyCodeBox.hx",87,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_94_onMouse1,"ui.options.KeyCodeBox","onMouse1",0x2a247df0,"ui.options.KeyCodeBox.onMouse1","ui/options/KeyCodeBox.hx",94,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_101_onMouse2,"ui.options.KeyCodeBox","onMouse2",0x2a247df1,"ui.options.KeyCodeBox.onMouse2","ui/options/KeyCodeBox.hx",101,0x79edf413)
HX_LOCAL_STACK_FRAME(_hx_pos_be4dae6cc4e43418_108_onMouse3,"ui.options.KeyCodeBox","onMouse3",0x2a247df2,"ui.options.KeyCodeBox.onMouse3","ui/options/KeyCodeBox.hx",108,0x79edf413)
namespace ui{
namespace options{

void KeyCodeBox_obj::__construct(int keyCode){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_13_new)
HXLINE(  21)		this->keyIcon = null();
HXLINE(  19)		this->inputMode = false;
HXLINE(  18)		this->selected = false;
HXLINE(  17)		this->keyCode = 0;
HXLINE(  24)		super::__construct();
HXLINE(  26)		this->keyCode = keyCode;
HXLINE(  27)		this->selected = false;
HXLINE(  28)		this->inputMode = false;
HXLINE(  29)		this->keyIcon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  30)		this->addChild(this->keyIcon);
HXLINE(  31)		this->setNormalMode();
            	}

Dynamic KeyCodeBox_obj::__CreateEmpty() { return new KeyCodeBox_obj; }

void *KeyCodeBox_obj::_hx_vtable = 0;

Dynamic KeyCodeBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyCodeBox_obj > _hx_result = new KeyCodeBox_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool KeyCodeBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x37544505 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

int KeyCodeBox_obj::value(){
            	HX_STACKFRAME(&_hx_pos_be4dae6cc4e43418_35_value)
HXDLIN(  35)		return this->keyCode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyCodeBox_obj,value,return )

void KeyCodeBox_obj::setKeyCode(int keyCode){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_38_setKeyCode)
HXLINE(  39)		if ((keyCode == this->keyCode)) {
HXLINE(  40)			return;
            		}
HXLINE(  42)		this->keyCode = keyCode;
HXLINE(  43)		this->setText(::util::KeyCodeUtil_obj::charCodeIconIndices->__get(this->keyCode));
HXLINE(  44)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyCodeBox_obj,setKeyCode,(void))

void KeyCodeBox_obj::setText(int keyCodeIndex){
            	HX_STACKFRAME(&_hx_pos_be4dae6cc4e43418_47_setText)
HXLINE(  48)		 ::openfl::display::Bitmap _hx_tmp = this->keyIcon;
HXDLIN(  48)		_hx_tmp->set_bitmapData(::util::TextureRedrawer_obj::resize(::util::AssetLibrary_obj::getImageFromSet(HX_("keyIndicators",43,58,49,9c),keyCodeIndex),10,false,null()));
HXLINE(  49)		 ::openfl::display::Bitmap _hx_tmp1 = this->keyIcon;
HXDLIN(  49)		_hx_tmp1->set_x((( (Float)(25) ) - (this->keyIcon->get_width() / ( (Float)(2) ))));
HXLINE(  50)		 ::openfl::display::Bitmap _hx_tmp2 = this->keyIcon;
HXDLIN(  50)		_hx_tmp2->set_y(((( (Float)(25) ) - (this->keyIcon->get_height() / ( (Float)(2) ))) - ( (Float)(6) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyCodeBox_obj,setText,(void))

void KeyCodeBox_obj::setNormalMode(){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_53_setNormalMode)
HXLINE(  54)		this->inputMode = false;
HXLINE(  56)		this->keyIcon->get_transform()->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,1,1,null(),null(),null(),null(),null()));
HXLINE(  57)		if (::hx::IsNotNull( this->stage )) {
HXLINE(  58)			this->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onInputKeyDown_dyn(),null());
HXLINE(  59)			this->stage->removeEventListener(HX_("click",48,7c,5e,48),this->onMouse1_dyn(),true);
HXLINE(  60)			this->stage->removeEventListener(HX_("rightClick",cc,62,23,4b),this->onMouse2_dyn(),true);
HXLINE(  61)			this->stage->removeEventListener(HX_("middleClick",b3,e4,e5,43),this->onMouse3_dyn(),true);
            		}
HXLINE(  64)		this->setText(::util::KeyCodeUtil_obj::charCodeIconIndices->__get(this->keyCode));
HXLINE(  65)		this->addEventListener(HX_("click",48,7c,5e,48),this->onNormalClick_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyCodeBox_obj,setNormalMode,(void))

void KeyCodeBox_obj::setInputMode(){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_68_setInputMode)
HXLINE(  69)		if (::hx::IsNull( this->stage )) {
HXLINE(  70)			return;
            		}
HXLINE(  72)		this->keyIcon->get_transform()->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,((Float)0.8627),((Float)0.5216),null(),null(),null(),null(),null()));
HXLINE(  73)		this->stage->stageFocusRect = false;
HXLINE(  74)		this->stage->set_focus(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  75)		this->inputMode = true;
HXLINE(  76)		this->removeEventListener(HX_("click",48,7c,5e,48),this->onNormalClick_dyn(),null());
HXLINE(  77)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->onInputKeyDown_dyn(),null(),null(),null());
HXLINE(  78)		this->stage->addEventListener(HX_("click",48,7c,5e,48),this->onMouse1_dyn(),true,null(),null());
HXLINE(  79)		this->stage->addEventListener(HX_("rightClick",cc,62,23,4b),this->onMouse2_dyn(),true,null(),null());
HXLINE(  80)		this->stage->addEventListener(HX_("middleClick",b3,e4,e5,43),this->onMouse3_dyn(),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyCodeBox_obj,setInputMode,(void))

void KeyCodeBox_obj::onNormalClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_be4dae6cc4e43418_84_onNormalClick)
HXDLIN(  84)		this->setInputMode();
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyCodeBox_obj,onNormalClick,(void))

void KeyCodeBox_obj::onInputKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_87_onInputKeyDown)
HXLINE(  88)		event->stopImmediatePropagation();
HXLINE(  89)		this->keyCode = event->keyCode;
HXLINE(  90)		this->setNormalMode();
HXLINE(  91)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyCodeBox_obj,onInputKeyDown,(void))

void KeyCodeBox_obj::onMouse1( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_94_onMouse1)
HXLINE(  95)		event->stopImmediatePropagation();
HXLINE(  96)		this->keyCode = ( (int)(( (unsigned char)(223) )) );
HXLINE(  97)		this->setNormalMode();
HXLINE(  98)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyCodeBox_obj,onMouse1,(void))

void KeyCodeBox_obj::onMouse2( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_101_onMouse2)
HXLINE( 102)		event->stopImmediatePropagation();
HXLINE( 103)		this->keyCode = ( (int)(( (unsigned char)(224) )) );
HXLINE( 104)		this->setNormalMode();
HXLINE( 105)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyCodeBox_obj,onMouse2,(void))

void KeyCodeBox_obj::onMouse3( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_be4dae6cc4e43418_108_onMouse3)
HXLINE( 109)		event->stopImmediatePropagation();
HXLINE( 110)		this->keyCode = ( (int)(( (unsigned char)(225) )) );
HXLINE( 111)		this->setNormalMode();
HXLINE( 112)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(KeyCodeBox_obj,onMouse3,(void))


::hx::ObjectPtr< KeyCodeBox_obj > KeyCodeBox_obj::__new(int keyCode) {
	::hx::ObjectPtr< KeyCodeBox_obj > __this = new KeyCodeBox_obj();
	__this->__construct(keyCode);
	return __this;
}

::hx::ObjectPtr< KeyCodeBox_obj > KeyCodeBox_obj::__alloc(::hx::Ctx *_hx_ctx,int keyCode) {
	KeyCodeBox_obj *__this = (KeyCodeBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyCodeBox_obj), true, "ui.options.KeyCodeBox"));
	*(void **)__this = KeyCodeBox_obj::_hx_vtable;
	__this->__construct(keyCode);
	return __this;
}

KeyCodeBox_obj::KeyCodeBox_obj()
{
}

void KeyCodeBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyCodeBox);
	HX_MARK_MEMBER_NAME(keyCode,"keyCode");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(inputMode,"inputMode");
	HX_MARK_MEMBER_NAME(keyIcon,"keyIcon");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void KeyCodeBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyCode,"keyCode");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(inputMode,"inputMode");
	HX_VISIT_MEMBER_NAME(keyIcon,"keyIcon");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val KeyCodeBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { return ::hx::Val( keyCode ); }
		if (HX_FIELD_EQ(inName,"keyIcon") ) { return ::hx::Val( keyIcon ); }
		if (HX_FIELD_EQ(inName,"setText") ) { return ::hx::Val( setText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"onMouse1") ) { return ::hx::Val( onMouse1_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouse2") ) { return ::hx::Val( onMouse2_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouse3") ) { return ::hx::Val( onMouse3_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inputMode") ) { return ::hx::Val( inputMode ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setKeyCode") ) { return ::hx::Val( setKeyCode_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setInputMode") ) { return ::hx::Val( setInputMode_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setNormalMode") ) { return ::hx::Val( setNormalMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"onNormalClick") ) { return ::hx::Val( onNormalClick_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onInputKeyDown") ) { return ::hx::Val( onInputKeyDown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyCodeBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keyIcon") ) { keyIcon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inputMode") ) { inputMode=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyCodeBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyCode",6c,22,9e,9b));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("inputMode",8d,90,8b,0f));
	outFields->push(HX_("keyIcon",b8,58,8c,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyCodeBox_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(KeyCodeBox_obj,keyCode),HX_("keyCode",6c,22,9e,9b)},
	{::hx::fsBool,(int)offsetof(KeyCodeBox_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{::hx::fsBool,(int)offsetof(KeyCodeBox_obj,inputMode),HX_("inputMode",8d,90,8b,0f)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(KeyCodeBox_obj,keyIcon),HX_("keyIcon",b8,58,8c,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KeyCodeBox_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyCodeBox_obj_sMemberFields[] = {
	HX_("keyCode",6c,22,9e,9b),
	HX_("selected",5b,2a,6d,b1),
	HX_("inputMode",8d,90,8b,0f),
	HX_("keyIcon",b8,58,8c,9f),
	HX_("value",71,7f,b8,31),
	HX_("setKeyCode",ea,46,7d,ee),
	HX_("setText",6f,0d,7e,12),
	HX_("setNormalMode",6c,4f,5d,10),
	HX_("setInputMode",8b,50,db,33),
	HX_("onNormalClick",c2,69,7a,38),
	HX_("onInputKeyDown",76,22,63,5e),
	HX_("onMouse1",eb,40,bb,ab),
	HX_("onMouse2",ec,40,bb,ab),
	HX_("onMouse3",ed,40,bb,ab),
	::String(null()) };

::hx::Class KeyCodeBox_obj::__mClass;

void KeyCodeBox_obj::__register()
{
	KeyCodeBox_obj _hx_dummy;
	KeyCodeBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.options.KeyCodeBox",09,d8,7a,01);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyCodeBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyCodeBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyCodeBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyCodeBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace options
