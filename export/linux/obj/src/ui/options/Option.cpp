// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_options_Option
#include <ui/options/Option.h>
#endif
#ifndef INCLUDED_ui_tooltip_TextToolTip
#include <ui/tooltip/TextToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1871418a7e2fb212_11_new,"ui.options.Option","new",0xbf000bf1,"ui.options.Option.new","ui/options/Option.hx",11,0x5affe35d)
HX_LOCAL_STACK_FRAME(_hx_pos_1871418a7e2fb212_37_refresh,"ui.options.Option","refresh",0x9320b1ec,"ui.options.Option.refresh","ui/options/Option.hx",37,0x5affe35d)
HX_LOCAL_STACK_FRAME(_hx_pos_1871418a7e2fb212_40_removeToolTip,"ui.options.Option","removeToolTip",0xd18d7bd0,"ui.options.Option.removeToolTip","ui/options/Option.hx",40,0x5affe35d)
HX_LOCAL_STACK_FRAME(_hx_pos_1871418a7e2fb212_46_onMouseOver,"ui.options.Option","onMouseOver",0x80ebe18b,"ui.options.Option.onMouseOver","ui/options/Option.hx",46,0x5affe35d)
HX_LOCAL_STACK_FRAME(_hx_pos_1871418a7e2fb212_52_onRollOut,"ui.options.Option","onRollOut",0x3c6f7003,"ui.options.Option.onRollOut","ui/options/Option.hx",52,0x5affe35d)
HX_LOCAL_STACK_FRAME(_hx_pos_1871418a7e2fb212_56_onRemovedFromStage,"ui.options.Option","onRemovedFromStage",0xa11f3c02,"ui.options.Option.onRemovedFromStage","ui/options/Option.hx",56,0x5affe35d)
namespace ui{
namespace options{

void Option_obj::__construct(::String paramName,::String desc,::String tooltipText){
            	HX_GC_STACKFRAME(&_hx_pos_1871418a7e2fb212_11_new)
HXLINE(  15)		this->tooltipText = HX_("",00,00,00,00);
HXLINE(  14)		this->paramName = HX_("",00,00,00,00);
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->paramName = paramName;
HXLINE(  23)		this->tooltipText = tooltipText;
HXLINE(  24)		this->desc =  ::ui::SimpleText_obj::__alloc( HX_CTX ,18,11776947,false,0,0,null());
HXLINE(  25)		this->desc->set_text(desc);
HXLINE(  26)		 ::ui::SimpleText _hx_tmp = this->desc;
HXDLIN(  26)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,4,4,2,null(),null(),null(),null())));
HXLINE(  27)		this->desc->updateMetrics();
HXLINE(  28)		this->desc->set_x(( (Float)(74) ));
HXLINE(  29)		 ::ui::SimpleText _hx_tmp1 = this->desc;
HXDLIN(  29)		_hx_tmp1->set_y(((((Float)25.) - (this->desc->get_height() / ( (Float)(2) ))) - ( (Float)(2) )));
HXLINE(  30)		this->desc->mouseEnabled = true;
HXLINE(  31)		this->desc->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE(  32)		this->desc->addEventListener(HX_("rollOut",11,f9,11,5d),this->onRollOut_dyn(),null(),null(),null());
HXLINE(  33)		this->addChild(this->desc);
HXLINE(  34)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic Option_obj::__CreateEmpty() { return new Option_obj; }

void *Option_obj::_hx_vtable = 0;

Dynamic Option_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Option_obj > _hx_result = new Option_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Option_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x75a8715f;
		}
	}
}

void Option_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_1871418a7e2fb212_37_refresh)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Option_obj,refresh,(void))

void Option_obj::removeToolTip(){
            	HX_STACKFRAME(&_hx_pos_1871418a7e2fb212_40_removeToolTip)
HXDLIN(  40)		bool _hx_tmp;
HXDLIN(  40)		if (::hx::IsNotNull( ::ui::options::Option_obj::tooltip )) {
HXDLIN(  40)			_hx_tmp = this->stage->contains(::ui::options::Option_obj::tooltip);
            		}
            		else {
HXDLIN(  40)			_hx_tmp = false;
            		}
HXDLIN(  40)		if (_hx_tmp) {
HXLINE(  41)			this->stage->removeChild(::ui::options::Option_obj::tooltip);
HXLINE(  42)			::ui::options::Option_obj::tooltip = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Option_obj,removeToolTip,(void))

void Option_obj::onMouseOver( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_1871418a7e2fb212_46_onMouseOver)
HXLINE(  47)		::ui::options::Option_obj::tooltip =  ::ui::tooltip::TextToolTip_obj::__alloc( HX_CTX ,2565927,8553090,null(),this->tooltipText);
HXLINE(  48)		this->stage->addChild(::ui::options::Option_obj::tooltip);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Option_obj,onMouseOver,(void))

void Option_obj::onRollOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_1871418a7e2fb212_52_onRollOut)
HXDLIN(  52)		this->removeToolTip();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Option_obj,onRollOut,(void))

void Option_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_1871418a7e2fb212_56_onRemovedFromStage)
HXDLIN(  56)		this->removeToolTip();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Option_obj,onRemovedFromStage,(void))

 ::ui::tooltip::ToolTip Option_obj::tooltip;


::hx::ObjectPtr< Option_obj > Option_obj::__new(::String paramName,::String desc,::String tooltipText) {
	::hx::ObjectPtr< Option_obj > __this = new Option_obj();
	__this->__construct(paramName,desc,tooltipText);
	return __this;
}

::hx::ObjectPtr< Option_obj > Option_obj::__alloc(::hx::Ctx *_hx_ctx,::String paramName,::String desc,::String tooltipText) {
	Option_obj *__this = (Option_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Option_obj), true, "ui.options.Option"));
	*(void **)__this = Option_obj::_hx_vtable;
	__this->__construct(paramName,desc,tooltipText);
	return __this;
}

Option_obj::Option_obj()
{
}

void Option_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Option);
	HX_MARK_MEMBER_NAME(paramName,"paramName");
	HX_MARK_MEMBER_NAME(tooltipText,"tooltipText");
	HX_MARK_MEMBER_NAME(desc,"desc");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Option_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(paramName,"paramName");
	HX_VISIT_MEMBER_NAME(tooltipText,"tooltipText");
	HX_VISIT_MEMBER_NAME(desc,"desc");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Option_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"desc") ) { return ::hx::Val( desc ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"paramName") ) { return ::hx::Val( paramName ); }
		if (HX_FIELD_EQ(inName,"onRollOut") ) { return ::hx::Val( onRollOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tooltipText") ) { return ::hx::Val( tooltipText ); }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeToolTip") ) { return ::hx::Val( removeToolTip_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Option_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tooltip") ) { outValue = ( tooltip ); return true; }
	}
	return false;
}

::hx::Val Option_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"desc") ) { desc=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"paramName") ) { paramName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tooltipText") ) { tooltipText=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Option_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tooltip") ) { tooltip=ioValue.Cast<  ::ui::tooltip::ToolTip >(); return true; }
	}
	return false;
}

void Option_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("paramName",78,e9,6d,39));
	outFields->push(HX_("tooltipText",50,e3,ed,e4));
	outFields->push(HX_("desc",51,5e,66,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Option_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Option_obj,paramName),HX_("paramName",78,e9,6d,39)},
	{::hx::fsString,(int)offsetof(Option_obj,tooltipText),HX_("tooltipText",50,e3,ed,e4)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(Option_obj,desc),HX_("desc",51,5e,66,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Option_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::ui::tooltip::ToolTip */ ,(void *) &Option_obj::tooltip,HX_("tooltip",03,ad,8c,6a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Option_obj_sMemberFields[] = {
	HX_("paramName",78,e9,6d,39),
	HX_("tooltipText",50,e3,ed,e4),
	HX_("desc",51,5e,66,42),
	HX_("refresh",db,d9,20,ed),
	HX_("removeToolTip",ff,c0,2e,43),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onRollOut",b2,b1,bc,34),
	HX_("onRemovedFromStage",73,cc,89,12),
	::String(null()) };

static void Option_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Option_obj::tooltip,"tooltip");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Option_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Option_obj::tooltip,"tooltip");
};

#endif

::hx::Class Option_obj::__mClass;

static ::String Option_obj_sStaticFields[] = {
	HX_("tooltip",03,ad,8c,6a),
	::String(null())
};

void Option_obj::__register()
{
	Option_obj _hx_dummy;
	Option_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.options.Option",7f,3f,55,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Option_obj::__GetStatic;
	__mClass->mSetStaticField = &Option_obj::__SetStatic;
	__mClass->mMarkFunc = Option_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Option_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Option_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Option_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Option_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Option_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Option_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace options
