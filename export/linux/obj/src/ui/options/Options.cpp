// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_TitleMenuOption
#include <screens/TitleMenuOption.h>
#endif
#ifndef INCLUDED_sound_Music
#include <sound/Music.h>
#endif
#ifndef INCLUDED_sound_SoundEffectLibrary
#include <sound/SoundEffectLibrary.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_options_ChoiceOption
#include <ui/options/ChoiceOption.h>
#endif
#ifndef INCLUDED_ui_options_KeyMapper
#include <ui/options/KeyMapper.h>
#endif
#ifndef INCLUDED_ui_options_Option
#include <ui/options/Option.h>
#endif
#ifndef INCLUDED_ui_options_Options
#include <ui/options/Options.h>
#endif
#ifndef INCLUDED_ui_options_OptionsTabTitle
#include <ui/options/OptionsTabTitle.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0540cf4196c0d50_16_new,"ui.options.Options","new",0xf1698b06,"ui.options.Options.new","ui/options/Options.hx",16,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_101_setSelected,"ui.options.Options","setSelected",0x9eb7c4c3,"ui.options.Options.setSelected","ui/options/Options.hx",101,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_125_close,"ui.options.Options","close",0xf65947de,"ui.options.Options.close","ui/options/Options.hx",125,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_130_removeOptions,"ui.options.Options","removeOptions",0xe03455a0,"ui.options.Options.removeOptions","ui/options/Options.hx",130,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_138_addControlsOptions,"ui.options.Options","addControlsOptions",0xee2e0281,"ui.options.Options.addControlsOptions","ui/options/Options.hx",138,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_153_addHotKeysOptions,"ui.options.Options","addHotKeysOptions",0x541f5c64,"ui.options.Options.addHotKeysOptions","ui/options/Options.hx",153,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_169_addChatOptions,"ui.options.Options","addChatOptions",0x7490a9df,"ui.options.Options.addChatOptions","ui/options/Options.hx",169,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_178_addGraphicsOptions,"ui.options.Options","addGraphicsOptions",0x0374b4cc,"ui.options.Options.addGraphicsOptions","ui/options/Options.hx",178,0x7256b6ac)
static const ::String _hx_array_data_77425014_11[] = {
	HX_("Faer",88,e2,8e,2e),HX_("Royal",e7,65,96,80),HX_("Ranger",35,d4,25,ec),HX_("Aztec",59,1a,08,be),HX_("Fiery",e9,09,c1,93),
};
static const ::String _hx_array_data_77425014_12[] = {
	HX_("Off",4f,4b,3c,00),HX_("Low",74,0c,3a,00),HX_("Medium",95,c8,5c,33),HX_("High",82,63,e7,2f),HX_("Very High",0c,cb,77,f0),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_185_addSoundOptions,"ui.options.Options","addSoundOptions",0x4d1c1db6,"ui.options.Options.addSoundOptions","ui/options/Options.hx",185,0x7256b6ac)
static const ::String _hx_array_data_77425014_14[] = {
	HX_("On",3f,45,00,00),HX_("Off",4f,4b,3c,00),
};
static const ::String _hx_array_data_77425014_15[] = {
	HX_("On",3f,45,00,00),HX_("Off",4f,4b,3c,00),
};
static const ::String _hx_array_data_77425014_16[] = {
	HX_("On",3f,45,00,00),HX_("Off",4f,4b,3c,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_194_addOption,"ui.options.Options","addOption",0xe1a7439c,"ui.options.Options.addOption","ui/options/Options.hx",194,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_203_refresh,"ui.options.Options","refresh",0xa91fdf81,"ui.options.Options.refresh","ui/options/Options.hx",203,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_213_onContinueClick,"ui.options.Options","onContinueClick",0xae73b968,"ui.options.Options.onContinueClick","ui/options/Options.hx",213,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_216_onResetToDefaultsClick,"ui.options.Options","onResetToDefaultsClick",0xd3f2bea5,"ui.options.Options.onResetToDefaultsClick","ui/options/Options.hx",216,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_222_onHomeClick,"ui.options.Options","onHomeClick",0x5059c530,"ui.options.Options.onHomeClick","ui/options/Options.hx",222,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_229_onTabClick,"ui.options.Options","onTabClick",0xdde5580c,"ui.options.Options.onTabClick","ui/options/Options.hx",229,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_232_onAddedToStage,"ui.options.Options","onAddedToStage",0x9b161d3c,"ui.options.Options.onAddedToStage","ui/options/Options.hx",232,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_244_onRemovedFromStage,"ui.options.Options","onRemovedFromStage",0xc82ffc8d,"ui.options.Options.onRemovedFromStage","ui/options/Options.hx",244,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_249_onKeyDown,"ui.options.Options","onKeyDown",0x71fa5d68,"ui.options.Options.onKeyDown","ui/options/Options.hx",249,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_261_onChange,"ui.options.Options","onChange",0x5a457389,"ui.options.Options.onChange","ui/options/Options.hx",261,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_37_onPlayMusicChange,"ui.options.Options","onPlayMusicChange",0xa68bf928,"ui.options.Options.onPlayMusicChange","ui/options/Options.hx",37,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_41_onPlaySoundEffectsChange,"ui.options.Options","onPlaySoundEffectsChange",0x1a65d8b0,"ui.options.Options.onPlaySoundEffectsChange","ui/options/Options.hx",41,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_257_onKeyUp,"ui.options.Options","onKeyUp",0x313b5de1,"ui.options.Options.onKeyUp","ui/options/Options.hx",257,0x7256b6ac)
HX_LOCAL_STACK_FRAME(_hx_pos_d0540cf4196c0d50_22_boot,"ui.options.Options","boot",0x43091acc,"ui.options.Options.boot","ui/options/Options.hx",22,0x7256b6ac)
static const ::String _hx_array_data_77425014_32[] = {
	HX_("Controls",96,42,6e,11),HX_("Hot Keys",a7,0f,17,1e),HX_("Chat",f8,8a,98,2c),HX_("Graphics",eb,b4,19,ec),HX_("Sound",af,fc,f9,13),
};
namespace ui{
namespace options{

void Options_obj::__construct( ::game::GameSprite gs){
            	HX_GC_STACKFRAME(&_hx_pos_d0540cf4196c0d50_16_new)
HXLINE(  34)		this->optionIndex = 0;
HXLINE(  32)		this->selected = null();
HXLINE(  53)		super::__construct();
HXLINE(  55)		 ::ui::options::OptionsTabTitle tab = null();
HXLINE(  56)		this->tabs = ::Array_obj< ::Dynamic>::__new();
HXLINE(  57)		this->options = ::Array_obj< ::Dynamic>::__new();
HXLINE(  58)		this->gs = gs;
HXLINE(  60)		this->get_graphics()->clear();
HXLINE(  61)		this->get_graphics()->lineStyle(4,6710886,null(),null(),null(),null(),null(),null());
HXLINE(  62)		this->get_graphics()->beginFill(1776411,((Float)0.8));
HXLINE(  63)		this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(800) ),( (Float)(600) ));
HXLINE(  64)		this->get_graphics()->endFill();
HXLINE(  66)		this->title =  ::ui::SimpleText_obj::__alloc( HX_CTX ,36,16777215,false,800,0,null());
HXLINE(  67)		this->title->setBold(true);
HXLINE(  68)		this->title->set_htmlText(HX_("<p align=\"center\">Options</p>",d0,ca,a0,4f));
HXLINE(  69)		this->title->set_autoSize(0);
HXLINE(  70)		 ::ui::SimpleText _hx_tmp = this->title;
HXDLIN(  70)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  71)		this->title->updateMetrics();
HXLINE(  72)		 ::ui::SimpleText _hx_tmp1 = this->title;
HXDLIN(  72)		_hx_tmp1->set_x((((Float)400.) - (this->title->get_width() / ( (Float)(2) ))));
HXLINE(  73)		this->title->set_y(( (Float)(8) ));
HXLINE(  74)		this->addChild(this->title);
HXLINE(  76)		this->continueButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("continue",67,e0,c8,31),36,false);
HXLINE(  77)		this->continueButton->addEventListener(HX_("click",48,7c,5e,48),this->onContinueClick_dyn(),null(),null(),null());
HXLINE(  78)		this->addChild(this->continueButton);
HXLINE(  79)		this->resetToDefaultsButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("defaults",92,d0,99,af),22,false);
HXLINE(  80)		this->resetToDefaultsButton->addEventListener(HX_("click",48,7c,5e,48),this->onResetToDefaultsClick_dyn(),null(),null(),null());
HXLINE(  81)		this->addChild(this->resetToDefaultsButton);
HXLINE(  82)		this->homeButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("menu",9f,45,59,48),22,false);
HXLINE(  83)		this->homeButton->addEventListener(HX_("click",48,7c,5e,48),this->onHomeClick_dyn(),null(),null(),null());
HXLINE(  84)		this->addChild(this->homeButton);
HXLINE(  86)		int xOffset = 14;
HXLINE(  87)		{
HXLINE(  87)			int _g = 0;
HXDLIN(  87)			int _g1 = ::ui::options::Options_obj::TABS->length;
HXDLIN(  87)			while((_g < _g1)){
HXLINE(  87)				_g = (_g + 1);
HXLINE(  88)				tab =  ::ui::options::OptionsTabTitle_obj::__alloc( HX_CTX ,::ui::options::Options_obj::TABS->__get((_g - 1)));
HXLINE(  89)				tab->set_x(( (Float)(xOffset) ));
HXLINE(  90)				tab->set_y(( (Float)(70) ));
HXLINE(  91)				this->addChild(tab);
HXLINE(  92)				tab->addEventListener(HX_("click",48,7c,5e,48),this->onTabClick_dyn(),null(),null(),null());
HXLINE(  93)				this->tabs->push(tab);
HXLINE(  94)				xOffset = (xOffset + 108);
            			}
            		}
HXLINE(  97)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  98)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic Options_obj::__CreateEmpty() { return new Options_obj; }

void *Options_obj::_hx_vtable = 0;

Dynamic Options_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Options_obj > _hx_result = new Options_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Options_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7dbac234;
		}
	}
}

void Options_obj::setSelected( ::ui::options::OptionsTabTitle tab){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_101_setSelected)
HXLINE( 102)		if (::hx::IsInstanceEq( tab,this->selected )) {
HXLINE( 103)			return;
            		}
HXLINE( 105)		if (::hx::IsNotNull( this->selected )) {
HXLINE( 106)			this->selected->setSelected(false);
            		}
HXLINE( 108)		this->selected = tab;
HXLINE( 109)		this->selected->setSelected(true);
HXLINE( 110)		this->removeOptions();
HXLINE( 111)		::String _hx_switch_0 = this->selected->text;
            		if (  (_hx_switch_0==HX_("Chat",f8,8a,98,2c)) ){
HXLINE( 117)			this->addChatOptions();
HXDLIN( 117)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Controls",96,42,6e,11)) ){
HXLINE( 113)			this->addControlsOptions();
HXDLIN( 113)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Graphics",eb,b4,19,ec)) ){
HXLINE( 119)			this->addGraphicsOptions();
HXDLIN( 119)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Hot Keys",a7,0f,17,1e)) ){
HXLINE( 115)			this->addHotKeysOptions();
HXDLIN( 115)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Sound",af,fc,f9,13)) ){
HXLINE( 121)			this->addSoundOptions();
HXDLIN( 121)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,setSelected,(void))

void Options_obj::close(){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_125_close)
HXLINE( 126)		this->stage->set_focus(null());
HXLINE( 127)		this->parent->removeChild(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,close,(void))

void Options_obj::removeOptions(){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_130_removeOptions)
HXLINE( 131)		{
HXLINE( 131)			int _g = 0;
HXDLIN( 131)			::Array< ::Dynamic> _g1 = this->options;
HXDLIN( 131)			while((_g < _g1->length)){
HXLINE( 131)				 ::openfl::display::Sprite option = _g1->__get(_g).StaticCast<  ::openfl::display::Sprite >();
HXDLIN( 131)				_g = (_g + 1);
HXLINE( 132)				this->removeChild(option);
            			}
            		}
HXLINE( 134)		this->options->removeRange(0,this->options->length);
HXLINE( 135)		this->optionIndex = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,removeOptions,(void))

void Options_obj::addControlsOptions(){
            	HX_GC_STACKFRAME(&_hx_pos_d0540cf4196c0d50_138_addControlsOptions)
HXLINE( 139)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("moveUp",cc,d3,ac,cc),HX_("Move Up",0a,58,b5,17),HX_("This key will move character up",16,61,8b,ca),null()));
HXLINE( 140)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("moveLeft",b8,73,67,ea),HX_("Move Left",76,03,c8,6b),HX_("This key will move character to the left",40,07,0d,cd),null()));
HXLINE( 141)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("moveDown",13,64,25,e5),HX_("Move Down",d1,f3,85,66),HX_("This key will move character down",dd,57,b9,01),null()));
HXLINE( 142)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("moveRight",0b,db,2a,a7),HX_("Move Right",8d,11,48,5a),HX_("This key will move character to the right",83,5e,66,15),null()));
HXLINE( 143)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("rotateLeft",02,44,bb,7f),HX_("Rotate Left",ec,2b,2a,c2),HX_("This key will rotate the camera to the left",89,c2,e0,78),null()));
HXLINE( 144)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("rotateRight",81,4b,2d,bb),HX_("Rotate Right",57,50,c9,99),HX_("This key will rotate the camera to the right",1a,83,d6,c2),null()));
HXLINE( 145)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("useAbility",23,84,14,b0),HX_("Use Ability",91,b0,8c,05),HX_("This key will activate your ability",7f,69,0a,c1),null()));
HXLINE( 146)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("resetCamera",d4,c9,a0,57),HX_("Reset Camera Angle",29,31,9e,9c),HX_("This key will reset the camera angle to the default position",5f,46,6f,13),null()));
HXLINE( 147)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("perfStats",76,8c,b3,3e),HX_("Toggle Performance Stats",43,20,59,c7),HX_("This key will toggle a display of fps and memory usage",ad,48,51,69),null()));
HXLINE( 148)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("toggleCentering",f9,07,b1,23),HX_("Toggle Centering",a1,b2,bf,6f),HX_("This key will toggle the position between centered and offset",a9,f3,8d,07),null()));
HXLINE( 149)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("interact",b6,8b,6c,28),HX_("Interact",d6,47,1e,02),HX_("This key will allow you to interact with world objects",34,1c,fc,4c),null()));
HXLINE( 150)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("walk",09,5d,f2,4e),HX_("Walk",29,89,cb,39),HX_("This key will allow you to move slowly",9b,fc,4f,33),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,addControlsOptions,(void))

void Options_obj::addHotKeysOptions(){
            	HX_GC_STACKFRAME(&_hx_pos_d0540cf4196c0d50_153_addHotKeysOptions)
HXLINE( 154)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("healthVial",9a,01,e5,0a),HX_("Use Health Vial",69,5b,ca,e5),HX_("This key will use health vials if available",91,9c,83,cf),null()));
HXLINE( 155)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("magicVial",ab,66,56,6d),HX_("Use Magic Vial",4a,d2,20,16),HX_("This key will use magic vials if available",e8,88,cc,bf),null()));
HXLINE( 156)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv1",20,46,bb,45),HX_("Use Inventory Slot 1",ec,32,da,ce),HX_("Use item in inventory slot 1",ba,ca,53,ef),null()));
HXLINE( 157)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv2",21,46,bb,45),HX_("Use Inventory Slot 2",ed,32,da,ce),HX_("Use item in inventory slot 2",bb,ca,53,ef),null()));
HXLINE( 158)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv3",22,46,bb,45),HX_("Use Inventory Slot 3",ee,32,da,ce),HX_("Use item in inventory slot 3",bc,ca,53,ef),null()));
HXLINE( 159)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv4",23,46,bb,45),HX_("Use Inventory Slot 4",ef,32,da,ce),HX_("Use item in inventory slot 4",bd,ca,53,ef),null()));
HXLINE( 160)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv5",24,46,bb,45),HX_("Use Inventory Slot 5",f0,32,da,ce),HX_("Use item in inventory slot 5",be,ca,53,ef),null()));
HXLINE( 161)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv6",25,46,bb,45),HX_("Use Inventory Slot 6",f1,32,da,ce),HX_("Use item in inventory slot 6",bf,ca,53,ef),null()));
HXLINE( 162)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv7",26,46,bb,45),HX_("Use Inventory Slot 7",f2,32,da,ce),HX_("Use item in inventory slot 7",c0,ca,53,ef),null()));
HXLINE( 163)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("inv8",27,46,bb,45),HX_("Use Inventory Slot 8",f3,32,da,ce),HX_("Use item in inventory slot 8",c1,ca,53,ef),null()));
HXLINE( 164)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("goToHub",b2,46,fe,c3),HX_("Escape To Hub",2f,56,21,aa),HX_("This key will instantly escape you to the Hub",24,b1,99,3c),null()));
HXLINE( 165)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("options",5e,33,fe,df),HX_("Show Options",3b,85,8b,ed),HX_("This key will bring up the options screen",49,0c,3b,2d),null()));
HXLINE( 166)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("switchTabs",92,30,e7,6b),HX_("Switch Tabs",2a,26,27,e9),HX_("This key will switch from available tabs",2a,81,39,66),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,addHotKeysOptions,(void))

void Options_obj::addChatOptions(){
            	HX_GC_STACKFRAME(&_hx_pos_d0540cf4196c0d50_169_addChatOptions)
HXLINE( 170)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("chat",d8,5e,bf,41),HX_("Activate Chat",65,06,cf,20),HX_("This key will bring up the chat input box",08,60,c8,52),null()));
HXLINE( 171)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("chatCmd",82,ae,a8,d0),HX_("Start Chat Command",a1,ea,e4,82),HX_("This key will bring up the chat with a '/' prepended to allow for commands",5b,c2,77,f1),null()));
HXLINE( 172)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("respond",55,89,0b,68),HX_("Begin Tell",c8,23,f2,7d),HX_("This key will bring up a tell (private message) in the chat input box",1a,84,06,00),null()));
HXLINE( 173)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("guildChat",2b,a2,b2,00),HX_("Begin Guild Chat",5c,7d,45,c0),HX_("This key will bring up a guild chat in the chat input box",07,5c,ec,9a),null()));
HXLINE( 174)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("chatUp",53,0f,77,b7),HX_("Scroll Chat Up",b0,37,c2,20),HX_("This key will scroll up to older messages in the chat buffer",fe,e1,1a,02),null()));
HXLINE( 175)		this->addOption( ::ui::options::KeyMapper_obj::__alloc( HX_CTX ,HX_("chatDown",5a,cf,9a,c3),HX_("Scroll Chat Down",f7,88,46,74),HX_("This key will scroll down to newer messages in the chat buffer",10,5c,cf,2f),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,addChatOptions,(void))

void Options_obj::addGraphicsOptions(){
            	HX_GC_STACKFRAME(&_hx_pos_d0540cf4196c0d50_178_addGraphicsOptions)
HXLINE( 179)		this->addOption( ::ui::options::ChoiceOption_obj::__alloc( HX_CTX ,HX_("selectedCursor",91,e3,46,c2),::Array_obj< ::String >::fromData( _hx_array_data_77425014_11,5),::cpp::VirtualArray_obj::__new(5)->init(0,HX_("0",30,00,00,00))->init(1,HX_("1",31,00,00,00))->init(2,HX_("2",32,00,00,00))->init(3,HX_("3",33,00,00,00))->init(4,HX_("4",34,00,00,00)),HX_("Cursor Type",44,30,9b,7e),HX_("This toggles between various cursor types",5f,81,c8,71),::Main_obj::refreshCursor_dyn()));
HXLINE( 181)		this->addOption( ::ui::options::ChoiceOption_obj::__alloc( HX_CTX ,HX_("glowType",e7,37,88,ac),::Array_obj< ::String >::fromData( _hx_array_data_77425014_12,5),::cpp::VirtualArray_obj::__new(5)->init(0,( (unsigned char)(0) ))->init(1,( (unsigned char)(1) ))->init(2,( (unsigned char)(2) ))->init(3,( (unsigned char)(3) ))->init(4,( (unsigned char)(4) )),HX_("Object Glow",8e,4f,47,5c),HX_("This toggles between object glows of various quality",21,90,d3,b2),::Main_obj::refreshCursor_dyn()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,addGraphicsOptions,(void))

void Options_obj::addSoundOptions(){
            	HX_GC_STACKFRAME(&_hx_pos_d0540cf4196c0d50_185_addSoundOptions)
HXLINE( 186)		this->addOption( ::ui::options::ChoiceOption_obj::__alloc( HX_CTX ,HX_("playMusic",11,fe,3e,31),::Array_obj< ::String >::fromData( _hx_array_data_77425014_14,2),::cpp::VirtualArray_obj::__new(2)->init(0,true)->init(1,false),HX_("Play Music",79,ed,d3,d7),HX_("This toggles whether music is played",20,51,87,47),::ui::options::Options_obj::onPlayMusicChange_dyn()));
HXLINE( 188)		this->addOption( ::ui::options::ChoiceOption_obj::__alloc( HX_CTX ,HX_("playSfx",f1,56,07,8a),::Array_obj< ::String >::fromData( _hx_array_data_77425014_15,2),::cpp::VirtualArray_obj::__new(2)->init(0,true)->init(1,false),HX_("Play Sound Effects",25,d5,37,65),HX_("This toggles whether sound effects are played",1c,59,88,71),::ui::options::Options_obj::onPlaySoundEffectsChange_dyn()));
HXLINE( 190)		this->addOption( ::ui::options::ChoiceOption_obj::__alloc( HX_CTX ,HX_("playWepSfx",17,52,fb,ac),::Array_obj< ::String >::fromData( _hx_array_data_77425014_16,2),::cpp::VirtualArray_obj::__new(2)->init(0,true)->init(1,false),HX_("Play Weapon Sounds",7c,42,87,75),HX_("This toggles whether weapon sounds are played",65,b1,50,21),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,addSoundOptions,(void))

void Options_obj::addOption( ::openfl::display::Sprite option){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_194_addOption)
HXLINE( 195)		Float _hx_tmp;
HXDLIN( 195)		if ((::hx::Mod(this->optionIndex,2) == 0)) {
HXLINE( 195)			_hx_tmp = ( (Float)(20) );
            		}
            		else {
HXLINE( 195)			_hx_tmp = ( (Float)(415) );
            		}
HXDLIN( 195)		option->set_x(_hx_tmp);
HXLINE( 196)		option->set_y(( (Float)(((::Std_obj::_hx_int((( (Float)(this->optionIndex) ) / ( (Float)(2) ))) * 62) + 122)) ));
HXLINE( 197)		this->addChild(option);
HXLINE( 198)		option->addEventListener(HX_("change",70,91,72,b7),this->onChange_dyn(),null(),null(),null());
HXLINE( 199)		this->options->push(option);
HXLINE( 200)		this->optionIndex++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,addOption,(void))

void Options_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_203_refresh)
HXLINE( 204)		 ::ui::options::Option option = null();
HXLINE( 205)		{
HXLINE( 205)			int _g = 0;
HXDLIN( 205)			int _g1 = this->options->length;
HXDLIN( 205)			while((_g < _g1)){
HXLINE( 205)				_g = (_g + 1);
HXLINE( 206)				option = ::hx::TCast<  ::ui::options::Option >::cast(this->options->__get((_g - 1)).StaticCast<  ::openfl::display::Sprite >());
HXLINE( 207)				if (::hx::IsNotNull( option )) {
HXLINE( 208)					option->refresh();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Options_obj,refresh,(void))

void Options_obj::onContinueClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_213_onContinueClick)
HXDLIN( 213)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onContinueClick,(void))

void Options_obj::onResetToDefaultsClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_216_onResetToDefaultsClick)
HXLINE( 217)		::util::Settings_obj::setDefaults();
HXLINE( 218)		::util::Settings_obj::save();
HXLINE( 219)		this->refresh();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onResetToDefaultsClick,(void))

void Options_obj::onHomeClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_222_onHomeClick)
HXLINE( 223)		this->close();
HXLINE( 224)		::network::NetworkHandler_obj::disconnect();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onHomeClick,(void))

void Options_obj::onTabClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_229_onTabClick)
HXDLIN( 229)		this->setSelected(::hx::TCast<  ::ui::options::OptionsTabTitle >::cast(event->target));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onTabClick,(void))

void Options_obj::onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_232_onAddedToStage)
HXLINE( 233)		 ::screens::TitleMenuOption _hx_tmp = this->continueButton;
HXDLIN( 233)		_hx_tmp->set_x((( (Float)(400) ) - (this->continueButton->get_width() / ( (Float)(2) ))));
HXLINE( 234)		this->continueButton->set_y(( (Float)(520) ));
HXLINE( 235)		this->resetToDefaultsButton->set_x(( (Float)(20) ));
HXLINE( 236)		this->resetToDefaultsButton->set_y(( (Float)(532) ));
HXLINE( 237)		 ::screens::TitleMenuOption _hx_tmp1 = this->homeButton;
HXDLIN( 237)		_hx_tmp1->set_x((( (Float)(780) ) - this->homeButton->get_width()));
HXLINE( 238)		this->homeButton->set_y(( (Float)(532) ));
HXLINE( 239)		this->setSelected(this->tabs->__get(0).StaticCast<  ::ui::options::OptionsTabTitle >());
HXLINE( 240)		this->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),false,1,null());
HXLINE( 241)		this->stage->addEventListener(HX_("keyUp",da,b9,fe,de),::ui::options::Options_obj::onKeyUp_dyn(),false,1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onAddedToStage,(void))

void Options_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_244_onRemovedFromStage)
HXLINE( 245)		this->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),false);
HXLINE( 246)		this->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),::ui::options::Options_obj::onKeyUp_dyn(),false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onRemovedFromStage,(void))

void Options_obj::onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_249_onKeyDown)
HXLINE( 250)		if ((event->keyCode == ::util::Settings_obj::options)) {
HXLINE( 251)			this->close();
            		}
HXLINE( 253)		event->stopImmediatePropagation();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onKeyDown,(void))

void Options_obj::onChange( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_261_onChange)
HXDLIN( 261)		this->refresh();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onChange,(void))

::Array< ::String > Options_obj::TABS;

void Options_obj::onPlayMusicChange(){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_37_onPlayMusicChange)
HXDLIN(  37)		::sound::Music_obj::setPlayMusic(::util::Settings_obj::playMusic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Options_obj,onPlayMusicChange,(void))

void Options_obj::onPlaySoundEffectsChange(){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_41_onPlaySoundEffectsChange)
HXDLIN(  41)		::sound::SoundEffectLibrary_obj::setPlaySFX(::util::Settings_obj::playSfx);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Options_obj,onPlaySoundEffectsChange,(void))

void Options_obj::onKeyUp( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_257_onKeyUp)
HXDLIN( 257)		event->stopImmediatePropagation();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Options_obj,onKeyUp,(void))


::hx::ObjectPtr< Options_obj > Options_obj::__new( ::game::GameSprite gs) {
	::hx::ObjectPtr< Options_obj > __this = new Options_obj();
	__this->__construct(gs);
	return __this;
}

::hx::ObjectPtr< Options_obj > Options_obj::__alloc(::hx::Ctx *_hx_ctx, ::game::GameSprite gs) {
	Options_obj *__this = (Options_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Options_obj), true, "ui.options.Options"));
	*(void **)__this = Options_obj::_hx_vtable;
	__this->__construct(gs);
	return __this;
}

Options_obj::Options_obj()
{
}

void Options_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Options);
	HX_MARK_MEMBER_NAME(gs,"gs");
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(continueButton,"continueButton");
	HX_MARK_MEMBER_NAME(resetToDefaultsButton,"resetToDefaultsButton");
	HX_MARK_MEMBER_NAME(homeButton,"homeButton");
	HX_MARK_MEMBER_NAME(tabs,"tabs");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(optionIndex,"optionIndex");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Options_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gs,"gs");
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(continueButton,"continueButton");
	HX_VISIT_MEMBER_NAME(resetToDefaultsButton,"resetToDefaultsButton");
	HX_VISIT_MEMBER_NAME(homeButton,"homeButton");
	HX_VISIT_MEMBER_NAME(tabs,"tabs");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(optionIndex,"optionIndex");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Options_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gs") ) { return ::hx::Val( gs ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tabs") ) { return ::hx::Val( tabs ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"onChange") ) { return ::hx::Val( onChange_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addOption") ) { return ::hx::Val( addOption_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return ::hx::Val( onKeyDown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"homeButton") ) { return ::hx::Val( homeButton ); }
		if (HX_FIELD_EQ(inName,"onTabClick") ) { return ::hx::Val( onTabClick_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionIndex") ) { return ::hx::Val( optionIndex ); }
		if (HX_FIELD_EQ(inName,"setSelected") ) { return ::hx::Val( setSelected_dyn() ); }
		if (HX_FIELD_EQ(inName,"onHomeClick") ) { return ::hx::Val( onHomeClick_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeOptions") ) { return ::hx::Val( removeOptions_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"continueButton") ) { return ::hx::Val( continueButton ); }
		if (HX_FIELD_EQ(inName,"addChatOptions") ) { return ::hx::Val( addChatOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addSoundOptions") ) { return ::hx::Val( addSoundOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"onContinueClick") ) { return ::hx::Val( onContinueClick_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addHotKeysOptions") ) { return ::hx::Val( addHotKeysOptions_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addControlsOptions") ) { return ::hx::Val( addControlsOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGraphicsOptions") ) { return ::hx::Val( addGraphicsOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"resetToDefaultsButton") ) { return ::hx::Val( resetToDefaultsButton ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"onResetToDefaultsClick") ) { return ::hx::Val( onResetToDefaultsClick_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Options_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"TABS") ) { outValue = ( TABS ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { outValue = onKeyUp_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onPlayMusicChange") ) { outValue = onPlayMusicChange_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"onPlaySoundEffectsChange") ) { outValue = onPlaySoundEffectsChange_dyn(); return true; }
	}
	return false;
}

::hx::Val Options_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gs") ) { gs=inValue.Cast<  ::game::GameSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tabs") ) { tabs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast<  ::ui::options::OptionsTabTitle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"homeButton") ) { homeButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionIndex") ) { optionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"continueButton") ) { continueButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"resetToDefaultsButton") ) { resetToDefaultsButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Options_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"TABS") ) { TABS=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Options_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gs",2c,5a,00,00));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("continueButton",b9,7d,48,49));
	outFields->push(HX_("resetToDefaultsButton",ee,ce,96,1e));
	outFields->push(HX_("homeButton",71,81,d4,65));
	outFields->push(HX_("tabs",7e,b0,f6,4c));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("optionIndex",5d,8f,6b,60));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Options_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::game::GameSprite */ ,(int)offsetof(Options_obj,gs),HX_("gs",2c,5a,00,00)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(Options_obj,title),HX_("title",98,15,3b,10)},
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(Options_obj,continueButton),HX_("continueButton",b9,7d,48,49)},
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(Options_obj,resetToDefaultsButton),HX_("resetToDefaultsButton",ee,ce,96,1e)},
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(Options_obj,homeButton),HX_("homeButton",71,81,d4,65)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Options_obj,tabs),HX_("tabs",7e,b0,f6,4c)},
	{::hx::fsObject /*  ::ui::options::OptionsTabTitle */ ,(int)offsetof(Options_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Options_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsInt,(int)offsetof(Options_obj,optionIndex),HX_("optionIndex",5d,8f,6b,60)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Options_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Options_obj::TABS,HX_("TABS",7e,78,b7,37)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Options_obj_sMemberFields[] = {
	HX_("gs",2c,5a,00,00),
	HX_("title",98,15,3b,10),
	HX_("continueButton",b9,7d,48,49),
	HX_("resetToDefaultsButton",ee,ce,96,1e),
	HX_("homeButton",71,81,d4,65),
	HX_("tabs",7e,b0,f6,4c),
	HX_("selected",5b,2a,6d,b1),
	HX_("options",5e,33,fe,df),
	HX_("optionIndex",5d,8f,6b,60),
	HX_("setSelected",1d,f4,cd,e1),
	HX_("close",b8,17,63,48),
	HX_("removeOptions",7a,8f,b8,b8),
	HX_("addControlsOptions",67,d2,87,38),
	HX_("addHotKeysOptions",3e,8b,0e,1b),
	HX_("addChatOptions",c5,0e,bf,0f),
	HX_("addGraphicsOptions",b2,84,ce,4d),
	HX_("addSoundOptions",10,02,86,7a),
	HX_("addOption",76,08,9f,e3),
	HX_("refresh",db,d9,20,ed),
	HX_("onContinueClick",c2,9d,dd,db),
	HX_("onResetToDefaultsClick",8b,79,09,1f),
	HX_("onHomeClick",8a,f4,6f,93),
	HX_("onTabClick",f2,d1,b9,94),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onChange",ef,87,1f,97),
	::String(null()) };

static void Options_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Options_obj::TABS,"TABS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Options_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Options_obj::TABS,"TABS");
};

#endif

::hx::Class Options_obj::__mClass;

static ::String Options_obj_sStaticFields[] = {
	HX_("TABS",7e,78,b7,37),
	HX_("onPlayMusicChange",02,28,7b,6d),
	HX_("onPlaySoundEffectsChange",16,99,cd,64),
	HX_("onKeyUp",3b,58,3c,75),
	::String(null())
};

void Options_obj::__register()
{
	Options_obj _hx_dummy;
	Options_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.options.Options",14,50,42,77);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Options_obj::__GetStatic;
	__mClass->mSetStaticField = &Options_obj::__SetStatic;
	__mClass->mMarkFunc = Options_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Options_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Options_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Options_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Options_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Options_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Options_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Options_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d0540cf4196c0d50_22_boot)
HXDLIN(  22)		TABS = ::Array_obj< ::String >::fromData( _hx_array_data_77425014_32,5);
            	}
}

} // end namespace ui
} // end namespace options
