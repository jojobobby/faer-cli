// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_GameObjectListItem
#include <ui/GameObjectListItem.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5f1c97bd5eef44a4_13_new,"ui.GameObjectListItem","new",0xde2c66ee,"ui.GameObjectListItem.new","ui/GameObjectListItem.hx",13,0x38ac9aa1)
HX_LOCAL_STACK_FRAME(_hx_pos_5f1c97bd5eef44a4_47_draw,"ui.GameObjectListItem","draw",0x821b51b6,"ui.GameObjectListItem.draw","ui/GameObjectListItem.hx",47,0x38ac9aa1)
HX_LOCAL_STACK_FRAME(_hx_pos_5f1c97bd5eef44a4_75_internalDraw,"ui.GameObjectListItem","internalDraw",0x20a3c993,"ui.GameObjectListItem.internalDraw","ui/GameObjectListItem.hx",75,0x38ac9aa1)
namespace ui{

void GameObjectListItem_obj::__construct(int color,bool longVersion, ::objects::GameObject go){
            	HX_GC_STACKFRAME(&_hx_pos_5f1c97bd5eef44a4_13_new)
HXLINE(  23)		this->drawCT = null();
HXLINE(  22)		this->isHtml = false;
HXLINE(  21)		this->drawText = HX_("",00,00,00,00);
HXLINE(  20)		this->drawColor = 16777215;
HXLINE(  19)		this->color = 0;
HXLINE(  14)		this->longVersion = false;
HXLINE(  26)		super::__construct();
HXLINE(  28)		this->longVersion = longVersion;
HXLINE(  29)		this->color = color;
HXLINE(  30)		this->portrait =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  31)		this->portrait->set_x(( (Float)(-4) ));
HXLINE(  32)		this->portrait->set_y(( (Float)(-4) ));
HXLINE(  33)		this->addChild(this->portrait);
HXLINE(  34)		if (this->longVersion) {
HXLINE(  35)			this->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,13,color,false,0,0,null());
            		}
            		else {
HXLINE(  37)			this->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,13,color,false,66,20,null());
HXLINE(  38)			this->nameText->setBold(true);
            		}
HXLINE(  40)		this->nameText->set_x(( (Float)(32) ));
HXLINE(  41)		this->nameText->set_y(( (Float)(6) ));
HXLINE(  42)		 ::ui::SimpleText _hx_tmp = this->nameText;
HXDLIN(  42)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  43)		this->addChild(this->nameText);
HXLINE(  44)		this->draw(go,null());
            	}

Dynamic GameObjectListItem_obj::__CreateEmpty() { return new GameObjectListItem_obj; }

void *GameObjectListItem_obj::_hx_vtable = 0;

Dynamic GameObjectListItem_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameObjectListItem_obj > _hx_result = new GameObjectListItem_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool GameObjectListItem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x18cd43f6) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x18cd43f6;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void GameObjectListItem_obj::draw( ::objects::GameObject go, ::openfl::geom::ColorTransform ct){
            	HX_STACKFRAME(&_hx_pos_5f1c97bd5eef44a4_47_draw)
HXLINE(  48)		this->go = go;
HXLINE(  49)		this->set_visible(::hx::IsNotNull( this->go ));
HXLINE(  50)		if (!(this->get_visible())) {
HXLINE(  51)			return;
            		}
HXLINE(  53)		 ::openfl::display::Bitmap _hx_tmp = this->portrait;
HXDLIN(  53)		_hx_tmp->set_bitmapData(::hx::TCast<  ::objects::Player >::cast(this->go)->getPortrait(null(),null()));
HXLINE(  54)		int drawColor = this->color;
HXLINE(  55)		::String drawText = HX_("",00,00,00,00);
HXLINE(  56)		bool isHtml = false;
HXLINE(  57)		 ::objects::Player p = ::hx::TCast<  ::objects::Player >::cast(this->go);
HXLINE(  58)		if (::hx::IsNotNull( p )) {
HXLINE(  59)			if (p->isFellowGuild) {
HXLINE(  59)				drawColor = ( (int)(( (unsigned int)(10944349) )) );
            			}
            			else {
HXLINE(  59)				drawColor = ( (int)(( (unsigned int)(16572160) )) );
            			}
            		}
HXLINE(  61)		if (this->longVersion) {
HXLINE(  62)			isHtml = true;
HXLINE(  63)			bool _hx_tmp1;
HXDLIN(  63)			if (::hx::IsNotNull( this->go->name )) {
HXLINE(  63)				_hx_tmp1 = (this->go->name != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  63)				_hx_tmp1 = false;
            			}
HXDLIN(  63)			if (_hx_tmp1) {
HXLINE(  64)				::String drawText1 = ((HX_("<b>",d8,dc,2d,00) + this->go->name) + HX_("</b> (",97,fa,34,4e));
HXDLIN(  64)				drawText = ((drawText1 + ::objects::ObjectLibrary_obj::typeToDisplayId->get(this->go->objectType)) + HX_(")",29,00,00,00));
            			}
            			else {
HXLINE(  66)				drawText = ((HX_("<b>",d8,dc,2d,00) + ::objects::ObjectLibrary_obj::typeToDisplayId->get(this->go->objectType)) + HX_("</b>",cf,cc,cc,27));
            			}
            		}
            		else {
HXLINE(  67)			bool _hx_tmp2;
HXDLIN(  67)			if (::hx::IsNotNull( this->go->name )) {
HXLINE(  67)				_hx_tmp2 = (this->go->name == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  67)				_hx_tmp2 = true;
            			}
HXDLIN(  67)			if (_hx_tmp2) {
HXLINE(  68)				drawText = ::objects::ObjectLibrary_obj::typeToDisplayId->get_string(this->go->objectType);
            			}
            			else {
HXLINE(  70)				drawText = this->go->name;
            			}
            		}
HXLINE(  72)		this->internalDraw(drawColor,drawText,isHtml,ct);
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameObjectListItem_obj,draw,(void))

void GameObjectListItem_obj::internalDraw(int drawColor,::String drawText,bool isHtml, ::openfl::geom::ColorTransform drawCT){
            	HX_STACKFRAME(&_hx_pos_5f1c97bd5eef44a4_75_internalDraw)
HXLINE(  76)		bool _hx_tmp;
HXDLIN(  76)		bool _hx_tmp1;
HXDLIN(  76)		bool _hx_tmp2;
HXDLIN(  76)		if ((drawColor == this->drawColor)) {
HXLINE(  76)			_hx_tmp2 = (drawText == this->drawText);
            		}
            		else {
HXLINE(  76)			_hx_tmp2 = false;
            		}
HXDLIN(  76)		if (_hx_tmp2) {
HXLINE(  76)			_hx_tmp1 = (isHtml == this->isHtml);
            		}
            		else {
HXLINE(  76)			_hx_tmp1 = false;
            		}
HXDLIN(  76)		if (_hx_tmp1) {
HXLINE(  76)			_hx_tmp = ::hx::IsInstanceEq( drawCT,this->drawCT );
            		}
            		else {
HXLINE(  76)			_hx_tmp = false;
            		}
HXDLIN(  76)		if (_hx_tmp) {
HXLINE(  77)			return;
            		}
HXLINE(  79)		this->nameText->setColor(drawColor);
HXLINE(  80)		if (isHtml) {
HXLINE(  81)			this->nameText->set_htmlText(drawText);
            		}
            		else {
HXLINE(  83)			this->nameText->set_text(drawText);
            		}
HXLINE(  85)		this->nameText->updateMetrics();
HXLINE(  86)		bool _hx_tmp3;
HXDLIN(  86)		if (::hx::IsNull( this->drawCT )) {
HXLINE(  86)			_hx_tmp3 = ::hx::IsNotNull( drawCT );
            		}
            		else {
HXLINE(  86)			_hx_tmp3 = true;
            		}
HXDLIN(  86)		if (_hx_tmp3) {
HXLINE(  87)			 ::openfl::geom::ColorTransform _hx_tmp4;
HXDLIN(  87)			if (::hx::IsNull( drawCT )) {
HXLINE(  87)				_hx_tmp4 = ::util::ColorUtils_obj::identity;
            			}
            			else {
HXLINE(  87)				_hx_tmp4 = drawCT;
            			}
HXDLIN(  87)			this->get_transform()->set_colorTransform(_hx_tmp4);
            		}
HXLINE(  89)		this->drawColor = drawColor;
HXLINE(  90)		this->drawText = drawText;
HXLINE(  91)		this->isHtml = isHtml;
HXLINE(  92)		this->drawCT = drawCT;
            	}


HX_DEFINE_DYNAMIC_FUNC4(GameObjectListItem_obj,internalDraw,(void))


::hx::ObjectPtr< GameObjectListItem_obj > GameObjectListItem_obj::__new(int color,bool longVersion, ::objects::GameObject go) {
	::hx::ObjectPtr< GameObjectListItem_obj > __this = new GameObjectListItem_obj();
	__this->__construct(color,longVersion,go);
	return __this;
}

::hx::ObjectPtr< GameObjectListItem_obj > GameObjectListItem_obj::__alloc(::hx::Ctx *_hx_ctx,int color,bool longVersion, ::objects::GameObject go) {
	GameObjectListItem_obj *__this = (GameObjectListItem_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameObjectListItem_obj), true, "ui.GameObjectListItem"));
	*(void **)__this = GameObjectListItem_obj::_hx_vtable;
	__this->__construct(color,longVersion,go);
	return __this;
}

GameObjectListItem_obj::GameObjectListItem_obj()
{
}

void GameObjectListItem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameObjectListItem);
	HX_MARK_MEMBER_NAME(longVersion,"longVersion");
	HX_MARK_MEMBER_NAME(go,"go");
	HX_MARK_MEMBER_NAME(portrait,"portrait");
	HX_MARK_MEMBER_NAME(nameText,"nameText");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(drawColor,"drawColor");
	HX_MARK_MEMBER_NAME(drawText,"drawText");
	HX_MARK_MEMBER_NAME(isHtml,"isHtml");
	HX_MARK_MEMBER_NAME(drawCT,"drawCT");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameObjectListItem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(longVersion,"longVersion");
	HX_VISIT_MEMBER_NAME(go,"go");
	HX_VISIT_MEMBER_NAME(portrait,"portrait");
	HX_VISIT_MEMBER_NAME(nameText,"nameText");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(drawColor,"drawColor");
	HX_VISIT_MEMBER_NAME(drawText,"drawText");
	HX_VISIT_MEMBER_NAME(isHtml,"isHtml");
	HX_VISIT_MEMBER_NAME(drawCT,"drawCT");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GameObjectListItem_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"go") ) { return ::hx::Val( go ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isHtml") ) { return ::hx::Val( isHtml ); }
		if (HX_FIELD_EQ(inName,"drawCT") ) { return ::hx::Val( drawCT ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { return ::hx::Val( portrait ); }
		if (HX_FIELD_EQ(inName,"nameText") ) { return ::hx::Val( nameText ); }
		if (HX_FIELD_EQ(inName,"drawText") ) { return ::hx::Val( drawText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawColor") ) { return ::hx::Val( drawColor ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"longVersion") ) { return ::hx::Val( longVersion ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"internalDraw") ) { return ::hx::Val( internalDraw_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GameObjectListItem_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"go") ) { go=inValue.Cast<  ::objects::GameObject >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isHtml") ) { isHtml=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawCT") ) { drawCT=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { portrait=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameText") ) { nameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawText") ) { drawText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawColor") ) { drawColor=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"longVersion") ) { longVersion=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameObjectListItem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("longVersion",fc,50,69,af));
	outFields->push(HX_("go",28,5a,00,00));
	outFields->push(HX_("portrait",5b,21,af,b8));
	outFields->push(HX_("nameText",98,ec,80,49));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("drawColor",bf,a6,67,12));
	outFields->push(HX_("drawText",d1,76,63,61));
	outFields->push(HX_("isHtml",75,5a,7d,62));
	outFields->push(HX_("drawCT",b5,6f,d6,df));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameObjectListItem_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(GameObjectListItem_obj,longVersion),HX_("longVersion",fc,50,69,af)},
	{::hx::fsObject /*  ::objects::GameObject */ ,(int)offsetof(GameObjectListItem_obj,go),HX_("go",28,5a,00,00)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(GameObjectListItem_obj,portrait),HX_("portrait",5b,21,af,b8)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(GameObjectListItem_obj,nameText),HX_("nameText",98,ec,80,49)},
	{::hx::fsInt,(int)offsetof(GameObjectListItem_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsInt,(int)offsetof(GameObjectListItem_obj,drawColor),HX_("drawColor",bf,a6,67,12)},
	{::hx::fsString,(int)offsetof(GameObjectListItem_obj,drawText),HX_("drawText",d1,76,63,61)},
	{::hx::fsBool,(int)offsetof(GameObjectListItem_obj,isHtml),HX_("isHtml",75,5a,7d,62)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(GameObjectListItem_obj,drawCT),HX_("drawCT",b5,6f,d6,df)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GameObjectListItem_obj_sStaticStorageInfo = 0;
#endif

static ::String GameObjectListItem_obj_sMemberFields[] = {
	HX_("longVersion",fc,50,69,af),
	HX_("go",28,5a,00,00),
	HX_("portrait",5b,21,af,b8),
	HX_("nameText",98,ec,80,49),
	HX_("color",63,71,5c,4a),
	HX_("drawColor",bf,a6,67,12),
	HX_("drawText",d1,76,63,61),
	HX_("isHtml",75,5a,7d,62),
	HX_("drawCT",b5,6f,d6,df),
	HX_("draw",04,2c,70,42),
	HX_("internalDraw",e1,a1,f0,2d),
	::String(null()) };

::hx::Class GameObjectListItem_obj::__mClass;

void GameObjectListItem_obj::__register()
{
	GameObjectListItem_obj _hx_dummy;
	GameObjectListItem_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.GameObjectListItem",fc,17,9f,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameObjectListItem_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameObjectListItem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameObjectListItem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameObjectListItem_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
