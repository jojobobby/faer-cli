// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_InputHandler
#include <game/InputHandler.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_ui_IconButton
#include <ui/IconButton.h>
#endif
#ifndef INCLUDED_ui_MiniMap
#include <ui/MiniMap.h>
#endif
#ifndef INCLUDED_ui_MiniMapZoomButtons
#include <ui/MiniMapZoomButtons.h>
#endif
#ifndef INCLUDED_ui_menu_Menu
#include <ui/menu/Menu.h>
#endif
#ifndef INCLUDED_ui_menu_PlayerGroupMenu
#include <ui/menu/PlayerGroupMenu.h>
#endif
#ifndef INCLUDED_ui_options_Options
#include <ui/options/Options.h>
#endif
#ifndef INCLUDED_ui_tooltip_PlayerGroupToolTip
#include <ui/tooltip/PlayerGroupToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_30_new,"ui.MiniMap","new",0x069cf27d,"ui.MiniMap.new","ui/MiniMap.hx",30,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_95_update,"ui.MiniMap","update",0x60c8d40c,"ui.MiniMap.update","ui/MiniMap.hx",95,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_115_onMiniMapZoom,"ui.MiniMap","onMiniMapZoom",0x7bd42776,"ui.MiniMap.onMiniMapZoom","ui/MiniMap.hx",115,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_125_dispose,"ui.MiniMap","dispose",0x6c6d753c,"ui.MiniMap.dispose","ui/MiniMap.hx",125,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_157_setGroundTile,"ui.MiniMap","setGroundTile",0xc3416ff4,"ui.MiniMap.setGroundTile","ui/MiniMap.hx",157,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_162_setGameObjectTile,"ui.MiniMap","setGameObjectTile",0x53779e3e,"ui.MiniMap.setGameObjectTile","ui/MiniMap.hx",162,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_327_zoomIn,"ui.MiniMap","zoomIn",0xd4795bdb,"ui.MiniMap.zoomIn","ui/MiniMap.hx",327,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_331_zoomOut,"ui.MiniMap","zoomOut",0x15bb97d8,"ui.MiniMap.zoomOut","ui/MiniMap.hx",331,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_334_createButton,"ui.MiniMap","createButton",0x1127d451,"ui.MiniMap.createButton","ui/MiniMap.hx",334,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_354_makeViewModel,"ui.MiniMap","makeViewModel",0x848f5393,"ui.MiniMap.makeViewModel","ui/MiniMap.hx",354,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_371_makeVisualLayers,"ui.MiniMap","makeVisualLayers",0xb8caff33,"ui.MiniMap.makeVisualLayers","ui/MiniMap.hx",371,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_393_addMouseListeners,"ui.MiniMap","addMouseListeners",0x2f011b78,"ui.MiniMap.addMouseListeners","ui/MiniMap.hx",393,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_400_onZoomChanged,"ui.MiniMap","onZoomChanged",0xd771f39f,"ui.MiniMap.onZoomChanged","ui/MiniMap.hx",400,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_403_addMenu,"ui.MiniMap","addMenu",0x35b77cfd,"ui.MiniMap.addMenu","ui/MiniMap.hx",403,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_411_onHubClick,"ui.MiniMap","onHubClick",0x98bfcb15,"ui.MiniMap.onHubClick","ui/MiniMap.hx",411,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_414_onOptionsClick,"ui.MiniMap","onOptionsClick",0x1145accc,"ui.MiniMap.onOptionsClick","ui/MiniMap.hx",414,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_423_onMouseOver,"ui.MiniMap","onMouseOver",0x04e43417,"ui.MiniMap.onMouseOver","ui/MiniMap.hx",423,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_427_onMouseOut,"ui.MiniMap","onMouseOut",0xf48ac72b,"ui.MiniMap.onMouseOut","ui/MiniMap.hx",427,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_430_onMapClick,"ui.MiniMap","onMapClick",0x100dcbce,"ui.MiniMap.onMapClick","ui/MiniMap.hx",430,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_60_gameObjectToColor,"ui.MiniMap","gameObjectToColor",0x14315474,"ui.MiniMap.gameObjectToColor","ui/MiniMap.hx",60,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_68_areSamePlayers,"ui.MiniMap","areSamePlayers",0xfceb623b,"ui.MiniMap.areSamePlayers","ui/MiniMap.hx",68,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_168_lineSegmentIntersectXY,"ui.MiniMap","lineSegmentIntersectXY",0x04d95fc4,"ui.MiniMap.lineSegmentIntersectXY","ui/MiniMap.hx",168,0x6c3c16d4)
HX_LOCAL_STACK_FRAME(_hx_pos_6b7bb8f86cb02291_34_boot,"ui.MiniMap","boot",0xbad03b75,"ui.MiniMap.boot","ui/MiniMap.hx",34,0x6c3c16d4)
namespace ui{

void MiniMap_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_30_new)
HXLINE(  54)		this->menu = null();
HXLINE(  53)		this->tooltip = null();
HXLINE(  52)		this->isMouseOver = false;
HXLINE(  39)		this->zoomIndex = 0;
HXLINE(  38)		this->mapHeight = 0;
HXLINE(  37)		this->mapWidth = 0;
HXLINE(  81)		super::__construct();
HXLINE(  83)		this->zoomLevels = ::Array_obj< Float >::__new();
HXLINE(  84)		this->mapMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  85)		this->arrowMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  86)		this->players = ::Array_obj< ::Dynamic>::__new();
HXLINE(  87)		this->tempPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  88)		this->mapWidth = width;
HXLINE(  89)		this->mapHeight = height;
HXLINE(  90)		this->makeVisualLayers();
HXLINE(  91)		this->addMouseListeners();
HXLINE(  92)		this->update();
            	}

Dynamic MiniMap_obj::__CreateEmpty() { return new MiniMap_obj; }

void *MiniMap_obj::_hx_vtable = 0;

Dynamic MiniMap_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MiniMap_obj > _hx_result = new MiniMap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MiniMap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x5070add1) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x5070add1;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void MiniMap_obj::update(){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_95_update)
HXLINE(  96)		this->map = ::Global_obj::gameSprite->map;
HXLINE(  97)		this->zoomLevels->resize(0);
HXLINE(  98)		this->makeViewModel();
HXLINE(  99)		this->createButton();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,update,(void))

void MiniMap_obj::onMiniMapZoom(::String direction){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_115_onMiniMapZoom)
HXDLIN( 115)		if ((direction == HX_("in",e5,5b,00,00))) {
HXLINE( 116)			this->zoomIn();
            		}
            		else {
HXLINE( 117)			if ((direction == HX_("out",8e,a0,54,00))) {
HXLINE( 118)				this->zoomOut();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,onMiniMapZoom,(void))

void MiniMap_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_125_dispose)
HXLINE( 126)		if (::hx::IsNotNull( this->miniMapData )) {
HXLINE( 127)			this->miniMapData->dispose();
HXLINE( 128)			this->miniMapData = null();
            		}
HXLINE( 131)		if (::hx::IsNotNull( this->blueArrow )) {
HXLINE( 132)			this->blueArrow->dispose();
HXLINE( 133)			this->blueArrow = null();
            		}
HXLINE( 136)		if (::hx::IsNotNull( this->decor )) {
HXLINE( 137)			{
HXLINE( 137)				 ::openfl::display::BitmapData tmp = this->decor->get_bitmapData();
HXDLIN( 137)				if (::hx::IsNotNull( tmp )) {
HXLINE( 137)					tmp->dispose();
            				}
            			}
HXLINE( 138)			this->decor = null();
            		}
HXLINE( 141)		if (::hx::IsNotNull( this->tooltip )) {
HXLINE( 142)			if (::hx::IsNotNull( this->tooltip->parent )) {
HXLINE( 143)				this->tooltip->parent->removeChild(this->tooltip);
            			}
HXLINE( 144)			this->tooltip = null();
            		}
HXLINE( 147)		if (::hx::IsNotNull( this->menu )) {
HXLINE( 148)			if (::hx::IsNotNull( this->menu->parent )) {
HXLINE( 149)				this->menu->parent->removeChild(this->menu);
            			}
HXLINE( 150)			this->menu = null();
            		}
HXLINE( 153)		if (::hx::IsNotNull( this->zoomButtons )) {
HXLINE( 154)			this->zoomButtons->zoom->off(this->onZoomChanged_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,dispose,(void))

void MiniMap_obj::setGroundTile(int x,int y,int tileType){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_157_setGroundTile)
HXLINE( 158)		 ::Dynamic color = ::map::GroundLibrary_obj::getColor(tileType);
HXLINE( 159)		this->miniMapData->setPixel(x,y,( (int)(color) ));
            	}


HX_DEFINE_DYNAMIC_FUNC3(MiniMap_obj,setGroundTile,(void))

void MiniMap_obj::setGameObjectTile(int x,int y, ::objects::GameObject go){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_162_setGameObjectTile)
HXLINE( 163)		 ::Dynamic color = ::ui::MiniMap_obj::gameObjectToColor(go);
HXLINE( 164)		if (::hx::IsNotEq( color,0 )) {
HXLINE( 165)			this->miniMapData->setPixel(x,y,( (int)(color) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MiniMap_obj,setGameObjectTile,(void))

void MiniMap_obj::zoomIn(){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_327_zoomIn)
HXDLIN( 327)		this->zoomIndex = this->zoomButtons->setZoomLevel((this->zoomIndex - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,zoomIn,(void))

void MiniMap_obj::zoomOut(){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_331_zoomOut)
HXDLIN( 331)		this->zoomIndex = this->zoomButtons->setZoomLevel((this->zoomIndex + 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,zoomOut,(void))

void MiniMap_obj::createButton(){
            	HX_GC_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_334_createButton)
HXLINE( 335)		if (this->contains(this->optionsButton)) {
HXLINE( 336)			this->removeChild(this->optionsButton);
            		}
HXLINE( 338)		if (this->contains(this->hubButton)) {
HXLINE( 339)			this->removeChild(this->hubButton);
            		}
HXLINE( 341)		this->hubButton =  ::ui::IconButton_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("misc16",d1,10,48,56),31),HX_("Hub",95,08,37,00),HX_("escapeToHub",b9,da,5a,b3));
HXLINE( 342)		this->hubButton->addEventListener(HX_("click",48,7c,5e,48),this->onHubClick_dyn(),null(),null(),null());
HXLINE( 343)		this->hubButton->set_x(( (Float)(-22) ));
HXLINE( 344)		this->hubButton->set_y(( (Float)(100) ));
HXLINE( 345)		this->addChild(this->hubButton);
HXLINE( 347)		this->optionsButton =  ::ui::IconButton_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("misc16",d1,10,48,56),15),HX_("Options",3e,5b,4f,ad),HX_("options",5e,33,fe,df));
HXLINE( 348)		this->optionsButton->addEventListener(HX_("click",48,7c,5e,48),this->onOptionsClick_dyn(),null(),null(),null());
HXLINE( 349)		this->optionsButton->set_x(( (Float)(24) ));
HXLINE( 350)		this->optionsButton->set_y(( (Float)(100) ));
HXLINE( 351)		this->addChild(this->optionsButton);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,createButton,(void))

void MiniMap_obj::makeViewModel(){
            	HX_GC_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_354_makeViewModel)
HXLINE( 355)		this->windowRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(( (Float)(-(this->mapWidth)) ) / ( (Float)(2) )),(( (Float)(-(this->mapHeight)) ) / ( (Float)(2) )),this->mapWidth,this->mapHeight);
HXLINE( 356)		this->maxWH =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->map->mapWidth,this->map->mapHeight);
HXLINE( 357)		int _hx_tmp = ::Std_obj::_hx_int(this->maxWH->x);
HXDLIN( 357)		this->miniMapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int(this->maxWH->y),false,0);
HXLINE( 358)		Float minZoom = ::Math_obj::max((( (Float)(this->mapWidth) ) / this->maxWH->x),(( (Float)(this->mapHeight) ) / this->maxWH->y));
HXLINE( 359)		Float z = ((Float)4.0);
HXLINE( 360)		while((z > minZoom)){
HXLINE( 361)			this->zoomLevels->push(z);
HXLINE( 362)			z = (z / ( (Float)(2) ));
            		}
HXLINE( 365)		this->zoomLevels->push(minZoom);
HXLINE( 366)		if (::hx::IsNotNull( this->zoomButtons )) {
HXLINE( 367)			this->zoomButtons->setZoomLevels(this->zoomLevels->length);
            		}
HXLINE( 368)		 ::ui::MiniMapZoomButtons _hx_tmp1 = this->zoomButtons;
HXDLIN( 368)		this->zoomIndex = _hx_tmp1->setZoomLevel(::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->zoomLevels->length) ),( (Float)(this->zoomIndex) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,makeViewModel,(void))

void MiniMap_obj::makeVisualLayers(){
            	HX_GC_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_371_makeVisualLayers)
HXLINE( 372)		this->blueArrow = ::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),26)->clone();
HXLINE( 373)		this->blueArrow->colorTransform(this->blueArrow->rect, ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,0,0,1,null(),null(),null(),null(),null()));
HXLINE( 375)		this->groundLayer =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE( 376)		this->addChild(this->groundLayer);
HXLINE( 377)		this->characterLayer =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE( 378)		this->addChild(this->characterLayer);
HXLINE( 380)		this->decor =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/minimap.png",f1,43,9f,19),null()),null(),null());
HXLINE( 381)		this->decor->set_x(((Float)-94.));
HXLINE( 382)		this->decor->set_y(((Float)-94.));
HXLINE( 383)		this->addChild(this->decor);
HXLINE( 385)		this->zoomButtons =  ::ui::MiniMapZoomButtons_obj::__alloc( HX_CTX );
HXLINE( 386)		this->zoomButtons->set_x(( (Float)(68) ));
HXLINE( 387)		this->zoomButtons->set_y(( (Float)(-87) ));
HXLINE( 388)		this->zoomButtons->zoom->on(this->onZoomChanged_dyn());
HXLINE( 389)		this->zoomButtons->setZoomLevels(this->zoomLevels->length);
HXLINE( 390)		this->addChild(this->zoomButtons);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,makeVisualLayers,(void))

void MiniMap_obj::addMouseListeners(){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_393_addMouseListeners)
HXLINE( 394)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE( 395)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null(),null(),null());
HXLINE( 396)		this->addEventListener(HX_("click",48,7c,5e,48),this->onMapClick_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,addMouseListeners,(void))

void MiniMap_obj::onZoomChanged(int zoomLevel){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_400_onZoomChanged)
HXDLIN( 400)		this->zoomIndex = zoomLevel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,onZoomChanged,(void))

void MiniMap_obj::addMenu(){
            	HX_GC_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_403_addMenu)
HXLINE( 404)		this->menu =  ::ui::menu::PlayerGroupMenu_obj::__alloc( HX_CTX ,this->map,this->tooltip->players);
HXLINE( 405)		 ::ui::menu::PlayerGroupMenu _hx_tmp = this->menu;
HXDLIN( 405)		_hx_tmp->set_x((this->tooltip->get_x() + 12));
HXLINE( 406)		 ::ui::menu::PlayerGroupMenu _hx_tmp1 = this->menu;
HXDLIN( 406)		_hx_tmp1->set_y(this->tooltip->get_y());
HXLINE( 407)		this->stage->addChild(this->menu);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMap_obj,addMenu,(void))

void MiniMap_obj::onHubClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_411_onHubClick)
HXDLIN( 411)		::network::NetworkHandler_obj::escape();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,onHubClick,(void))

void MiniMap_obj::onOptionsClick( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_414_onOptionsClick)
HXLINE( 415)		::Global_obj::gameSprite->inputHandler->clearInput();
HXLINE( 416)		 ::ui::options::Options options =  ::ui::options::Options_obj::__alloc( HX_CTX ,::Global_obj::gameSprite);
HXLINE( 417)		options->set_x((( (Float)((::Main_obj::stageWidth - 800)) ) / ( (Float)(2) )));
HXLINE( 418)		options->set_y((( (Float)((::Main_obj::stageHeight - 600)) ) / ( (Float)(2) )));
HXLINE( 419)		::Global_obj::gameSprite->addChild(options);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,onOptionsClick,(void))

void MiniMap_obj::onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_423_onMouseOver)
HXDLIN( 423)		this->isMouseOver = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,onMouseOver,(void))

void MiniMap_obj::onMouseOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_427_onMouseOut)
HXDLIN( 427)		this->isMouseOver = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,onMouseOut,(void))

void MiniMap_obj::onMapClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_430_onMapClick)
HXLINE( 431)		bool _hx_tmp;
HXDLIN( 431)		bool _hx_tmp1;
HXDLIN( 431)		bool _hx_tmp2;
HXDLIN( 431)		if (::hx::IsNotNull( this->tooltip )) {
HXLINE( 431)			_hx_tmp2 = ::hx::IsNull( this->tooltip->parent );
            		}
            		else {
HXLINE( 431)			_hx_tmp2 = true;
            		}
HXDLIN( 431)		if (!(_hx_tmp2)) {
HXLINE( 431)			_hx_tmp1 = ::hx::IsNull( this->tooltip->players );
            		}
            		else {
HXLINE( 431)			_hx_tmp1 = true;
            		}
HXDLIN( 431)		if (!(_hx_tmp1)) {
HXLINE( 431)			_hx_tmp = (this->tooltip->players->length == 0);
            		}
            		else {
HXLINE( 431)			_hx_tmp = true;
            		}
HXDLIN( 431)		if (_hx_tmp) {
HXLINE( 432)			return;
            		}
HXLINE( 434)		if (::hx::IsNotNull( this->menu )) {
HXLINE( 435)			if (::hx::IsNotNull( this->menu->parent )) {
HXLINE( 436)				this->menu->parent->removeChild(this->menu);
            			}
HXLINE( 437)			this->menu = null();
            		}
HXLINE( 440)		this->addMenu();
HXLINE( 442)		if (::hx::IsNotNull( this->tooltip )) {
HXLINE( 443)			if (::hx::IsNotNull( this->tooltip->parent )) {
HXLINE( 444)				this->tooltip->parent->removeChild(this->tooltip);
            			}
HXLINE( 445)			this->tooltip = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,onMapClick,(void))

 ::haxe::ds::IntMap MiniMap_obj::objectTypeColorDict;

 ::Dynamic MiniMap_obj::gameObjectToColor( ::objects::GameObject go){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_60_gameObjectToColor)
HXLINE(  61)		int objectType = go->objectType;
HXLINE(  62)		if (!(::ui::MiniMap_obj::objectTypeColorDict->exists(objectType))) {
HXLINE(  63)			 ::haxe::ds::IntMap _hx_tmp = ::ui::MiniMap_obj::objectTypeColorDict;
HXDLIN(  63)			_hx_tmp->set(objectType,go->getColor());
            		}
HXLINE(  65)		return ::ui::MiniMap_obj::objectTypeColorDict->get(objectType);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MiniMap_obj,gameObjectToColor,return )

bool MiniMap_obj::areSamePlayers(::Array< ::Dynamic> players0,::Array< ::Dynamic> players1){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_68_areSamePlayers)
HXLINE(  69)		int count = players0->length;
HXLINE(  70)		if ((count != players1->length)) {
HXLINE(  71)			return false;
            		}
HXLINE(  73)		{
HXLINE(  73)			int _g = 0;
HXDLIN(  73)			while((_g < count)){
HXLINE(  73)				_g = (_g + 1);
HXDLIN(  73)				int i = (_g - 1);
HXLINE(  74)				if (::hx::IsInstanceNotEq( players0->__get(i).StaticCast<  ::objects::Player >(),players1->__get(i).StaticCast<  ::objects::Player >() )) {
HXLINE(  75)					return false;
            				}
            			}
            		}
HXLINE(  77)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MiniMap_obj,areSamePlayers,return )

bool MiniMap_obj::lineSegmentIntersectXY( ::openfl::geom::Rectangle rect,Float p1x,Float p1y,Float p2x,Float p2y, ::openfl::geom::Point result){
            	HX_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_168_lineSegmentIntersectXY)
HXLINE( 169)		Float slope;
HXLINE( 170)		Float c;
HXLINE( 171)		Float y;
HXLINE( 172)		Float x;
HXLINE( 173)		if ((p2x <= rect->x)) {
HXLINE( 174)			slope = ((p2y - p1y) / (p2x - p1x));
HXLINE( 175)			c = (p1y - (p1x * slope));
HXLINE( 176)			y = ((slope * rect->x) + c);
HXLINE( 177)			bool _hx_tmp;
HXDLIN( 177)			if ((y >= rect->y)) {
HXLINE( 177)				_hx_tmp = (y <= (rect->y + rect->height));
            			}
            			else {
HXLINE( 177)				_hx_tmp = false;
            			}
HXDLIN( 177)			if (_hx_tmp) {
HXLINE( 178)				result->x = rect->x;
HXLINE( 179)				result->y = y;
HXLINE( 180)				return true;
            			}
            		}
            		else {
HXLINE( 182)			if ((p2x >= (rect->x + rect->width))) {
HXLINE( 183)				slope = ((p2y - p1y) / (p2x - p1x));
HXLINE( 184)				c = (p1y - (p1x * slope));
HXLINE( 185)				y = ((slope * (rect->x + rect->width)) + c);
HXLINE( 186)				bool _hx_tmp1;
HXDLIN( 186)				if ((y >= rect->y)) {
HXLINE( 186)					_hx_tmp1 = (y <= (rect->y + rect->height));
            				}
            				else {
HXLINE( 186)					_hx_tmp1 = false;
            				}
HXDLIN( 186)				if (_hx_tmp1) {
HXLINE( 187)					result->x = (rect->x + rect->width);
HXLINE( 188)					result->y = y;
HXLINE( 189)					return true;
            				}
            			}
            		}
HXLINE( 192)		if ((p2y <= rect->y)) {
HXLINE( 193)			slope = ((p2x - p1x) / (p2y - p1y));
HXLINE( 194)			c = (p1x - (p1y * slope));
HXLINE( 195)			x = ((slope * rect->y) + c);
HXLINE( 196)			bool _hx_tmp2;
HXDLIN( 196)			if ((x >= rect->x)) {
HXLINE( 196)				_hx_tmp2 = (x <= (rect->x + rect->width));
            			}
            			else {
HXLINE( 196)				_hx_tmp2 = false;
            			}
HXDLIN( 196)			if (_hx_tmp2) {
HXLINE( 197)				result->x = x;
HXLINE( 198)				result->y = rect->y;
HXLINE( 199)				return true;
            			}
            		}
            		else {
HXLINE( 201)			if ((p2y >= (rect->y + rect->height))) {
HXLINE( 202)				slope = ((p2x - p1x) / (p2y - p1y));
HXLINE( 203)				c = (p1x - (p1y * slope));
HXLINE( 204)				x = ((slope * (rect->y + rect->height)) + c);
HXLINE( 205)				bool _hx_tmp3;
HXDLIN( 205)				if ((x >= rect->x)) {
HXLINE( 205)					_hx_tmp3 = (x <= (rect->x + rect->width));
            				}
            				else {
HXLINE( 205)					_hx_tmp3 = false;
            				}
HXDLIN( 205)				if (_hx_tmp3) {
HXLINE( 206)					result->x = x;
HXLINE( 207)					result->y = (rect->y + rect->height);
HXLINE( 208)					return true;
            				}
            			}
            		}
HXLINE( 211)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(MiniMap_obj,lineSegmentIntersectXY,return )


::hx::ObjectPtr< MiniMap_obj > MiniMap_obj::__new(int width,int height) {
	::hx::ObjectPtr< MiniMap_obj > __this = new MiniMap_obj();
	__this->__construct(width,height);
	return __this;
}

::hx::ObjectPtr< MiniMap_obj > MiniMap_obj::__alloc(::hx::Ctx *_hx_ctx,int width,int height) {
	MiniMap_obj *__this = (MiniMap_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MiniMap_obj), true, "ui.MiniMap"));
	*(void **)__this = MiniMap_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

MiniMap_obj::MiniMap_obj()
{
}

void MiniMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MiniMap);
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(mapWidth,"mapWidth");
	HX_MARK_MEMBER_NAME(mapHeight,"mapHeight");
	HX_MARK_MEMBER_NAME(zoomIndex,"zoomIndex");
	HX_MARK_MEMBER_NAME(windowRect,"windowRect");
	HX_MARK_MEMBER_NAME(maxWH,"maxWH");
	HX_MARK_MEMBER_NAME(miniMapData,"miniMapData");
	HX_MARK_MEMBER_NAME(zoomLevels,"zoomLevels");
	HX_MARK_MEMBER_NAME(blueArrow,"blueArrow");
	HX_MARK_MEMBER_NAME(groundLayer,"groundLayer");
	HX_MARK_MEMBER_NAME(characterLayer,"characterLayer");
	HX_MARK_MEMBER_NAME(optionsButton,"optionsButton");
	HX_MARK_MEMBER_NAME(hubButton,"hubButton");
	HX_MARK_MEMBER_NAME(zoomButtons,"zoomButtons");
	HX_MARK_MEMBER_NAME(decor,"decor");
	HX_MARK_MEMBER_NAME(isMouseOver,"isMouseOver");
	HX_MARK_MEMBER_NAME(tooltip,"tooltip");
	HX_MARK_MEMBER_NAME(menu,"menu");
	HX_MARK_MEMBER_NAME(mapMatrix,"mapMatrix");
	HX_MARK_MEMBER_NAME(arrowMatrix,"arrowMatrix");
	HX_MARK_MEMBER_NAME(players,"players");
	HX_MARK_MEMBER_NAME(tempPoint,"tempPoint");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MiniMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(mapWidth,"mapWidth");
	HX_VISIT_MEMBER_NAME(mapHeight,"mapHeight");
	HX_VISIT_MEMBER_NAME(zoomIndex,"zoomIndex");
	HX_VISIT_MEMBER_NAME(windowRect,"windowRect");
	HX_VISIT_MEMBER_NAME(maxWH,"maxWH");
	HX_VISIT_MEMBER_NAME(miniMapData,"miniMapData");
	HX_VISIT_MEMBER_NAME(zoomLevels,"zoomLevels");
	HX_VISIT_MEMBER_NAME(blueArrow,"blueArrow");
	HX_VISIT_MEMBER_NAME(groundLayer,"groundLayer");
	HX_VISIT_MEMBER_NAME(characterLayer,"characterLayer");
	HX_VISIT_MEMBER_NAME(optionsButton,"optionsButton");
	HX_VISIT_MEMBER_NAME(hubButton,"hubButton");
	HX_VISIT_MEMBER_NAME(zoomButtons,"zoomButtons");
	HX_VISIT_MEMBER_NAME(decor,"decor");
	HX_VISIT_MEMBER_NAME(isMouseOver,"isMouseOver");
	HX_VISIT_MEMBER_NAME(tooltip,"tooltip");
	HX_VISIT_MEMBER_NAME(menu,"menu");
	HX_VISIT_MEMBER_NAME(mapMatrix,"mapMatrix");
	HX_VISIT_MEMBER_NAME(arrowMatrix,"arrowMatrix");
	HX_VISIT_MEMBER_NAME(players,"players");
	HX_VISIT_MEMBER_NAME(tempPoint,"tempPoint");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MiniMap_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"menu") ) { return ::hx::Val( menu ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maxWH") ) { return ::hx::Val( maxWH ); }
		if (HX_FIELD_EQ(inName,"decor") ) { return ::hx::Val( decor ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"zoomIn") ) { return ::hx::Val( zoomIn_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tooltip") ) { return ::hx::Val( tooltip ); }
		if (HX_FIELD_EQ(inName,"players") ) { return ::hx::Val( players ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"zoomOut") ) { return ::hx::Val( zoomOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"addMenu") ) { return ::hx::Val( addMenu_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapWidth") ) { return ::hx::Val( mapWidth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapHeight") ) { return ::hx::Val( mapHeight ); }
		if (HX_FIELD_EQ(inName,"zoomIndex") ) { return ::hx::Val( zoomIndex ); }
		if (HX_FIELD_EQ(inName,"blueArrow") ) { return ::hx::Val( blueArrow ); }
		if (HX_FIELD_EQ(inName,"hubButton") ) { return ::hx::Val( hubButton ); }
		if (HX_FIELD_EQ(inName,"mapMatrix") ) { return ::hx::Val( mapMatrix ); }
		if (HX_FIELD_EQ(inName,"tempPoint") ) { return ::hx::Val( tempPoint ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"windowRect") ) { return ::hx::Val( windowRect ); }
		if (HX_FIELD_EQ(inName,"zoomLevels") ) { return ::hx::Val( zoomLevels ); }
		if (HX_FIELD_EQ(inName,"onHubClick") ) { return ::hx::Val( onHubClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMapClick") ) { return ::hx::Val( onMapClick_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"miniMapData") ) { return ::hx::Val( miniMapData ); }
		if (HX_FIELD_EQ(inName,"groundLayer") ) { return ::hx::Val( groundLayer ); }
		if (HX_FIELD_EQ(inName,"zoomButtons") ) { return ::hx::Val( zoomButtons ); }
		if (HX_FIELD_EQ(inName,"isMouseOver") ) { return ::hx::Val( isMouseOver ); }
		if (HX_FIELD_EQ(inName,"arrowMatrix") ) { return ::hx::Val( arrowMatrix ); }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createButton") ) { return ::hx::Val( createButton_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"optionsButton") ) { return ::hx::Val( optionsButton ); }
		if (HX_FIELD_EQ(inName,"onMiniMapZoom") ) { return ::hx::Val( onMiniMapZoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGroundTile") ) { return ::hx::Val( setGroundTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeViewModel") ) { return ::hx::Val( makeViewModel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onZoomChanged") ) { return ::hx::Val( onZoomChanged_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"characterLayer") ) { return ::hx::Val( characterLayer ); }
		if (HX_FIELD_EQ(inName,"onOptionsClick") ) { return ::hx::Val( onOptionsClick_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"makeVisualLayers") ) { return ::hx::Val( makeVisualLayers_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setGameObjectTile") ) { return ::hx::Val( setGameObjectTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"addMouseListeners") ) { return ::hx::Val( addMouseListeners_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MiniMap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"areSamePlayers") ) { outValue = areSamePlayers_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"gameObjectToColor") ) { outValue = gameObjectToColor_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"objectTypeColorDict") ) { outValue = ( objectTypeColorDict ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"lineSegmentIntersectXY") ) { outValue = lineSegmentIntersectXY_dyn(); return true; }
	}
	return false;
}

::hx::Val MiniMap_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"menu") ) { menu=inValue.Cast<  ::ui::menu::PlayerGroupMenu >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maxWH") ) { maxWH=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"decor") ) { decor=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tooltip") ) { tooltip=inValue.Cast<  ::ui::tooltip::PlayerGroupToolTip >(); return inValue; }
		if (HX_FIELD_EQ(inName,"players") ) { players=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapWidth") ) { mapWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapHeight") ) { mapHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomIndex") ) { zoomIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blueArrow") ) { blueArrow=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hubButton") ) { hubButton=inValue.Cast<  ::ui::IconButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mapMatrix") ) { mapMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempPoint") ) { tempPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"windowRect") ) { windowRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomLevels") ) { zoomLevels=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"miniMapData") ) { miniMapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groundLayer") ) { groundLayer=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomButtons") ) { zoomButtons=inValue.Cast<  ::ui::MiniMapZoomButtons >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isMouseOver") ) { isMouseOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrowMatrix") ) { arrowMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"optionsButton") ) { optionsButton=inValue.Cast<  ::ui::IconButton >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"characterLayer") ) { characterLayer=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MiniMap_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"objectTypeColorDict") ) { objectTypeColorDict=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

void MiniMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("mapWidth",ca,25,a5,41));
	outFields->push(HX_("mapHeight",a3,63,2b,e5));
	outFields->push(HX_("zoomIndex",ff,62,e2,41));
	outFields->push(HX_("windowRect",34,c5,7d,d6));
	outFields->push(HX_("maxWH",b5,47,26,03));
	outFields->push(HX_("miniMapData",0f,f5,5a,cb));
	outFields->push(HX_("zoomLevels",e2,e5,90,74));
	outFields->push(HX_("blueArrow",cf,f8,c9,fd));
	outFields->push(HX_("groundLayer",ca,45,38,f2));
	outFields->push(HX_("characterLayer",68,31,d2,45));
	outFields->push(HX_("optionsButton",f0,e3,7c,0c));
	outFields->push(HX_("hubButton",87,1c,cd,cf));
	outFields->push(HX_("zoomButtons",6e,af,36,33));
	outFields->push(HX_("decor",65,0f,20,d7));
	outFields->push(HX_("isMouseOver",cf,00,8e,d4));
	outFields->push(HX_("tooltip",03,ad,8c,6a));
	outFields->push(HX_("menu",9f,45,59,48));
	outFields->push(HX_("mapMatrix",fd,91,a7,9e));
	outFields->push(HX_("arrowMatrix",ea,20,a7,76));
	outFields->push(HX_("players",f2,09,15,8a));
	outFields->push(HX_("tempPoint",9c,b8,a3,fc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MiniMap_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::map::Map */ ,(int)offsetof(MiniMap_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsInt,(int)offsetof(MiniMap_obj,mapWidth),HX_("mapWidth",ca,25,a5,41)},
	{::hx::fsInt,(int)offsetof(MiniMap_obj,mapHeight),HX_("mapHeight",a3,63,2b,e5)},
	{::hx::fsInt,(int)offsetof(MiniMap_obj,zoomIndex),HX_("zoomIndex",ff,62,e2,41)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(MiniMap_obj,windowRect),HX_("windowRect",34,c5,7d,d6)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(MiniMap_obj,maxWH),HX_("maxWH",b5,47,26,03)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MiniMap_obj,miniMapData),HX_("miniMapData",0f,f5,5a,cb)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(MiniMap_obj,zoomLevels),HX_("zoomLevels",e2,e5,90,74)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MiniMap_obj,blueArrow),HX_("blueArrow",cf,f8,c9,fd)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(MiniMap_obj,groundLayer),HX_("groundLayer",ca,45,38,f2)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(MiniMap_obj,characterLayer),HX_("characterLayer",68,31,d2,45)},
	{::hx::fsObject /*  ::ui::IconButton */ ,(int)offsetof(MiniMap_obj,optionsButton),HX_("optionsButton",f0,e3,7c,0c)},
	{::hx::fsObject /*  ::ui::IconButton */ ,(int)offsetof(MiniMap_obj,hubButton),HX_("hubButton",87,1c,cd,cf)},
	{::hx::fsObject /*  ::ui::MiniMapZoomButtons */ ,(int)offsetof(MiniMap_obj,zoomButtons),HX_("zoomButtons",6e,af,36,33)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(MiniMap_obj,decor),HX_("decor",65,0f,20,d7)},
	{::hx::fsBool,(int)offsetof(MiniMap_obj,isMouseOver),HX_("isMouseOver",cf,00,8e,d4)},
	{::hx::fsObject /*  ::ui::tooltip::PlayerGroupToolTip */ ,(int)offsetof(MiniMap_obj,tooltip),HX_("tooltip",03,ad,8c,6a)},
	{::hx::fsObject /*  ::ui::menu::PlayerGroupMenu */ ,(int)offsetof(MiniMap_obj,menu),HX_("menu",9f,45,59,48)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(MiniMap_obj,mapMatrix),HX_("mapMatrix",fd,91,a7,9e)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(MiniMap_obj,arrowMatrix),HX_("arrowMatrix",ea,20,a7,76)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MiniMap_obj,players),HX_("players",f2,09,15,8a)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(MiniMap_obj,tempPoint),HX_("tempPoint",9c,b8,a3,fc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MiniMap_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &MiniMap_obj::objectTypeColorDict,HX_("objectTypeColorDict",20,f0,b8,d2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MiniMap_obj_sMemberFields[] = {
	HX_("mapWidth",ca,25,a5,41),
	HX_("mapHeight",a3,63,2b,e5),
	HX_("zoomIndex",ff,62,e2,41),
	HX_("windowRect",34,c5,7d,d6),
	HX_("maxWH",b5,47,26,03),
	HX_("miniMapData",0f,f5,5a,cb),
	HX_("zoomLevels",e2,e5,90,74),
	HX_("blueArrow",cf,f8,c9,fd),
	HX_("groundLayer",ca,45,38,f2),
	HX_("characterLayer",68,31,d2,45),
	HX_("optionsButton",f0,e3,7c,0c),
	HX_("hubButton",87,1c,cd,cf),
	HX_("zoomButtons",6e,af,36,33),
	HX_("decor",65,0f,20,d7),
	HX_("isMouseOver",cf,00,8e,d4),
	HX_("tooltip",03,ad,8c,6a),
	HX_("menu",9f,45,59,48),
	HX_("mapMatrix",fd,91,a7,9e),
	HX_("arrowMatrix",ea,20,a7,76),
	HX_("players",f2,09,15,8a),
	HX_("tempPoint",9c,b8,a3,fc),
	HX_("update",09,86,05,87),
	HX_("onMiniMapZoom",19,5f,da,3c),
	HX_("dispose",9f,80,4c,bb),
	HX_("setGroundTile",97,a7,47,84),
	HX_("setGameObjectTile",61,e3,b5,f3),
	HX_("zoomIn",d8,0d,b6,fa),
	HX_("zoomOut",3b,a3,9a,64),
	HX_("createButton",0e,a2,35,fc),
	HX_("makeViewModel",36,8b,95,45),
	HX_("makeVisualLayers",70,ef,fe,a5),
	HX_("addMouseListeners",9b,60,3f,cf),
	HX_("onZoomChanged",42,2b,78,98),
	HX_("addMenu",60,88,96,84),
	HX_("onHubClick",92,bf,09,26),
	HX_("onOptionsClick",c9,23,b0,35),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onMouseOut",a8,bb,d4,81),
	HX_("onMapClick",4b,c0,57,9d),
	::String(null()) };

static void MiniMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MiniMap_obj::objectTypeColorDict,"objectTypeColorDict");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MiniMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MiniMap_obj::objectTypeColorDict,"objectTypeColorDict");
};

#endif

::hx::Class MiniMap_obj::__mClass;

static ::String MiniMap_obj_sStaticFields[] = {
	HX_("objectTypeColorDict",20,f0,b8,d2),
	HX_("gameObjectToColor",97,99,6f,b4),
	HX_("areSamePlayers",38,d9,55,21),
	HX_("lineSegmentIntersectXY",c1,9b,3e,62),
	::String(null())
};

void MiniMap_obj::__register()
{
	MiniMap_obj _hx_dummy;
	MiniMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.MiniMap",0b,f0,40,c7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MiniMap_obj::__GetStatic;
	__mClass->mSetStaticField = &MiniMap_obj::__SetStatic;
	__mClass->mMarkFunc = MiniMap_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MiniMap_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MiniMap_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MiniMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MiniMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MiniMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MiniMap_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MiniMap_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_6b7bb8f86cb02291_34_boot)
HXDLIN(  34)		objectTypeColorDict =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace ui
