// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_sound_SoundEffectLibrary
#include <sound/SoundEffectLibrary.h>
#endif
#ifndef INCLUDED_ui_ClickableText
#include <ui/ClickableText.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d5513be83c4eb3df_8_new,"ui.ClickableText","new",0xae091b67,"ui.ClickableText.new","ui/ClickableText.hx",8,0x998b5fea)
HX_LOCAL_STACK_FRAME(_hx_pos_d5513be83c4eb3df_30_setDefaultColor,"ui.ClickableText","setDefaultColor",0x54aab92b,"ui.ClickableText.setDefaultColor","ui/ClickableText.hx",30,0x998b5fea)
HX_LOCAL_STACK_FRAME(_hx_pos_d5513be83c4eb3df_36_onMouseOver,"ui.ClickableText","onMouseOver",0x81625701,"ui.ClickableText.onMouseOver","ui/ClickableText.hx",36,0x998b5fea)
HX_LOCAL_STACK_FRAME(_hx_pos_d5513be83c4eb3df_40_onMouseOut,"ui.ClickableText","onMouseOut",0x7c8fef81,"ui.ClickableText.onMouseOut","ui/ClickableText.hx",40,0x998b5fea)
HX_LOCAL_STACK_FRAME(_hx_pos_d5513be83c4eb3df_44_onMouseClick,"ui.ClickableText","onMouseClick",0xc541adfb,"ui.ClickableText.onMouseClick","ui/ClickableText.hx",44,0x998b5fea)
namespace ui{

void ClickableText_obj::__construct(int textSize,bool bold,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_d5513be83c4eb3df_8_new)
HXLINE(  10)		this->defaultColor = 16777215;
HXLINE(  13)		super::__construct();
HXLINE(  15)		this->text =  ::ui::SimpleText_obj::__alloc( HX_CTX ,textSize,16777215,false,0,0,null());
HXLINE(  16)		this->text->setBold(bold);
HXLINE(  17)		this->text->set_text(text);
HXLINE(  18)		this->text->updateMetrics();
HXLINE(  19)		this->addChild(this->text);
HXLINE(  20)		 ::ui::SimpleText _hx_tmp = this->text;
HXDLIN(  20)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  22)		this->get_graphics()->clear();
HXLINE(  23)		this->get_graphics()->beginFill(16777215,0);
HXLINE(  24)		 ::openfl::display::Graphics _hx_tmp1 = this->get_graphics();
HXDLIN(  24)		Float _hx_tmp2 = (this->text->get_x() - ( (Float)(4) ));
HXDLIN(  24)		Float _hx_tmp3 = (this->text->get_y() - ( (Float)(4) ));
HXDLIN(  24)		Float _hx_tmp4 = (this->text->get_width() + 8);
HXDLIN(  24)		_hx_tmp1->drawRect(_hx_tmp2,_hx_tmp3,_hx_tmp4,(this->text->get_height() + 8));
HXLINE(  25)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE(  26)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null(),null(),null());
HXLINE(  27)		this->addEventListener(HX_("click",48,7c,5e,48),::ui::ClickableText_obj::onMouseClick_dyn(),null(),null(),null());
            	}

Dynamic ClickableText_obj::__CreateEmpty() { return new ClickableText_obj; }

void *ClickableText_obj::_hx_vtable = 0;

Dynamic ClickableText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ClickableText_obj > _hx_result = new ClickableText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ClickableText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3e4d323b || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void ClickableText_obj::setDefaultColor(int color){
            	HX_STACKFRAME(&_hx_pos_d5513be83c4eb3df_30_setDefaultColor)
HXLINE(  31)		this->defaultColor = color;
HXLINE(  32)		this->text->setColor(this->defaultColor);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClickableText_obj,setDefaultColor,(void))

void ClickableText_obj::onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d5513be83c4eb3df_36_onMouseOver)
HXDLIN(  36)		this->text->setColor(16768133);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClickableText_obj,onMouseOver,(void))

void ClickableText_obj::onMouseOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d5513be83c4eb3df_40_onMouseOut)
HXDLIN(  40)		this->text->setColor(this->defaultColor);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClickableText_obj,onMouseOut,(void))

void ClickableText_obj::onMouseClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d5513be83c4eb3df_44_onMouseClick)
HXDLIN(  44)		::sound::SoundEffectLibrary_obj::play(HX_("button_click",fb,26,6f,b7),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ClickableText_obj,onMouseClick,(void))


::hx::ObjectPtr< ClickableText_obj > ClickableText_obj::__new(int textSize,bool bold,::String text) {
	::hx::ObjectPtr< ClickableText_obj > __this = new ClickableText_obj();
	__this->__construct(textSize,bold,text);
	return __this;
}

::hx::ObjectPtr< ClickableText_obj > ClickableText_obj::__alloc(::hx::Ctx *_hx_ctx,int textSize,bool bold,::String text) {
	ClickableText_obj *__this = (ClickableText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ClickableText_obj), true, "ui.ClickableText"));
	*(void **)__this = ClickableText_obj::_hx_vtable;
	__this->__construct(textSize,bold,text);
	return __this;
}

ClickableText_obj::ClickableText_obj()
{
}

void ClickableText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ClickableText);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(defaultColor,"defaultColor");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ClickableText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(defaultColor,"defaultColor");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ClickableText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultColor") ) { return ::hx::Val( defaultColor ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setDefaultColor") ) { return ::hx::Val( setDefaultColor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ClickableText_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"onMouseClick") ) { outValue = onMouseClick_dyn(); return true; }
	}
	return false;
}

::hx::Val ClickableText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultColor") ) { defaultColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ClickableText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("defaultColor",e2,ac,b7,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ClickableText_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(ClickableText_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsInt,(int)offsetof(ClickableText_obj,defaultColor),HX_("defaultColor",e2,ac,b7,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ClickableText_obj_sStaticStorageInfo = 0;
#endif

static ::String ClickableText_obj_sMemberFields[] = {
	HX_("text",ad,cc,f9,4c),
	HX_("defaultColor",e2,ac,b7,ff),
	HX_("setDefaultColor",a4,7f,6d,1e),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onMouseOut",a8,bb,d4,81),
	::String(null()) };

::hx::Class ClickableText_obj::__mClass;

static ::String ClickableText_obj_sStaticFields[] = {
	HX_("onMouseClick",e2,11,6f,3e),
	::String(null())
};

void ClickableText_obj::__register()
{
	ClickableText_obj _hx_dummy;
	ClickableText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.ClickableText",f5,db,97,a5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ClickableText_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ClickableText_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ClickableText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ClickableText_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClickableText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClickableText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
