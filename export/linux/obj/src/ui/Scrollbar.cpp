// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_ui_Scrollbar
#include <ui/Scrollbar.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fee1ef306c36189a_16_new,"ui.Scrollbar","new",0x8281c81e,"ui.Scrollbar.new","ui/Scrollbar.hx",16,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_71_pos,"ui.Scrollbar","pos",0x82835552,"ui.Scrollbar.pos","ui/Scrollbar.hx",71,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_78_setIndicatorSize,"ui.Scrollbar","setIndicatorSize",0xc37668b0,"ui.Scrollbar.setIndicatorSize","ui/Scrollbar.hx",78,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_88_setPos,"ui.Scrollbar","setPos",0x88a9de14,"ui.Scrollbar.setPos","ui/Scrollbar.hx",88,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_95_jumpUp,"ui.Scrollbar","jumpUp",0x215499eb,"ui.Scrollbar.jumpUp","ui/Scrollbar.hx",95,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_99_jumpDown,"ui.Scrollbar","jumpDown",0x87e22ff2,"ui.Scrollbar.jumpDown","ui/Scrollbar.hx",99,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_102_resize,"ui.Scrollbar","resize",0x21b84cf6,"ui.Scrollbar.resize","ui/Scrollbar.hx",102,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_127_sendPos,"ui.Scrollbar","sendPos",0xa4b1b3ea,"ui.Scrollbar.sendPos","ui/Scrollbar.hx",127,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_130_drawIndicator,"ui.Scrollbar","drawIndicator",0x0dd14c69,"ui.Scrollbar.drawIndicator","ui/Scrollbar.hx",130,0xfe03a293)
static const int _hx_array_data_5500212c_9[] = {
	(int)1,(int)1,(int)1,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_139_onAddedToStage,"ui.Scrollbar","onAddedToStage",0xb80f4724,"ui.Scrollbar.onAddedToStage","ui/Scrollbar.hx",139,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_142_onRemovedFromStage,"ui.Scrollbar","onRemovedFromStage",0x58683a75,"ui.Scrollbar.onRemovedFromStage","ui/Scrollbar.hx",142,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_149_onMouseWheel,"ui.Scrollbar","onMouseWheel",0xa0eaeab7,"ui.Scrollbar.onMouseWheel","ui/Scrollbar.hx",149,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_169_onBackgroundDown,"ui.Scrollbar","onBackgroundDown",0xc0a5de71,"ui.Scrollbar.onBackgroundDown","ui/Scrollbar.hx",169,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_176_onUpArrowDown,"ui.Scrollbar","onUpArrowDown",0x24067b4f,"ui.Scrollbar.onUpArrowDown","ui/Scrollbar.hx",176,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_183_onDownArrowDown,"ui.Scrollbar","onDownArrowDown",0x7f9f8628,"ui.Scrollbar.onDownArrowDown","ui/Scrollbar.hx",183,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_190_onArrowFrame,"ui.Scrollbar","onArrowFrame",0x338a1825,"ui.Scrollbar.onArrowFrame","ui/Scrollbar.hx",190,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_198_onArrowUp,"ui.Scrollbar","onArrowUp",0x0fd29b63,"ui.Scrollbar.onArrowUp","ui/Scrollbar.hx",198,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_203_onStartIndicatorDrag,"ui.Scrollbar","onStartIndicatorDrag",0xd62ac522,"ui.Scrollbar.onStartIndicatorDrag","ui/Scrollbar.hx",203,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_210_onStopIndicatorDrag,"ui.Scrollbar","onStopIndicatorDrag",0x1385d9a0,"ui.Scrollbar.onStopIndicatorDrag","ui/Scrollbar.hx",210,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_218_onDragMove,"ui.Scrollbar","onDragMove",0xf117b566,"ui.Scrollbar.onDragMove","ui/Scrollbar.hx",218,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_33_drawArrow,"ui.Scrollbar","drawArrow",0xe20a0963,"ui.Scrollbar.drawArrow","ui/Scrollbar.hx",33,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_46_getSprite,"ui.Scrollbar","getSprite",0x345bbf79,"ui.Scrollbar.getSprite","ui/Scrollbar.hx",46,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_160_onRollOver,"ui.Scrollbar","onRollOver",0xdd5f1bb2,"ui.Scrollbar.onRollOver","ui/Scrollbar.hx",160,0xfe03a293)
HX_LOCAL_STACK_FRAME(_hx_pos_fee1ef306c36189a_165_onRollOut,"ui.Scrollbar","onRollOut",0x292c0bf0,"ui.Scrollbar.onRollOut","ui/Scrollbar.hx",165,0xfe03a293)
namespace ui{

void Scrollbar_obj::__construct(int widthParam,int heightParam,::hx::Null< Float >  __o_speed){
            		Float speed = __o_speed.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_fee1ef306c36189a_16_new)
HXLINE(  30)		this->graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(3)->init(0, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,16777215,1))->init(1, ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null()))->init(2,::util::GraphicsUtil_obj::END_FILL),true);
HXLINE(  29)		this->path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  27)		this->change = ((Float)0.0);
HXLINE(  26)		this->lastUpdateTime = 0;
HXLINE(  21)		this->jumpDist = ((Float)0.0);
HXLINE(  19)		this->speed = ((Float)0.0);
HXLINE(  18)		this->h = 0;
HXLINE(  17)		this->w = 0;
HXLINE(  55)		super::__construct();
HXLINE(  57)		this->background =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  58)		this->background->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onBackgroundDown_dyn(),null(),null(),null());
HXLINE(  59)		this->addChild(this->background);
HXLINE(  60)		this->upArrow = ::ui::Scrollbar_obj::getSprite(this->onUpArrowDown_dyn());
HXLINE(  61)		this->addChild(this->upArrow);
HXLINE(  62)		this->downArrow = ::ui::Scrollbar_obj::getSprite(this->onDownArrowDown_dyn());
HXLINE(  63)		this->addChild(this->downArrow);
HXLINE(  64)		this->posIndicator = ::ui::Scrollbar_obj::getSprite(this->onStartIndicatorDrag_dyn());
HXLINE(  65)		this->addChild(this->posIndicator);
HXLINE(  66)		this->resize(widthParam,heightParam,speed);
HXLINE(  67)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  68)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic Scrollbar_obj::__CreateEmpty() { return new Scrollbar_obj; }

void *Scrollbar_obj::_hx_vtable = 0;

Dynamic Scrollbar_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Scrollbar_obj > _hx_result = new Scrollbar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Scrollbar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x57ef5c72) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x57ef5c72;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

Float Scrollbar_obj::pos(){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_71_pos)
HXLINE(  72)		Float _hx_tmp = this->indicatorRect->height;
HXDLIN(  72)		if ((_hx_tmp == this->posIndicator->get_height())) {
HXLINE(  73)			return ((Float)0.0);
            		}
HXLINE(  75)		Float _hx_tmp1 = this->posIndicator->get_y();
HXDLIN(  75)		Float _hx_tmp2 = (_hx_tmp1 - this->indicatorRect->y);
HXDLIN(  75)		Float _hx_tmp3 = this->indicatorRect->height;
HXDLIN(  75)		return (_hx_tmp2 / (_hx_tmp3 - this->posIndicator->get_height()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scrollbar_obj,pos,return )

void Scrollbar_obj::setIndicatorSize(Float windowHeight,Float totalHeight,::hx::Null< bool >  __o_doSetPos){
            		bool doSetPos = __o_doSetPos.Default(true);
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_78_setIndicatorSize)
HXLINE(  79)		int h;
HXDLIN(  79)		if ((totalHeight == 0)) {
HXLINE(  79)			h = ::Std_obj::_hx_int(this->indicatorRect->height);
            		}
            		else {
HXLINE(  79)			h = ::Std_obj::_hx_int(((windowHeight / totalHeight) * this->indicatorRect->height));
            		}
HXLINE(  80)		h = ::Std_obj::_hx_int(::Math_obj::min(this->indicatorRect->height,::Math_obj::max(( (Float)(this->w) ),( (Float)(h) ))));
HXLINE(  81)		int _hx_tmp = this->w;
HXDLIN(  81)		this->drawIndicator(_hx_tmp,h,this->posIndicator->get_graphics());
HXLINE(  82)		this->jumpDist = (windowHeight / (totalHeight - windowHeight));
HXLINE(  83)		if (doSetPos) {
HXLINE(  84)			this->setPos(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Scrollbar_obj,setIndicatorSize,(void))

void Scrollbar_obj::setPos(Float v){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_88_setPos)
HXLINE(  89)		v = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),v));
HXLINE(  90)		 ::openfl::display::Sprite _hx_tmp = this->posIndicator;
HXDLIN(  90)		Float _hx_tmp1 = this->indicatorRect->height;
HXDLIN(  90)		Float _hx_tmp2 = (v * (_hx_tmp1 - this->posIndicator->get_height()));
HXDLIN(  90)		_hx_tmp->set_y((_hx_tmp2 + this->indicatorRect->y));
HXLINE(  91)		this->sendPos();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,setPos,(void))

void Scrollbar_obj::jumpUp(Float mult){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_95_jumpUp)
HXDLIN(  95)		Float _hx_tmp = this->pos();
HXDLIN(  95)		this->setPos((_hx_tmp - (this->jumpDist * mult)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,jumpUp,(void))

void Scrollbar_obj::jumpDown(Float mult){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_99_jumpDown)
HXDLIN(  99)		Float _hx_tmp = this->pos();
HXDLIN(  99)		this->setPos((_hx_tmp + (this->jumpDist * mult)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,jumpDown,(void))

void Scrollbar_obj::resize(int widthParam,int heightParam,::hx::Null< Float >  __o_speed){
            		Float speed = __o_speed.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_fee1ef306c36189a_102_resize)
HXLINE( 103)		this->w = widthParam;
HXLINE( 104)		this->h = heightParam;
HXLINE( 105)		this->speed = speed;
HXLINE( 106)		int arrowHeight = ::Std_obj::_hx_int((( (Float)(this->w) ) * ((Float)0.75)));
HXLINE( 107)		this->indicatorRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,(arrowHeight + 5),this->w,((this->h - (arrowHeight * 2)) - 10));
HXLINE( 108)		 ::openfl::display::Graphics g = this->background->get_graphics();
HXLINE( 109)		g->clear();
HXLINE( 110)		g->beginFill(5526612,1);
HXLINE( 111)		g->drawRect(this->indicatorRect->x,this->indicatorRect->y,this->indicatorRect->width,this->indicatorRect->height);
HXLINE( 112)		g->endFill();
HXLINE( 113)		int _hx_tmp = this->w;
HXDLIN( 113)		::ui::Scrollbar_obj::drawArrow(arrowHeight,_hx_tmp,this->upArrow->get_graphics());
HXLINE( 114)		this->upArrow->set_rotation(( (Float)(-90) ));
HXLINE( 115)		this->upArrow->set_x((( (Float)(this->w) ) / ( (Float)(2) )));
HXLINE( 116)		this->upArrow->set_y((( (Float)(arrowHeight) ) / ( (Float)(2) )));
HXLINE( 117)		int _hx_tmp1 = this->w;
HXDLIN( 117)		::ui::Scrollbar_obj::drawArrow(arrowHeight,_hx_tmp1,this->downArrow->get_graphics());
HXLINE( 118)		this->downArrow->set_x((( (Float)(this->w) ) / ( (Float)(2) )));
HXLINE( 119)		this->downArrow->set_y((( (Float)(this->h) ) - (( (Float)(arrowHeight) ) / ( (Float)(2) ))));
HXLINE( 120)		this->downArrow->set_rotation(( (Float)(90) ));
HXLINE( 121)		int _hx_tmp2 = this->w;
HXDLIN( 121)		int _hx_tmp3 = this->h;
HXDLIN( 121)		this->drawIndicator(_hx_tmp2,_hx_tmp3,this->posIndicator->get_graphics());
HXLINE( 122)		this->posIndicator->set_x(( (Float)(0) ));
HXLINE( 123)		this->posIndicator->set_y(this->indicatorRect->y);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Scrollbar_obj,resize,(void))

void Scrollbar_obj::sendPos(){
            	HX_GC_STACKFRAME(&_hx_pos_fee1ef306c36189a_127_sendPos)
HXDLIN( 127)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scrollbar_obj,sendPos,(void))

void Scrollbar_obj::drawIndicator(int w,int h, ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_130_drawIndicator)
HXLINE( 131)		::util::GraphicsUtil_obj::clearPath(this->path);
HXLINE( 132)		::util::GraphicsUtil_obj::drawCutEdgeRect(0,0,w,h,4,::Array_obj< int >::fromData( _hx_array_data_5500212c_9,4),this->path);
HXLINE( 133)		this->graphicsData->set(1,this->path);
HXLINE( 134)		g->clear();
HXLINE( 135)		g->drawGraphicsData(this->graphicsData);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Scrollbar_obj,drawIndicator,(void))

void Scrollbar_obj::onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_139_onAddedToStage)
HXDLIN( 139)		this->parent->addEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onAddedToStage,(void))

void Scrollbar_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_142_onRemovedFromStage)
HXLINE( 143)		this->parent->removeEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null());
HXLINE( 144)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null());
HXLINE( 145)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onRemovedFromStage,(void))

void Scrollbar_obj::onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_149_onMouseWheel)
HXDLIN( 149)		if ((event->delta > 0)) {
HXLINE( 150)			this->jumpUp(((Float)0.2));
            		}
            		else {
HXLINE( 152)			if ((event->delta < 0)) {
HXLINE( 153)				this->jumpDown(((Float)0.2));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onMouseWheel,(void))

void Scrollbar_obj::onBackgroundDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_169_onBackgroundDown)
HXDLIN( 169)		Float event1 = event->localY;
HXDLIN( 169)		if ((event1 < this->posIndicator->get_y())) {
HXLINE( 170)			this->jumpUp(( (Float)(1) ));
            		}
            		else {
HXLINE( 172)			this->jumpDown(( (Float)(1) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onBackgroundDown,(void))

void Scrollbar_obj::onUpArrowDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_176_onUpArrowDown)
HXLINE( 177)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onArrowFrame_dyn(),null(),null(),null());
HXLINE( 178)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onArrowUp_dyn(),null(),null(),null());
HXLINE( 179)		this->lastUpdateTime = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 180)		this->change = -(this->speed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onUpArrowDown,(void))

void Scrollbar_obj::onDownArrowDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_183_onDownArrowDown)
HXLINE( 184)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onArrowFrame_dyn(),null(),null(),null());
HXLINE( 185)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onArrowUp_dyn(),null(),null(),null());
HXLINE( 186)		this->lastUpdateTime = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 187)		this->change = this->speed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onDownArrowDown,(void))

void Scrollbar_obj::onArrowFrame( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_190_onArrowFrame)
HXLINE( 191)		int time = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 193)		int dist = ::Math_obj::round(((( (Float)((this->h - (this->w * 3))) ) * (( (Float)((time - this->lastUpdateTime)) ) / ( (Float)(1000) ))) * this->change));
HXLINE( 194)		Float _hx_tmp = (this->posIndicator->get_y() + dist);
HXDLIN( 194)		Float _hx_tmp1 = (_hx_tmp - this->indicatorRect->y);
HXDLIN( 194)		Float _hx_tmp2 = this->indicatorRect->height;
HXDLIN( 194)		this->setPos((_hx_tmp1 / (_hx_tmp2 - this->posIndicator->get_height())));
HXLINE( 195)		this->lastUpdateTime = time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onArrowFrame,(void))

void Scrollbar_obj::onArrowUp( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_198_onArrowUp)
HXLINE( 199)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onArrowFrame_dyn(),null());
HXLINE( 200)		this->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onArrowUp_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onArrowUp,(void))

void Scrollbar_obj::onStartIndicatorDrag( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_fee1ef306c36189a_203_onStartIndicatorDrag)
HXLINE( 204)		 ::openfl::display::Sprite _hx_tmp = this->posIndicator;
HXDLIN( 204)		Float _hx_tmp1 = this->indicatorRect->y;
HXDLIN( 204)		Float _hx_tmp2 = this->indicatorRect->height;
HXDLIN( 204)		_hx_tmp->startDrag(false, ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,_hx_tmp1,0,(_hx_tmp2 - this->posIndicator->get_height())));
HXLINE( 205)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onStopIndicatorDrag_dyn(),null(),null(),null());
HXLINE( 206)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onDragMove_dyn(),null(),null(),null());
HXLINE( 207)		this->sendPos();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onStartIndicatorDrag,(void))

void Scrollbar_obj::onStopIndicatorDrag( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_210_onStopIndicatorDrag)
HXLINE( 211)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onStopIndicatorDrag_dyn(),null());
HXLINE( 212)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onDragMove_dyn(),null());
HXLINE( 213)		this->posIndicator->stopDrag();
HXLINE( 214)		this->sendPos();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onStopIndicatorDrag,(void))

void Scrollbar_obj::onDragMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_218_onDragMove)
HXDLIN( 218)		this->sendPos();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onDragMove,(void))

void Scrollbar_obj::drawArrow(int w,int h, ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_fee1ef306c36189a_33_drawArrow)
HXLINE(  34)		g->clear();
HXLINE(  35)		g->beginFill(3487029,((Float)0.01));
HXLINE(  36)		g->drawRect((( (Float)(-(w)) ) / ( (Float)(2) )),(( (Float)(-(h)) ) / ( (Float)(2) )),( (Float)(w) ),( (Float)(h) ));
HXLINE(  37)		g->endFill();
HXLINE(  38)		g->beginFill(16777215,1);
HXLINE(  39)		g->moveTo((( (Float)(-(w)) ) / ( (Float)(2) )),(( (Float)(-(h)) ) / ( (Float)(2) )));
HXLINE(  40)		g->lineTo((( (Float)(w) ) / ( (Float)(2) )),( (Float)(0) ));
HXLINE(  41)		g->lineTo((( (Float)(-(w)) ) / ( (Float)(2) )),(( (Float)(h) ) / ( (Float)(2) )));
HXLINE(  42)		g->lineTo((( (Float)(-(w)) ) / ( (Float)(2) )),(( (Float)(-(h)) ) / ( (Float)(2) )));
HXLINE(  43)		g->endFill();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Scrollbar_obj,drawArrow,(void))

 ::openfl::display::Sprite Scrollbar_obj::getSprite( ::Dynamic downFunction){
            	HX_GC_STACKFRAME(&_hx_pos_fee1ef306c36189a_46_getSprite)
HXLINE(  47)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  48)		sprite->addEventListener(HX_("mouseDown",27,b1,c2,ee),downFunction,null(),null(),null());
HXLINE(  49)		sprite->addEventListener(HX_("rollOver",71,ab,a8,12),::ui::Scrollbar_obj::onRollOver_dyn(),null(),null(),null());
HXLINE(  50)		sprite->addEventListener(HX_("rollOut",11,f9,11,5d),::ui::Scrollbar_obj::onRollOut_dyn(),null(),null(),null());
HXLINE(  51)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,getSprite,return )

void Scrollbar_obj::onRollOver( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_fee1ef306c36189a_160_onRollOver)
HXDLIN( 160)		::hx::TCast<  ::openfl::display::DisplayObject >::cast(event->target)->get_transform()->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,((Float)0.8627),((Float)0.5216),null(),null(),null(),null(),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onRollOver,(void))

void Scrollbar_obj::onRollOut( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_fee1ef306c36189a_165_onRollOut)
HXDLIN( 165)		::hx::TCast<  ::openfl::display::DisplayObject >::cast(event->target)->get_transform()->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,1,1,null(),null(),null(),null(),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scrollbar_obj,onRollOut,(void))


::hx::ObjectPtr< Scrollbar_obj > Scrollbar_obj::__new(int widthParam,int heightParam,::hx::Null< Float >  __o_speed) {
	::hx::ObjectPtr< Scrollbar_obj > __this = new Scrollbar_obj();
	__this->__construct(widthParam,heightParam,__o_speed);
	return __this;
}

::hx::ObjectPtr< Scrollbar_obj > Scrollbar_obj::__alloc(::hx::Ctx *_hx_ctx,int widthParam,int heightParam,::hx::Null< Float >  __o_speed) {
	Scrollbar_obj *__this = (Scrollbar_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Scrollbar_obj), true, "ui.Scrollbar"));
	*(void **)__this = Scrollbar_obj::_hx_vtable;
	__this->__construct(widthParam,heightParam,__o_speed);
	return __this;
}

Scrollbar_obj::Scrollbar_obj()
{
}

void Scrollbar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Scrollbar);
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(indicatorRect,"indicatorRect");
	HX_MARK_MEMBER_NAME(jumpDist,"jumpDist");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(upArrow,"upArrow");
	HX_MARK_MEMBER_NAME(downArrow,"downArrow");
	HX_MARK_MEMBER_NAME(posIndicator,"posIndicator");
	HX_MARK_MEMBER_NAME(lastUpdateTime,"lastUpdateTime");
	HX_MARK_MEMBER_NAME(change,"change");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Scrollbar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(indicatorRect,"indicatorRect");
	HX_VISIT_MEMBER_NAME(jumpDist,"jumpDist");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(upArrow,"upArrow");
	HX_VISIT_MEMBER_NAME(downArrow,"downArrow");
	HX_VISIT_MEMBER_NAME(posIndicator,"posIndicator");
	HX_VISIT_MEMBER_NAME(lastUpdateTime,"lastUpdateTime");
	HX_VISIT_MEMBER_NAME(change,"change");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Scrollbar_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return ::hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"h") ) { return ::hx::Val( h ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { return ::hx::Val( path ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"change") ) { return ::hx::Val( change ); }
		if (HX_FIELD_EQ(inName,"setPos") ) { return ::hx::Val( setPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"jumpUp") ) { return ::hx::Val( jumpUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upArrow") ) { return ::hx::Val( upArrow ); }
		if (HX_FIELD_EQ(inName,"sendPos") ) { return ::hx::Val( sendPos_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jumpDist") ) { return ::hx::Val( jumpDist ); }
		if (HX_FIELD_EQ(inName,"jumpDown") ) { return ::hx::Val( jumpDown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downArrow") ) { return ::hx::Val( downArrow ); }
		if (HX_FIELD_EQ(inName,"onArrowUp") ) { return ::hx::Val( onArrowUp_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"onDragMove") ) { return ::hx::Val( onDragMove_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"posIndicator") ) { return ::hx::Val( posIndicator ); }
		if (HX_FIELD_EQ(inName,"graphicsData") ) { return ::hx::Val( graphicsData ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return ::hx::Val( onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onArrowFrame") ) { return ::hx::Val( onArrowFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"indicatorRect") ) { return ::hx::Val( indicatorRect ); }
		if (HX_FIELD_EQ(inName,"drawIndicator") ) { return ::hx::Val( drawIndicator_dyn() ); }
		if (HX_FIELD_EQ(inName,"onUpArrowDown") ) { return ::hx::Val( onUpArrowDown_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lastUpdateTime") ) { return ::hx::Val( lastUpdateTime ); }
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onDownArrowDown") ) { return ::hx::Val( onDownArrowDown_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setIndicatorSize") ) { return ::hx::Val( setIndicatorSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"onBackgroundDown") ) { return ::hx::Val( onBackgroundDown_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"onStopIndicatorDrag") ) { return ::hx::Val( onStopIndicatorDrag_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onStartIndicatorDrag") ) { return ::hx::Val( onStartIndicatorDrag_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Scrollbar_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"drawArrow") ) { outValue = drawArrow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSprite") ) { outValue = getSprite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onRollOut") ) { outValue = onRollOut_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onRollOver") ) { outValue = onRollOver_dyn(); return true; }
	}
	return false;
}

::hx::Val Scrollbar_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast<  ::openfl::display::GraphicsPath >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"change") ) { change=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upArrow") ) { upArrow=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jumpDist") ) { jumpDist=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downArrow") ) { downArrow=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"posIndicator") ) { posIndicator=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graphicsData") ) { graphicsData=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"indicatorRect") ) { indicatorRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lastUpdateTime") ) { lastUpdateTime=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Scrollbar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("w",77,00,00,00));
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("indicatorRect",93,f4,9f,64));
	outFields->push(HX_("jumpDist",74,67,3c,ef));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("upArrow",6e,99,04,82));
	outFields->push(HX_("downArrow",07,4e,a5,3b));
	outFields->push(HX_("posIndicator",9b,17,25,3b));
	outFields->push(HX_("lastUpdateTime",ac,4c,38,79));
	outFields->push(HX_("change",70,91,72,b7));
	outFields->push(HX_("path",a5,e5,51,4a));
	outFields->push(HX_("graphicsData",95,3c,58,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Scrollbar_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Scrollbar_obj,w),HX_("w",77,00,00,00)},
	{::hx::fsInt,(int)offsetof(Scrollbar_obj,h),HX_("h",68,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Scrollbar_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Scrollbar_obj,indicatorRect),HX_("indicatorRect",93,f4,9f,64)},
	{::hx::fsFloat,(int)offsetof(Scrollbar_obj,jumpDist),HX_("jumpDist",74,67,3c,ef)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Scrollbar_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Scrollbar_obj,upArrow),HX_("upArrow",6e,99,04,82)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Scrollbar_obj,downArrow),HX_("downArrow",07,4e,a5,3b)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Scrollbar_obj,posIndicator),HX_("posIndicator",9b,17,25,3b)},
	{::hx::fsInt,(int)offsetof(Scrollbar_obj,lastUpdateTime),HX_("lastUpdateTime",ac,4c,38,79)},
	{::hx::fsFloat,(int)offsetof(Scrollbar_obj,change),HX_("change",70,91,72,b7)},
	{::hx::fsObject /*  ::openfl::display::GraphicsPath */ ,(int)offsetof(Scrollbar_obj,path),HX_("path",a5,e5,51,4a)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(Scrollbar_obj,graphicsData),HX_("graphicsData",95,3c,58,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Scrollbar_obj_sStaticStorageInfo = 0;
#endif

static ::String Scrollbar_obj_sMemberFields[] = {
	HX_("w",77,00,00,00),
	HX_("h",68,00,00,00),
	HX_("speed",87,97,69,81),
	HX_("indicatorRect",93,f4,9f,64),
	HX_("jumpDist",74,67,3c,ef),
	HX_("background",ee,93,1d,26),
	HX_("upArrow",6e,99,04,82),
	HX_("downArrow",07,4e,a5,3b),
	HX_("posIndicator",9b,17,25,3b),
	HX_("lastUpdateTime",ac,4c,38,79),
	HX_("change",70,91,72,b7),
	HX_("path",a5,e5,51,4a),
	HX_("graphicsData",95,3c,58,41),
	HX_("pos",94,5d,55,00),
	HX_("setIndicatorSize",2e,df,ae,25),
	HX_("setPos",12,eb,6c,6f),
	HX_("jumpUp",e9,a6,17,08),
	HX_("jumpDown",70,f8,40,ef),
	HX_("resize",f4,59,7b,08),
	HX_("sendPos",2c,05,9a,a8),
	HX_("drawIndicator",2b,fb,d4,f2),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onMouseWheel",35,ca,ca,bf),
	HX_("onBackgroundDown",ef,54,de,22),
	HX_("onUpArrowDown",11,2a,0a,09),
	HX_("onDownArrowDown",6a,e9,fd,6f),
	HX_("onArrowFrame",a3,f7,69,52),
	HX_("onArrowUp",25,41,63,1b),
	HX_("onStartIndicatorDrag",a0,52,53,89),
	HX_("onStopIndicatorDrag",e2,05,c4,36),
	HX_("onDragMove",64,19,18,04),
	::String(null()) };

::hx::Class Scrollbar_obj::__mClass;

static ::String Scrollbar_obj_sStaticFields[] = {
	HX_("drawArrow",25,af,9a,ed),
	HX_("getSprite",3b,65,ec,3f),
	HX_("onRollOver",b0,7f,5f,f0),
	HX_("onRollOut",b2,b1,bc,34),
	::String(null())
};

void Scrollbar_obj::__register()
{
	Scrollbar_obj _hx_dummy;
	Scrollbar_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.Scrollbar",2c,21,00,55);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Scrollbar_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Scrollbar_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Scrollbar_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Scrollbar_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scrollbar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scrollbar_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
