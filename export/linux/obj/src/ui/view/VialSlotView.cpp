// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_model_VialModel
#include <game/model/VialModel.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Timer
#include <openfl/utils/Timer.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_model_VialData
#include <ui/model/VialData.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_InteractiveItemTile
#include <ui/panels/itemgrids/itemtiles/InteractiveItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile
#include <ui/panels/itemgrids/itemtiles/ItemTile.h>
#endif
#ifndef INCLUDED_ui_view_VialSlotView
#include <ui/view/VialSlotView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01c032ad5f5dce06_30_new,"ui.view.VialSlotView","new",0xaefb08a2,"ui.view.VialSlotView.new","ui/view/VialSlotView.hx",30,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_75_init,"ui.view.VialSlotView","init",0x69653c8e,"ui.view.VialSlotView.init","ui/view/VialSlotView.hx",75,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_81_draw,"ui.view.VialSlotView","draw",0x661a2d82,"ui.view.VialSlotView.draw","ui/view/VialSlotView.hx",81,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_91_setData,"ui.view.VialSlotView","setData",0x06fd182e,"ui.view.VialSlotView.setData","ui/view/VialSlotView.hx",91,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_119_setPendingDoubleClick,"ui.view.VialSlotView","setPendingDoubleClick",0xb7b90564,"ui.view.VialSlotView.setPendingDoubleClick","ui/view/VialSlotView.hx",119,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_128_beginDrag,"ui.view.VialSlotView","beginDrag",0x9bb3e07f,"ui.view.VialSlotView.beginDrag","ui/view/VialSlotView.hx",128,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_136_onMouseOut,"ui.view.VialSlotView","onMouseOut",0xce05efa6,"ui.view.VialSlotView.onMouseOut","ui/view/VialSlotView.hx",136,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_139_onMouseUp,"ui.view.VialSlotView","onMouseUp",0xa8878243,"ui.view.VialSlotView.onMouseUp","ui/view/VialSlotView.hx",139,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_155_onMouseDown,"ui.view.VialSlotView","onMouseDown",0x6fe1de4a,"ui.view.VialSlotView.onMouseDown","ui/view/VialSlotView.hx",155,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_159_beginDragCheck,"ui.view.VialSlotView","beginDragCheck",0xac76fbc9,"ui.view.VialSlotView.beginDragCheck","ui/view/VialSlotView.hx",159,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_166_cancelDragCheck,"ui.view.VialSlotView","cancelDragCheck",0xabfe0e9c,"ui.view.VialSlotView.cancelDragCheck","ui/view/VialSlotView.hx",166,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_172_onMouseMoveCheckDrag,"ui.view.VialSlotView","onMouseMoveCheckDrag",0x9de3a4a3,"ui.view.VialSlotView.onMouseMoveCheckDrag","ui/view/VialSlotView.hx",172,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_184_onDoubleClickTimerComplete,"ui.view.VialSlotView","onDoubleClickTimerComplete",0x33a389e4,"ui.view.VialSlotView.onDoubleClickTimerComplete","ui/view/VialSlotView.hx",184,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_187_endDrag,"ui.view.VialSlotView","endDrag",0x23aa66b1,"ui.view.VialSlotView.endDrag","ui/view/VialSlotView.hx",187,0x7479f0ae)
HX_LOCAL_STACK_FRAME(_hx_pos_01c032ad5f5dce06_208_onRemovedFromStage,"ui.view.VialSlotView","onRemovedFromStage",0xdb2c2e71,"ui.view.VialSlotView.onRemovedFromStage","ui/view/VialSlotView.hx",208,0x7479f0ae)
namespace ui{
namespace view{

void VialSlotView_obj::__construct(::Array< int > cuts,int position,bool fillWhole){
            	HX_GC_STACKFRAME(&_hx_pos_01c032ad5f5dce06_30_new)
HXLINE(  45)		this->showVials = false;
HXLINE(  44)		this->isDragging = false;
HXLINE(  43)		this->pendingSecondClick = false;
HXLINE(  36)		this->objectType = 0;
HXLINE(  35)		this->position = 0;
HXLINE(  34)		this->buttonWidth = 84;
HXLINE(  48)		super::__construct();
HXLINE(  50)		this->mouseChildren = false;
HXLINE(  51)		this->position = position;
HXLINE(  53)		if (fillWhole) {
HXLINE(  54)			this->buttonWidth = ((this->buttonWidth * 2) + 5);
            		}
HXLINE(  55)		this->text =  ::ui::SimpleText_obj::__alloc( HX_CTX ,13,16777215,false,this->buttonWidth,24,null());
HXLINE(  56)		 ::ui::SimpleText _hx_tmp = this->text;
HXDLIN(  56)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,4,4,2,null(),null(),null(),null())));
HXLINE(  57)		this->text->set_x(( (Float)(6) ));
HXLINE(  58)		this->text->set_y(( (Float)(25) ));
HXLINE(  59)		this->addChild(this->text);
HXLINE(  61)		this->get_graphics()->clear();
HXLINE(  62)		this->get_graphics()->beginFill(16777215,0);
HXLINE(  63)		this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(40) ),( (Float)(60) ));
HXLINE(  64)		this->get_graphics()->endFill();
HXLINE(  65)		this->vialIconDraggableSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  66)		this->vialIconDraggableSprite->set_cacheAsBitmap(true);
HXLINE(  67)		this->doubleClickTimer =  ::openfl::utils::Timer_obj::__alloc( HX_CTX ,( (Float)(250) ),1);
HXLINE(  68)		this->doubleClickTimer->addEventListener(HX_("timerComplete",9e,49,cc,97),this->onDoubleClickTimerComplete_dyn(),null(),null(),null());
HXLINE(  69)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE(  70)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null(),null(),null());
HXLINE(  71)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null(),null(),null());
HXLINE(  72)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic VialSlotView_obj::__CreateEmpty() { return new VialSlotView_obj; }

void *VialSlotView_obj::_hx_vtable = 0;

Dynamic VialSlotView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VialSlotView_obj > _hx_result = new VialSlotView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool VialSlotView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3751925a || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void VialSlotView_obj::init( ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_75_init)
HXLINE(  76)		 ::ui::model::VialData vialModel = ( ( ::ui::model::VialData)(::game::model::VialModel_obj::vialData->get(this->position)) );
HXLINE(  77)		int count = player->getVialCount(vialModel->objectId);
HXLINE(  78)		this->setData(count,vialModel->objectId);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,init,(void))

void VialSlotView_obj::draw( ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_81_draw)
HXLINE(  82)		 ::ui::model::VialData potModel = null();
HXLINE(  83)		int count = 0;
HXLINE(  84)		bool _hx_tmp;
HXDLIN(  84)		if ((this->objectType != 2721)) {
HXLINE(  84)			_hx_tmp = (this->objectType == 2722);
            		}
            		else {
HXLINE(  84)			_hx_tmp = true;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  85)			potModel = ::game::model::VialModel_obj::getVialData(this->objectType);
HXLINE(  86)			count = player->getVialCount(potModel->objectId);
HXLINE(  87)			this->setData(count,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,draw,(void))

void VialSlotView_obj::setData(int vials,::hx::Null< int >  __o_objectType){
            		int objectType = __o_objectType.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_01c032ad5f5dce06_91_setData)
HXLINE(  92)		 ::openfl::display::BitmapData iconBD = null();
HXLINE(  93)		 ::openfl::display::Bitmap vialIconBig = null();
HXLINE(  94)		if ((objectType != -1)) {
HXLINE(  95)			this->objectType = objectType;
HXLINE(  96)			if (::hx::IsNotNull( this->vialIcon )) {
HXLINE(  97)				this->removeChild(this->vialIcon);
            			}
HXLINE(  99)			iconBD = ::objects::ObjectLibrary_obj::getRedrawnTextureFromType(objectType,40,false,null(),null());
HXLINE( 100)			this->vialIcon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,iconBD,null(),null());
HXLINE( 101)			this->vialIcon->set_cacheAsBitmap(true);
HXLINE( 102)			this->vialIcon->set_y(( (Float)(-3) ));
HXLINE( 103)			this->addChild(this->vialIcon);
HXLINE( 104)			iconBD = ::objects::ObjectLibrary_obj::getRedrawnTextureFromType(objectType,80,true,null(),null());
HXLINE( 105)			vialIconBig =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,iconBD,null(),null());
HXLINE( 106)			vialIconBig->set_cacheAsBitmap(true);
HXLINE( 107)			vialIconBig->set_x((vialIconBig->get_x() - ( (Float)(22) )));
HXLINE( 108)			vialIconBig->set_y((vialIconBig->get_y() - ( (Float)(22) )));
HXLINE( 109)			this->vialIconDraggableSprite->addChild(vialIconBig);
            		}
HXLINE( 112)		this->showVials = (vials > 0);
HXLINE( 113)		if (this->showVials) {
HXLINE( 114)			 ::ui::SimpleText _hx_tmp = this->text;
HXDLIN( 114)			_hx_tmp->set_text(::Std_obj::string(vials));
            		}
            		else {
HXLINE( 116)			this->text->set_text(HX_("0",30,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(VialSlotView_obj,setData,(void))

void VialSlotView_obj::setPendingDoubleClick(bool isPending){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_119_setPendingDoubleClick)
HXLINE( 120)		this->pendingSecondClick = isPending;
HXLINE( 121)		if (this->pendingSecondClick) {
HXLINE( 122)			this->doubleClickTimer->reset();
HXLINE( 123)			this->doubleClickTimer->start();
            		}
            		else {
HXLINE( 125)			this->doubleClickTimer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,setPendingDoubleClick,(void))

void VialSlotView_obj::beginDrag(){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_128_beginDrag)
HXLINE( 129)		this->isDragging = true;
HXLINE( 130)		this->vialIconDraggableSprite->startDrag(true,null());
HXLINE( 131)		this->stage->addChild(this->vialIconDraggableSprite);
HXLINE( 132)		this->vialIconDraggableSprite->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->endDrag_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(VialSlotView_obj,beginDrag,(void))

void VialSlotView_obj::onMouseOut( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_136_onMouseOut)
HXDLIN( 136)		this->setPendingDoubleClick(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,onMouseOut,(void))

void VialSlotView_obj::onMouseUp( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_139_onMouseUp)
HXLINE( 140)		if (this->isDragging) {
HXLINE( 141)			return;
            		}
HXLINE( 143)		if (e->shiftKey) {
HXLINE( 144)			this->setPendingDoubleClick(false);
HXLINE( 145)			::Global_obj::useVial(( ( ::ui::model::VialData)(::game::model::VialModel_obj::vialData->get(this->position)) )->objectId);
            		}
            		else {
HXLINE( 146)			if (!(this->pendingSecondClick)) {
HXLINE( 147)				this->setPendingDoubleClick(true);
            			}
            			else {
HXLINE( 149)				this->setPendingDoubleClick(false);
HXLINE( 150)				::Global_obj::useVial(( ( ::ui::model::VialData)(::game::model::VialModel_obj::vialData->get(this->position)) )->objectId);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,onMouseUp,(void))

void VialSlotView_obj::onMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_155_onMouseDown)
HXDLIN( 155)		if (this->showVials) {
HXLINE( 156)			this->beginDragCheck(e);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,onMouseDown,(void))

void VialSlotView_obj::beginDragCheck( ::openfl::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_01c032ad5f5dce06_159_beginDragCheck)
HXLINE( 160)		this->dragStart =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,e->stageX,e->stageY);
HXLINE( 161)		this->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMoveCheckDrag_dyn(),null(),null(),null());
HXLINE( 162)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->cancelDragCheck_dyn(),null(),null(),null());
HXLINE( 163)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->cancelDragCheck_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,beginDragCheck,(void))

void VialSlotView_obj::cancelDragCheck( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_166_cancelDragCheck)
HXLINE( 167)		this->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMoveCheckDrag_dyn(),null());
HXLINE( 168)		this->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->cancelDragCheck_dyn(),null());
HXLINE( 169)		this->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->cancelDragCheck_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,cancelDragCheck,(void))

void VialSlotView_obj::onMouseMoveCheckDrag( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_172_onMouseMoveCheckDrag)
HXLINE( 173)		Float dx = (e->stageX - this->dragStart->x);
HXLINE( 174)		Float dy = (e->stageY - this->dragStart->y);
HXLINE( 176)		if ((::Math_obj::sqrt(((dx * dx) + (dy * dy))) > 3)) {
HXLINE( 177)			this->cancelDragCheck(null());
HXLINE( 178)			this->setPendingDoubleClick(false);
HXLINE( 179)			this->beginDrag();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,onMouseMoveCheckDrag,(void))

void VialSlotView_obj::onDoubleClickTimerComplete( ::openfl::events::TimerEvent e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_184_onDoubleClickTimerComplete)
HXDLIN( 184)		this->setPendingDoubleClick(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,onDoubleClickTimerComplete,(void))

void VialSlotView_obj::endDrag( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_187_endDrag)
HXLINE( 188)		this->isDragging = false;
HXLINE( 189)		this->vialIconDraggableSprite->stopDrag();
HXLINE( 190)		this->vialIconDraggableSprite->set_x(this->dragStart->x);
HXLINE( 191)		this->vialIconDraggableSprite->set_y(this->dragStart->y);
HXLINE( 192)		this->stage->removeChild(this->vialIconDraggableSprite);
HXLINE( 193)		this->vialIconDraggableSprite->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->endDrag_dyn(),null());
HXLINE( 195)		 ::ui::panels::itemgrids::itemtiles::InteractiveItemTile tile = null();
HXLINE( 196)		 ::objects::Player player = ::Global_obj::gameSprite->map->player;
HXLINE( 197)		 ::openfl::display::DisplayObject target = this->vialIconDraggableSprite->dropTarget;
HXLINE( 198)		bool _hx_tmp;
HXDLIN( 198)		if (::hx::IsNotNull( target )) {
HXLINE( 198)			_hx_tmp = ::Std_obj::isOfType(target,::hx::ClassOf< ::openfl::display::Stage >());
            		}
            		else {
HXLINE( 198)			_hx_tmp = true;
            		}
HXDLIN( 198)		if (_hx_tmp) {
HXLINE( 199)			::network::NetworkHandler_obj::invDrop(player,::game::model::VialModel_obj::getVialSlot(this->objectType),this->objectType);
            		}
            		else {
HXLINE( 200)			if (::Std_obj::isOfType(target,::hx::ClassOf< ::ui::panels::itemgrids::itemtiles::InteractiveItemTile >())) {
HXLINE( 201)				tile = ::hx::TCast<  ::ui::panels::itemgrids::itemtiles::InteractiveItemTile >::cast(target);
HXLINE( 202)				bool _hx_tmp1;
HXDLIN( 202)				if ((tile->getItemId() == -1)) {
HXLINE( 202)					_hx_tmp1 = ::hx::IsInstanceNotEq( tile->ownerGrid->owner,player );
            				}
            				else {
HXLINE( 202)					_hx_tmp1 = false;
            				}
HXDLIN( 202)				if (_hx_tmp1) {
HXLINE( 203)					::network::NetworkHandler_obj::invSwapVial(player,player,::game::model::VialModel_obj::getVialSlot(this->objectType),this->objectType,tile->ownerGrid->owner,tile->tileId,-1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,endDrag,(void))

void VialSlotView_obj::onRemovedFromStage( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_01c032ad5f5dce06_208_onRemovedFromStage)
HXLINE( 209)		this->setPendingDoubleClick(false);
HXLINE( 210)		this->cancelDragCheck(null());
HXLINE( 211)		if (this->isDragging) {
HXLINE( 212)			this->vialIconDraggableSprite->stopDrag();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VialSlotView_obj,onRemovedFromStage,(void))


::hx::ObjectPtr< VialSlotView_obj > VialSlotView_obj::__new(::Array< int > cuts,int position,bool fillWhole) {
	::hx::ObjectPtr< VialSlotView_obj > __this = new VialSlotView_obj();
	__this->__construct(cuts,position,fillWhole);
	return __this;
}

::hx::ObjectPtr< VialSlotView_obj > VialSlotView_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< int > cuts,int position,bool fillWhole) {
	VialSlotView_obj *__this = (VialSlotView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VialSlotView_obj), true, "ui.view.VialSlotView"));
	*(void **)__this = VialSlotView_obj::_hx_vtable;
	__this->__construct(cuts,position,fillWhole);
	return __this;
}

VialSlotView_obj::VialSlotView_obj()
{
}

void VialSlotView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VialSlotView);
	HX_MARK_MEMBER_NAME(buttonWidth,"buttonWidth");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(objectType,"objectType");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(vialIconDraggableSprite,"vialIconDraggableSprite");
	HX_MARK_MEMBER_NAME(vialIcon,"vialIcon");
	HX_MARK_MEMBER_NAME(doubleClickTimer,"doubleClickTimer");
	HX_MARK_MEMBER_NAME(dragStart,"dragStart");
	HX_MARK_MEMBER_NAME(pendingSecondClick,"pendingSecondClick");
	HX_MARK_MEMBER_NAME(isDragging,"isDragging");
	HX_MARK_MEMBER_NAME(showVials,"showVials");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VialSlotView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buttonWidth,"buttonWidth");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(objectType,"objectType");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(vialIconDraggableSprite,"vialIconDraggableSprite");
	HX_VISIT_MEMBER_NAME(vialIcon,"vialIcon");
	HX_VISIT_MEMBER_NAME(doubleClickTimer,"doubleClickTimer");
	HX_VISIT_MEMBER_NAME(dragStart,"dragStart");
	HX_VISIT_MEMBER_NAME(pendingSecondClick,"pendingSecondClick");
	HX_VISIT_MEMBER_NAME(isDragging,"isDragging");
	HX_VISIT_MEMBER_NAME(showVials,"showVials");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VialSlotView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setData") ) { return ::hx::Val( setData_dyn() ); }
		if (HX_FIELD_EQ(inName,"endDrag") ) { return ::hx::Val( endDrag_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return ::hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"vialIcon") ) { return ::hx::Val( vialIcon ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dragStart") ) { return ::hx::Val( dragStart ); }
		if (HX_FIELD_EQ(inName,"showVials") ) { return ::hx::Val( showVials ); }
		if (HX_FIELD_EQ(inName,"beginDrag") ) { return ::hx::Val( beginDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objectType") ) { return ::hx::Val( objectType ); }
		if (HX_FIELD_EQ(inName,"isDragging") ) { return ::hx::Val( isDragging ); }
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonWidth") ) { return ::hx::Val( buttonWidth ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"beginDragCheck") ) { return ::hx::Val( beginDragCheck_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cancelDragCheck") ) { return ::hx::Val( cancelDragCheck_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"doubleClickTimer") ) { return ::hx::Val( doubleClickTimer ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pendingSecondClick") ) { return ::hx::Val( pendingSecondClick ); }
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onMouseMoveCheckDrag") ) { return ::hx::Val( onMouseMoveCheckDrag_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setPendingDoubleClick") ) { return ::hx::Val( setPendingDoubleClick_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"vialIconDraggableSprite") ) { return ::hx::Val( vialIconDraggableSprite ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"onDoubleClickTimerComplete") ) { return ::hx::Val( onDoubleClickTimerComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VialSlotView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vialIcon") ) { vialIcon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dragStart") ) { dragStart=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showVials") ) { showVials=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objectType") ) { objectType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDragging") ) { isDragging=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonWidth") ) { buttonWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"doubleClickTimer") ) { doubleClickTimer=inValue.Cast<  ::openfl::utils::Timer >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pendingSecondClick") ) { pendingSecondClick=inValue.Cast< bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"vialIconDraggableSprite") ) { vialIconDraggableSprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VialSlotView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buttonWidth",b4,76,0d,18));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("objectType",19,69,41,cf));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("vialIconDraggableSprite",3b,81,39,29));
	outFields->push(HX_("vialIcon",77,09,ff,93));
	outFields->push(HX_("doubleClickTimer",ce,3c,ba,f0));
	outFields->push(HX_("dragStart",ce,e3,60,e6));
	outFields->push(HX_("pendingSecondClick",1d,d9,e6,7f));
	outFields->push(HX_("isDragging",d9,4e,3b,b2));
	outFields->push(HX_("showVials",98,39,5e,65));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VialSlotView_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(VialSlotView_obj,buttonWidth),HX_("buttonWidth",b4,76,0d,18)},
	{::hx::fsInt,(int)offsetof(VialSlotView_obj,position),HX_("position",a9,a0,fa,ca)},
	{::hx::fsInt,(int)offsetof(VialSlotView_obj,objectType),HX_("objectType",19,69,41,cf)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(VialSlotView_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(VialSlotView_obj,vialIconDraggableSprite),HX_("vialIconDraggableSprite",3b,81,39,29)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(VialSlotView_obj,vialIcon),HX_("vialIcon",77,09,ff,93)},
	{::hx::fsObject /*  ::openfl::utils::Timer */ ,(int)offsetof(VialSlotView_obj,doubleClickTimer),HX_("doubleClickTimer",ce,3c,ba,f0)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(VialSlotView_obj,dragStart),HX_("dragStart",ce,e3,60,e6)},
	{::hx::fsBool,(int)offsetof(VialSlotView_obj,pendingSecondClick),HX_("pendingSecondClick",1d,d9,e6,7f)},
	{::hx::fsBool,(int)offsetof(VialSlotView_obj,isDragging),HX_("isDragging",d9,4e,3b,b2)},
	{::hx::fsBool,(int)offsetof(VialSlotView_obj,showVials),HX_("showVials",98,39,5e,65)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VialSlotView_obj_sStaticStorageInfo = 0;
#endif

static ::String VialSlotView_obj_sMemberFields[] = {
	HX_("buttonWidth",b4,76,0d,18),
	HX_("position",a9,a0,fa,ca),
	HX_("objectType",19,69,41,cf),
	HX_("text",ad,cc,f9,4c),
	HX_("vialIconDraggableSprite",3b,81,39,29),
	HX_("vialIcon",77,09,ff,93),
	HX_("doubleClickTimer",ce,3c,ba,f0),
	HX_("dragStart",ce,e3,60,e6),
	HX_("pendingSecondClick",1d,d9,e6,7f),
	HX_("isDragging",d9,4e,3b,b2),
	HX_("showVials",98,39,5e,65),
	HX_("init",10,3b,bb,45),
	HX_("draw",04,2c,70,42),
	HX_("setData",ec,96,e7,07),
	HX_("setPendingDoubleClick",a2,94,84,29),
	HX_("beginDrag",bd,0a,4a,8b),
	HX_("onMouseOut",a8,bb,d4,81),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onMouseDown",08,94,05,11),
	HX_("beginDragCheck",cb,f0,68,44),
	HX_("cancelDragCheck",5a,7b,c2,07),
	HX_("onMouseMoveCheckDrag",25,47,66,9e),
	HX_("onDoubleClickTimerComplete",e6,f9,b1,34),
	HX_("endDrag",6f,e5,94,24),
	HX_("onRemovedFromStage",73,cc,89,12),
	::String(null()) };

::hx::Class VialSlotView_obj::__mClass;

void VialSlotView_obj::__register()
{
	VialSlotView_obj _hx_dummy;
	VialSlotView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.view.VialSlotView",b0,cf,25,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VialSlotView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VialSlotView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VialSlotView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VialSlotView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace view
