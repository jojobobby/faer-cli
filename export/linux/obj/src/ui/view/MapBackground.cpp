// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_map_Camera
#include <map/Camera.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_ObjectProperties
#include <objects/ObjectProperties.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_ui_view_MapBackground
#include <ui/view/MapBackground.h>
#endif
#ifndef INCLUDED_util_MathUtil
#include <util/MathUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df54e225f5c76f49_57_new,"ui.view.MapBackground","new",0x73858e0d,"ui.view.MapBackground.new","ui/view/MapBackground.hx",57,0xb31cce63)
HX_LOCAL_STACK_FRAME(_hx_pos_df54e225f5c76f49_67_onAddedToStage,"ui.view.MapBackground","onAddedToStage",0x60fef995,"ui.view.MapBackground.onAddedToStage","ui/view/MapBackground.hx",67,0xb31cce63)
HX_LOCAL_STACK_FRAME(_hx_pos_df54e225f5c76f49_73_onRemovedFromStage,"ui.view.MapBackground","onRemovedFromStage",0x08607966,"ui.view.MapBackground.onRemovedFromStage","ui/view/MapBackground.hx",73,0xb31cce63)
HX_LOCAL_STACK_FRAME(_hx_pos_df54e225f5c76f49_22_makeMap,"ui.view.MapBackground","makeMap",0x13c5897b,"ui.view.MapBackground.makeMap","ui/view/MapBackground.hx",22,0xb31cce63)
HX_LOCAL_STACK_FRAME(_hx_pos_df54e225f5c76f49_76_onEnterFrame,"ui.view.MapBackground","onEnterFrame",0xe6154aa7,"ui.view.MapBackground.onEnterFrame","ui/view/MapBackground.hx",76,0xb31cce63)
HX_LOCAL_STACK_FRAME(_hx_pos_df54e225f5c76f49_20_boot,"ui.view.MapBackground","boot",0x996fbde5,"ui.view.MapBackground.boot","ui/view/MapBackground.hx",20,0xb31cce63)
namespace ui{
namespace view{

void MapBackground_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_df54e225f5c76f49_57_new)
HXLINE(  58)		super::__construct();
HXLINE(  63)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  64)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic MapBackground_obj::__CreateEmpty() { return new MapBackground_obj; }

void *MapBackground_obj::_hx_vtable = 0;

Dynamic MapBackground_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MapBackground_obj > _hx_result = new MapBackground_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MapBackground_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7fcf15b1;
		}
	}
}

void MapBackground_obj::onAddedToStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_df54e225f5c76f49_67_onAddedToStage)
HXLINE(  68)		::ui::view::MapBackground_obj::backgroundMap = ::ui::view::MapBackground_obj::makeMap();
HXLINE(  69)		this->addEventListener(HX_("enterFrame",f5,03,50,02),::ui::view::MapBackground_obj::onEnterFrame_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MapBackground_obj,onAddedToStage,(void))

void MapBackground_obj::onRemovedFromStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_df54e225f5c76f49_73_onRemovedFromStage)
HXDLIN(  73)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),::ui::view::MapBackground_obj::onEnterFrame_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MapBackground_obj,onRemovedFromStage,(void))

 ::map::Map MapBackground_obj::backgroundMap;

int MapBackground_obj::nextFakeObjectId;

 ::map::Map MapBackground_obj::makeMap(){
            	HX_GC_STACKFRAME(&_hx_pos_df54e225f5c76f49_22_makeMap)
HXLINE(  23)		 ::openfl::utils::ByteArrayData data = ::openfl::utils::Assets_obj::getBytes(HX_("assets/misc/MapBackground.fm",a2,e1,0d,07));
HXLINE(  24)		{
HXLINE(  24)			 ::Dynamic algorithm = null();
HXDLIN(  24)			data->uncompress(algorithm);
            		}
HXLINE(  26)		if ((( (signed char)(data->readUnsignedByte()) ) != 1)) {
HXLINE(  27)			HX_STACK_DO_THROW( ::haxe::ValueException_obj::__alloc( HX_CTX ,HX_("Version not supported",b9,8d,84,03),null(),null()));
            		}
HXLINE(  29)		 ::map::Map map =  ::map::Map_obj::__alloc( HX_CTX );
HXLINE(  30)		data->readUnsignedShort();
HXLINE(  31)		data->readUnsignedShort();
HXLINE(  32)		unsigned short w = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE(  33)		unsigned short h = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE(  34)		map->setProps(( (int)(w) ),( (int)(h) ),HX_("Background Map",6a,4d,f8,a8),0,false,false);
HXLINE(  35)		map->initialize();
HXLINE(  37)		{
HXLINE(  37)			int _g = 0;
HXDLIN(  37)			int _g1 = ( (int)(h) );
HXDLIN(  37)			while((_g < _g1)){
HXLINE(  37)				_g = (_g + 1);
HXDLIN(  37)				int y = (_g - 1);
HXLINE(  38)				{
HXLINE(  38)					int _g2 = 0;
HXDLIN(  38)					int _g3 = ( (int)(w) );
HXDLIN(  38)					while((_g2 < _g3)){
HXLINE(  38)						_g2 = (_g2 + 1);
HXDLIN(  38)						int x = (_g2 - 1);
HXLINE(  39)						unsigned short ground = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE(  40)						if ((ground != 65535)) {
HXLINE(  41)							map->setGroundTile(( (unsigned short)(x) ),( (unsigned short)(y) ),ground);
            						}
HXLINE(  43)						unsigned short object = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE(  44)						if ((object != 65535)) {
HXLINE(  45)							 ::objects::GameObject go = ::objects::ObjectLibrary_obj::getObjectFromType(( (int)(object) ));
HXLINE(  46)							go->size = ( (float)((( (Float)(go->props->getSize()) ) / ( (Float)(100) ))) );
HXLINE(  47)							go->objectId = ((int)2130706432 | ::ui::view::MapBackground_obj::nextFakeObjectId++);
HXLINE(  48)							map->addGameObject(go,( (float)((x + ((Float)0.5))) ),( (float)((y + ((Float)0.5))) ));
            						}
HXLINE(  51)						data->readUnsignedByte();
            					}
            				}
            			}
            		}
HXLINE(  54)		return map;
            	}


void MapBackground_obj::onEnterFrame( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_df54e225f5c76f49_76_onEnterFrame)
HXLINE(  77)		int time = ::lime::_hx_system::System_obj::getTimer();
HXLINE(  80)		::map::Camera_obj::configureCamera((60 + (( (float)(5) ) * ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((( (Float)(time) ) * ( (Float)(( (float)(((Float)0.0005)) )) )) * ((Float)10430.3783504704534))) & 65535)])),(70 + (( (float)(5) ) * ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((( (Float)(time) ) * ( (Float)(( (float)(((Float)0.0005)) )) )) * ((Float)10430.3783504704534))) & 65535)])));
HXLINE(  81)		::ui::view::MapBackground_obj::backgroundMap->draw(time);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MapBackground_obj,onEnterFrame,(void))


::hx::ObjectPtr< MapBackground_obj > MapBackground_obj::__new() {
	::hx::ObjectPtr< MapBackground_obj > __this = new MapBackground_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MapBackground_obj > MapBackground_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MapBackground_obj *__this = (MapBackground_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MapBackground_obj), true, "ui.view.MapBackground"));
	*(void **)__this = MapBackground_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MapBackground_obj::MapBackground_obj()
{
}

::hx::Val MapBackground_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MapBackground_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { outValue = onEnterFrame_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nextFakeObjectId") ) { outValue = ( nextFakeObjectId ); return true; }
	}
	return false;
}

bool MapBackground_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"nextFakeObjectId") ) { nextFakeObjectId=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MapBackground_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo MapBackground_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::map::Map */ ,(void *) &MapBackground_obj::backgroundMap,HX_("backgroundMap",4e,d7,eb,91)},
	{::hx::fsInt,(void *) &MapBackground_obj::nextFakeObjectId,HX_("nextFakeObjectId",c2,b2,4a,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MapBackground_obj_sMemberFields[] = {
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	::String(null()) };

static void MapBackground_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MapBackground_obj::backgroundMap,"backgroundMap");
	HX_MARK_MEMBER_NAME(MapBackground_obj::nextFakeObjectId,"nextFakeObjectId");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MapBackground_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MapBackground_obj::backgroundMap,"backgroundMap");
	HX_VISIT_MEMBER_NAME(MapBackground_obj::nextFakeObjectId,"nextFakeObjectId");
};

#endif

::hx::Class MapBackground_obj::__mClass;

static ::String MapBackground_obj_sStaticFields[] = {
	HX_("nextFakeObjectId",c2,b2,4a,fe),
	HX_("onEnterFrame",f4,a5,93,da),
	::String(null())
};

void MapBackground_obj::__register()
{
	MapBackground_obj _hx_dummy;
	MapBackground_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.view.MapBackground",9b,83,b0,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MapBackground_obj::__GetStatic;
	__mClass->mSetStaticField = &MapBackground_obj::__SetStatic;
	__mClass->mMarkFunc = MapBackground_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MapBackground_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MapBackground_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MapBackground_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MapBackground_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MapBackground_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MapBackground_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MapBackground_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_df54e225f5c76f49_20_boot)
HXDLIN(  20)		nextFakeObjectId = 0;
            	}
}

} // end namespace ui
} // end namespace view
