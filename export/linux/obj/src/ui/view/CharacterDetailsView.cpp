// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_view_CharacterDetailsView
#include <ui/view/CharacterDetailsView.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_21057a4da571f433_14_new,"ui.view.CharacterDetailsView","new",0xec7394bf,"ui.view.CharacterDetailsView.new","ui/view/CharacterDetailsView.hx",14,0xf28bb731)
HX_LOCAL_STACK_FRAME(_hx_pos_21057a4da571f433_89_init,"ui.view.CharacterDetailsView","init",0xf56749d1,"ui.view.CharacterDetailsView.init","ui/view/CharacterDetailsView.hx",89,0xf28bb731)
HX_LOCAL_STACK_FRAME(_hx_pos_21057a4da571f433_111_draw,"ui.view.CharacterDetailsView","draw",0xf21c3ac5,"ui.view.CharacterDetailsView.draw","ui/view/CharacterDetailsView.hx",111,0xf28bb731)
namespace ui{
namespace view{

void CharacterDetailsView_obj::__construct(::hx::Null< Float >  __o_scale){
            		Float scale = __o_scale.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_21057a4da571f433_14_new)
HXLINE(  34)		this->lastMpMax = 0;
HXLINE(  33)		this->lastBoostMp = 0;
HXLINE(  32)		this->lastMaxMp = 0;
HXLINE(  31)		this->lastMp = 0;
HXLINE(  29)		this->lastHpMax = 0;
HXLINE(  28)		this->lastBoostHp = 0;
HXLINE(  27)		this->lastMaxHp = 0;
HXLINE(  26)		this->lastHp = 0;
HXLINE(  23)		this->scale = ((Float)0.0);
HXLINE(  37)		super::__construct();
HXLINE(  39)		this->decor =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/playerInterfaceDecor.png",77,63,54,62),null()),null(),null());
HXLINE(  40)		 ::openfl::display::Bitmap _hx_tmp = this->decor;
HXDLIN(  40)		_hx_tmp->set_scaleX(this->decor->set_scaleY((( (Float)(2) ) * scale)));
HXLINE(  41)		this->decor->set_cacheAsBitmap(true);
HXLINE(  42)		this->addChild(this->decor);
HXLINE(  44)		this->hpBar =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/playerInterfaceHealthBar.png",29,d7,cd,84),null()),null(),null());
HXLINE(  45)		 ::openfl::display::Bitmap _hx_tmp1 = this->hpBar;
HXDLIN(  45)		_hx_tmp1->set_scaleX(this->hpBar->set_scaleY((( (Float)(2) ) * scale)));
HXLINE(  46)		this->hpBar->set_cacheAsBitmap(true);
HXLINE(  47)		this->hpBar->set_x((( (Float)(106) ) * scale));
HXLINE(  48)		this->hpBar->set_y((( (Float)(8) ) * scale));
HXLINE(  49)		this->addChild(this->hpBar);
HXLINE(  51)		int _hx_tmp2 = ::Std_obj::_hx_int((( (Float)(15) ) * scale));
HXDLIN(  51)		this->hpBarText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,_hx_tmp2,11776947,false,::Std_obj::_hx_int((( (Float)(360) ) * scale)),null(),null());
HXLINE(  52)		this->hpBarText->setAlignment(0);
HXLINE(  53)		this->hpBarText->setBold(true);
HXLINE(  54)		 ::ui::SimpleText _hx_tmp3 = this->hpBarText;
HXDLIN(  54)		_hx_tmp3->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  55)		this->hpBarText->set_x(( (Float)(106) ));
HXLINE(  56)		this->hpBarText->set_y((( (Float)(8) ) * scale));
HXLINE(  57)		this->addChild(this->hpBarText);
HXLINE(  59)		this->mpBar =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/playerInterfaceManaBar.png",de,72,c6,f5),null()),null(),null());
HXLINE(  60)		 ::openfl::display::Bitmap _hx_tmp4 = this->mpBar;
HXDLIN(  60)		_hx_tmp4->set_scaleX(this->mpBar->set_scaleY((( (Float)(2) ) * scale)));
HXLINE(  61)		this->mpBar->set_cacheAsBitmap(true);
HXLINE(  62)		this->mpBar->set_x((( (Float)(106) ) * scale));
HXLINE(  63)		this->mpBar->set_y((( (Float)(38) ) * scale));
HXLINE(  64)		this->addChild(this->mpBar);
HXLINE(  66)		int _hx_tmp5 = ::Std_obj::_hx_int((( (Float)(15) ) * scale));
HXDLIN(  66)		this->mpBarText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,_hx_tmp5,11776947,false,::Std_obj::_hx_int((( (Float)(360) ) * scale)),null(),null());
HXLINE(  67)		this->mpBarText->setAlignment(0);
HXLINE(  68)		this->mpBarText->setBold(true);
HXLINE(  69)		 ::ui::SimpleText _hx_tmp6 = this->mpBarText;
HXDLIN(  69)		_hx_tmp6->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  70)		this->mpBarText->set_x(( (Float)(106) ));
HXLINE(  71)		this->mpBarText->set_y((( (Float)(38) ) * scale));
HXLINE(  72)		this->addChild(this->mpBarText);
HXLINE(  74)		this->xpBar =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/playerInterfaceXPBar.png",ed,de,c9,36),null()),null(),null());
HXLINE(  75)		 ::openfl::display::Bitmap _hx_tmp7 = this->xpBar;
HXDLIN(  75)		_hx_tmp7->set_scaleX(this->xpBar->set_scaleY((( (Float)(2) ) * scale)));
HXLINE(  76)		this->xpBar->set_cacheAsBitmap(true);
HXLINE(  77)		this->xpBar->set_x((( (Float)(106) ) * scale));
HXLINE(  78)		this->xpBar->set_y((( (Float)(68) ) * scale));
HXLINE(  79)		this->addChild(this->xpBar);
HXLINE(  81)		this->portrait =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  82)		this->portrait->set_cacheAsBitmap(true);
HXLINE(  84)		this->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((( (Float)(15) ) * scale)),16572160,false,0,0,null());
HXLINE(  85)		this->nameText->set_cacheAsBitmap(true);
HXLINE(  86)		this->scale = scale;
            	}

Dynamic CharacterDetailsView_obj::__CreateEmpty() { return new CharacterDetailsView_obj; }

void *CharacterDetailsView_obj::_hx_vtable = 0;

Dynamic CharacterDetailsView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterDetailsView_obj > _hx_result = new CharacterDetailsView_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CharacterDetailsView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x535e565b) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x535e565b;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void CharacterDetailsView_obj::init( ::objects::Player player){
            	HX_GC_STACKFRAME(&_hx_pos_21057a4da571f433_89_init)
HXLINE(  90)		if (this->contains(this->portrait)) {
HXLINE(  91)			this->removeChild(this->portrait);
            		}
HXLINE(  93)		 ::openfl::display::Bitmap _hx_tmp = this->portrait;
HXDLIN(  93)		_hx_tmp->set_bitmapData(player->getPortrait((( (Float)(2) ) * this->scale),null()));
HXLINE(  94)		 ::openfl::display::Bitmap _hx_tmp1 = this->portrait;
HXDLIN(  94)		Float _hx_tmp2 = (( (Float)(100) ) * this->scale);
HXDLIN(  94)		_hx_tmp1->set_x(((_hx_tmp2 - this->portrait->get_width()) / ( (Float)(2) )));
HXLINE(  95)		 ::openfl::display::Bitmap _hx_tmp3 = this->portrait;
HXDLIN(  95)		Float _hx_tmp4 = (( (Float)(90) ) * this->scale);
HXDLIN(  95)		_hx_tmp3->set_y(((_hx_tmp4 - this->portrait->get_height()) / ( (Float)(2) )));
HXLINE(  96)		this->addChild(this->portrait);
HXLINE(  97)		this->lastSkin = player->skin;
HXLINE(  99)		if (this->contains(this->nameText)) {
HXLINE( 100)			this->removeChild(this->nameText);
            		}
HXLINE( 102)		this->nameText->setBold(true);
HXLINE( 103)		 ::ui::SimpleText _hx_tmp5 = this->nameText;
HXDLIN( 103)		_hx_tmp5->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE( 104)		this->nameText->set_text(player->name);
HXLINE( 105)		this->nameText->updateMetrics();
HXLINE( 106)		 ::ui::SimpleText _hx_tmp6 = this->nameText;
HXDLIN( 106)		Float _hx_tmp7 = (( (Float)(370) ) * this->scale);
HXDLIN( 106)		_hx_tmp6->set_x(((_hx_tmp7 - this->nameText->get_width()) / ( (Float)(2) )));
HXLINE( 107)		this->nameText->set_y((( (Float)(68) ) * this->scale));
HXLINE( 108)		this->addChild(this->nameText);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterDetailsView_obj,init,(void))

void CharacterDetailsView_obj::draw( ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_21057a4da571f433_111_draw)
HXLINE( 112)		bool partialHpCheck;
HXDLIN( 112)		if ((player->hp == this->lastHp)) {
HXLINE( 112)			partialHpCheck = (player->maxHP != this->lastMaxHp);
            		}
            		else {
HXLINE( 112)			partialHpCheck = true;
            		}
HXLINE( 113)		bool _hx_tmp;
HXDLIN( 113)		bool _hx_tmp1;
HXDLIN( 113)		if (!(partialHpCheck)) {
HXLINE( 113)			_hx_tmp1 = (player->maxHPBoost != this->lastBoostHp);
            		}
            		else {
HXLINE( 113)			_hx_tmp1 = true;
            		}
HXDLIN( 113)		if (!(_hx_tmp1)) {
HXLINE( 113)			_hx_tmp = (player->maxHPMax != this->lastHpMax);
            		}
            		else {
HXLINE( 113)			_hx_tmp = true;
            		}
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 114)			if (partialHpCheck) {
HXLINE( 115)				this->hpBar->set_scaleX(((( (Float)(2) ) * this->scale) * (( (Float)(player->hp) ) / ( (Float)(player->maxHP) ))));
            			}
HXLINE( 117)			::String _hx_tmp2;
HXDLIN( 117)			if ((player->maxHPBoost > 0)) {
HXLINE( 117)				_hx_tmp2 = ((HX_("(+",03,23,00,00) + player->maxHPBoost) + HX_(")",29,00,00,00));
            			}
            			else {
HXLINE( 117)				_hx_tmp2 = HX_("",00,00,00,00);
            			}
HXDLIN( 117)			this->hpBarText->setText((((((HX_("",00,00,00,00) + player->hp) + HX_("/",2f,00,00,00)) + player->maxHP) + HX_(" ",20,00,00,00)) + _hx_tmp2));
HXLINE( 118)			int _hx_tmp3;
HXDLIN( 118)			if (((player->maxHP - player->maxHPBoost) >= player->maxHPMax)) {
HXLINE( 118)				_hx_tmp3 = 16572160;
            			}
            			else {
HXLINE( 118)				if ((player->maxHPBoost > 0)) {
HXLINE( 118)					_hx_tmp3 = 6206769;
            				}
            				else {
HXLINE( 118)					_hx_tmp3 = 11776947;
            				}
            			}
HXDLIN( 118)			this->hpBarText->setColor(_hx_tmp3);
HXLINE( 119)			this->hpBarText->updateMetrics();
HXLINE( 121)			this->lastHp = player->hp;
HXLINE( 122)			this->lastMaxHp = player->maxHP;
HXLINE( 123)			this->lastBoostHp = player->maxHPBoost;
HXLINE( 124)			this->lastHpMax = player->maxHPMax;
            		}
HXLINE( 127)		bool partialMpCheck;
HXDLIN( 127)		if ((player->mp == this->lastMp)) {
HXLINE( 127)			partialMpCheck = (player->maxMP != this->lastMaxMp);
            		}
            		else {
HXLINE( 127)			partialMpCheck = true;
            		}
HXLINE( 128)		bool _hx_tmp4;
HXDLIN( 128)		bool _hx_tmp5;
HXDLIN( 128)		if (!(partialMpCheck)) {
HXLINE( 128)			_hx_tmp5 = (player->maxMPBoost != this->lastBoostMp);
            		}
            		else {
HXLINE( 128)			_hx_tmp5 = true;
            		}
HXDLIN( 128)		if (!(_hx_tmp5)) {
HXLINE( 128)			_hx_tmp4 = (player->maxMPMax != this->lastMpMax);
            		}
            		else {
HXLINE( 128)			_hx_tmp4 = true;
            		}
HXDLIN( 128)		if (_hx_tmp4) {
HXLINE( 129)			if (partialMpCheck) {
HXLINE( 130)				this->mpBar->set_scaleX(((( (Float)(2) ) * this->scale) * (( (Float)(player->mp) ) / ( (Float)(player->maxMP) ))));
            			}
HXLINE( 132)			::String _hx_tmp6;
HXDLIN( 132)			if ((player->maxMPBoost > 0)) {
HXLINE( 132)				_hx_tmp6 = ((HX_("(+",03,23,00,00) + player->maxMPBoost) + HX_(")",29,00,00,00));
            			}
            			else {
HXLINE( 132)				_hx_tmp6 = HX_("",00,00,00,00);
            			}
HXDLIN( 132)			this->mpBarText->setText((((((HX_("",00,00,00,00) + player->mp) + HX_("/",2f,00,00,00)) + player->maxMP) + HX_(" ",20,00,00,00)) + _hx_tmp6));
HXLINE( 133)			int _hx_tmp7;
HXDLIN( 133)			if (((player->maxMP - player->maxMPBoost) >= player->maxMPMax)) {
HXLINE( 133)				_hx_tmp7 = 16572160;
            			}
            			else {
HXLINE( 133)				if ((player->maxMPBoost > 0)) {
HXLINE( 133)					_hx_tmp7 = 6206769;
            				}
            				else {
HXLINE( 133)					_hx_tmp7 = 11776947;
            				}
            			}
HXDLIN( 133)			this->mpBarText->setColor(_hx_tmp7);
HXLINE( 134)			this->mpBarText->updateMetrics();
HXLINE( 136)			this->lastMp = player->mp;
HXLINE( 137)			this->lastMaxMp = player->maxMP;
HXLINE( 138)			this->lastBoostMp = player->maxMPBoost;
HXLINE( 139)			this->lastMpMax = player->maxMPMax;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterDetailsView_obj,draw,(void))


::hx::ObjectPtr< CharacterDetailsView_obj > CharacterDetailsView_obj::__new(::hx::Null< Float >  __o_scale) {
	::hx::ObjectPtr< CharacterDetailsView_obj > __this = new CharacterDetailsView_obj();
	__this->__construct(__o_scale);
	return __this;
}

::hx::ObjectPtr< CharacterDetailsView_obj > CharacterDetailsView_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_scale) {
	CharacterDetailsView_obj *__this = (CharacterDetailsView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterDetailsView_obj), true, "ui.view.CharacterDetailsView"));
	*(void **)__this = CharacterDetailsView_obj::_hx_vtable;
	__this->__construct(__o_scale);
	return __this;
}

CharacterDetailsView_obj::CharacterDetailsView_obj()
{
}

void CharacterDetailsView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterDetailsView);
	HX_MARK_MEMBER_NAME(decor,"decor");
	HX_MARK_MEMBER_NAME(portrait,"portrait");
	HX_MARK_MEMBER_NAME(hpBar,"hpBar");
	HX_MARK_MEMBER_NAME(hpBarText,"hpBarText");
	HX_MARK_MEMBER_NAME(mpBar,"mpBar");
	HX_MARK_MEMBER_NAME(mpBarText,"mpBarText");
	HX_MARK_MEMBER_NAME(xpBar,"xpBar");
	HX_MARK_MEMBER_NAME(nameText,"nameText");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(lastSkin,"lastSkin");
	HX_MARK_MEMBER_NAME(lastHp,"lastHp");
	HX_MARK_MEMBER_NAME(lastMaxHp,"lastMaxHp");
	HX_MARK_MEMBER_NAME(lastBoostHp,"lastBoostHp");
	HX_MARK_MEMBER_NAME(lastHpMax,"lastHpMax");
	HX_MARK_MEMBER_NAME(lastMp,"lastMp");
	HX_MARK_MEMBER_NAME(lastMaxMp,"lastMaxMp");
	HX_MARK_MEMBER_NAME(lastBoostMp,"lastBoostMp");
	HX_MARK_MEMBER_NAME(lastMpMax,"lastMpMax");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterDetailsView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(decor,"decor");
	HX_VISIT_MEMBER_NAME(portrait,"portrait");
	HX_VISIT_MEMBER_NAME(hpBar,"hpBar");
	HX_VISIT_MEMBER_NAME(hpBarText,"hpBarText");
	HX_VISIT_MEMBER_NAME(mpBar,"mpBar");
	HX_VISIT_MEMBER_NAME(mpBarText,"mpBarText");
	HX_VISIT_MEMBER_NAME(xpBar,"xpBar");
	HX_VISIT_MEMBER_NAME(nameText,"nameText");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(lastSkin,"lastSkin");
	HX_VISIT_MEMBER_NAME(lastHp,"lastHp");
	HX_VISIT_MEMBER_NAME(lastMaxHp,"lastMaxHp");
	HX_VISIT_MEMBER_NAME(lastBoostHp,"lastBoostHp");
	HX_VISIT_MEMBER_NAME(lastHpMax,"lastHpMax");
	HX_VISIT_MEMBER_NAME(lastMp,"lastMp");
	HX_VISIT_MEMBER_NAME(lastMaxMp,"lastMaxMp");
	HX_VISIT_MEMBER_NAME(lastBoostMp,"lastBoostMp");
	HX_VISIT_MEMBER_NAME(lastMpMax,"lastMpMax");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterDetailsView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"decor") ) { return ::hx::Val( decor ); }
		if (HX_FIELD_EQ(inName,"hpBar") ) { return ::hx::Val( hpBar ); }
		if (HX_FIELD_EQ(inName,"mpBar") ) { return ::hx::Val( mpBar ); }
		if (HX_FIELD_EQ(inName,"xpBar") ) { return ::hx::Val( xpBar ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return ::hx::Val( scale ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lastHp") ) { return ::hx::Val( lastHp ); }
		if (HX_FIELD_EQ(inName,"lastMp") ) { return ::hx::Val( lastMp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { return ::hx::Val( portrait ); }
		if (HX_FIELD_EQ(inName,"nameText") ) { return ::hx::Val( nameText ); }
		if (HX_FIELD_EQ(inName,"lastSkin") ) { return ::hx::Val( lastSkin ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hpBarText") ) { return ::hx::Val( hpBarText ); }
		if (HX_FIELD_EQ(inName,"mpBarText") ) { return ::hx::Val( mpBarText ); }
		if (HX_FIELD_EQ(inName,"lastMaxHp") ) { return ::hx::Val( lastMaxHp ); }
		if (HX_FIELD_EQ(inName,"lastHpMax") ) { return ::hx::Val( lastHpMax ); }
		if (HX_FIELD_EQ(inName,"lastMaxMp") ) { return ::hx::Val( lastMaxMp ); }
		if (HX_FIELD_EQ(inName,"lastMpMax") ) { return ::hx::Val( lastMpMax ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastBoostHp") ) { return ::hx::Val( lastBoostHp ); }
		if (HX_FIELD_EQ(inName,"lastBoostMp") ) { return ::hx::Val( lastBoostMp ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CharacterDetailsView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"decor") ) { decor=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hpBar") ) { hpBar=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mpBar") ) { mpBar=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xpBar") ) { xpBar=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lastHp") ) { lastHp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMp") ) { lastMp=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { portrait=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameText") ) { nameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSkin") ) { lastSkin=inValue.Cast<  ::util::AnimatedChar >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hpBarText") ) { hpBarText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mpBarText") ) { mpBarText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMaxHp") ) { lastMaxHp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastHpMax") ) { lastHpMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMaxMp") ) { lastMaxMp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMpMax") ) { lastMpMax=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastBoostHp") ) { lastBoostHp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBoostMp") ) { lastBoostMp=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharacterDetailsView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("decor",65,0f,20,d7));
	outFields->push(HX_("portrait",5b,21,af,b8));
	outFields->push(HX_("hpBar",ab,a3,e6,2b));
	outFields->push(HX_("hpBarText",f8,4d,cc,14));
	outFields->push(HX_("mpBar",30,8a,e7,0c));
	outFields->push(HX_("mpBarText",fd,5a,83,33));
	outFields->push(HX_("xpBar",bb,eb,4f,62));
	outFields->push(HX_("nameText",98,ec,80,49));
	outFields->push(HX_("scale",8a,ce,ce,78));
	outFields->push(HX_("lastSkin",f3,2f,9e,df));
	outFields->push(HX_("lastHp",fe,0a,c5,54));
	outFields->push(HX_("lastMaxHp",96,68,d3,4f));
	outFields->push(HX_("lastBoostHp",55,69,56,37));
	outFields->push(HX_("lastHpMax",46,2a,9c,78));
	outFields->push(HX_("lastMp",59,0f,c5,54));
	outFields->push(HX_("lastMaxMp",f1,6c,d3,4f));
	outFields->push(HX_("lastBoostMp",b0,6d,56,37));
	outFields->push(HX_("lastMpMax",cb,10,9d,59));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterDetailsView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CharacterDetailsView_obj,decor),HX_("decor",65,0f,20,d7)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CharacterDetailsView_obj,portrait),HX_("portrait",5b,21,af,b8)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CharacterDetailsView_obj,hpBar),HX_("hpBar",ab,a3,e6,2b)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CharacterDetailsView_obj,hpBarText),HX_("hpBarText",f8,4d,cc,14)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CharacterDetailsView_obj,mpBar),HX_("mpBar",30,8a,e7,0c)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CharacterDetailsView_obj,mpBarText),HX_("mpBarText",fd,5a,83,33)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CharacterDetailsView_obj,xpBar),HX_("xpBar",bb,eb,4f,62)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CharacterDetailsView_obj,nameText),HX_("nameText",98,ec,80,49)},
	{::hx::fsFloat,(int)offsetof(CharacterDetailsView_obj,scale),HX_("scale",8a,ce,ce,78)},
	{::hx::fsObject /*  ::util::AnimatedChar */ ,(int)offsetof(CharacterDetailsView_obj,lastSkin),HX_("lastSkin",f3,2f,9e,df)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastHp),HX_("lastHp",fe,0a,c5,54)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastMaxHp),HX_("lastMaxHp",96,68,d3,4f)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastBoostHp),HX_("lastBoostHp",55,69,56,37)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastHpMax),HX_("lastHpMax",46,2a,9c,78)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastMp),HX_("lastMp",59,0f,c5,54)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastMaxMp),HX_("lastMaxMp",f1,6c,d3,4f)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastBoostMp),HX_("lastBoostMp",b0,6d,56,37)},
	{::hx::fsInt,(int)offsetof(CharacterDetailsView_obj,lastMpMax),HX_("lastMpMax",cb,10,9d,59)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CharacterDetailsView_obj_sStaticStorageInfo = 0;
#endif

static ::String CharacterDetailsView_obj_sMemberFields[] = {
	HX_("decor",65,0f,20,d7),
	HX_("portrait",5b,21,af,b8),
	HX_("hpBar",ab,a3,e6,2b),
	HX_("hpBarText",f8,4d,cc,14),
	HX_("mpBar",30,8a,e7,0c),
	HX_("mpBarText",fd,5a,83,33),
	HX_("xpBar",bb,eb,4f,62),
	HX_("nameText",98,ec,80,49),
	HX_("scale",8a,ce,ce,78),
	HX_("lastSkin",f3,2f,9e,df),
	HX_("lastHp",fe,0a,c5,54),
	HX_("lastMaxHp",96,68,d3,4f),
	HX_("lastBoostHp",55,69,56,37),
	HX_("lastHpMax",46,2a,9c,78),
	HX_("lastMp",59,0f,c5,54),
	HX_("lastMaxMp",f1,6c,d3,4f),
	HX_("lastBoostMp",b0,6d,56,37),
	HX_("lastMpMax",cb,10,9d,59),
	HX_("init",10,3b,bb,45),
	HX_("draw",04,2c,70,42),
	::String(null()) };

::hx::Class CharacterDetailsView_obj::__mClass;

void CharacterDetailsView_obj::__register()
{
	CharacterDetailsView_obj _hx_dummy;
	CharacterDetailsView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.view.CharacterDetailsView",4d,c9,44,fb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterDetailsView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterDetailsView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterDetailsView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterDetailsView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace view
