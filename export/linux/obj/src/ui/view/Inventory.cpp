// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ContainerGrid
#include <ui/panels/itemgrids/ContainerGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_EquippedGrid
#include <ui/panels/itemgrids/EquippedGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_InventoryGrid
#include <ui/panels/itemgrids/InventoryGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_view_Inventory
#include <ui/view/Inventory.h>
#endif
#ifndef INCLUDED_ui_view_VialInventoryView
#include <ui/view/VialInventoryView.h>
#endif
#ifndef INCLUDED_ui_view_VialSlotView
#include <ui/view/VialSlotView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_de68973431f34bb0_29_new,"ui.view.Inventory","new",0xfa7c9b7f,"ui.view.Inventory.new","ui/view/Inventory.hx",29,0x1d920531)
HX_LOCAL_STACK_FRAME(_hx_pos_de68973431f34bb0_68_init,"ui.view.Inventory","init",0x2f442b11,"ui.view.Inventory.init","ui/view/Inventory.hx",68,0x1d920531)
namespace ui{
namespace view{

void Inventory_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_de68973431f34bb0_29_new)
HXLINE(  30)		super::__construct();
HXLINE(  32)		this->decor =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/inventoryInterface.png",07,ab,4d,60),null()),null(),null());
HXLINE(  33)		this->decor->set_cacheAsBitmap(true);
HXLINE(  34)		this->addChild(this->decor);
HXLINE(  36)		this->containerDecor =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/containerInterface.png",42,a9,80,d6),null()),null(),null());
HXLINE(  37)		this->containerDecor->set_cacheAsBitmap(true);
HXLINE(  38)		 ::openfl::display::Bitmap _hx_tmp = this->containerDecor;
HXDLIN(  38)		_hx_tmp->set_x((-(this->containerDecor->get_width()) - ( (Float)(10) )));
HXLINE(  39)		this->containerDecor->set_y(( (Float)(150) ));
HXLINE(  40)		this->containerDecor->set_visible(false);
HXLINE(  41)		this->addChild(this->containerDecor);
HXLINE(  43)		this->containerName =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,11776947,null(),85,null(),null());
HXLINE(  44)		this->containerName->set_cacheAsBitmap(true);
HXLINE(  45)		 ::ui::SimpleText _hx_tmp1 = this->containerName;
HXDLIN(  45)		_hx_tmp1->set_x((this->containerDecor->get_x() + 51));
HXLINE(  46)		this->containerName->set_y(( (Float)(264) ));
HXLINE(  47)		this->containerName->setBold(true);
HXLINE(  48)		this->containerName->setItalic(true);
HXLINE(  49)		this->containerName->setAlignment(0);
HXLINE(  50)		this->containerName->set_visible(false);
HXLINE(  51)		this->addChild(this->containerName);
HXLINE(  53)		this->containerBitmapLeft =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  54)		this->containerBitmapLeft->set_cacheAsBitmap(true);
HXLINE(  55)		 ::openfl::display::Bitmap _hx_tmp2 = this->containerBitmapLeft;
HXDLIN(  55)		_hx_tmp2->set_x((this->containerDecor->get_x() + 7));
HXLINE(  56)		this->containerBitmapLeft->set_y(( (Float)(262) ));
HXLINE(  57)		this->containerBitmapLeft->set_visible(false);
HXLINE(  58)		this->addChild(this->containerBitmapLeft);
HXLINE(  60)		this->containerBitmapRight =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  61)		this->containerBitmapRight->set_cacheAsBitmap(true);
HXLINE(  62)		 ::openfl::display::Bitmap _hx_tmp3 = this->containerBitmapRight;
HXDLIN(  62)		_hx_tmp3->set_x((this->containerDecor->get_x() + 157));
HXLINE(  63)		this->containerBitmapRight->set_y(( (Float)(262) ));
HXLINE(  64)		this->containerBitmapRight->set_visible(false);
HXLINE(  65)		this->addChild(this->containerBitmapRight);
            	}

Dynamic Inventory_obj::__CreateEmpty() { return new Inventory_obj; }

void *Inventory_obj::_hx_vtable = 0;

Dynamic Inventory_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Inventory_obj > _hx_result = new Inventory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Inventory_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x618dbf23) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x618dbf23;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Inventory_obj::init( ::objects::Player player){
            	HX_GC_STACKFRAME(&_hx_pos_de68973431f34bb0_68_init)
HXLINE(  69)		this->equippedGrid =  ::ui::panels::itemgrids::EquippedGrid_obj::__alloc( HX_CTX ,player,player->slotTypes,player,0,true);
HXLINE(  70)		this->equippedGrid->set_cacheAsBitmap(true);
HXLINE(  71)		this->equippedGrid->set_x(( (Float)(9) ));
HXLINE(  72)		this->equippedGrid->set_y(( (Float)(9) ));
HXLINE(  73)		this->addChild(this->equippedGrid);
HXLINE(  75)		this->invGrid =  ::ui::panels::itemgrids::InventoryGrid_obj::__alloc( HX_CTX ,player,player,4,false,true);
HXLINE(  76)		this->invGrid->set_cacheAsBitmap(true);
HXLINE(  77)		this->invGrid->set_x(( (Float)(9) ));
HXLINE(  78)		this->invGrid->set_y(( (Float)(69) ));
HXLINE(  79)		this->addChild(this->invGrid);
HXLINE(  81)		this->bpGrid =  ::ui::panels::itemgrids::InventoryGrid_obj::__alloc( HX_CTX ,player,player,12,true,true);
HXLINE(  82)		this->bpGrid->set_cacheAsBitmap(true);
HXLINE(  83)		this->bpGrid->set_x(( (Float)(9) ));
HXLINE(  84)		this->bpGrid->set_y(( (Float)(157) ));
HXLINE(  85)		this->addChild(this->bpGrid);
HXLINE(  87)		this->vialView =  ::ui::view::VialInventoryView_obj::__alloc( HX_CTX ,false);
HXLINE(  88)		this->vialView->set_cacheAsBitmap(true);
HXLINE(  89)		this->vialView->set_x(( (Float)(61) ));
HXLINE(  90)		this->vialView->set_y(( (Float)(260) ));
HXLINE(  91)		this->addChild(this->vialView);
HXLINE(  93)		{
HXLINE(  93)			 ::ui::view::VialInventoryView tmp = this->vialView;
HXDLIN(  93)			 ::ui::view::VialSlotView tmp1;
HXDLIN(  93)			if (::hx::IsNotNull( tmp )) {
HXLINE(  93)				tmp1 = tmp->leftSlot;
            			}
            			else {
HXLINE(  93)				tmp1 = null();
            			}
HXDLIN(  93)			if (::hx::IsNotNull( tmp1 )) {
HXLINE(  93)				tmp1->init(player);
            			}
            		}
HXLINE(  94)		{
HXLINE(  94)			 ::ui::view::VialInventoryView tmp2 = this->vialView;
HXDLIN(  94)			 ::ui::view::VialSlotView tmp3;
HXDLIN(  94)			if (::hx::IsNotNull( tmp2 )) {
HXLINE(  94)				tmp3 = tmp2->rightSlot;
            			}
            			else {
HXLINE(  94)				tmp3 = null();
            			}
HXDLIN(  94)			if (::hx::IsNotNull( tmp3 )) {
HXLINE(  94)				tmp3->init(player);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,init,(void))


::hx::ObjectPtr< Inventory_obj > Inventory_obj::__new() {
	::hx::ObjectPtr< Inventory_obj > __this = new Inventory_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Inventory_obj > Inventory_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Inventory_obj *__this = (Inventory_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Inventory_obj), true, "ui.view.Inventory"));
	*(void **)__this = Inventory_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Inventory_obj::Inventory_obj()
{
}

void Inventory_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Inventory);
	HX_MARK_MEMBER_NAME(invGrid,"invGrid");
	HX_MARK_MEMBER_NAME(bpGrid,"bpGrid");
	HX_MARK_MEMBER_NAME(vialView,"vialView");
	HX_MARK_MEMBER_NAME(decor,"decor");
	HX_MARK_MEMBER_NAME(containerDecor,"containerDecor");
	HX_MARK_MEMBER_NAME(containerName,"containerName");
	HX_MARK_MEMBER_NAME(containerBitmapLeft,"containerBitmapLeft");
	HX_MARK_MEMBER_NAME(containerBitmapRight,"containerBitmapRight");
	HX_MARK_MEMBER_NAME(containerGrid,"containerGrid");
	HX_MARK_MEMBER_NAME(equippedGrid,"equippedGrid");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Inventory_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(invGrid,"invGrid");
	HX_VISIT_MEMBER_NAME(bpGrid,"bpGrid");
	HX_VISIT_MEMBER_NAME(vialView,"vialView");
	HX_VISIT_MEMBER_NAME(decor,"decor");
	HX_VISIT_MEMBER_NAME(containerDecor,"containerDecor");
	HX_VISIT_MEMBER_NAME(containerName,"containerName");
	HX_VISIT_MEMBER_NAME(containerBitmapLeft,"containerBitmapLeft");
	HX_VISIT_MEMBER_NAME(containerBitmapRight,"containerBitmapRight");
	HX_VISIT_MEMBER_NAME(containerGrid,"containerGrid");
	HX_VISIT_MEMBER_NAME(equippedGrid,"equippedGrid");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Inventory_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"decor") ) { return ::hx::Val( decor ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bpGrid") ) { return ::hx::Val( bpGrid ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"invGrid") ) { return ::hx::Val( invGrid ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vialView") ) { return ::hx::Val( vialView ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"equippedGrid") ) { return ::hx::Val( equippedGrid ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containerName") ) { return ::hx::Val( containerName ); }
		if (HX_FIELD_EQ(inName,"containerGrid") ) { return ::hx::Val( containerGrid ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"containerDecor") ) { return ::hx::Val( containerDecor ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"containerBitmapLeft") ) { return ::hx::Val( containerBitmapLeft ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"containerBitmapRight") ) { return ::hx::Val( containerBitmapRight ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Inventory_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"decor") ) { decor=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bpGrid") ) { bpGrid=inValue.Cast<  ::ui::panels::itemgrids::InventoryGrid >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"invGrid") ) { invGrid=inValue.Cast<  ::ui::panels::itemgrids::InventoryGrid >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vialView") ) { vialView=inValue.Cast<  ::ui::view::VialInventoryView >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"equippedGrid") ) { equippedGrid=inValue.Cast<  ::ui::panels::itemgrids::EquippedGrid >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containerName") ) { containerName=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"containerGrid") ) { containerGrid=inValue.Cast<  ::ui::panels::itemgrids::ContainerGrid >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"containerDecor") ) { containerDecor=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"containerBitmapLeft") ) { containerBitmapLeft=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"containerBitmapRight") ) { containerBitmapRight=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Inventory_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("invGrid",57,dc,1c,2a));
	outFields->push(HX_("bpGrid",b4,57,1f,db));
	outFields->push(HX_("vialView",63,54,9b,9c));
	outFields->push(HX_("decor",65,0f,20,d7));
	outFields->push(HX_("containerDecor",64,5e,64,88));
	outFields->push(HX_("containerName",2c,48,b6,77));
	outFields->push(HX_("containerBitmapLeft",37,5c,6f,3c));
	outFields->push(HX_("containerBitmapRight",ac,61,0e,1c));
	outFields->push(HX_("containerGrid",a7,ac,22,73));
	outFields->push(HX_("equippedGrid",85,ca,98,96));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Inventory_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::panels::itemgrids::InventoryGrid */ ,(int)offsetof(Inventory_obj,invGrid),HX_("invGrid",57,dc,1c,2a)},
	{::hx::fsObject /*  ::ui::panels::itemgrids::InventoryGrid */ ,(int)offsetof(Inventory_obj,bpGrid),HX_("bpGrid",b4,57,1f,db)},
	{::hx::fsObject /*  ::ui::view::VialInventoryView */ ,(int)offsetof(Inventory_obj,vialView),HX_("vialView",63,54,9b,9c)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(Inventory_obj,decor),HX_("decor",65,0f,20,d7)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(Inventory_obj,containerDecor),HX_("containerDecor",64,5e,64,88)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(Inventory_obj,containerName),HX_("containerName",2c,48,b6,77)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(Inventory_obj,containerBitmapLeft),HX_("containerBitmapLeft",37,5c,6f,3c)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(Inventory_obj,containerBitmapRight),HX_("containerBitmapRight",ac,61,0e,1c)},
	{::hx::fsObject /*  ::ui::panels::itemgrids::ContainerGrid */ ,(int)offsetof(Inventory_obj,containerGrid),HX_("containerGrid",a7,ac,22,73)},
	{::hx::fsObject /*  ::ui::panels::itemgrids::EquippedGrid */ ,(int)offsetof(Inventory_obj,equippedGrid),HX_("equippedGrid",85,ca,98,96)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Inventory_obj_sStaticStorageInfo = 0;
#endif

static ::String Inventory_obj_sMemberFields[] = {
	HX_("invGrid",57,dc,1c,2a),
	HX_("bpGrid",b4,57,1f,db),
	HX_("vialView",63,54,9b,9c),
	HX_("decor",65,0f,20,d7),
	HX_("containerDecor",64,5e,64,88),
	HX_("containerName",2c,48,b6,77),
	HX_("containerBitmapLeft",37,5c,6f,3c),
	HX_("containerBitmapRight",ac,61,0e,1c),
	HX_("containerGrid",a7,ac,22,73),
	HX_("equippedGrid",85,ca,98,96),
	HX_("init",10,3b,bb,45),
	::String(null()) };

::hx::Class Inventory_obj::__mClass;

void Inventory_obj::__register()
{
	Inventory_obj _hx_dummy;
	Inventory_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.view.Inventory",0d,70,13,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Inventory_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Inventory_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Inventory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Inventory_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace view
