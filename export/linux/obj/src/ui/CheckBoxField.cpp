// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_CheckBoxField
#include <ui/CheckBoxField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c9469f95d614a4f_11_new,"ui.CheckBoxField","new",0xf92acb4f,"ui.CheckBoxField.new","ui/CheckBoxField.hx",11,0xcfd62502)
HX_LOCAL_STACK_FRAME(_hx_pos_7c9469f95d614a4f_53_setError,"ui.CheckBoxField","setError",0x88483777,"ui.CheckBoxField.setError","ui/CheckBoxField.hx",53,0xcfd62502)
HX_LOCAL_STACK_FRAME(_hx_pos_7c9469f95d614a4f_58_redrawCheckBox,"ui.CheckBoxField","redrawCheckBox",0xb6a057eb,"ui.CheckBoxField.redrawCheckBox","ui/CheckBoxField.hx",58,0xcfd62502)
HX_LOCAL_STACK_FRAME(_hx_pos_7c9469f95d614a4f_85_onClick,"ui.CheckBoxField","onClick",0xc43cb918,"ui.CheckBoxField.onClick","ui/CheckBoxField.hx",85,0xcfd62502)
namespace ui{

void CheckBoxField_obj::__construct(::String text,bool checked,::String error,::hx::Null< int >  __o_fontSize){
            		int fontSize = __o_fontSize.Default(16);
            	HX_GC_STACKFRAME(&_hx_pos_7c9469f95d614a4f_11_new)
HXLINE(  19)		this->hasError = false;
HXLINE(  18)		this->checked = false;
HXLINE(  22)		super::__construct();
HXLINE(  24)		this->checked = checked;
HXLINE(  25)		this->checkBox =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  26)		this->checkBox->set_x(( (Float)(2) ));
HXLINE(  27)		this->checkBox->set_y(( (Float)(2) ));
HXLINE(  28)		this->redrawCheckBox();
HXLINE(  29)		this->checkBox->addEventListener(HX_("click",48,7c,5e,48),this->onClick_dyn(),null(),null(),null());
HXLINE(  30)		this->addChild(this->checkBox);
HXLINE(  31)		this->text =  ::ui::SimpleText_obj::__alloc( HX_CTX ,fontSize,11776947,false,0,0,null());
HXLINE(  32)		 ::ui::SimpleText _hx_tmp = this->text;
HXDLIN(  32)		_hx_tmp->set_x(((this->checkBox->get_x() + 20) + 8));
HXLINE(  33)		this->text->setBold(true);
HXLINE(  34)		this->text->set_multiline(true);
HXLINE(  35)		this->text->set_htmlText(text);
HXLINE(  36)		this->text->mouseEnabled = true;
HXLINE(  37)		this->text->updateMetrics();
HXLINE(  38)		 ::ui::SimpleText _hx_tmp1 = this->text;
HXDLIN(  38)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  39)		this->addChild(this->text);
HXLINE(  40)		this->errorText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,16549442,false,0,0,null());
HXLINE(  41)		 ::ui::SimpleText _hx_tmp2 = this->errorText;
HXDLIN(  41)		_hx_tmp2->set_x(this->text->get_x());
HXLINE(  42)		 ::ui::SimpleText _hx_tmp3 = this->errorText;
HXDLIN(  42)		_hx_tmp3->set_y((this->text->get_y() + 20));
HXLINE(  43)		this->errorText->set_text(error);
HXLINE(  44)		this->errorText->updateMetrics();
HXLINE(  45)		 ::ui::SimpleText _hx_tmp4 = this->errorText;
HXDLIN(  45)		_hx_tmp4->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  46)		this->addChild(this->errorText);
            	}

Dynamic CheckBoxField_obj::__CreateEmpty() { return new CheckBoxField_obj; }

void *CheckBoxField_obj::_hx_vtable = 0;

Dynamic CheckBoxField_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CheckBoxField_obj > _hx_result = new CheckBoxField_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CheckBoxField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x640ece23) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x640ece23;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void CheckBoxField_obj::setError(::String error){
            	HX_STACKFRAME(&_hx_pos_7c9469f95d614a4f_53_setError)
HXLINE(  54)		this->errorText->set_text(error);
HXLINE(  55)		this->errorText->updateMetrics();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CheckBoxField_obj,setError,(void))

void CheckBoxField_obj::redrawCheckBox(){
            	HX_STACKFRAME(&_hx_pos_7c9469f95d614a4f_58_redrawCheckBox)
HXLINE(  59)		 ::openfl::display::Graphics g = this->checkBox->get_graphics();
HXLINE(  60)		g->clear();
HXLINE(  61)		g->beginFill(3355443,1);
HXLINE(  62)		g->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(20) ),( (Float)(20) ));
HXLINE(  63)		g->endFill();
HXLINE(  64)		if (this->checked) {
HXLINE(  65)			g->lineStyle(4,11776947,1,false,2,1,2,null());
HXLINE(  66)			g->moveTo(( (Float)(2) ),( (Float)(2) ));
HXLINE(  67)			g->lineTo(( (Float)(18) ),( (Float)(18) ));
HXLINE(  68)			g->moveTo(( (Float)(2) ),( (Float)(18) ));
HXLINE(  69)			g->lineTo(( (Float)(18) ),( (Float)(2) ));
HXLINE(  70)			g->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  71)			this->hasError = false;
            		}
HXLINE(  74)		int color = 0;
HXLINE(  75)		if (this->hasError) {
HXLINE(  76)			color = 16549442;
            		}
            		else {
HXLINE(  78)			color = 4539717;
            		}
HXLINE(  80)		g->lineStyle(2,color,1,false,2,1,2,null());
HXLINE(  81)		g->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(20) ),( (Float)(20) ));
HXLINE(  82)		g->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CheckBoxField_obj,redrawCheckBox,(void))

void CheckBoxField_obj::onClick( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_7c9469f95d614a4f_85_onClick)
HXLINE(  86)		this->setError(HX_("",00,00,00,00));
HXLINE(  87)		this->checked = !(this->checked);
HXLINE(  88)		this->redrawCheckBox();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CheckBoxField_obj,onClick,(void))


::hx::ObjectPtr< CheckBoxField_obj > CheckBoxField_obj::__new(::String text,bool checked,::String error,::hx::Null< int >  __o_fontSize) {
	::hx::ObjectPtr< CheckBoxField_obj > __this = new CheckBoxField_obj();
	__this->__construct(text,checked,error,__o_fontSize);
	return __this;
}

::hx::ObjectPtr< CheckBoxField_obj > CheckBoxField_obj::__alloc(::hx::Ctx *_hx_ctx,::String text,bool checked,::String error,::hx::Null< int >  __o_fontSize) {
	CheckBoxField_obj *__this = (CheckBoxField_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CheckBoxField_obj), true, "ui.CheckBoxField"));
	*(void **)__this = CheckBoxField_obj::_hx_vtable;
	__this->__construct(text,checked,error,__o_fontSize);
	return __this;
}

CheckBoxField_obj::CheckBoxField_obj()
{
}

void CheckBoxField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CheckBoxField);
	HX_MARK_MEMBER_NAME(checkBox,"checkBox");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(errorText,"errorText");
	HX_MARK_MEMBER_NAME(checked,"checked");
	HX_MARK_MEMBER_NAME(hasError,"hasError");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CheckBoxField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(checkBox,"checkBox");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(errorText,"errorText");
	HX_VISIT_MEMBER_NAME(checked,"checked");
	HX_VISIT_MEMBER_NAME(hasError,"hasError");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CheckBoxField_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checked") ) { return ::hx::Val( checked ); }
		if (HX_FIELD_EQ(inName,"onClick") ) { return ::hx::Val( onClick_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"checkBox") ) { return ::hx::Val( checkBox ); }
		if (HX_FIELD_EQ(inName,"hasError") ) { return ::hx::Val( hasError ); }
		if (HX_FIELD_EQ(inName,"setError") ) { return ::hx::Val( setError_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"errorText") ) { return ::hx::Val( errorText ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"redrawCheckBox") ) { return ::hx::Val( redrawCheckBox_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CheckBoxField_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checked") ) { checked=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"checkBox") ) { checkBox=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasError") ) { hasError=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"errorText") ) { errorText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CheckBoxField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("checkBox",23,8a,dd,ac));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("errorText",95,48,62,73));
	outFields->push(HX_("checked",27,b3,24,13));
	outFields->push(HX_("hasError",0e,16,82,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CheckBoxField_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(CheckBoxField_obj,checkBox),HX_("checkBox",23,8a,dd,ac)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CheckBoxField_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CheckBoxField_obj,errorText),HX_("errorText",95,48,62,73)},
	{::hx::fsBool,(int)offsetof(CheckBoxField_obj,checked),HX_("checked",27,b3,24,13)},
	{::hx::fsBool,(int)offsetof(CheckBoxField_obj,hasError),HX_("hasError",0e,16,82,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CheckBoxField_obj_sStaticStorageInfo = 0;
#endif

static ::String CheckBoxField_obj_sMemberFields[] = {
	HX_("checkBox",23,8a,dd,ac),
	HX_("text",ad,cc,f9,4c),
	HX_("errorText",95,48,62,73),
	HX_("checked",27,b3,24,13),
	HX_("hasError",0e,16,82,ff),
	HX_("setError",c6,34,5e,81),
	HX_("redrawCheckBox",7a,ba,f1,b8),
	HX_("onClick",a9,1a,9c,de),
	::String(null()) };

::hx::Class CheckBoxField_obj::__mClass;

void CheckBoxField_obj::__register()
{
	CheckBoxField_obj _hx_dummy;
	CheckBoxField_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.CheckBoxField",dd,77,59,cb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CheckBoxField_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CheckBoxField_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CheckBoxField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CheckBoxField_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
