// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Timer
#include <openfl/utils/Timer.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_TextButton
#include <ui/TextButton.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_TradeRequestPanel
#include <ui/panels/TradeRequestPanel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f176b013c2283243_13_new,"ui.panels.TradeRequestPanel","new",0xd46c37a6,"ui.panels.TradeRequestPanel.new","ui/panels/TradeRequestPanel.hx",13,0xb2fb40aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f176b013c2283243_49_onTimer,"ui.panels.TradeRequestPanel","onTimer",0xfa57e06c,"ui.panels.TradeRequestPanel.onTimer","ui/panels/TradeRequestPanel.hx",49,0xb2fb40aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f176b013c2283243_53_onRejectClick,"ui.panels.TradeRequestPanel","onRejectClick",0x7a02da50,"ui.panels.TradeRequestPanel.onRejectClick","ui/panels/TradeRequestPanel.hx",53,0xb2fb40aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f176b013c2283243_56_onAcceptClick,"ui.panels.TradeRequestPanel","onAcceptClick",0xc2a5f407,"ui.panels.TradeRequestPanel.onAcceptClick","ui/panels/TradeRequestPanel.hx",56,0xb2fb40aa)
namespace ui{
namespace panels{

void TradeRequestPanel_obj::__construct( ::game::GameSprite gs,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_f176b013c2283243_13_new)
HXLINE(  14)		this->playerName = HX_("",00,00,00,00);
HXLINE(  22)		super::__construct(gs);
HXLINE(  23)		this->playerName = name;
HXLINE(  24)		this->title =  ::ui::SimpleText_obj::__alloc( HX_CTX ,18,16777215,false,188,0,null());
HXLINE(  25)		this->title->setBold(true);
HXLINE(  26)		this->title->set_htmlText(((HX_("<p align=\"center\">",cf,04,3d,e9) + name) + HX_(" wants to trade with you</p>",aa,2d,d2,c3)));
HXLINE(  27)		this->title->set_wordWrap(true);
HXLINE(  28)		this->title->set_multiline(true);
HXLINE(  29)		this->title->set_autoSize(0);
HXLINE(  30)		 ::ui::SimpleText _hx_tmp = this->title;
HXDLIN(  30)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  31)		this->title->set_y(( (Float)(0) ));
HXLINE(  32)		this->addChild(this->title);
HXLINE(  33)		this->rejectButton =  ::ui::TextButton_obj::__alloc( HX_CTX ,16,HX_("Reject",7f,c5,19,37),null());
HXLINE(  34)		this->rejectButton->addEventListener(HX_("click",48,7c,5e,48),this->onRejectClick_dyn(),null(),null(),null());
HXLINE(  35)		 ::ui::TextButton _hx_tmp1 = this->rejectButton;
HXDLIN(  35)		_hx_tmp1->set_x((((Float)47.) - (this->rejectButton->get_width() / ( (Float)(2) ))));
HXLINE(  36)		 ::ui::TextButton _hx_tmp2 = this->rejectButton;
HXDLIN(  36)		_hx_tmp2->set_y(((( (Float)(84) ) - this->rejectButton->get_height()) - ( (Float)(4) )));
HXLINE(  37)		this->addChild(this->rejectButton);
HXLINE(  38)		this->acceptButton =  ::ui::TextButton_obj::__alloc( HX_CTX ,16,HX_("Accept",28,07,9b,3f),null());
HXLINE(  39)		this->acceptButton->addEventListener(HX_("click",48,7c,5e,48),this->onAcceptClick_dyn(),null(),null(),null());
HXLINE(  40)		 ::ui::TextButton _hx_tmp3 = this->acceptButton;
HXDLIN(  40)		_hx_tmp3->set_x((((Float)141.) - (this->acceptButton->get_width() / ( (Float)(2) ))));
HXLINE(  41)		 ::ui::TextButton _hx_tmp4 = this->acceptButton;
HXDLIN(  41)		_hx_tmp4->set_y(((( (Float)(84) ) - this->acceptButton->get_height()) - ( (Float)(4) )));
HXLINE(  42)		this->addChild(this->acceptButton);
HXLINE(  43)		this->timer =  ::openfl::utils::Timer_obj::__alloc( HX_CTX ,( (Float)(20000) ),1);
HXLINE(  44)		this->timer->start();
HXLINE(  45)		this->timer->addEventListener(HX_("timer",c5,bf,35,10),this->onTimer_dyn(),null(),null(),null());
            	}

Dynamic TradeRequestPanel_obj::__CreateEmpty() { return new TradeRequestPanel_obj; }

void *TradeRequestPanel_obj::_hx_vtable = 0;

Dynamic TradeRequestPanel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TradeRequestPanel_obj > _hx_result = new TradeRequestPanel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TradeRequestPanel_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x0d0880f6 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7fae8619;
		}
	}
}

void TradeRequestPanel_obj::onTimer( ::openfl::events::TimerEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_f176b013c2283243_49_onTimer)
HXDLIN(  49)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TradeRequestPanel_obj,onTimer,(void))

void TradeRequestPanel_obj::onRejectClick( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_f176b013c2283243_53_onRejectClick)
HXDLIN(  53)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TradeRequestPanel_obj,onRejectClick,(void))

void TradeRequestPanel_obj::onAcceptClick( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_f176b013c2283243_56_onAcceptClick)
HXLINE(  57)		::network::NetworkHandler_obj::requestTrade(this->playerName);
HXLINE(  58)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TradeRequestPanel_obj,onAcceptClick,(void))


::hx::ObjectPtr< TradeRequestPanel_obj > TradeRequestPanel_obj::__new( ::game::GameSprite gs,::String name) {
	::hx::ObjectPtr< TradeRequestPanel_obj > __this = new TradeRequestPanel_obj();
	__this->__construct(gs,name);
	return __this;
}

::hx::ObjectPtr< TradeRequestPanel_obj > TradeRequestPanel_obj::__alloc(::hx::Ctx *_hx_ctx, ::game::GameSprite gs,::String name) {
	TradeRequestPanel_obj *__this = (TradeRequestPanel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TradeRequestPanel_obj), true, "ui.panels.TradeRequestPanel"));
	*(void **)__this = TradeRequestPanel_obj::_hx_vtable;
	__this->__construct(gs,name);
	return __this;
}

TradeRequestPanel_obj::TradeRequestPanel_obj()
{
}

void TradeRequestPanel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TradeRequestPanel);
	HX_MARK_MEMBER_NAME(playerName,"playerName");
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(rejectButton,"rejectButton");
	HX_MARK_MEMBER_NAME(acceptButton,"acceptButton");
	HX_MARK_MEMBER_NAME(timer,"timer");
	 ::ui::panels::Panel_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TradeRequestPanel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(playerName,"playerName");
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(rejectButton,"rejectButton");
	HX_VISIT_MEMBER_NAME(acceptButton,"acceptButton");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	 ::ui::panels::Panel_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TradeRequestPanel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		if (HX_FIELD_EQ(inName,"timer") ) { return ::hx::Val( timer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onTimer") ) { return ::hx::Val( onTimer_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playerName") ) { return ::hx::Val( playerName ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rejectButton") ) { return ::hx::Val( rejectButton ); }
		if (HX_FIELD_EQ(inName,"acceptButton") ) { return ::hx::Val( acceptButton ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onRejectClick") ) { return ::hx::Val( onRejectClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"onAcceptClick") ) { return ::hx::Val( onAcceptClick_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TradeRequestPanel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::openfl::utils::Timer >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playerName") ) { playerName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rejectButton") ) { rejectButton=inValue.Cast<  ::ui::TextButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acceptButton") ) { acceptButton=inValue.Cast<  ::ui::TextButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TradeRequestPanel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("playerName",4c,4e,c1,ab));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("rejectButton",b1,f8,c3,fb));
	outFields->push(HX_("acceptButton",1a,5f,d7,41));
	outFields->push(HX_("timer",c5,bf,35,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TradeRequestPanel_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(TradeRequestPanel_obj,playerName),HX_("playerName",4c,4e,c1,ab)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(TradeRequestPanel_obj,title),HX_("title",98,15,3b,10)},
	{::hx::fsObject /*  ::ui::TextButton */ ,(int)offsetof(TradeRequestPanel_obj,rejectButton),HX_("rejectButton",b1,f8,c3,fb)},
	{::hx::fsObject /*  ::ui::TextButton */ ,(int)offsetof(TradeRequestPanel_obj,acceptButton),HX_("acceptButton",1a,5f,d7,41)},
	{::hx::fsObject /*  ::openfl::utils::Timer */ ,(int)offsetof(TradeRequestPanel_obj,timer),HX_("timer",c5,bf,35,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TradeRequestPanel_obj_sStaticStorageInfo = 0;
#endif

static ::String TradeRequestPanel_obj_sMemberFields[] = {
	HX_("playerName",4c,4e,c1,ab),
	HX_("title",98,15,3b,10),
	HX_("rejectButton",b1,f8,c3,fb),
	HX_("acceptButton",1a,5f,d7,41),
	HX_("timer",c5,bf,35,10),
	HX_("onTimer",26,5e,73,a6),
	HX_("onRejectClick",8a,5f,f2,dd),
	HX_("onAcceptClick",41,79,95,26),
	::String(null()) };

::hx::Class TradeRequestPanel_obj::__mClass;

void TradeRequestPanel_obj::__register()
{
	TradeRequestPanel_obj _hx_dummy;
	TradeRequestPanel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.TradeRequestPanel",b4,2c,0a,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TradeRequestPanel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TradeRequestPanel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TradeRequestPanel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TradeRequestPanel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace panels
