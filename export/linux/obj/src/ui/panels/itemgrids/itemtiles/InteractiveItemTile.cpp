// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Timer
#include <openfl/utils/Timer.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_InteractiveItemTile
#include <ui/panels/itemgrids/itemtiles/InteractiveItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile
#include <ui/panels/itemgrids/itemtiles/ItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTileEvent
#include <ui/panels/itemgrids/itemtiles/ItemTileEvent.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTileSprite
#include <ui/panels/itemgrids/itemtiles/ItemTileSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_11_new,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","new",0x14376ec0,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.new","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",11,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_29_setInteractive,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","setInteractive",0xb285b700,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.setInteractive","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",29,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_42_getDropTarget,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","getDropTarget",0xaa0c1f76,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.getDropTarget","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",42,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_45_beginDragCallback,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","beginDragCallback",0x8e6eec02,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.beginDragCallback","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",45,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_47_endDragCallback,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","endDragCallback",0x6cee70b4,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.endDragCallback","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",47,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_49_setPendingDoubleClick,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","setPendingDoubleClick",0xe98f4b02,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.setPendingDoubleClick","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",49,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_59_onMouseOut,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","onMouseOut",0x95aba948,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.onMouseOut","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",59,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_62_onMouseUp,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","onMouseUp",0x0f9852e1,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.onMouseUp","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",62,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_81_onMouseDown,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","onMouseDown",0x593e9268,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.onMouseDown","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",81,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_84_beginDragCheck,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","beginDragCheck",0x12d72e6b,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.beginDragCheck","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",84,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_91_cancelDragCheck,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","cancelDragCheck",0xd9ca29ba,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.cancelDragCheck","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",91,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_97_onMouseMoveCheckDrag,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","onMouseMoveCheckDrag",0x8e0a7cc5,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.onMouseMoveCheckDrag","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",97,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_108_onDoubleClickTimerComplete,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","onDoubleClickTimerComplete",0x66562786,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.onDoubleClickTimerComplete","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",108,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_113_beginDrag,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","beginDrag",0x02c4b11d,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.beginDrag","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",113,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_123_endDrag,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","endDrag",0xfc1733cf,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.endDrag","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",123,0x171def92)
HX_LOCAL_STACK_FRAME(_hx_pos_3f3ca7c1608beda9_131_onRemovedFromStage,"ui.panels.itemgrids.itemtiles.InteractiveItemTile","onRemovedFromStage",0x41775a13,"ui.panels.itemgrids.itemtiles.InteractiveItemTile.onRemovedFromStage","ui/panels/itemgrids/itemtiles/InteractiveItemTile.hx",131,0x171def92)
namespace ui{
namespace panels{
namespace itemgrids{
namespace itemtiles{

void InteractiveItemTile_obj::__construct(int id, ::ui::panels::itemgrids::ItemGrid parentGrid,bool isInteractive){
            	HX_GC_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_11_new)
HXLINE(  18)		this->isDragging = false;
HXLINE(  17)		this->pendingSecondClick = false;
HXLINE(  21)		super::__construct(id,parentGrid);
HXLINE(  22)		this->mouseChildren = false;
HXLINE(  23)		this->doubleClickTimer =  ::openfl::utils::Timer_obj::__alloc( HX_CTX ,( (Float)(250) ),1);
HXLINE(  24)		this->doubleClickTimer->addEventListener(HX_("timerComplete",9e,49,cc,97),this->onDoubleClickTimerComplete_dyn(),null(),null(),null());
HXLINE(  25)		this->setInteractive(isInteractive);
            	}

Dynamic InteractiveItemTile_obj::__CreateEmpty() { return new InteractiveItemTile_obj; }

void *InteractiveItemTile_obj::_hx_vtable = 0;

Dynamic InteractiveItemTile_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InteractiveItemTile_obj > _hx_result = new InteractiveItemTile_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool InteractiveItemTile_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4af7dd8e) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x65ba405c || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x779643f0;
		}
	}
}

void InteractiveItemTile_obj::setInteractive(bool isInteractive){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_29_setInteractive)
HXDLIN(  29)		if (isInteractive) {
HXLINE(  30)			this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE(  31)			this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null(),null(),null());
HXLINE(  32)			this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null(),null(),null());
HXLINE(  33)			this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            		}
            		else {
HXLINE(  35)			this->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null());
HXLINE(  36)			this->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null());
HXLINE(  37)			this->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,setInteractive,(void))

 ::openfl::display::DisplayObject InteractiveItemTile_obj::getDropTarget(){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_42_getDropTarget)
HXDLIN(  42)		return this->itemSprite->dropTarget;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveItemTile_obj,getDropTarget,return )

void InteractiveItemTile_obj::beginDragCallback(){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_45_beginDragCallback)
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveItemTile_obj,beginDragCallback,(void))

void InteractiveItemTile_obj::endDragCallback(){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_47_endDragCallback)
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveItemTile_obj,endDragCallback,(void))

void InteractiveItemTile_obj::setPendingDoubleClick(bool isPending){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_49_setPendingDoubleClick)
HXLINE(  50)		this->pendingSecondClick = isPending;
HXLINE(  51)		if (this->pendingSecondClick) {
HXLINE(  52)			this->doubleClickTimer->reset();
HXLINE(  53)			this->doubleClickTimer->start();
            		}
            		else {
HXLINE(  55)			this->doubleClickTimer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,setPendingDoubleClick,(void))

void InteractiveItemTile_obj::onMouseOut( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_59_onMouseOut)
HXDLIN(  59)		this->setPendingDoubleClick(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,onMouseOut,(void))

void InteractiveItemTile_obj::onMouseUp( ::openfl::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_62_onMouseUp)
HXLINE(  63)		if (this->isDragging) {
HXLINE(  64)			return;
            		}
HXLINE(  66)		if (e->shiftKey) {
HXLINE(  67)			this->setPendingDoubleClick(false);
HXLINE(  68)			this->dispatchEvent( ::ui::panels::itemgrids::itemtiles::ItemTileEvent_obj::__alloc( HX_CTX ,HX_("ITEM_SHIFT_CLICK",df,a0,e2,97),::hx::ObjectPtr<OBJ_>(this)));
            		}
            		else {
HXLINE(  69)			if (e->ctrlKey) {
HXLINE(  70)				this->setPendingDoubleClick(false);
HXLINE(  71)				this->dispatchEvent( ::ui::panels::itemgrids::itemtiles::ItemTileEvent_obj::__alloc( HX_CTX ,HX_("ITEM_CTRL_CLICK",40,21,0f,ba),::hx::ObjectPtr<OBJ_>(this)));
            			}
            			else {
HXLINE(  72)				if (!(this->pendingSecondClick)) {
HXLINE(  73)					this->setPendingDoubleClick(true);
            				}
            				else {
HXLINE(  75)					this->setPendingDoubleClick(false);
HXLINE(  76)					this->dispatchEvent( ::ui::panels::itemgrids::itemtiles::ItemTileEvent_obj::__alloc( HX_CTX ,HX_("ITEM_DOUBLE_CLICK",26,0b,a1,b4),::hx::ObjectPtr<OBJ_>(this)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,onMouseUp,(void))

void InteractiveItemTile_obj::onMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_81_onMouseDown)
HXDLIN(  81)		this->beginDragCheck(e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,onMouseDown,(void))

void InteractiveItemTile_obj::beginDragCheck( ::openfl::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_84_beginDragCheck)
HXLINE(  85)		this->dragStart =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,e->stageX,e->stageY);
HXLINE(  86)		this->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMoveCheckDrag_dyn(),null(),null(),null());
HXLINE(  87)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->cancelDragCheck_dyn(),null(),null(),null());
HXLINE(  88)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->cancelDragCheck_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,beginDragCheck,(void))

void InteractiveItemTile_obj::cancelDragCheck( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_91_cancelDragCheck)
HXLINE(  92)		this->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMoveCheckDrag_dyn(),null());
HXLINE(  93)		this->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->cancelDragCheck_dyn(),null());
HXLINE(  94)		this->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->cancelDragCheck_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,cancelDragCheck,(void))

void InteractiveItemTile_obj::onMouseMoveCheckDrag( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_97_onMouseMoveCheckDrag)
HXLINE(  98)		Float dx = (e->stageX - this->dragStart->x);
HXLINE(  99)		Float dy = (e->stageY - this->dragStart->y);
HXLINE( 101)		if ((::Math_obj::sqrt(((dx * dx) + (dy * dy))) > 3)) {
HXLINE( 102)			this->cancelDragCheck(null());
HXLINE( 103)			this->setPendingDoubleClick(false);
HXLINE( 104)			this->beginDrag(e);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,onMouseMoveCheckDrag,(void))

void InteractiveItemTile_obj::onDoubleClickTimerComplete( ::openfl::events::TimerEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_108_onDoubleClickTimerComplete)
HXLINE( 109)		this->setPendingDoubleClick(false);
HXLINE( 110)		this->dispatchEvent( ::ui::panels::itemgrids::itemtiles::ItemTileEvent_obj::__alloc( HX_CTX ,HX_("ITEM_CLICK",bc,18,34,bb),::hx::ObjectPtr<OBJ_>(this)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,onDoubleClickTimerComplete,(void))

void InteractiveItemTile_obj::beginDrag( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_113_beginDrag)
HXLINE( 114)		this->isDragging = true;
HXLINE( 115)		this->stage->addChild(this->itemSprite);
HXLINE( 116)		this->itemSprite->startDrag(true,null());
HXLINE( 117)		this->itemSprite->set_x(e->stageX);
HXLINE( 118)		this->itemSprite->set_y(e->stageY);
HXLINE( 119)		this->itemSprite->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->endDrag_dyn(),null(),null(),null());
HXLINE( 120)		this->beginDragCallback();
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,beginDrag,(void))

void InteractiveItemTile_obj::endDrag( ::openfl::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_123_endDrag)
HXLINE( 124)		this->isDragging = false;
HXLINE( 125)		this->itemSprite->stopDrag();
HXLINE( 126)		this->itemSprite->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->endDrag_dyn(),null());
HXLINE( 127)		this->dispatchEvent( ::ui::panels::itemgrids::itemtiles::ItemTileEvent_obj::__alloc( HX_CTX ,HX_("ITEM_MOVE",fd,f4,5a,d0),::hx::ObjectPtr<OBJ_>(this)));
HXLINE( 128)		this->endDragCallback();
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,endDrag,(void))

void InteractiveItemTile_obj::onRemovedFromStage( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_3f3ca7c1608beda9_131_onRemovedFromStage)
HXLINE( 132)		this->setPendingDoubleClick(false);
HXLINE( 133)		this->cancelDragCheck(null());
HXLINE( 134)		if (this->isDragging) {
HXLINE( 135)			this->itemSprite->stopDrag();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveItemTile_obj,onRemovedFromStage,(void))


::hx::ObjectPtr< InteractiveItemTile_obj > InteractiveItemTile_obj::__new(int id, ::ui::panels::itemgrids::ItemGrid parentGrid,bool isInteractive) {
	::hx::ObjectPtr< InteractiveItemTile_obj > __this = new InteractiveItemTile_obj();
	__this->__construct(id,parentGrid,isInteractive);
	return __this;
}

::hx::ObjectPtr< InteractiveItemTile_obj > InteractiveItemTile_obj::__alloc(::hx::Ctx *_hx_ctx,int id, ::ui::panels::itemgrids::ItemGrid parentGrid,bool isInteractive) {
	InteractiveItemTile_obj *__this = (InteractiveItemTile_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InteractiveItemTile_obj), true, "ui.panels.itemgrids.itemtiles.InteractiveItemTile"));
	*(void **)__this = InteractiveItemTile_obj::_hx_vtable;
	__this->__construct(id,parentGrid,isInteractive);
	return __this;
}

InteractiveItemTile_obj::InteractiveItemTile_obj()
{
}

void InteractiveItemTile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InteractiveItemTile);
	HX_MARK_MEMBER_NAME(doubleClickTimer,"doubleClickTimer");
	HX_MARK_MEMBER_NAME(dragStart,"dragStart");
	HX_MARK_MEMBER_NAME(pendingSecondClick,"pendingSecondClick");
	HX_MARK_MEMBER_NAME(isDragging,"isDragging");
	 ::ui::panels::itemgrids::itemtiles::ItemTile_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void InteractiveItemTile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(doubleClickTimer,"doubleClickTimer");
	HX_VISIT_MEMBER_NAME(dragStart,"dragStart");
	HX_VISIT_MEMBER_NAME(pendingSecondClick,"pendingSecondClick");
	HX_VISIT_MEMBER_NAME(isDragging,"isDragging");
	 ::ui::panels::itemgrids::itemtiles::ItemTile_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val InteractiveItemTile_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"endDrag") ) { return ::hx::Val( endDrag_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dragStart") ) { return ::hx::Val( dragStart ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"beginDrag") ) { return ::hx::Val( beginDrag_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isDragging") ) { return ::hx::Val( isDragging ); }
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getDropTarget") ) { return ::hx::Val( getDropTarget_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setInteractive") ) { return ::hx::Val( setInteractive_dyn() ); }
		if (HX_FIELD_EQ(inName,"beginDragCheck") ) { return ::hx::Val( beginDragCheck_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"endDragCallback") ) { return ::hx::Val( endDragCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelDragCheck") ) { return ::hx::Val( cancelDragCheck_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"doubleClickTimer") ) { return ::hx::Val( doubleClickTimer ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"beginDragCallback") ) { return ::hx::Val( beginDragCallback_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pendingSecondClick") ) { return ::hx::Val( pendingSecondClick ); }
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onMouseMoveCheckDrag") ) { return ::hx::Val( onMouseMoveCheckDrag_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setPendingDoubleClick") ) { return ::hx::Val( setPendingDoubleClick_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"onDoubleClickTimerComplete") ) { return ::hx::Val( onDoubleClickTimerComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InteractiveItemTile_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"dragStart") ) { dragStart=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isDragging") ) { isDragging=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"doubleClickTimer") ) { doubleClickTimer=inValue.Cast<  ::openfl::utils::Timer >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pendingSecondClick") ) { pendingSecondClick=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InteractiveItemTile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("doubleClickTimer",ce,3c,ba,f0));
	outFields->push(HX_("dragStart",ce,e3,60,e6));
	outFields->push(HX_("pendingSecondClick",1d,d9,e6,7f));
	outFields->push(HX_("isDragging",d9,4e,3b,b2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InteractiveItemTile_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::utils::Timer */ ,(int)offsetof(InteractiveItemTile_obj,doubleClickTimer),HX_("doubleClickTimer",ce,3c,ba,f0)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(InteractiveItemTile_obj,dragStart),HX_("dragStart",ce,e3,60,e6)},
	{::hx::fsBool,(int)offsetof(InteractiveItemTile_obj,pendingSecondClick),HX_("pendingSecondClick",1d,d9,e6,7f)},
	{::hx::fsBool,(int)offsetof(InteractiveItemTile_obj,isDragging),HX_("isDragging",d9,4e,3b,b2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InteractiveItemTile_obj_sStaticStorageInfo = 0;
#endif

static ::String InteractiveItemTile_obj_sMemberFields[] = {
	HX_("doubleClickTimer",ce,3c,ba,f0),
	HX_("dragStart",ce,e3,60,e6),
	HX_("pendingSecondClick",1d,d9,e6,7f),
	HX_("isDragging",d9,4e,3b,b2),
	HX_("setInteractive",60,79,17,e4),
	HX_("getDropTarget",16,c9,ce,22),
	HX_("beginDragCallback",a2,e5,56,68),
	HX_("endDragCallback",54,c2,e6,9a),
	HX_("setPendingDoubleClick",a2,94,84,29),
	HX_("onMouseOut",a8,bb,d4,81),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onMouseDown",08,94,05,11),
	HX_("beginDragCheck",cb,f0,68,44),
	HX_("cancelDragCheck",5a,7b,c2,07),
	HX_("onMouseMoveCheckDrag",25,47,66,9e),
	HX_("onDoubleClickTimerComplete",e6,f9,b1,34),
	HX_("beginDrag",bd,0a,4a,8b),
	HX_("endDrag",6f,e5,94,24),
	HX_("onRemovedFromStage",73,cc,89,12),
	::String(null()) };

::hx::Class InteractiveItemTile_obj::__mClass;

void InteractiveItemTile_obj::__register()
{
	InteractiveItemTile_obj _hx_dummy;
	InteractiveItemTile_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.itemgrids.itemtiles.InteractiveItemTile",ce,4e,31,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InteractiveItemTile_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InteractiveItemTile_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InteractiveItemTile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InteractiveItemTile_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids
} // end namespace itemtiles
