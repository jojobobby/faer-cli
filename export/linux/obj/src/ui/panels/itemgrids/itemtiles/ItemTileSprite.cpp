// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTileSprite
#include <ui/panels/itemgrids/itemtiles/ItemTileSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e184fd77e5a5de4_13_new,"ui.panels.itemgrids.itemtiles.ItemTileSprite","new",0x3e81922d,"ui.panels.itemgrids.itemtiles.ItemTileSprite.new","ui/panels/itemgrids/itemtiles/ItemTileSprite.hx",13,0x900eb641)
HX_LOCAL_STACK_FRAME(_hx_pos_5e184fd77e5a5de4_30_setDim,"ui.panels.itemgrids.itemtiles.ItemTileSprite","setDim",0xa5056719,"ui.panels.itemgrids.itemtiles.ItemTileSprite.setDim","ui/panels/itemgrids/itemtiles/ItemTileSprite.hx",30,0x900eb641)
HX_LOCAL_STACK_FRAME(_hx_pos_5e184fd77e5a5de4_33_setType,"ui.panels.itemgrids.itemtiles.ItemTileSprite","setType",0xca545fc9,"ui.panels.itemgrids.itemtiles.ItemTileSprite.setType","ui/panels/itemgrids/itemtiles/ItemTileSprite.hx",33,0x900eb641)
HX_LOCAL_STACK_FRAME(_hx_pos_5e184fd77e5a5de4_14_boot,"ui.panels.itemgrids.itemtiles.ItemTileSprite","boot",0x6af755c5,"ui.panels.itemgrids.itemtiles.ItemTileSprite.boot","ui/panels/itemgrids/itemtiles/ItemTileSprite.hx",14,0x900eb641)
static const Float _hx_array_data_470ff7bb_4[] = {
	0.4,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,0.4,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,0.4,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,
};
namespace ui{
namespace panels{
namespace itemgrids{
namespace itemtiles{

void ItemTileSprite_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_5e184fd77e5a5de4_13_new)
HXLINE(  18)		this->itemId = 0;
HXLINE(  22)		super::__construct();
HXLINE(  24)		this->itemBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  25)		this->addChild(this->itemBitmap);
HXLINE(  26)		this->itemId = -1;
            	}

Dynamic ItemTileSprite_obj::__CreateEmpty() { return new ItemTileSprite_obj; }

void *ItemTileSprite_obj::_hx_vtable = 0;

Dynamic ItemTileSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ItemTileSprite_obj > _hx_result = new ItemTileSprite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ItemTileSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7b3736e5;
		}
	}
}

void ItemTileSprite_obj::setDim(bool dim){
            	HX_STACKFRAME(&_hx_pos_5e184fd77e5a5de4_30_setDim)
HXDLIN(  30)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(  30)		if (dim) {
HXDLIN(  30)			_hx_tmp = ::ui::panels::itemgrids::itemtiles::ItemTileSprite_obj::DIM_FILTER;
            		}
            		else {
HXDLIN(  30)			_hx_tmp = null();
            		}
HXDLIN(  30)		this->set_filters(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemTileSprite_obj,setDim,(void))

void ItemTileSprite_obj::setType(int displayedItemType){
            	HX_GC_STACKFRAME(&_hx_pos_5e184fd77e5a5de4_33_setType)
HXLINE(  34)		 ::openfl::display::BitmapData texture = null();
HXLINE(  35)		 ::Xml eqXML = null();
HXLINE(  36)		 ::ui::SimpleText tempText = null();
HXLINE(  37)		this->itemId = displayedItemType;
HXLINE(  38)		if ((this->itemId != -1)) {
HXLINE(  39)			texture = ::objects::ObjectLibrary_obj::getRedrawnTextureFromType(this->itemId,80,true,null(),null());
HXLINE(  40)			eqXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(this->itemId)) );
HXLINE(  41)			 ::Dynamic _hx_tmp;
HXDLIN(  41)			if (::hx::IsNotNull( eqXML )) {
HXLINE(  41)				_hx_tmp = eqXML->elementsNamed(HX_("Doses",d6,bc,f5,70))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)();
            			}
            			else {
HXLINE(  41)				_hx_tmp = null();
            			}
HXDLIN(  41)			if (( (bool)(_hx_tmp) )) {
HXLINE(  42)				texture = texture->clone();
HXLINE(  43)				tempText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,16777215,false,0,0,null());
HXLINE(  44)				 ::Xml _this = ( ( ::Xml)(eqXML->elementsNamed(HX_("Doses",d6,bc,f5,70))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  44)				bool _hx_tmp1;
HXDLIN(  44)				if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  44)					_hx_tmp1 = (_this->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(  44)					_hx_tmp1 = false;
            				}
HXDLIN(  44)				if (_hx_tmp1) {
HXLINE(  44)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            				}
HXDLIN(  44)				 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  44)				bool _hx_tmp2;
HXDLIN(  44)				if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  44)					_hx_tmp2 = (_this1->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE(  44)					_hx_tmp2 = true;
            				}
HXDLIN(  44)				if (_hx_tmp2) {
HXLINE(  44)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            				}
HXDLIN(  44)				tempText->set_text(_this1->nodeValue);
HXLINE(  45)				tempText->updateMetrics();
HXLINE(  46)				 ::openfl::geom::Matrix m =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  47)				m->translate(( (Float)(10) ),( (Float)(5) ));
HXLINE(  48)				texture->draw(tempText,m,null(),null(),null(),null());
            			}
HXLINE(  51)			this->itemBitmap->set_bitmapData(texture);
HXLINE(  52)			this->itemBitmap->set_x((( (Float)(-(texture->width)) ) / ( (Float)(2) )));
HXLINE(  53)			this->itemBitmap->set_y((( (Float)(-(texture->height)) ) / ( (Float)(2) )));
HXLINE(  54)			this->set_visible(true);
            		}
            		else {
HXLINE(  56)			this->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemTileSprite_obj,setType,(void))

::Array< ::Dynamic> ItemTileSprite_obj::DIM_FILTER;


::hx::ObjectPtr< ItemTileSprite_obj > ItemTileSprite_obj::__new() {
	::hx::ObjectPtr< ItemTileSprite_obj > __this = new ItemTileSprite_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ItemTileSprite_obj > ItemTileSprite_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ItemTileSprite_obj *__this = (ItemTileSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ItemTileSprite_obj), true, "ui.panels.itemgrids.itemtiles.ItemTileSprite"));
	*(void **)__this = ItemTileSprite_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ItemTileSprite_obj::ItemTileSprite_obj()
{
}

void ItemTileSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ItemTileSprite);
	HX_MARK_MEMBER_NAME(itemId,"itemId");
	HX_MARK_MEMBER_NAME(itemBitmap,"itemBitmap");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ItemTileSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(itemId,"itemId");
	HX_VISIT_MEMBER_NAME(itemBitmap,"itemBitmap");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ItemTileSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"itemId") ) { return ::hx::Val( itemId ); }
		if (HX_FIELD_EQ(inName,"setDim") ) { return ::hx::Val( setDim_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setType") ) { return ::hx::Val( setType_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"itemBitmap") ) { return ::hx::Val( itemBitmap ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ItemTileSprite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"DIM_FILTER") ) { outValue = ( DIM_FILTER ); return true; }
	}
	return false;
}

::hx::Val ItemTileSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"itemId") ) { itemId=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"itemBitmap") ) { itemBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ItemTileSprite_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"DIM_FILTER") ) { DIM_FILTER=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void ItemTileSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("itemId",ce,af,09,09));
	outFields->push(HX_("itemBitmap",62,d9,19,df));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ItemTileSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ItemTileSprite_obj,itemId),HX_("itemId",ce,af,09,09)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(ItemTileSprite_obj,itemBitmap),HX_("itemBitmap",62,d9,19,df)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ItemTileSprite_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &ItemTileSprite_obj::DIM_FILTER,HX_("DIM_FILTER",2f,f9,f9,14)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ItemTileSprite_obj_sMemberFields[] = {
	HX_("itemId",ce,af,09,09),
	HX_("itemBitmap",62,d9,19,df),
	HX_("setDim",c6,ca,63,6f),
	HX_("setType",7c,33,8d,12),
	::String(null()) };

static void ItemTileSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ItemTileSprite_obj::DIM_FILTER,"DIM_FILTER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ItemTileSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ItemTileSprite_obj::DIM_FILTER,"DIM_FILTER");
};

#endif

::hx::Class ItemTileSprite_obj::__mClass;

static ::String ItemTileSprite_obj_sStaticFields[] = {
	HX_("DIM_FILTER",2f,f9,f9,14),
	::String(null())
};

void ItemTileSprite_obj::__register()
{
	ItemTileSprite_obj _hx_dummy;
	ItemTileSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.itemgrids.itemtiles.ItemTileSprite",bb,f7,0f,47);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ItemTileSprite_obj::__GetStatic;
	__mClass->mSetStaticField = &ItemTileSprite_obj::__SetStatic;
	__mClass->mMarkFunc = ItemTileSprite_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ItemTileSprite_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ItemTileSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ItemTileSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ItemTileSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ItemTileSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ItemTileSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ItemTileSprite_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_5e184fd77e5a5de4_14_boot)
HXDLIN(  14)		DIM_FILTER = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,::Array_obj< Float >::fromData( _hx_array_data_470ff7bb_4,20)));
            	}
}

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids
} // end namespace itemtiles
