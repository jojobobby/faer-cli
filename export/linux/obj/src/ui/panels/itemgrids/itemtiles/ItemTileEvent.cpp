// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_InteractiveItemTile
#include <ui/panels/itemgrids/itemtiles/InteractiveItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile
#include <ui/panels/itemgrids/itemtiles/ItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTileEvent
#include <ui/panels/itemgrids/itemtiles/ItemTileEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_53b38ce2bfb05e59_13_new,"ui.panels.itemgrids.itemtiles.ItemTileEvent","new",0x98c51816,"ui.panels.itemgrids.itemtiles.ItemTileEvent.new","ui/panels/itemgrids/itemtiles/ItemTileEvent.hx",13,0x3e1f0d7c)
namespace ui{
namespace panels{
namespace itemgrids{
namespace itemtiles{

void ItemTileEvent_obj::__construct(::String eventType, ::ui::panels::itemgrids::itemtiles::InteractiveItemTile itemTile){
            	HX_STACKFRAME(&_hx_pos_53b38ce2bfb05e59_13_new)
HXLINE(  14)		super::__construct(eventType,true,null());
HXLINE(  15)		this->tile = itemTile;
            	}

Dynamic ItemTileEvent_obj::__CreateEmpty() { return new ItemTileEvent_obj; }

void *ItemTileEvent_obj::_hx_vtable = 0;

Dynamic ItemTileEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ItemTileEvent_obj > _hx_result = new ItemTileEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ItemTileEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08ec4c31) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x08ec4c31;
	} else {
		return inClassId==(int)0x40e52a1e;
	}
}


::hx::ObjectPtr< ItemTileEvent_obj > ItemTileEvent_obj::__new(::String eventType, ::ui::panels::itemgrids::itemtiles::InteractiveItemTile itemTile) {
	::hx::ObjectPtr< ItemTileEvent_obj > __this = new ItemTileEvent_obj();
	__this->__construct(eventType,itemTile);
	return __this;
}

::hx::ObjectPtr< ItemTileEvent_obj > ItemTileEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String eventType, ::ui::panels::itemgrids::itemtiles::InteractiveItemTile itemTile) {
	ItemTileEvent_obj *__this = (ItemTileEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ItemTileEvent_obj), true, "ui.panels.itemgrids.itemtiles.ItemTileEvent"));
	*(void **)__this = ItemTileEvent_obj::_hx_vtable;
	__this->__construct(eventType,itemTile);
	return __this;
}

ItemTileEvent_obj::ItemTileEvent_obj()
{
}

void ItemTileEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ItemTileEvent);
	HX_MARK_MEMBER_NAME(tile,"tile");
	 ::openfl::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ItemTileEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tile,"tile");
	 ::openfl::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ItemTileEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tile") ) { return ::hx::Val( tile ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ItemTileEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tile") ) { tile=inValue.Cast<  ::ui::panels::itemgrids::itemtiles::InteractiveItemTile >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ItemTileEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tile",2e,cb,fc,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ItemTileEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::panels::itemgrids::itemtiles::InteractiveItemTile */ ,(int)offsetof(ItemTileEvent_obj,tile),HX_("tile",2e,cb,fc,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ItemTileEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String ItemTileEvent_obj_sMemberFields[] = {
	HX_("tile",2e,cb,fc,4c),
	::String(null()) };

::hx::Class ItemTileEvent_obj::__mClass;

void ItemTileEvent_obj::__register()
{
	ItemTileEvent_obj _hx_dummy;
	ItemTileEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.itemgrids.itemtiles.ItemTileEvent",24,15,6e,86);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ItemTileEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ItemTileEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ItemTileEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ItemTileEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids
} // end namespace itemtiles
