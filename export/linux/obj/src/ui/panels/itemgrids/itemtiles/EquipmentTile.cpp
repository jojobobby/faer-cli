// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_EquipmentTile
#include <ui/panels/itemgrids/itemtiles/EquipmentTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_InteractiveItemTile
#include <ui/panels/itemgrids/itemtiles/InteractiveItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile
#include <ui/panels/itemgrids/itemtiles/ItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTileSprite
#include <ui/panels/itemgrids/itemtiles/ItemTileSprite.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d47564537bc89f0b_13_new,"ui.panels.itemgrids.itemtiles.EquipmentTile","new",0xb93a49b9,"ui.panels.itemgrids.itemtiles.EquipmentTile.new","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",13,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_27_canHoldItem,"ui.panels.itemgrids.itemtiles.EquipmentTile","canHoldItem",0xe69f807b,"ui.panels.itemgrids.itemtiles.EquipmentTile.canHoldItem","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",27,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_30_setItem,"ui.panels.itemgrids.itemtiles.EquipmentTile","setItem",0xea049fae,"ui.panels.itemgrids.itemtiles.EquipmentTile.setItem","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",30,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_41_beginDragCallback,"ui.panels.itemgrids.itemtiles.EquipmentTile","beginDragCallback",0x61b9a8bb,"ui.panels.itemgrids.itemtiles.EquipmentTile.beginDragCallback","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",41,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_45_endDragCallback,"ui.panels.itemgrids.itemtiles.EquipmentTile","endDragCallback",0x500a5d2d,"ui.panels.itemgrids.itemtiles.EquipmentTile.endDragCallback","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",45,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_48_setType,"ui.panels.itemgrids.itemtiles.EquipmentTile","setType",0xf14dcd55,"ui.panels.itemgrids.itemtiles.EquipmentTile.setType","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",48,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_107_updateDim,"ui.panels.itemgrids.itemtiles.EquipmentTile","updateDim",0x06569cd8,"ui.panels.itemgrids.itemtiles.EquipmentTile.updateDim","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",107,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_111_updateMinMana,"ui.panels.itemgrids.itemtiles.EquipmentTile","updateMinMana",0x073912c9,"ui.panels.itemgrids.itemtiles.EquipmentTile.updateMinMana","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",111,0x363b2139)
HX_LOCAL_STACK_FRAME(_hx_pos_d47564537bc89f0b_14_boot,"ui.panels.itemgrids.itemtiles.EquipmentTile","boot",0x51df38b9,"ui.panels.itemgrids.itemtiles.EquipmentTile.boot","ui/panels/itemgrids/itemtiles/EquipmentTile.hx",14,0x363b2139)
namespace ui{
namespace panels{
namespace itemgrids{
namespace itemtiles{

void EquipmentTile_obj::__construct(int id, ::ui::panels::itemgrids::ItemGrid parentGrid,bool isInteractive){
            	HX_STACKFRAME(&_hx_pos_d47564537bc89f0b_13_new)
HXLINE(  20)		this->minHealthUsage = 0;
HXLINE(  19)		this->minManaUsage = 0;
HXLINE(  17)		this->slotType = 0;
HXLINE(  23)		super::__construct(id,parentGrid,isInteractive);
            	}

Dynamic EquipmentTile_obj::__CreateEmpty() { return new EquipmentTile_obj; }

void *EquipmentTile_obj::_hx_vtable = 0;

Dynamic EquipmentTile_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EquipmentTile_obj > _hx_result = new EquipmentTile_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool EquipmentTile_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x46e88c79) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x46e88c79;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			if (inClassId<=(int)0x65ba405c) {
				return inClassId==(int)0x4af7dd8e || inClassId==(int)0x65ba405c;
			} else {
				return inClassId==(int)0x6b353933;
			}
		} else {
			return inClassId==(int)0x779643f0;
		}
	}
}

bool EquipmentTile_obj::canHoldItem(int itemType){
            	HX_STACKFRAME(&_hx_pos_d47564537bc89f0b_27_canHoldItem)
HXDLIN(  27)		if ((itemType > 0)) {
HXDLIN(  27)			int _hx_tmp = this->slotType;
HXDLIN(  27)			return ::objects::ObjectLibrary_obj::slotsMatching(_hx_tmp,::objects::ObjectLibrary_obj::getSlotTypeFromType(itemType));
            		}
            		else {
HXDLIN(  27)			return true;
            		}
HXDLIN(  27)		return false;
            	}


bool EquipmentTile_obj::setItem(int itemId){
            	HX_STACKFRAME(&_hx_pos_d47564537bc89f0b_30_setItem)
HXLINE(  31)		bool itemChanged = this->super::setItem(itemId);
HXLINE(  32)		if (itemChanged) {
HXLINE(  33)			this->backgroundDetail->set_visible((this->itemSprite->itemId <= 0));
HXLINE(  34)			this->updateMinMana();
            		}
HXLINE(  37)		return itemChanged;
            	}


void EquipmentTile_obj::beginDragCallback(){
            	HX_STACKFRAME(&_hx_pos_d47564537bc89f0b_41_beginDragCallback)
HXDLIN(  41)		this->backgroundDetail->set_visible(true);
            	}


void EquipmentTile_obj::endDragCallback(){
            	HX_STACKFRAME(&_hx_pos_d47564537bc89f0b_45_endDragCallback)
HXDLIN(  45)		this->backgroundDetail->set_visible((this->itemSprite->itemId <= 0));
            	}


void EquipmentTile_obj::setType(int slotType){
            	HX_GC_STACKFRAME(&_hx_pos_d47564537bc89f0b_48_setType)
HXLINE(  49)		int sheetId = 16;
HXLINE(  50)		switch((int)(slotType)){
            			case (int)1: {
HXLINE(  57)				sheetId = 1;
            			}
            			break;
            			case (int)3: {
HXLINE(  59)				sheetId = 65;
            			}
            			break;
            			case (int)4: {
HXLINE(  77)				sheetId = 113;
            			}
            			break;
            			case (int)5: {
HXLINE(  79)				sheetId = 129;
            			}
            			break;
            			case (int)6: {
HXLINE(  70)				sheetId = 17;
            			}
            			break;
            			case (int)7: {
HXLINE(  68)				sheetId = 33;
            			}
            			break;
            			case (int)8: {
HXLINE(  81)				sheetId = 145;
            			}
            			break;
            			case (int)9: {
HXLINE(  52)				sheetId = 241;
            			}
            			break;
            			case (int)12: {
HXLINE(  85)				sheetId = 193;
            			}
            			break;
            			case (int)14: {
HXLINE(  72)				sheetId = 97;
            			}
            			break;
            			case (int)15: {
HXLINE(  87)				sheetId = 209;
            			}
            			break;
            			case (int)16: {
HXLINE(  83)				sheetId = 177;
            			}
            			break;
            			case (int)17: {
HXLINE(  61)				sheetId = 81;
            			}
            			break;
            			case (int)19: {
HXLINE(  89)				sheetId = 225;
            			}
            			break;
            			case (int)20: {
HXLINE(  66)				sheetId = 49;
            			}
            			break;
            			case (int)21: {
HXLINE(  75)				sheetId = 50;
            			}
            			break;
            			case (int)22: {
HXLINE(  55)				sheetId = 48;
            			}
            			break;
            			case (int)23: {
HXLINE(  63)				sheetId = 161;
            			}
            			break;
            		}
HXLINE(  92)		 ::openfl::display::BitmapData bd = ::util::AssetLibrary_obj::getImageFromSet(HX_("tieredItems",3f,0e,eb,ad),sheetId);
HXLINE(  93)		if (::hx::IsNotNull( bd )) {
HXLINE(  94)			this->backgroundDetail =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bd,null(),null());
HXLINE(  95)			this->backgroundDetail->set_scaleX(( (Float)(4) ));
HXLINE(  96)			this->backgroundDetail->set_scaleY(( (Float)(4) ));
HXLINE(  97)			 ::openfl::display::Bitmap _hx_tmp = this->backgroundDetail;
HXDLIN(  97)			_hx_tmp->set_x(((( (Float)(40) ) - this->backgroundDetail->get_width()) / ( (Float)(2) )));
HXLINE(  98)			 ::openfl::display::Bitmap _hx_tmp1 = this->backgroundDetail;
HXDLIN(  98)			_hx_tmp1->set_y(((( (Float)(40) ) - this->backgroundDetail->get_height()) / ( (Float)(2) )));
HXLINE(  99)			this->backgroundDetail->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0,::ui::panels::itemgrids::itemtiles::EquipmentTile_obj::greyColorFilter));
HXLINE( 100)			this->addChildAt(this->backgroundDetail,0);
            		}
HXLINE( 103)		this->slotType = slotType;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EquipmentTile_obj,setType,(void))

void EquipmentTile_obj::updateDim( ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_d47564537bc89f0b_107_updateDim)
HXDLIN( 107)		bool _hx_tmp;
HXDLIN( 107)		bool _hx_tmp1;
HXDLIN( 107)		bool _hx_tmp2;
HXDLIN( 107)		if ((this->minManaUsage > 0)) {
HXDLIN( 107)			_hx_tmp2 = ::hx::IsNotNull( player );
            		}
            		else {
HXDLIN( 107)			_hx_tmp2 = false;
            		}
HXDLIN( 107)		if (_hx_tmp2) {
HXDLIN( 107)			_hx_tmp1 = (player->mp < this->minManaUsage);
            		}
            		else {
HXDLIN( 107)			_hx_tmp1 = false;
            		}
HXDLIN( 107)		if (!(_hx_tmp1)) {
HXDLIN( 107)			bool _hx_tmp3;
HXDLIN( 107)			if ((this->minHealthUsage > 0)) {
HXDLIN( 107)				_hx_tmp3 = ::hx::IsNotNull( player );
            			}
            			else {
HXDLIN( 107)				_hx_tmp3 = false;
            			}
HXDLIN( 107)			if (_hx_tmp3) {
HXDLIN( 107)				_hx_tmp = (player->hp < this->minHealthUsage);
            			}
            			else {
HXDLIN( 107)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 107)			_hx_tmp = true;
            		}
HXDLIN( 107)		this->itemSprite->setDim(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(EquipmentTile_obj,updateDim,(void))

void EquipmentTile_obj::updateMinMana(){
            	HX_STACKFRAME(&_hx_pos_d47564537bc89f0b_111_updateMinMana)
HXLINE( 112)		 ::Xml itemDataXML = null();
HXLINE( 113)		if ((this->itemSprite->itemId > 0)) {
HXLINE( 114)			itemDataXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(this->itemSprite->itemId)) );
HXLINE( 115)			if (::hx::IsNotNull( itemDataXML )) {
HXLINE( 116)				int _hx_tmp;
HXDLIN( 116)				if (( (bool)(itemDataXML->elementsNamed(HX_("MpCost",70,ab,f9,72))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 117)					 ::Xml _this = ( ( ::Xml)(itemDataXML->elementsNamed(HX_("MpCost",70,ab,f9,72))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 117)					bool _hx_tmp1;
HXDLIN( 117)					if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 117)						_hx_tmp1 = (_this->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 117)						_hx_tmp1 = false;
            					}
HXDLIN( 117)					if (_hx_tmp1) {
HXLINE( 117)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            					}
HXDLIN( 117)					 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 117)					bool _hx_tmp2;
HXDLIN( 117)					if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 117)						_hx_tmp2 = (_this1->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 117)						_hx_tmp2 = true;
            					}
HXDLIN( 117)					if (_hx_tmp2) {
HXLINE( 117)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            					}
HXLINE( 116)					_hx_tmp = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
            				}
            				else {
HXLINE( 116)					_hx_tmp = 0;
            				}
HXDLIN( 116)				this->minManaUsage = _hx_tmp;
HXLINE( 118)				int _hx_tmp3;
HXDLIN( 118)				if (( (bool)(itemDataXML->elementsNamed(HX_("HpCost",95,dd,30,73))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 119)					 ::Xml _this2 = ( ( ::Xml)(itemDataXML->elementsNamed(HX_("HpCost",95,dd,30,73))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 119)					bool _hx_tmp4;
HXDLIN( 119)					if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 119)						_hx_tmp4 = (_this2->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 119)						_hx_tmp4 = false;
            					}
HXDLIN( 119)					if (_hx_tmp4) {
HXLINE( 119)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            					}
HXDLIN( 119)					 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 119)					bool _hx_tmp5;
HXDLIN( 119)					if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE( 119)						_hx_tmp5 = (_this3->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 119)						_hx_tmp5 = true;
            					}
HXDLIN( 119)					if (_hx_tmp5) {
HXLINE( 119)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            					}
HXLINE( 118)					_hx_tmp3 = ( (int)(::Std_obj::parseInt(_this3->nodeValue)) );
            				}
            				else {
HXLINE( 118)					_hx_tmp3 = 0;
            				}
HXDLIN( 118)				this->minHealthUsage = _hx_tmp3;
HXLINE( 120)				return;
            			}
            		}
HXLINE( 124)		this->minManaUsage = 0;
HXLINE( 125)		this->minHealthUsage = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EquipmentTile_obj,updateMinMana,(void))

 ::openfl::filters::ColorMatrixFilter EquipmentTile_obj::greyColorFilter;


::hx::ObjectPtr< EquipmentTile_obj > EquipmentTile_obj::__new(int id, ::ui::panels::itemgrids::ItemGrid parentGrid,bool isInteractive) {
	::hx::ObjectPtr< EquipmentTile_obj > __this = new EquipmentTile_obj();
	__this->__construct(id,parentGrid,isInteractive);
	return __this;
}

::hx::ObjectPtr< EquipmentTile_obj > EquipmentTile_obj::__alloc(::hx::Ctx *_hx_ctx,int id, ::ui::panels::itemgrids::ItemGrid parentGrid,bool isInteractive) {
	EquipmentTile_obj *__this = (EquipmentTile_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EquipmentTile_obj), true, "ui.panels.itemgrids.itemtiles.EquipmentTile"));
	*(void **)__this = EquipmentTile_obj::_hx_vtable;
	__this->__construct(id,parentGrid,isInteractive);
	return __this;
}

EquipmentTile_obj::EquipmentTile_obj()
{
}

void EquipmentTile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EquipmentTile);
	HX_MARK_MEMBER_NAME(backgroundDetail,"backgroundDetail");
	HX_MARK_MEMBER_NAME(slotType,"slotType");
	HX_MARK_MEMBER_NAME(minManaUsage,"minManaUsage");
	HX_MARK_MEMBER_NAME(minHealthUsage,"minHealthUsage");
	 ::ui::panels::itemgrids::itemtiles::InteractiveItemTile_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EquipmentTile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backgroundDetail,"backgroundDetail");
	HX_VISIT_MEMBER_NAME(slotType,"slotType");
	HX_VISIT_MEMBER_NAME(minManaUsage,"minManaUsage");
	HX_VISIT_MEMBER_NAME(minHealthUsage,"minHealthUsage");
	 ::ui::panels::itemgrids::itemtiles::InteractiveItemTile_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EquipmentTile_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"setItem") ) { return ::hx::Val( setItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"setType") ) { return ::hx::Val( setType_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"slotType") ) { return ::hx::Val( slotType ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateDim") ) { return ::hx::Val( updateDim_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"canHoldItem") ) { return ::hx::Val( canHoldItem_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minManaUsage") ) { return ::hx::Val( minManaUsage ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateMinMana") ) { return ::hx::Val( updateMinMana_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minHealthUsage") ) { return ::hx::Val( minHealthUsage ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"endDragCallback") ) { return ::hx::Val( endDragCallback_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backgroundDetail") ) { return ::hx::Val( backgroundDetail ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"beginDragCallback") ) { return ::hx::Val( beginDragCallback_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EquipmentTile_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"greyColorFilter") ) { outValue = ( greyColorFilter ); return true; }
	}
	return false;
}

::hx::Val EquipmentTile_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"slotType") ) { slotType=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"minManaUsage") ) { minManaUsage=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minHealthUsage") ) { minHealthUsage=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backgroundDetail") ) { backgroundDetail=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool EquipmentTile_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"greyColorFilter") ) { greyColorFilter=ioValue.Cast<  ::openfl::filters::ColorMatrixFilter >(); return true; }
	}
	return false;
}

void EquipmentTile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("backgroundDetail",1f,11,b6,3a));
	outFields->push(HX_("slotType",d8,d3,b1,a0));
	outFields->push(HX_("minManaUsage",28,d3,a8,7c));
	outFields->push(HX_("minHealthUsage",73,9a,e5,94));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EquipmentTile_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(EquipmentTile_obj,backgroundDetail),HX_("backgroundDetail",1f,11,b6,3a)},
	{::hx::fsInt,(int)offsetof(EquipmentTile_obj,slotType),HX_("slotType",d8,d3,b1,a0)},
	{::hx::fsInt,(int)offsetof(EquipmentTile_obj,minManaUsage),HX_("minManaUsage",28,d3,a8,7c)},
	{::hx::fsInt,(int)offsetof(EquipmentTile_obj,minHealthUsage),HX_("minHealthUsage",73,9a,e5,94)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo EquipmentTile_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::filters::ColorMatrixFilter */ ,(void *) &EquipmentTile_obj::greyColorFilter,HX_("greyColorFilter",5c,04,69,5e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String EquipmentTile_obj_sMemberFields[] = {
	HX_("backgroundDetail",1f,11,b6,3a),
	HX_("slotType",d8,d3,b1,a0),
	HX_("minManaUsage",28,d3,a8,7c),
	HX_("minHealthUsage",73,9a,e5,94),
	HX_("canHoldItem",22,86,2a,67),
	HX_("setItem",d5,05,44,0b),
	HX_("beginDragCallback",a2,e5,56,68),
	HX_("endDragCallback",54,c2,e6,9a),
	HX_("setType",7c,33,8d,12),
	HX_("updateDim",bf,1a,d9,82),
	HX_("updateMinMana",30,10,ce,04),
	::String(null()) };

static void EquipmentTile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EquipmentTile_obj::greyColorFilter,"greyColorFilter");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EquipmentTile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EquipmentTile_obj::greyColorFilter,"greyColorFilter");
};

#endif

::hx::Class EquipmentTile_obj::__mClass;

static ::String EquipmentTile_obj_sStaticFields[] = {
	HX_("greyColorFilter",5c,04,69,5e),
	::String(null())
};

void EquipmentTile_obj::__register()
{
	EquipmentTile_obj _hx_dummy;
	EquipmentTile_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.itemgrids.itemtiles.EquipmentTile",47,f9,9a,1d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EquipmentTile_obj::__GetStatic;
	__mClass->mSetStaticField = &EquipmentTile_obj::__SetStatic;
	__mClass->mMarkFunc = EquipmentTile_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(EquipmentTile_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EquipmentTile_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EquipmentTile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EquipmentTile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EquipmentTile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EquipmentTile_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EquipmentTile_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d47564537bc89f0b_14_boot)
HXDLIN(  14)		greyColorFilter =  ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,::util::ColorUtils_obj::singleColorFilterMatrix(3552822));
            	}
}

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids
} // end namespace itemtiles
