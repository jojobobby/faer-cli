// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile
#include <ui/panels/itemgrids/itemtiles/ItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTileSprite
#include <ui/panels/itemgrids/itemtiles/ItemTileSprite.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_BitmapUtil
#include <util/BitmapUtil.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_52da86000c4bbf53_22_new,"ui.panels.itemgrids.itemtiles.ItemTile","new",0x9b471708,"ui.panels.itemgrids.itemtiles.ItemTile.new","ui/panels/itemgrids/itemtiles/ItemTile.hx",22,0xfd850b46)
HX_LOCAL_STACK_FRAME(_hx_pos_52da86000c4bbf53_71_drawBackground,"ui.panels.itemgrids.itemtiles.ItemTile","drawBackground",0x3aaddb6a,"ui.panels.itemgrids.itemtiles.ItemTile.drawBackground","ui/panels/itemgrids/itemtiles/ItemTile.hx",71,0xfd850b46)
HX_LOCAL_STACK_FRAME(_hx_pos_52da86000c4bbf53_120_setItem,"ui.panels.itemgrids.itemtiles.ItemTile","setItem",0x63a3c07d,"ui.panels.itemgrids.itemtiles.ItemTile.setItem","ui/panels/itemgrids/itemtiles/ItemTile.hx",120,0xfd850b46)
HX_LOCAL_STACK_FRAME(_hx_pos_52da86000c4bbf53_130_setItemSprite,"ui.panels.itemgrids.itemtiles.ItemTile","setItemSprite",0x9f190c62,"ui.panels.itemgrids.itemtiles.ItemTile.setItemSprite","ui/panels/itemgrids/itemtiles/ItemTile.hx",130,0xfd850b46)
HX_LOCAL_STACK_FRAME(_hx_pos_52da86000c4bbf53_142_updateUseability,"ui.panels.itemgrids.itemtiles.ItemTile","updateUseability",0x9c66dc04,"ui.panels.itemgrids.itemtiles.ItemTile.updateUseability","ui/panels/itemgrids/itemtiles/ItemTile.hx",142,0xfd850b46)
HX_LOCAL_STACK_FRAME(_hx_pos_52da86000c4bbf53_149_canHoldItem,"ui.panels.itemgrids.itemtiles.ItemTile","canHoldItem",0x1e40b4ca,"ui.panels.itemgrids.itemtiles.ItemTile.canHoldItem","ui/panels/itemgrids/itemtiles/ItemTile.hx",149,0xfd850b46)
HX_LOCAL_STACK_FRAME(_hx_pos_52da86000c4bbf53_153_resetItemPosition,"ui.panels.itemgrids.itemtiles.ItemTile","resetItemPosition",0x057019f3,"ui.panels.itemgrids.itemtiles.ItemTile.resetItemPosition","ui/panels/itemgrids/itemtiles/ItemTile.hx",153,0xfd850b46)
HX_LOCAL_STACK_FRAME(_hx_pos_52da86000c4bbf53_157_getItemId,"ui.panels.itemgrids.itemtiles.ItemTile","getItemId",0x8121edac,"ui.panels.itemgrids.itemtiles.ItemTile.getItemId","ui/panels/itemgrids/itemtiles/ItemTile.hx",157,0xfd850b46)
namespace ui{
namespace panels{
namespace itemgrids{
namespace itemtiles{

void ItemTile_obj::__construct(int id, ::ui::panels::itemgrids::ItemGrid parentGrid){
            	HX_GC_STACKFRAME(&_hx_pos_52da86000c4bbf53_22_new)
HXLINE(  33)		this->graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(3)->init(0, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,5526612,1))->init(1, ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null()))->init(2,::util::GraphicsUtil_obj::END_FILL),true);
HXLINE(  32)		this->path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  31)		this->fill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,5526612,1);
HXLINE(  28)		this->tileId = 0;
HXLINE(  43)		super::__construct();
HXLINE(  45)		this->restrictionBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::TextureRedrawer_obj::redraw(::util::BitmapUtil_obj::trimAlpha(::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),30)),60,false,0,null(),null(),null()),null(),null());
HXLINE(  46)		 ::openfl::display::Bitmap _hx_tmp = this->restrictionBitmap;
HXDLIN(  46)		_hx_tmp->set_x(((( (Float)(40) ) - (this->restrictionBitmap->get_width() / ((Float)1.4))) - ( (Float)(5) )));
HXLINE(  47)		 ::openfl::display::Bitmap _hx_tmp1 = this->restrictionBitmap;
HXDLIN(  47)		_hx_tmp1->set_y(((( (Float)(40) ) - this->restrictionBitmap->get_height()) - ( (Float)(2) )));
HXLINE(  48)		this->restrictionBitmap->set_visible(false);
HXLINE(  50)		this->rareBackground =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/inventorySlotRare.png",48,d7,d4,ef),null()),null(),null());
HXLINE(  51)		this->rareBackground->set_visible(false);
HXLINE(  52)		this->addChild(this->rareBackground);
HXLINE(  54)		this->epicBackground =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/inventorySlotEpic.png",ab,98,03,b8),null()),null(),null());
HXLINE(  55)		this->epicBackground->set_visible(false);
HXLINE(  56)		this->addChild(this->epicBackground);
HXLINE(  58)		this->legendaryBackground =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/inventorySlotLegendary.png",ab,22,6a,b0),null()),null(),null());
HXLINE(  59)		this->legendaryBackground->set_visible(false);
HXLINE(  60)		this->addChild(this->legendaryBackground);
HXLINE(  62)		this->mythicBackground =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/inventorySlotMythic.png",a0,4e,14,15),null()),null(),null());
HXLINE(  63)		this->mythicBackground->set_visible(false);
HXLINE(  64)		this->addChild(this->mythicBackground);
HXLINE(  66)		this->tileId = id;
HXLINE(  67)		this->ownerGrid = parentGrid;
HXLINE(  68)		this->setItemSprite( ::ui::panels::itemgrids::itemtiles::ItemTileSprite_obj::__alloc( HX_CTX ));
            	}

Dynamic ItemTile_obj::__CreateEmpty() { return new ItemTile_obj; }

void *ItemTile_obj::_hx_vtable = 0;

Dynamic ItemTile_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ItemTile_obj > _hx_result = new ItemTile_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ItemTile_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x65ba405c) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x65ba405c;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void ItemTile_obj::drawBackground(::Array< int > cuts){
            	HX_GC_STACKFRAME(&_hx_pos_52da86000c4bbf53_71_drawBackground)
HXLINE(  72)		int itemId;
HXDLIN(  72)		if (::hx::IsNotNull( this->itemSprite )) {
HXLINE(  72)			itemId = this->itemSprite->itemId;
            		}
            		else {
HXLINE(  72)			itemId = -1;
            		}
HXLINE(  74)		if (::hx::IsNull( cuts )) {
HXLINE(  76)			this->get_graphics()->clear();
HXLINE(  77)			this->get_graphics()->beginFill(0,0);
HXLINE(  78)			this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(40) ),( (Float)(40) ));
HXLINE(  79)			this->get_graphics()->endFill();
HXLINE(  81)			this->rareBackground->set_visible(false);
HXLINE(  82)			this->epicBackground->set_visible(false);
HXLINE(  83)			this->legendaryBackground->set_visible(false);
HXLINE(  84)			this->mythicBackground->set_visible(false);
HXLINE(  86)			if ((itemId != -1)) {
HXLINE(  87)				 ::Xml tmp = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(itemId)) );
HXDLIN(  87)				::String _g;
HXDLIN(  87)				if (::hx::IsNotNull( tmp )) {
HXLINE(  87)					if (( (bool)(tmp->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  87)						 ::Xml _this = ( ( ::Xml)(tmp->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  87)						bool _g1;
HXDLIN(  87)						if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  87)							_g1 = (_this->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE(  87)							_g1 = false;
            						}
HXDLIN(  87)						if (_g1) {
HXLINE(  87)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            						}
HXDLIN(  87)						 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  87)						bool _g2;
HXDLIN(  87)						if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  87)							_g2 = (_this1->nodeType == ::Xml_obj::Element);
            						}
            						else {
HXLINE(  87)							_g2 = true;
            						}
HXDLIN(  87)						if (_g2) {
HXLINE(  87)							HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            						}
HXDLIN(  87)						_g = _this1->nodeValue;
            					}
            					else {
HXLINE(  87)						_g = HX_("",00,00,00,00);
            					}
            				}
            				else {
HXLINE(  87)					_g = null();
            				}
HXDLIN(  87)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("Epic",25,11,f1,2d)) ){
HXLINE(  91)					this->epicBackground->set_visible(true);
HXDLIN(  91)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("Legendary",9b,8f,37,e6)) ){
HXLINE(  93)					this->legendaryBackground->set_visible(true);
HXDLIN(  93)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("Mythic",da,ff,f2,c1)) ){
HXLINE(  95)					this->mythicBackground->set_visible(true);
HXDLIN(  95)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("Rare",42,7d,7d,36)) ){
HXLINE(  89)					this->rareBackground->set_visible(true);
HXDLIN(  89)					goto _hx_goto_1;
            				}
            				_hx_goto_1:;
            			}
HXLINE(  98)			return;
            		}
HXLINE( 101)		this->cuts = cuts;
HXLINE( 102)		 ::openfl::display::GraphicsSolidFill fill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,5526612,1);
HXLINE( 103)		if ((itemId != -1)) {
HXLINE( 104)			 ::Xml xml = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(itemId)) );
HXLINE( 105)			 ::Dynamic _hx_tmp;
HXDLIN( 105)			if (::hx::IsNotNull( xml )) {
HXLINE( 105)				_hx_tmp = xml->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)();
            			}
            			else {
HXLINE( 105)				_hx_tmp = null();
            			}
HXDLIN( 105)			if (( (bool)(_hx_tmp) )) {
HXLINE( 106)				 ::Xml _this2 = ( ( ::Xml)(xml->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 106)				bool _hx_tmp1;
HXDLIN( 106)				if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 106)					_hx_tmp1 = (_this2->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 106)					_hx_tmp1 = false;
            				}
HXDLIN( 106)				if (_hx_tmp1) {
HXLINE( 106)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            				}
HXDLIN( 106)				 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 106)				bool _hx_tmp2;
HXDLIN( 106)				if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE( 106)					_hx_tmp2 = (_this3->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 106)					_hx_tmp2 = true;
            				}
HXDLIN( 106)				if (_hx_tmp2) {
HXLINE( 106)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            				}
HXDLIN( 106)				this->fill->color = (fill->color = ::util::ColorUtils_obj::getRarityColor(_this3->nodeValue,5526612));
HXLINE( 107)				this->graphicsData->set(0,this->fill);
            			}
            		}
            		else {
HXLINE( 110)			this->fill->color = (fill->color = 5526612);
HXLINE( 111)			this->graphicsData->set(0,this->fill);
            		}
HXLINE( 113)		::util::GraphicsUtil_obj::clearPath(this->path);
HXLINE( 114)		::util::GraphicsUtil_obj::drawCutEdgeRect(0,0,40,40,4,this->cuts,this->path);
HXLINE( 115)		this->graphicsData->set(1,this->path);
HXLINE( 116)		this->get_graphics()->clear();
HXLINE( 117)		this->get_graphics()->drawGraphicsData(this->graphicsData);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemTile_obj,drawBackground,(void))

bool ItemTile_obj::setItem(int itemId){
            	HX_STACKFRAME(&_hx_pos_52da86000c4bbf53_120_setItem)
HXLINE( 121)		if ((itemId == this->itemSprite->itemId)) {
HXLINE( 122)			return false;
            		}
HXLINE( 124)		this->itemSprite->setType(itemId);
HXLINE( 125)		this->drawBackground(this->cuts);
HXLINE( 126)		this->updateUseability(this->ownerGrid->curPlayer);
HXLINE( 127)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemTile_obj,setItem,return )

void ItemTile_obj::setItemSprite( ::ui::panels::itemgrids::itemtiles::ItemTileSprite itemTileSprite){
            	HX_STACKFRAME(&_hx_pos_52da86000c4bbf53_130_setItemSprite)
HXLINE( 131)		this->itemSprite = itemTileSprite;
HXLINE( 132)		this->itemSprite->set_x(((Float)20.));
HXLINE( 133)		this->itemSprite->set_y(((Float)20.));
HXLINE( 135)		this->drawBackground(this->cuts);
HXLINE( 137)		this->addChild(this->itemSprite);
HXLINE( 138)		this->addChild(this->restrictionBitmap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemTile_obj,setItemSprite,(void))

void ItemTile_obj::updateUseability( ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_52da86000c4bbf53_142_updateUseability)
HXDLIN( 142)		if ((this->itemSprite->itemId != -1)) {
HXLINE( 143)			 ::openfl::display::Bitmap _hx_tmp = this->restrictionBitmap;
HXDLIN( 143)			_hx_tmp->set_visible(!(::objects::ObjectLibrary_obj::isUsableByPlayer(this->itemSprite->itemId,player)));
            		}
            		else {
HXLINE( 145)			this->restrictionBitmap->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemTile_obj,updateUseability,(void))

bool ItemTile_obj::canHoldItem(int itemType){
            	HX_STACKFRAME(&_hx_pos_52da86000c4bbf53_149_canHoldItem)
HXDLIN( 149)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemTile_obj,canHoldItem,return )

void ItemTile_obj::resetItemPosition(){
            	HX_STACKFRAME(&_hx_pos_52da86000c4bbf53_153_resetItemPosition)
HXDLIN( 153)		this->setItemSprite(this->itemSprite);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemTile_obj,resetItemPosition,(void))

int ItemTile_obj::getItemId(){
            	HX_STACKFRAME(&_hx_pos_52da86000c4bbf53_157_getItemId)
HXDLIN( 157)		return this->itemSprite->itemId;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemTile_obj,getItemId,return )


::hx::ObjectPtr< ItemTile_obj > ItemTile_obj::__new(int id, ::ui::panels::itemgrids::ItemGrid parentGrid) {
	::hx::ObjectPtr< ItemTile_obj > __this = new ItemTile_obj();
	__this->__construct(id,parentGrid);
	return __this;
}

::hx::ObjectPtr< ItemTile_obj > ItemTile_obj::__alloc(::hx::Ctx *_hx_ctx,int id, ::ui::panels::itemgrids::ItemGrid parentGrid) {
	ItemTile_obj *__this = (ItemTile_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ItemTile_obj), true, "ui.panels.itemgrids.itemtiles.ItemTile"));
	*(void **)__this = ItemTile_obj::_hx_vtable;
	__this->__construct(id,parentGrid);
	return __this;
}

ItemTile_obj::ItemTile_obj()
{
}

void ItemTile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ItemTile);
	HX_MARK_MEMBER_NAME(restrictionBitmap,"restrictionBitmap");
	HX_MARK_MEMBER_NAME(itemSprite,"itemSprite");
	HX_MARK_MEMBER_NAME(tileId,"tileId");
	HX_MARK_MEMBER_NAME(ownerGrid,"ownerGrid");
	HX_MARK_MEMBER_NAME(fill,"fill");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(graphicsData,"graphicsData");
	HX_MARK_MEMBER_NAME(cuts,"cuts");
	HX_MARK_MEMBER_NAME(rareBackground,"rareBackground");
	HX_MARK_MEMBER_NAME(epicBackground,"epicBackground");
	HX_MARK_MEMBER_NAME(legendaryBackground,"legendaryBackground");
	HX_MARK_MEMBER_NAME(mythicBackground,"mythicBackground");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ItemTile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(restrictionBitmap,"restrictionBitmap");
	HX_VISIT_MEMBER_NAME(itemSprite,"itemSprite");
	HX_VISIT_MEMBER_NAME(tileId,"tileId");
	HX_VISIT_MEMBER_NAME(ownerGrid,"ownerGrid");
	HX_VISIT_MEMBER_NAME(fill,"fill");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(graphicsData,"graphicsData");
	HX_VISIT_MEMBER_NAME(cuts,"cuts");
	HX_VISIT_MEMBER_NAME(rareBackground,"rareBackground");
	HX_VISIT_MEMBER_NAME(epicBackground,"epicBackground");
	HX_VISIT_MEMBER_NAME(legendaryBackground,"legendaryBackground");
	HX_VISIT_MEMBER_NAME(mythicBackground,"mythicBackground");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ItemTile_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { return ::hx::Val( fill ); }
		if (HX_FIELD_EQ(inName,"path") ) { return ::hx::Val( path ); }
		if (HX_FIELD_EQ(inName,"cuts") ) { return ::hx::Val( cuts ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tileId") ) { return ::hx::Val( tileId ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setItem") ) { return ::hx::Val( setItem_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ownerGrid") ) { return ::hx::Val( ownerGrid ); }
		if (HX_FIELD_EQ(inName,"getItemId") ) { return ::hx::Val( getItemId_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"itemSprite") ) { return ::hx::Val( itemSprite ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"canHoldItem") ) { return ::hx::Val( canHoldItem_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { return ::hx::Val( graphicsData ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setItemSprite") ) { return ::hx::Val( setItemSprite_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"rareBackground") ) { return ::hx::Val( rareBackground ); }
		if (HX_FIELD_EQ(inName,"epicBackground") ) { return ::hx::Val( epicBackground ); }
		if (HX_FIELD_EQ(inName,"drawBackground") ) { return ::hx::Val( drawBackground_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mythicBackground") ) { return ::hx::Val( mythicBackground ); }
		if (HX_FIELD_EQ(inName,"updateUseability") ) { return ::hx::Val( updateUseability_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"restrictionBitmap") ) { return ::hx::Val( restrictionBitmap ); }
		if (HX_FIELD_EQ(inName,"resetItemPosition") ) { return ::hx::Val( resetItemPosition_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"legendaryBackground") ) { return ::hx::Val( legendaryBackground ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ItemTile_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { fill=inValue.Cast<  ::openfl::display::GraphicsSolidFill >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast<  ::openfl::display::GraphicsPath >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cuts") ) { cuts=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tileId") ) { tileId=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ownerGrid") ) { ownerGrid=inValue.Cast<  ::ui::panels::itemgrids::ItemGrid >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"itemSprite") ) { itemSprite=inValue.Cast<  ::ui::panels::itemgrids::itemtiles::ItemTileSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { graphicsData=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"rareBackground") ) { rareBackground=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"epicBackground") ) { epicBackground=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mythicBackground") ) { mythicBackground=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"restrictionBitmap") ) { restrictionBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"legendaryBackground") ) { legendaryBackground=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ItemTile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("restrictionBitmap",1b,05,e1,5e));
	outFields->push(HX_("itemSprite",78,a5,a3,b1));
	outFields->push(HX_("tileId",a9,b2,28,1e));
	outFields->push(HX_("ownerGrid",99,30,57,20));
	outFields->push(HX_("fill",83,ce,bb,43));
	outFields->push(HX_("path",a5,e5,51,4a));
	outFields->push(HX_("graphicsData",95,3c,58,41));
	outFields->push(HX_("cuts",b1,4c,c9,41));
	outFields->push(HX_("rareBackground",b0,67,ec,5a));
	outFields->push(HX_("epicBackground",53,d5,ee,3c));
	outFields->push(HX_("legendaryBackground",89,5f,fc,73));
	outFields->push(HX_("mythicBackground",48,d0,82,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ItemTile_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(ItemTile_obj,restrictionBitmap),HX_("restrictionBitmap",1b,05,e1,5e)},
	{::hx::fsObject /*  ::ui::panels::itemgrids::itemtiles::ItemTileSprite */ ,(int)offsetof(ItemTile_obj,itemSprite),HX_("itemSprite",78,a5,a3,b1)},
	{::hx::fsInt,(int)offsetof(ItemTile_obj,tileId),HX_("tileId",a9,b2,28,1e)},
	{::hx::fsObject /*  ::ui::panels::itemgrids::ItemGrid */ ,(int)offsetof(ItemTile_obj,ownerGrid),HX_("ownerGrid",99,30,57,20)},
	{::hx::fsObject /*  ::openfl::display::GraphicsSolidFill */ ,(int)offsetof(ItemTile_obj,fill),HX_("fill",83,ce,bb,43)},
	{::hx::fsObject /*  ::openfl::display::GraphicsPath */ ,(int)offsetof(ItemTile_obj,path),HX_("path",a5,e5,51,4a)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(ItemTile_obj,graphicsData),HX_("graphicsData",95,3c,58,41)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ItemTile_obj,cuts),HX_("cuts",b1,4c,c9,41)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(ItemTile_obj,rareBackground),HX_("rareBackground",b0,67,ec,5a)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(ItemTile_obj,epicBackground),HX_("epicBackground",53,d5,ee,3c)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(ItemTile_obj,legendaryBackground),HX_("legendaryBackground",89,5f,fc,73)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(ItemTile_obj,mythicBackground),HX_("mythicBackground",48,d0,82,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ItemTile_obj_sStaticStorageInfo = 0;
#endif

static ::String ItemTile_obj_sMemberFields[] = {
	HX_("restrictionBitmap",1b,05,e1,5e),
	HX_("itemSprite",78,a5,a3,b1),
	HX_("tileId",a9,b2,28,1e),
	HX_("ownerGrid",99,30,57,20),
	HX_("fill",83,ce,bb,43),
	HX_("path",a5,e5,51,4a),
	HX_("graphicsData",95,3c,58,41),
	HX_("cuts",b1,4c,c9,41),
	HX_("rareBackground",b0,67,ec,5a),
	HX_("epicBackground",53,d5,ee,3c),
	HX_("legendaryBackground",89,5f,fc,73),
	HX_("mythicBackground",48,d0,82,b1),
	HX_("drawBackground",12,71,27,09),
	HX_("setItem",d5,05,44,0b),
	HX_("setItemSprite",ba,e3,1b,53),
	HX_("updateUseability",ac,2b,af,2c),
	HX_("canHoldItem",22,86,2a,67),
	HX_("resetItemPosition",4b,7d,6d,b4),
	HX_("getItemId",04,39,60,85),
	::String(null()) };

::hx::Class ItemTile_obj::__mClass;

void ItemTile_obj::__register()
{
	ItemTile_obj _hx_dummy;
	ItemTile_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.itemgrids.itemtiles.ItemTile",16,33,a5,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ItemTile_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ItemTile_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ItemTile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ItemTile_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids
} // end namespace itemtiles
