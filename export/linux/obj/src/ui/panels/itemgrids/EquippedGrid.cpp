// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_EquippedGrid
#include <ui/panels/itemgrids/EquippedGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_EquipmentTile
#include <ui/panels/itemgrids/itemtiles/EquipmentTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_InteractiveItemTile
#include <ui/panels/itemgrids/itemtiles/InteractiveItemTile.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_itemtiles_ItemTile
#include <ui/panels/itemgrids/itemtiles/ItemTile.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4551b39a82a6816e_13_new,"ui.panels.itemgrids.EquippedGrid","new",0x701eea90,"ui.panels.itemgrids.EquippedGrid.new","ui/panels/itemgrids/EquippedGrid.hx",13,0xd2f1c9df)
HX_LOCAL_STACK_FRAME(_hx_pos_4551b39a82a6816e_25_setItems,"ui.panels.itemgrids.EquippedGrid","setItems",0xb9190cce,"ui.panels.itemgrids.EquippedGrid.setItems","ui/panels/itemgrids/EquippedGrid.hx",25,0xd2f1c9df)
namespace ui{
namespace panels{
namespace itemgrids{

void EquippedGrid_obj::__construct( ::objects::GameObject gridOwner,::Array< int > invTypes, ::objects::Player currentPlayer,::hx::Null< int >  __o_itemIndexOffset,::hx::Null< bool >  __o_disableBgDraw){
            		int itemIndexOffset = __o_itemIndexOffset.Default(0);
            		bool disableBgDraw = __o_disableBgDraw.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4551b39a82a6816e_13_new)
HXLINE(  14)		 ::ui::panels::itemgrids::itemtiles::EquipmentTile tile = null();
HXLINE(  15)		super::__construct(gridOwner,currentPlayer,itemIndexOffset,disableBgDraw);
HXLINE(  16)		this->tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE(  17)		{
HXLINE(  17)			{
HXLINE(  18)				tile =  ::ui::panels::itemgrids::itemtiles::EquipmentTile_obj::__alloc( HX_CTX ,0,::hx::ObjectPtr<OBJ_>(this),this->interactive);
HXLINE(  19)				this->addToGrid(tile,0,0);
HXLINE(  20)				tile->setType(invTypes->__get(0));
HXLINE(  21)				this->tiles[0] = tile;
            			}
HXLINE(  17)			{
HXLINE(  18)				tile =  ::ui::panels::itemgrids::itemtiles::EquipmentTile_obj::__alloc( HX_CTX ,1,::hx::ObjectPtr<OBJ_>(this),this->interactive);
HXLINE(  19)				this->addToGrid(tile,0,1);
HXLINE(  20)				tile->setType(invTypes->__get(1));
HXLINE(  21)				this->tiles[1] = tile;
            			}
HXLINE(  17)			{
HXLINE(  18)				tile =  ::ui::panels::itemgrids::itemtiles::EquipmentTile_obj::__alloc( HX_CTX ,2,::hx::ObjectPtr<OBJ_>(this),this->interactive);
HXLINE(  19)				this->addToGrid(tile,0,2);
HXLINE(  20)				tile->setType(invTypes->__get(2));
HXLINE(  21)				this->tiles[2] = tile;
            			}
HXLINE(  17)			{
HXLINE(  18)				tile =  ::ui::panels::itemgrids::itemtiles::EquipmentTile_obj::__alloc( HX_CTX ,3,::hx::ObjectPtr<OBJ_>(this),this->interactive);
HXLINE(  19)				this->addToGrid(tile,0,3);
HXLINE(  20)				tile->setType(invTypes->__get(3));
HXLINE(  21)				this->tiles[3] = tile;
            			}
            		}
            	}

Dynamic EquippedGrid_obj::__CreateEmpty() { return new EquippedGrid_obj; }

void *EquippedGrid_obj::_hx_vtable = 0;

Dynamic EquippedGrid_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EquippedGrid_obj > _hx_result = new EquippedGrid_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool EquippedGrid_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0bf625e0) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0bf625e0;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x33904dfc || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x6b353933;
			}
		} else {
			return inClassId==(int)0x7fae8619;
		}
	}
}

void EquippedGrid_obj::setItems(::Array< int > items,::hx::Null< int >  __o__tmp_itemIndexOffset){
            		int _tmp_itemIndexOffset = __o__tmp_itemIndexOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_4551b39a82a6816e_25_setItems)
HXLINE(  26)		int itemIndexOffset = _tmp_itemIndexOffset;
HXDLIN(  26)		int numItems = 0;
HXLINE(  28)		if (::hx::IsNotNull( items )) {
HXLINE(  29)			numItems = items->length;
HXLINE(  30)			{
HXLINE(  30)				int _g = 0;
HXDLIN(  30)				int _g1 = this->tiles->length;
HXDLIN(  30)				while((_g < _g1)){
HXLINE(  30)					_g = (_g + 1);
HXDLIN(  30)					int i = (_g - 1);
HXLINE(  31)					if (((i + itemIndexOffset) < numItems)) {
HXLINE(  32)						this->tiles->__get(i).StaticCast<  ::ui::panels::itemgrids::itemtiles::EquipmentTile >()->setItem(items->__get((i + itemIndexOffset)));
            					}
            					else {
HXLINE(  34)						this->tiles->__get(i).StaticCast<  ::ui::panels::itemgrids::itemtiles::EquipmentTile >()->setItem(-1);
            					}
HXLINE(  36)					this->tiles->__get(i).StaticCast<  ::ui::panels::itemgrids::itemtiles::EquipmentTile >()->updateDim(this->curPlayer);
            				}
            			}
            		}
            	}



::hx::ObjectPtr< EquippedGrid_obj > EquippedGrid_obj::__new( ::objects::GameObject gridOwner,::Array< int > invTypes, ::objects::Player currentPlayer,::hx::Null< int >  __o_itemIndexOffset,::hx::Null< bool >  __o_disableBgDraw) {
	::hx::ObjectPtr< EquippedGrid_obj > __this = new EquippedGrid_obj();
	__this->__construct(gridOwner,invTypes,currentPlayer,__o_itemIndexOffset,__o_disableBgDraw);
	return __this;
}

::hx::ObjectPtr< EquippedGrid_obj > EquippedGrid_obj::__alloc(::hx::Ctx *_hx_ctx, ::objects::GameObject gridOwner,::Array< int > invTypes, ::objects::Player currentPlayer,::hx::Null< int >  __o_itemIndexOffset,::hx::Null< bool >  __o_disableBgDraw) {
	EquippedGrid_obj *__this = (EquippedGrid_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EquippedGrid_obj), true, "ui.panels.itemgrids.EquippedGrid"));
	*(void **)__this = EquippedGrid_obj::_hx_vtable;
	__this->__construct(gridOwner,invTypes,currentPlayer,__o_itemIndexOffset,__o_disableBgDraw);
	return __this;
}

EquippedGrid_obj::EquippedGrid_obj()
{
}

void EquippedGrid_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EquippedGrid);
	HX_MARK_MEMBER_NAME(tiles,"tiles");
	 ::ui::panels::itemgrids::ItemGrid_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EquippedGrid_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tiles,"tiles");
	 ::ui::panels::itemgrids::ItemGrid_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EquippedGrid_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { return ::hx::Val( tiles ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setItems") ) { return ::hx::Val( setItems_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EquippedGrid_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EquippedGrid_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tiles",85,fd,34,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EquippedGrid_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EquippedGrid_obj,tiles),HX_("tiles",85,fd,34,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EquippedGrid_obj_sStaticStorageInfo = 0;
#endif

static ::String EquippedGrid_obj_sMemberFields[] = {
	HX_("tiles",85,fd,34,10),
	HX_("setItems",fe,14,41,d0),
	::String(null()) };

::hx::Class EquippedGrid_obj::__mClass;

void EquippedGrid_obj::__register()
{
	EquippedGrid_obj _hx_dummy;
	EquippedGrid_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.itemgrids.EquippedGrid",9e,a2,1a,d9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EquippedGrid_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EquippedGrid_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EquippedGrid_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EquippedGrid_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace panels
} // end namespace itemgrids
