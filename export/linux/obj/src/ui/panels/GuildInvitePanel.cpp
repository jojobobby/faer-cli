// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Timer
#include <openfl/utils/Timer.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_TextButton
#include <ui/TextButton.h>
#endif
#ifndef INCLUDED_ui_panels_GuildInvitePanel
#include <ui/panels/GuildInvitePanel.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aa1059cc5df33c7b_13_new,"ui.panels.GuildInvitePanel","new",0x9c19135f,"ui.panels.GuildInvitePanel.new","ui/panels/GuildInvitePanel.hx",13,0xce821ed1)
HX_LOCAL_STACK_FRAME(_hx_pos_aa1059cc5df33c7b_57_onTimer,"ui.panels.GuildInvitePanel","onTimer",0x4e2f8ca5,"ui.panels.GuildInvitePanel.onTimer","ui/panels/GuildInvitePanel.hx",57,0xce821ed1)
HX_LOCAL_STACK_FRAME(_hx_pos_aa1059cc5df33c7b_61_onRejectClick,"ui.panels.GuildInvitePanel","onRejectClick",0x772af749,"ui.panels.GuildInvitePanel.onRejectClick","ui/panels/GuildInvitePanel.hx",61,0xce821ed1)
HX_LOCAL_STACK_FRAME(_hx_pos_aa1059cc5df33c7b_64_onAcceptClick,"ui.panels.GuildInvitePanel","onAcceptClick",0xbfce1100,"ui.panels.GuildInvitePanel.onAcceptClick","ui/panels/GuildInvitePanel.hx",64,0xce821ed1)
namespace ui{
namespace panels{

void GuildInvitePanel_obj::__construct( ::game::GameSprite gs,::String name,::String guildName){
            	HX_GC_STACKFRAME(&_hx_pos_aa1059cc5df33c7b_13_new)
HXLINE(  17)		this->guildName = HX_("",00,00,00,00);
HXLINE(  14)		this->playerName = HX_("",00,00,00,00);
HXLINE(  24)		super::__construct(gs);
HXLINE(  25)		this->playerName = name;
HXLINE(  26)		this->guildName = guildName;
HXLINE(  27)		this->title =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,false,188,0,null());
HXLINE(  28)		this->title->setBold(true);
HXLINE(  29)		this->title->set_htmlText(((HX_("<p align=\"center\">",cf,04,3d,e9) + name) + HX_(" invited you to:</p>",5a,7a,fa,3a)));
HXLINE(  30)		this->title->set_autoSize(0);
HXLINE(  31)		 ::ui::SimpleText _hx_tmp = this->title;
HXDLIN(  31)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  32)		this->title->set_y(( (Float)(0) ));
HXLINE(  33)		this->addChild(this->title);
HXLINE(  34)		this->guildNameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,false,188,0,null());
HXLINE(  35)		this->guildNameText->setBold(true);
HXLINE(  36)		this->guildNameText->set_htmlText(((HX_("<p align=\"center\">",cf,04,3d,e9) + this->guildName) + HX_("</p>",01,d9,cc,27)));
HXLINE(  37)		this->guildNameText->set_autoSize(0);
HXLINE(  38)		 ::ui::SimpleText _hx_tmp1 = this->guildNameText;
HXDLIN(  38)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  39)		this->guildNameText->set_y(( (Float)(20) ));
HXLINE(  40)		this->addChild(this->guildNameText);
HXLINE(  41)		this->rejectButton =  ::ui::TextButton_obj::__alloc( HX_CTX ,16,HX_("Reject",7f,c5,19,37),null());
HXLINE(  42)		this->rejectButton->addEventListener(HX_("click",48,7c,5e,48),this->onRejectClick_dyn(),null(),null(),null());
HXLINE(  43)		 ::ui::TextButton _hx_tmp2 = this->rejectButton;
HXDLIN(  43)		_hx_tmp2->set_x((((Float)47.) - (this->rejectButton->get_width() / ( (Float)(2) ))));
HXLINE(  44)		 ::ui::TextButton _hx_tmp3 = this->rejectButton;
HXDLIN(  44)		_hx_tmp3->set_y(((( (Float)(84) ) - this->rejectButton->get_height()) - ( (Float)(4) )));
HXLINE(  45)		this->addChild(this->rejectButton);
HXLINE(  46)		this->acceptButton =  ::ui::TextButton_obj::__alloc( HX_CTX ,16,HX_("Accept",28,07,9b,3f),null());
HXLINE(  47)		this->acceptButton->addEventListener(HX_("click",48,7c,5e,48),this->onAcceptClick_dyn(),null(),null(),null());
HXLINE(  48)		 ::ui::TextButton _hx_tmp4 = this->acceptButton;
HXDLIN(  48)		_hx_tmp4->set_x((((Float)141.) - (this->acceptButton->get_width() / ( (Float)(2) ))));
HXLINE(  49)		 ::ui::TextButton _hx_tmp5 = this->acceptButton;
HXDLIN(  49)		_hx_tmp5->set_y(((( (Float)(84) ) - this->acceptButton->get_height()) - ( (Float)(4) )));
HXLINE(  50)		this->addChild(this->acceptButton);
HXLINE(  51)		this->timer =  ::openfl::utils::Timer_obj::__alloc( HX_CTX ,( (Float)(20000) ),1);
HXLINE(  52)		this->timer->start();
HXLINE(  53)		this->timer->addEventListener(HX_("timer",c5,bf,35,10),this->onTimer_dyn(),null(),null(),null());
            	}

Dynamic GuildInvitePanel_obj::__CreateEmpty() { return new GuildInvitePanel_obj; }

void *GuildInvitePanel_obj::_hx_vtable = 0;

Dynamic GuildInvitePanel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GuildInvitePanel_obj > _hx_result = new GuildInvitePanel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool GuildInvitePanel_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1903514f || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7fae8619;
		}
	}
}

void GuildInvitePanel_obj::onTimer( ::openfl::events::TimerEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_aa1059cc5df33c7b_57_onTimer)
HXDLIN(  57)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(GuildInvitePanel_obj,onTimer,(void))

void GuildInvitePanel_obj::onRejectClick( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_aa1059cc5df33c7b_61_onRejectClick)
HXDLIN(  61)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(GuildInvitePanel_obj,onRejectClick,(void))

void GuildInvitePanel_obj::onAcceptClick( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_aa1059cc5df33c7b_64_onAcceptClick)
HXLINE(  65)		::network::NetworkHandler_obj::joinGuild(this->guildName);
HXLINE(  66)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(GuildInvitePanel_obj,onAcceptClick,(void))


::hx::ObjectPtr< GuildInvitePanel_obj > GuildInvitePanel_obj::__new( ::game::GameSprite gs,::String name,::String guildName) {
	::hx::ObjectPtr< GuildInvitePanel_obj > __this = new GuildInvitePanel_obj();
	__this->__construct(gs,name,guildName);
	return __this;
}

::hx::ObjectPtr< GuildInvitePanel_obj > GuildInvitePanel_obj::__alloc(::hx::Ctx *_hx_ctx, ::game::GameSprite gs,::String name,::String guildName) {
	GuildInvitePanel_obj *__this = (GuildInvitePanel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GuildInvitePanel_obj), true, "ui.panels.GuildInvitePanel"));
	*(void **)__this = GuildInvitePanel_obj::_hx_vtable;
	__this->__construct(gs,name,guildName);
	return __this;
}

GuildInvitePanel_obj::GuildInvitePanel_obj()
{
}

void GuildInvitePanel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GuildInvitePanel);
	HX_MARK_MEMBER_NAME(playerName,"playerName");
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(guildName,"guildName");
	HX_MARK_MEMBER_NAME(guildNameText,"guildNameText");
	HX_MARK_MEMBER_NAME(rejectButton,"rejectButton");
	HX_MARK_MEMBER_NAME(acceptButton,"acceptButton");
	HX_MARK_MEMBER_NAME(timer,"timer");
	 ::ui::panels::Panel_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GuildInvitePanel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(playerName,"playerName");
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(guildName,"guildName");
	HX_VISIT_MEMBER_NAME(guildNameText,"guildNameText");
	HX_VISIT_MEMBER_NAME(rejectButton,"rejectButton");
	HX_VISIT_MEMBER_NAME(acceptButton,"acceptButton");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	 ::ui::panels::Panel_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GuildInvitePanel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		if (HX_FIELD_EQ(inName,"timer") ) { return ::hx::Val( timer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onTimer") ) { return ::hx::Val( onTimer_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"guildName") ) { return ::hx::Val( guildName ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playerName") ) { return ::hx::Val( playerName ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rejectButton") ) { return ::hx::Val( rejectButton ); }
		if (HX_FIELD_EQ(inName,"acceptButton") ) { return ::hx::Val( acceptButton ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"guildNameText") ) { return ::hx::Val( guildNameText ); }
		if (HX_FIELD_EQ(inName,"onRejectClick") ) { return ::hx::Val( onRejectClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"onAcceptClick") ) { return ::hx::Val( onAcceptClick_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GuildInvitePanel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::openfl::utils::Timer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"guildName") ) { guildName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playerName") ) { playerName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rejectButton") ) { rejectButton=inValue.Cast<  ::ui::TextButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acceptButton") ) { acceptButton=inValue.Cast<  ::ui::TextButton >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"guildNameText") ) { guildNameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GuildInvitePanel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("playerName",4c,4e,c1,ab));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("guildName",9e,b5,f2,07));
	outFields->push(HX_("guildNameText",6b,d5,13,a1));
	outFields->push(HX_("rejectButton",b1,f8,c3,fb));
	outFields->push(HX_("acceptButton",1a,5f,d7,41));
	outFields->push(HX_("timer",c5,bf,35,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GuildInvitePanel_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(GuildInvitePanel_obj,playerName),HX_("playerName",4c,4e,c1,ab)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(GuildInvitePanel_obj,title),HX_("title",98,15,3b,10)},
	{::hx::fsString,(int)offsetof(GuildInvitePanel_obj,guildName),HX_("guildName",9e,b5,f2,07)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(GuildInvitePanel_obj,guildNameText),HX_("guildNameText",6b,d5,13,a1)},
	{::hx::fsObject /*  ::ui::TextButton */ ,(int)offsetof(GuildInvitePanel_obj,rejectButton),HX_("rejectButton",b1,f8,c3,fb)},
	{::hx::fsObject /*  ::ui::TextButton */ ,(int)offsetof(GuildInvitePanel_obj,acceptButton),HX_("acceptButton",1a,5f,d7,41)},
	{::hx::fsObject /*  ::openfl::utils::Timer */ ,(int)offsetof(GuildInvitePanel_obj,timer),HX_("timer",c5,bf,35,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GuildInvitePanel_obj_sStaticStorageInfo = 0;
#endif

static ::String GuildInvitePanel_obj_sMemberFields[] = {
	HX_("playerName",4c,4e,c1,ab),
	HX_("title",98,15,3b,10),
	HX_("guildName",9e,b5,f2,07),
	HX_("guildNameText",6b,d5,13,a1),
	HX_("rejectButton",b1,f8,c3,fb),
	HX_("acceptButton",1a,5f,d7,41),
	HX_("timer",c5,bf,35,10),
	HX_("onTimer",26,5e,73,a6),
	HX_("onRejectClick",8a,5f,f2,dd),
	HX_("onAcceptClick",41,79,95,26),
	::String(null()) };

::hx::Class GuildInvitePanel_obj::__mClass;

void GuildInvitePanel_obj::__register()
{
	GuildInvitePanel_obj _hx_dummy;
	GuildInvitePanel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.panels.GuildInvitePanel",ed,77,5e,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GuildInvitePanel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GuildInvitePanel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GuildInvitePanel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GuildInvitePanel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace panels
