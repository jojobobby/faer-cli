// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_tooltip_TextToolTip
#include <ui/tooltip/TextToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4ca011de878684a3_10_new,"ui.tooltip.TextToolTip","new",0xd110aa03,"ui.tooltip.TextToolTip.new","ui/tooltip/TextToolTip.hx",10,0xb5b02f4f)
namespace ui{
namespace tooltip{

void TextToolTip_obj::__construct(int background,int outline,::String title,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_4ca011de878684a3_10_new)
HXLINE(  11)		super::__construct(background,((Float)0.6),outline,1,null());
HXLINE(  13)		this->tipText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,11776947,null(),null(),null(),null());
HXLINE(  14)		 ::ui::SimpleText _hx_tmp = this->tipText;
HXDLIN(  14)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  16)		if (::hx::IsNotNull( text )) {
HXLINE(  17)			this->tipText->set_text(text);
HXLINE(  18)			this->tipText->updateMetrics();
HXLINE(  19)			this->addChild(this->tipText);
            		}
HXLINE(  22)		this->titleText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,null(),null(),null(),null());
HXLINE(  23)		this->titleText->setBold(true);
HXLINE(  24)		 ::ui::SimpleText _hx_tmp1 = this->titleText;
HXDLIN(  24)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  26)		if (::hx::IsNotNull( title )) {
HXLINE(  27)			this->titleText->set_text(title);
HXLINE(  28)			this->titleText->updateMetrics();
HXLINE(  29)			this->addChild(this->titleText);
HXLINE(  31)			 ::ui::SimpleText _hx_tmp2 = this->tipText;
HXDLIN(  31)			_hx_tmp2->set_y((this->titleText->get_height() + 8));
            		}
            	}

Dynamic TextToolTip_obj::__CreateEmpty() { return new TextToolTip_obj; }

void *TextToolTip_obj::_hx_vtable = 0;

Dynamic TextToolTip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextToolTip_obj > _hx_result = new TextToolTip_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TextToolTip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0637743c) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0637743c;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6aa0b4c7) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6aa0b4c7;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}


::hx::ObjectPtr< TextToolTip_obj > TextToolTip_obj::__new(int background,int outline,::String title,::String text) {
	::hx::ObjectPtr< TextToolTip_obj > __this = new TextToolTip_obj();
	__this->__construct(background,outline,title,text);
	return __this;
}

::hx::ObjectPtr< TextToolTip_obj > TextToolTip_obj::__alloc(::hx::Ctx *_hx_ctx,int background,int outline,::String title,::String text) {
	TextToolTip_obj *__this = (TextToolTip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextToolTip_obj), true, "ui.tooltip.TextToolTip"));
	*(void **)__this = TextToolTip_obj::_hx_vtable;
	__this->__construct(background,outline,title,text);
	return __this;
}

TextToolTip_obj::TextToolTip_obj()
{
}

void TextToolTip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextToolTip);
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(tipText,"tipText");
	 ::ui::tooltip::ToolTip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextToolTip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(tipText,"tipText");
	 ::ui::tooltip::ToolTip_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextToolTip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tipText") ) { return ::hx::Val( tipText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TextToolTip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tipText") ) { tipText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextToolTip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("tipText",a8,a3,e6,87));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextToolTip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(TextToolTip_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(TextToolTip_obj,tipText),HX_("tipText",a8,a3,e6,87)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TextToolTip_obj_sStaticStorageInfo = 0;
#endif

static ::String TextToolTip_obj_sMemberFields[] = {
	HX_("titleText",65,ba,a4,70),
	HX_("tipText",a8,a3,e6,87),
	::String(null()) };

::hx::Class TextToolTip_obj::__mClass;

void TextToolTip_obj::__register()
{
	TextToolTip_obj _hx_dummy;
	TextToolTip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.tooltip.TextToolTip",91,ec,54,ea);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextToolTip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextToolTip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextToolTip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextToolTip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tooltip
