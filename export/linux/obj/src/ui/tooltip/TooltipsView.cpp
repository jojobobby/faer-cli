// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_TooltipsView
#include <ui/tooltip/TooltipsView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bb139e68975cfe29_10_new,"ui.tooltip.TooltipsView","new",0x8b49654c,"ui.tooltip.TooltipsView.new","ui/tooltip/TooltipsView.hx",10,0x88b6d0e2)
HX_LOCAL_STACK_FRAME(_hx_pos_bb139e68975cfe29_13_show,"ui.tooltip.TooltipsView","show",0x583f8e91,"ui.tooltip.TooltipsView.show","ui/tooltip/TooltipsView.hx",13,0x88b6d0e2)
HX_LOCAL_STACK_FRAME(_hx_pos_bb139e68975cfe29_20_hide,"ui.tooltip.TooltipsView","hide",0x50faee56,"ui.tooltip.TooltipsView.hide","ui/tooltip/TooltipsView.hx",20,0x88b6d0e2)
namespace ui{
namespace tooltip{

void TooltipsView_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bb139e68975cfe29_10_new)
HXDLIN(  10)		super::__construct();
            	}

Dynamic TooltipsView_obj::__CreateEmpty() { return new TooltipsView_obj; }

void *TooltipsView_obj::_hx_vtable = 0;

Dynamic TooltipsView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TooltipsView_obj > _hx_result = new TooltipsView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TooltipsView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x2ccd7664 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void TooltipsView_obj::show( ::ui::tooltip::ToolTip toolTip){
            	HX_STACKFRAME(&_hx_pos_bb139e68975cfe29_13_show)
HXLINE(  14)		this->hide();
HXLINE(  15)		this->toolTip = toolTip;
HXLINE(  16)		if (::hx::IsNotNull( toolTip )) {
HXLINE(  17)			this->addChild(toolTip);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TooltipsView_obj,show,(void))

void TooltipsView_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_bb139e68975cfe29_20_hide)
HXLINE(  21)		{
HXLINE(  21)			 ::ui::tooltip::ToolTip tmp = this->toolTip;
HXDLIN(  21)			 ::openfl::display::DisplayObjectContainer tmp1;
HXDLIN(  21)			if (::hx::IsNotNull( tmp )) {
HXLINE(  21)				tmp1 = tmp->parent;
            			}
            			else {
HXLINE(  21)				tmp1 = null();
            			}
HXDLIN(  21)			if (::hx::IsNotNull( tmp1 )) {
HXLINE(  21)				tmp1->removeChild(this->toolTip);
            			}
            		}
HXLINE(  22)		this->toolTip = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TooltipsView_obj,hide,(void))


::hx::ObjectPtr< TooltipsView_obj > TooltipsView_obj::__new() {
	::hx::ObjectPtr< TooltipsView_obj > __this = new TooltipsView_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TooltipsView_obj > TooltipsView_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TooltipsView_obj *__this = (TooltipsView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TooltipsView_obj), true, "ui.tooltip.TooltipsView"));
	*(void **)__this = TooltipsView_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TooltipsView_obj::TooltipsView_obj()
{
}

void TooltipsView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TooltipsView);
	HX_MARK_MEMBER_NAME(toolTip,"toolTip");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TooltipsView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(toolTip,"toolTip");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TooltipsView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return ::hx::Val( hide_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toolTip") ) { return ::hx::Val( toolTip ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TooltipsView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"toolTip") ) { toolTip=inValue.Cast<  ::ui::tooltip::ToolTip >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TooltipsView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("toolTip",e3,64,74,6a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TooltipsView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::tooltip::ToolTip */ ,(int)offsetof(TooltipsView_obj,toolTip),HX_("toolTip",e3,64,74,6a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TooltipsView_obj_sStaticStorageInfo = 0;
#endif

static ::String TooltipsView_obj_sMemberFields[] = {
	HX_("toolTip",e3,64,74,6a),
	HX_("show",fd,d4,52,4c),
	HX_("hide",c2,34,0e,45),
	::String(null()) };

::hx::Class TooltipsView_obj::__mClass;

void TooltipsView_obj::__register()
{
	TooltipsView_obj _hx_dummy;
	TooltipsView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.tooltip.TooltipsView",5a,0f,ca,6a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TooltipsView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TooltipsView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TooltipsView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TooltipsView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tooltip
