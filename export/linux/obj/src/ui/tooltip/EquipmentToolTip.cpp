// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_LineBreakDesign
#include <ui/LineBreakDesign.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_Slot
#include <ui/Slot.h>
#endif
#ifndef INCLUDED_ui_tooltip_Effect
#include <ui/tooltip/Effect.h>
#endif
#ifndef INCLUDED_ui_tooltip_EquipmentToolTip
#include <ui/tooltip/EquipmentToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_Restriction
#include <ui/tooltip/Restriction.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_TooltipHelper
#include <ui/tooltip/TooltipHelper.h>
#endif
#ifndef INCLUDED_util_BitmapUtil
#include <util/BitmapUtil.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif
#ifndef INCLUDED_util_StringUtils
#include <util/StringUtils.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9288db9c7cb7db9d_17_new,"ui.tooltip.EquipmentToolTip","new",0x6a6f7d6c,"ui.tooltip.EquipmentToolTip.new","ui/tooltip/EquipmentToolTip.hx",17,0x1ae393c2)
HX_LOCAL_STACK_FRAME(_hx_pos_9288db9c7cb7db9d_327_compareIncrementStat,"ui.tooltip.EquipmentToolTip","compareIncrementStat",0x09143332,"ui.tooltip.EquipmentToolTip.compareIncrementStat","ui/tooltip/EquipmentToolTip.hx",327,0x1ae393c2)
HX_LOCAL_STACK_FRAME(_hx_pos_9288db9c7cb7db9d_333_buildEffectsHTML,"ui.tooltip.EquipmentToolTip","buildEffectsHTML",0x82d33613,"ui.tooltip.EquipmentToolTip.buildEffectsHTML","ui/tooltip/EquipmentToolTip.hx",333,0x1ae393c2)
HX_LOCAL_STACK_FRAME(_hx_pos_9288db9c7cb7db9d_38_buildRestrictionsHTML,"ui.tooltip.EquipmentToolTip","buildRestrictionsHTML",0x83a6cb2c,"ui.tooltip.EquipmentToolTip.buildRestrictionsHTML","ui/tooltip/EquipmentToolTip.hx",38,0x1ae393c2)
HX_LOCAL_STACK_FRAME(_hx_pos_9288db9c7cb7db9d_58_statToName,"ui.tooltip.EquipmentToolTip","statToName",0xd2bd18ce,"ui.tooltip.EquipmentToolTip.statToName","ui/tooltip/EquipmentToolTip.hx",58,0x1ae393c2)
namespace ui{
namespace tooltip{

void EquipmentToolTip_obj::__construct(int objectType, ::objects::Player player,int invType,::String inventoryOwnerType,::hx::Null< int >  __o_inventorySlotID){
            		int inventorySlotID = __o_inventorySlotID.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_9288db9c7cb7db9d_17_new)
HXLINE(  36)		this->rarityColor = 0;
HXLINE(  35)		this->yOffset = 0;
HXLINE(  32)		this->playerCanUse = false;
HXLINE(  31)		this->objectXML = null();
HXLINE(  30)		this->curItemXML = null();
HXLINE(  29)		this->objectType = 0;
HXLINE(  28)		this->isEquippable = false;
HXLINE(  97)		this->player = player;
HXLINE(  98)		bool _hx_tmp;
HXDLIN(  98)		if (::hx::IsNotNull( player )) {
HXLINE(  98)			_hx_tmp = ::objects::ObjectLibrary_obj::isUsableByPlayer(objectType,player);
            		}
            		else {
HXLINE(  98)			_hx_tmp = false;
            		}
HXDLIN(  98)		this->playerCanUse = _hx_tmp;
HXLINE(  99)		this->objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objectType)) );
HXLINE( 100)		 ::Xml xml = this->objectXML;
HXDLIN( 100)		::String _hx_tmp1;
HXDLIN( 100)		if (( (bool)(xml->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 100)			 ::Xml _this = ( ( ::Xml)(xml->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 100)			bool _hx_tmp2;
HXDLIN( 100)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 100)				_hx_tmp2 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 100)				_hx_tmp2 = false;
            			}
HXDLIN( 100)			if (_hx_tmp2) {
HXLINE( 100)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 100)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 100)			bool _hx_tmp3;
HXDLIN( 100)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 100)				_hx_tmp3 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 100)				_hx_tmp3 = true;
            			}
HXDLIN( 100)			if (_hx_tmp3) {
HXLINE( 100)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN( 100)			_hx_tmp1 = _this1->nodeValue;
            		}
            		else {
HXLINE( 100)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN( 100)		this->rarityColor = ::util::ColorUtils_obj::getRarityColor(_hx_tmp1,10066329);
HXLINE( 101)		super::__construct(4342338,((Float)0.6),this->rarityColor,1,true);
HXLINE( 102)		this->objectType = objectType;
HXLINE( 103)		int equipSlotIndex;
HXDLIN( 103)		if (::hx::IsNotNull( this->player )) {
HXLINE( 103)			equipSlotIndex = ::objects::ObjectLibrary_obj::getMatchingSlotIndex(this->objectType,this->player);
            		}
            		else {
HXLINE( 103)			equipSlotIndex = -1;
            		}
HXLINE( 104)		this->isEquippable = (equipSlotIndex != -1);
HXLINE( 105)		this->effects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 107)		if (::hx::IsNull( this->player )) {
HXLINE( 108)			this->curItemXML = this->objectXML;
            		}
            		else {
HXLINE( 109)			bool _hx_tmp4;
HXDLIN( 109)			if (this->isEquippable) {
HXLINE( 109)				_hx_tmp4 = (this->player->equipment->__get(equipSlotIndex) != -1);
            			}
            			else {
HXLINE( 109)				_hx_tmp4 = false;
            			}
HXDLIN( 109)			if (_hx_tmp4) {
HXLINE( 110)				this->curItemXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(this->player->equipment->__get(equipSlotIndex))) );
            			}
            		}
HXLINE( 112)		 ::Xml xml1 = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(this->objectType)) );
HXDLIN( 112)		int scaleValue;
HXDLIN( 112)		if (( (bool)(xml1->elementsNamed(HX_("ScaleValue",a7,30,9d,49))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 112)			 ::Xml _this2 = ( ( ::Xml)(xml1->elementsNamed(HX_("ScaleValue",a7,30,9d,49))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 112)			bool scaleValue1;
HXDLIN( 112)			if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 112)				scaleValue1 = (_this2->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 112)				scaleValue1 = false;
            			}
HXDLIN( 112)			if (scaleValue1) {
HXLINE( 112)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            			}
HXDLIN( 112)			 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 112)			bool scaleValue2;
HXDLIN( 112)			if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE( 112)				scaleValue2 = (_this3->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 112)				scaleValue2 = true;
            			}
HXDLIN( 112)			if (scaleValue2) {
HXLINE( 112)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            			}
HXDLIN( 112)			scaleValue = ( (int)(::Std_obj::parseInt(_this3->nodeValue)) );
            		}
            		else {
HXLINE( 112)			scaleValue = 5;
            		}
HXLINE( 113)		 ::openfl::display::BitmapData texture = ::objects::ObjectLibrary_obj::getRedrawnTextureFromType(this->objectType,60,true,true,scaleValue);
HXLINE( 114)		texture = ::util::BitmapUtil_obj::cropToBitmapData(texture,4,4,(texture->width - 8),(texture->height - 8));
HXLINE( 115)		this->icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,texture,null(),null());
HXLINE( 116)		this->icon->set_y(( (Float)(6) ));
HXLINE( 117)		this->addChild(this->icon);
HXLINE( 119)		int _hx_tmp5 = this->rarityColor;
HXDLIN( 119)		this->titleText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,_hx_tmp5,false,::Std_obj::_hx_int((((( (Float)(230) ) - this->icon->get_width()) - ( (Float)(4) )) - ( (Float)(30) ))),0,null());
HXLINE( 120)		this->titleText->setBold(true);
HXLINE( 121)		this->titleText->set_wordWrap(true);
HXLINE( 122)		 ::ui::SimpleText _hx_tmp6 = this->titleText;
HXDLIN( 122)		_hx_tmp6->set_text(::objects::ObjectLibrary_obj::typeToDisplayId->get_string(this->objectType));
HXLINE( 123)		this->titleText->updateMetrics();
HXLINE( 124)		 ::ui::SimpleText _hx_tmp7 = this->titleText;
HXDLIN( 124)		_hx_tmp7->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE( 125)		 ::ui::SimpleText _hx_tmp8 = this->titleText;
HXDLIN( 125)		_hx_tmp8->set_x((this->icon->get_width() + 4));
HXLINE( 126)		this->addChild(this->titleText);
HXLINE( 128)		int _hx_tmp9 = this->rarityColor;
HXDLIN( 128)		this->tierText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,13,_hx_tmp9,false,::Std_obj::_hx_int((((( (Float)(230) ) - this->icon->get_width()) - ( (Float)(4) )) - ( (Float)(30) ))),0,null());
HXLINE( 129)		 ::ui::SimpleText _hx_tmp10 = this->tierText;
HXDLIN( 129)		_hx_tmp10->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE( 130)		 ::ui::SimpleText _hx_tmp11 = this->tierText;
HXDLIN( 130)		_hx_tmp11->set_x((this->icon->get_width() + 4));
HXLINE( 131)		 ::ui::SimpleText _hx_tmp12 = this->tierText;
HXDLIN( 131)		Float _hx_tmp13 = this->titleText->get_y();
HXDLIN( 131)		_hx_tmp12->set_y((_hx_tmp13 + this->titleText->actualHeight));
HXLINE( 132)		if (( (bool)(this->objectXML->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 133)			 ::ui::SimpleText _hx_tmp14 = this->tierText;
HXDLIN( 133)			 ::Xml xml2 = this->objectXML;
HXDLIN( 133)			::String _hx_tmp15;
HXDLIN( 133)			if (( (bool)(xml2->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 133)				 ::Xml _this4 = ( ( ::Xml)(xml2->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 133)				bool _hx_tmp16;
HXDLIN( 133)				if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE( 133)					_hx_tmp16 = (_this4->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 133)					_hx_tmp16 = false;
            				}
HXDLIN( 133)				if (_hx_tmp16) {
HXLINE( 133)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            				}
HXDLIN( 133)				 ::Xml _this5 = _this4->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 133)				bool _hx_tmp17;
HXDLIN( 133)				if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE( 133)					_hx_tmp17 = (_this5->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 133)					_hx_tmp17 = true;
            				}
HXDLIN( 133)				if (_hx_tmp17) {
HXLINE( 133)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            				}
HXDLIN( 133)				_hx_tmp15 = _this5->nodeValue;
            			}
            			else {
HXLINE( 133)				_hx_tmp15 = HX_("",00,00,00,00);
            			}
HXDLIN( 133)			_hx_tmp14->set_text(_hx_tmp15);
            		}
            		else {
HXLINE( 135)			this->tierText->set_text(HX_("Common",4b,e9,c2,fb));
            		}
HXLINE( 137)		 ::ui::SimpleText fh = this->tierText;
HXDLIN( 137)		::String _hx_tmp18 = fh->get_text();
HXDLIN( 137)		 ::Xml xml3 = this->objectXML;
HXDLIN( 137)		int _hx_tmp19;
HXDLIN( 137)		if (( (bool)(xml3->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 137)			 ::Xml _this6 = ( ( ::Xml)(xml3->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 137)			bool _hx_tmp20;
HXDLIN( 137)			if ((_this6->nodeType != ::Xml_obj::Document)) {
HXLINE( 137)				_hx_tmp20 = (_this6->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 137)				_hx_tmp20 = false;
            			}
HXDLIN( 137)			if (_hx_tmp20) {
HXLINE( 137)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this6->nodeType)));
            			}
HXDLIN( 137)			 ::Xml _this7 = _this6->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 137)			bool _hx_tmp21;
HXDLIN( 137)			if ((_this7->nodeType != ::Xml_obj::Document)) {
HXLINE( 137)				_hx_tmp21 = (_this7->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 137)				_hx_tmp21 = true;
            			}
HXDLIN( 137)			if (_hx_tmp21) {
HXLINE( 137)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this7->nodeType)));
            			}
HXDLIN( 137)			_hx_tmp19 = ( (int)(::Std_obj::parseInt(_this7->nodeValue)) );
            		}
            		else {
HXLINE( 137)			_hx_tmp19 = 0;
            		}
HXDLIN( 137)		fh->set_text((_hx_tmp18 + (HX_(" ",20,00,00,00) + ::ui::Slot_obj::slotTypeToName(_hx_tmp19))));
HXLINE( 138)		bool _hx_tmp22;
HXDLIN( 138)		if ((this->tierText->get_text().indexOf(HX_("Tier",42,f1,d5,37),null()) == -1)) {
HXLINE( 138)			_hx_tmp22 = ( (bool)(this->objectXML->elementsNamed(HX_("TierReq",3c,55,95,13))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 138)			_hx_tmp22 = false;
            		}
HXDLIN( 138)		if (_hx_tmp22) {
HXLINE( 139)			 ::ui::SimpleText fh1 = this->tierText;
HXDLIN( 139)			::String _hx_tmp23 = fh1->get_text();
HXDLIN( 139)			 ::Xml xml4 = this->objectXML;
HXDLIN( 139)			int _hx_tmp24;
HXDLIN( 139)			if (( (bool)(xml4->elementsNamed(HX_("TierReq",3c,55,95,13))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 139)				 ::Xml _this8 = ( ( ::Xml)(xml4->elementsNamed(HX_("TierReq",3c,55,95,13))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 139)				bool _hx_tmp25;
HXDLIN( 139)				if ((_this8->nodeType != ::Xml_obj::Document)) {
HXLINE( 139)					_hx_tmp25 = (_this8->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 139)					_hx_tmp25 = false;
            				}
HXDLIN( 139)				if (_hx_tmp25) {
HXLINE( 139)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this8->nodeType)));
            				}
HXDLIN( 139)				 ::Xml _this9 = _this8->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 139)				bool _hx_tmp26;
HXDLIN( 139)				if ((_this9->nodeType != ::Xml_obj::Document)) {
HXLINE( 139)					_hx_tmp26 = (_this9->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 139)					_hx_tmp26 = true;
            				}
HXDLIN( 139)				if (_hx_tmp26) {
HXLINE( 139)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this9->nodeType)));
            				}
HXDLIN( 139)				_hx_tmp24 = ( (int)(::Std_obj::parseInt(_this9->nodeValue)) );
            			}
            			else {
HXLINE( 139)				_hx_tmp24 = 0;
            			}
HXDLIN( 139)			fh1->set_text((_hx_tmp23 + ((HX_(" (Tier ",96,6f,52,d4) + ::util::StringUtils_obj::toRoman(_hx_tmp24)) + HX_(")",29,00,00,00))));
            		}
HXLINE( 140)		this->tierText->updateMetrics();
HXLINE( 141)		this->addChild(this->tierText);
HXLINE( 143)		if (( (bool)(this->objectXML->elementsNamed(HX_("NumProjectiles",e4,ad,06,4a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 144)			::Array< ::Dynamic> _hx_tmp27 = this->effects;
HXDLIN( 144)			 ::Xml xml5 = this->objectXML;
HXDLIN( 144)			::String _hx_tmp28;
HXDLIN( 144)			if (( (bool)(xml5->elementsNamed(HX_("NumProjectiles",e4,ad,06,4a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 144)				 ::Xml _this10 = ( ( ::Xml)(xml5->elementsNamed(HX_("NumProjectiles",e4,ad,06,4a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 144)				bool _hx_tmp29;
HXDLIN( 144)				if ((_this10->nodeType != ::Xml_obj::Document)) {
HXLINE( 144)					_hx_tmp29 = (_this10->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 144)					_hx_tmp29 = false;
            				}
HXDLIN( 144)				if (_hx_tmp29) {
HXLINE( 144)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this10->nodeType)));
            				}
HXDLIN( 144)				 ::Xml _this11 = _this10->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 144)				bool _hx_tmp30;
HXDLIN( 144)				if ((_this11->nodeType != ::Xml_obj::Document)) {
HXLINE( 144)					_hx_tmp30 = (_this11->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 144)					_hx_tmp30 = true;
            				}
HXDLIN( 144)				if (_hx_tmp30) {
HXLINE( 144)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this11->nodeType)));
            				}
HXDLIN( 144)				_hx_tmp28 = _this11->nodeValue;
            			}
            			else {
HXLINE( 144)				_hx_tmp28 = HX_("",00,00,00,00);
            			}
HXDLIN( 144)			_hx_tmp27->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Shots",19,f6,54,0f),_hx_tmp28));
            		}
HXLINE( 146)		if (( (bool)(this->objectXML->elementsNamed(HX_("RateOfFire",8d,6b,cc,57))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 147)			 ::Xml xml6 = this->objectXML;
HXDLIN( 147)			float fireRate;
HXDLIN( 147)			if (( (bool)(xml6->elementsNamed(HX_("RateOfFire",8d,6b,cc,57))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 147)				 ::Xml _this12 = ( ( ::Xml)(xml6->elementsNamed(HX_("RateOfFire",8d,6b,cc,57))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 147)				bool fireRate1;
HXDLIN( 147)				if ((_this12->nodeType != ::Xml_obj::Document)) {
HXLINE( 147)					fireRate1 = (_this12->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 147)					fireRate1 = false;
            				}
HXDLIN( 147)				if (fireRate1) {
HXLINE( 147)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this12->nodeType)));
            				}
HXDLIN( 147)				 ::Xml _this13 = _this12->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 147)				bool fireRate2;
HXDLIN( 147)				if ((_this13->nodeType != ::Xml_obj::Document)) {
HXLINE( 147)					fireRate2 = (_this13->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 147)					fireRate2 = true;
            				}
HXDLIN( 147)				if (fireRate2) {
HXLINE( 147)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this13->nodeType)));
            				}
HXDLIN( 147)				fireRate = ( (float)(::Std_obj::parseFloat(_this13->nodeValue)) );
            			}
            			else {
HXLINE( 147)				fireRate = ( (float)(1) );
            			}
HXLINE( 148)			if ((fireRate != 1)) {
HXLINE( 149)				::Array< ::Dynamic> _hx_tmp31 = this->effects;
HXDLIN( 149)				_hx_tmp31->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Fire Rate",8a,e7,9d,ad),(::Std_obj::_hx_int(( (Float)((fireRate * ( (float)(100) ))) )) + HX_("%",25,00,00,00))));
            			}
            		}
HXLINE( 152)		if (( (bool)(this->objectXML->elementsNamed(HX_("Projectile",09,8a,3c,bb))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 153)			 ::Xml projXML = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Projectile",09,8a,3c,bb))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 154)			int range;
HXDLIN( 154)			if (( (bool)(projXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 154)				 ::Xml _this14 = ( ( ::Xml)(projXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 154)				bool range1;
HXDLIN( 154)				if ((_this14->nodeType != ::Xml_obj::Document)) {
HXLINE( 154)					range1 = (_this14->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 154)					range1 = false;
            				}
HXDLIN( 154)				if (range1) {
HXLINE( 154)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this14->nodeType)));
            				}
HXDLIN( 154)				 ::Xml _this15 = _this14->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 154)				bool range2;
HXDLIN( 154)				if ((_this15->nodeType != ::Xml_obj::Document)) {
HXLINE( 154)					range2 = (_this15->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 154)					range2 = true;
            				}
HXDLIN( 154)				if (range2) {
HXLINE( 154)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this15->nodeType)));
            				}
HXDLIN( 154)				range = ( (int)(::Std_obj::parseInt(_this15->nodeValue)) );
            			}
            			else {
HXLINE( 154)				range = 0;
            			}
HXDLIN( 154)			int range3;
HXDLIN( 154)			if (( (bool)(projXML->elementsNamed(HX_("LifetimeMS",cf,e6,02,ec))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 154)				 ::Xml _this16 = ( ( ::Xml)(projXML->elementsNamed(HX_("LifetimeMS",cf,e6,02,ec))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 154)				bool range4;
HXDLIN( 154)				if ((_this16->nodeType != ::Xml_obj::Document)) {
HXLINE( 154)					range4 = (_this16->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 154)					range4 = false;
            				}
HXDLIN( 154)				if (range4) {
HXLINE( 154)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this16->nodeType)));
            				}
HXDLIN( 154)				 ::Xml _this17 = _this16->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 154)				bool range5;
HXDLIN( 154)				if ((_this17->nodeType != ::Xml_obj::Document)) {
HXLINE( 154)					range5 = (_this17->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 154)					range5 = true;
            				}
HXDLIN( 154)				if (range5) {
HXLINE( 154)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this17->nodeType)));
            				}
HXDLIN( 154)				range3 = ( (int)(::Std_obj::parseInt(_this17->nodeValue)) );
            			}
            			else {
HXLINE( 154)				range3 = 0;
            			}
HXLINE( 155)			if (( (bool)(projXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 156)				::Array< ::Dynamic> _hx_tmp32 = this->effects;
HXDLIN( 156)				::String _hx_tmp33;
HXDLIN( 156)				if (( (bool)(projXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 156)					 ::Xml _this18 = ( ( ::Xml)(projXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 156)					bool _hx_tmp34;
HXDLIN( 156)					if ((_this18->nodeType != ::Xml_obj::Document)) {
HXLINE( 156)						_hx_tmp34 = (_this18->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 156)						_hx_tmp34 = false;
            					}
HXDLIN( 156)					if (_hx_tmp34) {
HXLINE( 156)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this18->nodeType)));
            					}
HXDLIN( 156)					 ::Xml _this19 = _this18->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 156)					bool _hx_tmp35;
HXDLIN( 156)					if ((_this19->nodeType != ::Xml_obj::Document)) {
HXLINE( 156)						_hx_tmp35 = (_this19->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 156)						_hx_tmp35 = true;
            					}
HXDLIN( 156)					if (_hx_tmp35) {
HXLINE( 156)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this19->nodeType)));
            					}
HXDLIN( 156)					_hx_tmp33 = _this19->nodeValue;
            				}
            				else {
HXLINE( 156)					_hx_tmp33 = HX_("",00,00,00,00);
            				}
HXDLIN( 156)				_hx_tmp32->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Physical Damage",58,7f,f4,f1),_hx_tmp33));
            			}
HXLINE( 157)			if (( (bool)(projXML->elementsNamed(HX_("MagicDamage",5c,ad,35,5b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 158)				::Array< ::Dynamic> _hx_tmp36 = this->effects;
HXDLIN( 158)				::String _hx_tmp37;
HXDLIN( 158)				if (( (bool)(projXML->elementsNamed(HX_("MagicDamage",5c,ad,35,5b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 158)					 ::Xml _this20 = ( ( ::Xml)(projXML->elementsNamed(HX_("MagicDamage",5c,ad,35,5b))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 158)					bool _hx_tmp38;
HXDLIN( 158)					if ((_this20->nodeType != ::Xml_obj::Document)) {
HXLINE( 158)						_hx_tmp38 = (_this20->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 158)						_hx_tmp38 = false;
            					}
HXDLIN( 158)					if (_hx_tmp38) {
HXLINE( 158)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this20->nodeType)));
            					}
HXDLIN( 158)					 ::Xml _this21 = _this20->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 158)					bool _hx_tmp39;
HXDLIN( 158)					if ((_this21->nodeType != ::Xml_obj::Document)) {
HXLINE( 158)						_hx_tmp39 = (_this21->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 158)						_hx_tmp39 = true;
            					}
HXDLIN( 158)					if (_hx_tmp39) {
HXLINE( 158)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this21->nodeType)));
            					}
HXDLIN( 158)					_hx_tmp37 = _this21->nodeValue;
            				}
            				else {
HXLINE( 158)					_hx_tmp37 = HX_("",00,00,00,00);
            				}
HXDLIN( 158)				_hx_tmp36->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Magic Damage",42,e7,7e,21),_hx_tmp37));
            			}
HXLINE( 159)			if (( (bool)(projXML->elementsNamed(HX_("TrueDamage",7d,1e,6f,e6))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 160)				::Array< ::Dynamic> _hx_tmp40 = this->effects;
HXDLIN( 160)				::String _hx_tmp41;
HXDLIN( 160)				if (( (bool)(projXML->elementsNamed(HX_("TrueDamage",7d,1e,6f,e6))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 160)					 ::Xml _this22 = ( ( ::Xml)(projXML->elementsNamed(HX_("TrueDamage",7d,1e,6f,e6))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 160)					bool _hx_tmp42;
HXDLIN( 160)					if ((_this22->nodeType != ::Xml_obj::Document)) {
HXLINE( 160)						_hx_tmp42 = (_this22->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 160)						_hx_tmp42 = false;
            					}
HXDLIN( 160)					if (_hx_tmp42) {
HXLINE( 160)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this22->nodeType)));
            					}
HXDLIN( 160)					 ::Xml _this23 = _this22->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 160)					bool _hx_tmp43;
HXDLIN( 160)					if ((_this23->nodeType != ::Xml_obj::Document)) {
HXLINE( 160)						_hx_tmp43 = (_this23->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 160)						_hx_tmp43 = true;
            					}
HXDLIN( 160)					if (_hx_tmp43) {
HXLINE( 160)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this23->nodeType)));
            					}
HXDLIN( 160)					_hx_tmp41 = _this23->nodeValue;
            				}
            				else {
HXLINE( 160)					_hx_tmp41 = HX_("",00,00,00,00);
            				}
HXDLIN( 160)				_hx_tmp40->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("True Damage",01,73,88,68),_hx_tmp41));
            			}
HXLINE( 161)			::Array< ::Dynamic> _hx_tmp44 = this->effects;
HXDLIN( 161)			_hx_tmp44->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Range",9d,15,4d,77),::ui::tooltip::TooltipHelper_obj::getFormattedString((( (Float)((range * range3)) ) / ( (Float)(10000) )))));
HXLINE( 162)			if (( (bool)(this->objectXML->elementsNamed(HX_("MultiHit",7a,41,20,74))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 163)				this->effects->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),HX_("Piercing",25,1e,8b,35)));
            			}
HXLINE( 165)			{
HXLINE( 165)				 ::Dynamic condEffectXML = projXML->elementsNamed(HX_("ConditionEffect",6c,66,cb,d0));
HXDLIN( 165)				while(( (bool)(condEffectXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 165)					 ::Xml condEffectXML1 = ( ( ::Xml)(condEffectXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 166)					::Array< ::Dynamic> _hx_tmp45 = this->effects;
HXDLIN( 166)					::String tmp;
HXDLIN( 166)					if (::hx::IsNotNull( condEffectXML1 )) {
HXLINE( 166)						bool tmp1;
HXDLIN( 166)						if ((condEffectXML1->nodeType != ::Xml_obj::Document)) {
HXLINE( 166)							tmp1 = (condEffectXML1->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE( 166)							tmp1 = false;
            						}
HXDLIN( 166)						if (tmp1) {
HXLINE( 166)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(condEffectXML1->nodeType)));
            						}
HXDLIN( 166)						 ::Xml _this24 = condEffectXML1->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 166)						bool tmp2;
HXDLIN( 166)						if ((_this24->nodeType != ::Xml_obj::Document)) {
HXLINE( 166)							tmp2 = (_this24->nodeType == ::Xml_obj::Element);
            						}
            						else {
HXLINE( 166)							tmp2 = true;
            						}
HXDLIN( 166)						if (tmp2) {
HXLINE( 166)							HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this24->nodeType)));
            						}
HXDLIN( 166)						tmp = _this24->nodeValue;
            					}
            					else {
HXLINE( 166)						tmp = null();
            					}
HXDLIN( 166)					::String _hx_tmp46;
HXDLIN( 166)					if (::hx::IsNotNull( tmp )) {
HXLINE( 166)						_hx_tmp46 = tmp;
            					}
            					else {
HXLINE( 166)						_hx_tmp46 = HX_("",00,00,00,00);
            					}
HXDLIN( 166)					::String tmp3 = condEffectXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 166)					::String _hx_tmp47;
HXDLIN( 166)					if (::hx::IsNotNull( tmp3 )) {
HXLINE( 166)						_hx_tmp47 = tmp3;
            					}
            					else {
HXLINE( 166)						_hx_tmp47 = HX_("",00,00,00,00);
            					}
HXDLIN( 166)					_hx_tmp45->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Shot Effect",f7,5c,cc,0f),(((_hx_tmp46 + HX_(" for ",17,f1,92,b0)) + _hx_tmp47) + HX_(" secs",e2,13,23,b9))));
            				}
            			}
            		}
HXLINE( 169)		if (( (bool)(this->objectXML->elementsNamed(HX_("Scepter",a6,13,a3,82))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 170)			 ::Xml scepXml = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Scepter",a6,13,a3,82))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 171)			 ::Xml drainXml = ( ( ::Xml)(scepXml->elementsNamed(HX_("Drain",98,bb,e3,72))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 172)			::Array< ::Dynamic> _hx_tmp48 = this->effects;
HXDLIN( 172)			float _hx_tmp49;
HXDLIN( 172)			if (( (bool)(scepXml->elementsNamed(HX_("TickMS",23,cc,ce,4c))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 172)				 ::Xml _this25 = ( ( ::Xml)(scepXml->elementsNamed(HX_("TickMS",23,cc,ce,4c))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 172)				bool _hx_tmp50;
HXDLIN( 172)				if ((_this25->nodeType != ::Xml_obj::Document)) {
HXLINE( 172)					_hx_tmp50 = (_this25->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 172)					_hx_tmp50 = false;
            				}
HXDLIN( 172)				if (_hx_tmp50) {
HXLINE( 172)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this25->nodeType)));
            				}
HXDLIN( 172)				 ::Xml _this26 = _this25->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 172)				bool _hx_tmp51;
HXDLIN( 172)				if ((_this26->nodeType != ::Xml_obj::Document)) {
HXLINE( 172)					_hx_tmp51 = (_this26->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 172)					_hx_tmp51 = true;
            				}
HXDLIN( 172)				if (_hx_tmp51) {
HXLINE( 172)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this26->nodeType)));
            				}
HXDLIN( 172)				_hx_tmp49 = ( (float)(::Std_obj::parseFloat(_this26->nodeValue)) );
            			}
            			else {
HXLINE( 172)				_hx_tmp49 = ( (float)(0) );
            			}
HXDLIN( 172)			_hx_tmp48->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Tick Rate",83,da,33,2d),(::ui::tooltip::TooltipHelper_obj::getFormattedString((( (Float)(1000) ) / ( (Float)(_hx_tmp49) ))) + HX_("/s",64,29,00,00))));
HXLINE( 173)			::Array< ::Dynamic> _hx_tmp52 = this->effects;
HXDLIN( 173)			::String _hx_tmp53;
HXDLIN( 173)			if (( (bool)(scepXml->elementsNamed(HX_("Drain",98,bb,e3,72))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 173)				 ::Xml _this27 = ( ( ::Xml)(scepXml->elementsNamed(HX_("Drain",98,bb,e3,72))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 173)				bool _hx_tmp54;
HXDLIN( 173)				if ((_this27->nodeType != ::Xml_obj::Document)) {
HXLINE( 173)					_hx_tmp54 = (_this27->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 173)					_hx_tmp54 = false;
            				}
HXDLIN( 173)				if (_hx_tmp54) {
HXLINE( 173)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this27->nodeType)));
            				}
HXDLIN( 173)				 ::Xml _this28 = _this27->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 173)				bool _hx_tmp55;
HXDLIN( 173)				if ((_this28->nodeType != ::Xml_obj::Document)) {
HXLINE( 173)					_hx_tmp55 = (_this28->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 173)					_hx_tmp55 = true;
            				}
HXDLIN( 173)				if (_hx_tmp55) {
HXLINE( 173)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this28->nodeType)));
            				}
HXDLIN( 173)				_hx_tmp53 = _this28->nodeValue;
            			}
            			else {
HXLINE( 173)				_hx_tmp53 = HX_("",00,00,00,00);
            			}
HXDLIN( 173)			int _hx_tmp56;
HXDLIN( 173)			if (::hx::IsNotNull( drainXml->get(HX_("stat",d4,e3,5b,4c)) )) {
HXLINE( 173)				_hx_tmp56 = ( (int)(::Std_obj::parseInt(drainXml->get(HX_("stat",d4,e3,5b,4c)))) );
            			}
            			else {
HXLINE( 173)				_hx_tmp56 = 0;
            			}
HXDLIN( 173)			_hx_tmp52->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Drain",98,bb,e3,72),(((_hx_tmp53 + HX_(" ",20,00,00,00)) + ::ui::tooltip::EquipmentToolTip_obj::statToName(_hx_tmp56)) + HX_("/s",64,29,00,00))));
HXLINE( 174)			::Array< ::Dynamic> _hx_tmp57 = this->effects;
HXDLIN( 174)			::String _hx_tmp58;
HXDLIN( 174)			if (( (bool)(scepXml->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 174)				 ::Xml _this29 = ( ( ::Xml)(scepXml->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 174)				bool _hx_tmp59;
HXDLIN( 174)				if ((_this29->nodeType != ::Xml_obj::Document)) {
HXLINE( 174)					_hx_tmp59 = (_this29->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 174)					_hx_tmp59 = false;
            				}
HXDLIN( 174)				if (_hx_tmp59) {
HXLINE( 174)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this29->nodeType)));
            				}
HXDLIN( 174)				 ::Xml _this30 = _this29->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 174)				bool _hx_tmp60;
HXDLIN( 174)				if ((_this30->nodeType != ::Xml_obj::Document)) {
HXLINE( 174)					_hx_tmp60 = (_this30->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 174)					_hx_tmp60 = true;
            				}
HXDLIN( 174)				if (_hx_tmp60) {
HXLINE( 174)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this30->nodeType)));
            				}
HXDLIN( 174)				_hx_tmp58 = _this30->nodeValue;
            			}
            			else {
HXLINE( 174)				_hx_tmp58 = HX_("",00,00,00,00);
            			}
HXDLIN( 174)			_hx_tmp57->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Damage",8f,04,79,52),_hx_tmp58));
HXLINE( 175)			::Array< ::Dynamic> _hx_tmp61 = this->effects;
HXDLIN( 175)			float _hx_tmp62;
HXDLIN( 175)			if (( (bool)(scepXml->elementsNamed(HX_("Range",9d,15,4d,77))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 175)				 ::Xml _this31 = ( ( ::Xml)(scepXml->elementsNamed(HX_("Range",9d,15,4d,77))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 175)				bool _hx_tmp63;
HXDLIN( 175)				if ((_this31->nodeType != ::Xml_obj::Document)) {
HXLINE( 175)					_hx_tmp63 = (_this31->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 175)					_hx_tmp63 = false;
            				}
HXDLIN( 175)				if (_hx_tmp63) {
HXLINE( 175)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this31->nodeType)));
            				}
HXDLIN( 175)				 ::Xml _this32 = _this31->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 175)				bool _hx_tmp64;
HXDLIN( 175)				if ((_this32->nodeType != ::Xml_obj::Document)) {
HXLINE( 175)					_hx_tmp64 = (_this32->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 175)					_hx_tmp64 = true;
            				}
HXDLIN( 175)				if (_hx_tmp64) {
HXLINE( 175)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this32->nodeType)));
            				}
HXDLIN( 175)				_hx_tmp62 = ( (float)(::Std_obj::parseFloat(_this32->nodeValue)) );
            			}
            			else {
HXLINE( 175)				_hx_tmp62 = ( (float)(0) );
            			}
HXDLIN( 175)			_hx_tmp61->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Range",9d,15,4d,77),::ui::tooltip::TooltipHelper_obj::getFormattedString(( (Float)(_hx_tmp62) ))));
            		}
HXLINE( 178)		{
HXLINE( 178)			 ::Dynamic activateXML = this->objectXML->elementsNamed(HX_("Activate",d3,d7,5d,bf));
HXDLIN( 178)			while(( (bool)(activateXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 178)				 ::Xml activateXML1 = ( ( ::Xml)(activateXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 179)				{
HXLINE( 179)					::String _g;
HXDLIN( 179)					::String tmp4;
HXDLIN( 179)					if (::hx::IsNotNull( activateXML1 )) {
HXLINE( 179)						bool tmp5;
HXDLIN( 179)						if ((activateXML1->nodeType != ::Xml_obj::Document)) {
HXLINE( 179)							tmp5 = (activateXML1->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE( 179)							tmp5 = false;
            						}
HXDLIN( 179)						if (tmp5) {
HXLINE( 179)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(activateXML1->nodeType)));
            						}
HXDLIN( 179)						 ::Xml _this33 = activateXML1->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 179)						bool tmp6;
HXDLIN( 179)						if ((_this33->nodeType != ::Xml_obj::Document)) {
HXLINE( 179)							tmp6 = (_this33->nodeType == ::Xml_obj::Element);
            						}
            						else {
HXLINE( 179)							tmp6 = true;
            						}
HXDLIN( 179)						if (tmp6) {
HXLINE( 179)							HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this33->nodeType)));
            						}
HXDLIN( 179)						tmp4 = _this33->nodeValue;
            					}
            					else {
HXLINE( 179)						tmp4 = null();
            					}
HXDLIN( 179)					if (::hx::IsNotNull( tmp4 )) {
HXLINE( 179)						_g = tmp4;
            					}
            					else {
HXLINE( 179)						_g = HX_("",00,00,00,00);
            					}
HXDLIN( 179)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("Bloodstone",8b,52,7f,e5)) ){
HXLINE( 260)						::Array< ::Dynamic> _hx_tmp65 = this->effects;
HXLINE( 262)						::String tmp7 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 262)						::String _hx_tmp66;
HXDLIN( 262)						if (::hx::IsNotNull( tmp7 )) {
HXLINE( 262)							_hx_tmp66 = tmp7;
            						}
            						else {
HXLINE( 262)							_hx_tmp66 = HX_("",00,00,00,00);
            						}
HXLINE( 265)						::String tmp8 = activateXML1->get(HX_("totalDamage",53,83,1a,e4));
HXDLIN( 265)						::String _hx_tmp67;
HXDLIN( 265)						if (::hx::IsNotNull( tmp8 )) {
HXLINE( 265)							_hx_tmp67 = tmp8;
            						}
            						else {
HXLINE( 265)							_hx_tmp67 = HX_("",00,00,00,00);
            						}
HXLINE( 267)						::String tmp9 = activateXML1->get(HX_("radius",52,d0,f6,b0));
HXDLIN( 267)						::String _hx_tmp68;
HXDLIN( 267)						if (::hx::IsNotNull( tmp9 )) {
HXLINE( 267)							_hx_tmp68 = tmp9;
            						}
            						else {
HXLINE( 267)							_hx_tmp68 = HX_("",00,00,00,00);
            						}
HXLINE( 260)						_hx_tmp65->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),(((((((HX_("Steal ",d1,c2,26,3d) + _hx_tmp66) + HX_(" HP per target hit,\n",7d,3a,55,26)) + HX_("up to ",00,6a,21,5a)) + _hx_tmp67) + HX_(" HP within ",5d,d1,fa,a1)) + _hx_tmp68) + HX_(" tiles",65,89,a0,db))));
HXDLIN( 260)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("Clock",ae,79,90,db)) ){
HXLINE( 252)						::Array< ::Dynamic> _hx_tmp69 = this->effects;
HXDLIN( 252)						::String tmp10 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 252)						::String _hx_tmp70;
HXDLIN( 252)						if (::hx::IsNotNull( tmp10 )) {
HXLINE( 252)							_hx_tmp70 = tmp10;
            						}
            						else {
HXLINE( 252)							_hx_tmp70 = HX_("",00,00,00,00);
            						}
HXDLIN( 252)						_hx_tmp69->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((HX_("Rewinds time by ",fe,57,f6,d0) + _hx_tmp70) + HX_(" seconds",5f,fa,db,80))));
HXDLIN( 252)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("ConditionEffectAura",2f,16,0d,cc)) ){
HXLINE( 181)						::Array< ::Dynamic> _hx_tmp71 = this->effects;
HXDLIN( 181)						::String tmp11 = activateXML1->get(HX_("range",bd,a5,1f,e4));
HXDLIN( 181)						::String _hx_tmp72;
HXDLIN( 181)						if (::hx::IsNotNull( tmp11 )) {
HXLINE( 181)							_hx_tmp72 = tmp11;
            						}
            						else {
HXLINE( 181)							_hx_tmp72 = HX_("",00,00,00,00);
            						}
HXDLIN( 181)						_hx_tmp71->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Effect on Group",ad,a4,ae,6d),((HX_("Within ",35,c6,cd,2c) + _hx_tmp72) + HX_(" tiles",65,89,a0,db))));
HXLINE( 182)						::Array< ::Dynamic> _hx_tmp73 = this->effects;
HXDLIN( 182)						::String tmp12 = activateXML1->get(HX_("effect",91,5a,a3,60));
HXDLIN( 182)						::String _hx_tmp74;
HXDLIN( 182)						if (::hx::IsNotNull( tmp12 )) {
HXLINE( 182)							_hx_tmp74 = tmp12;
            						}
            						else {
HXLINE( 182)							_hx_tmp74 = HX_("",00,00,00,00);
            						}
HXDLIN( 182)						::String tmp13 = activateXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 182)						::String _hx_tmp75;
HXDLIN( 182)						if (::hx::IsNotNull( tmp13 )) {
HXLINE( 182)							_hx_tmp75 = tmp13;
            						}
            						else {
HXLINE( 182)							_hx_tmp75 = HX_("",00,00,00,00);
            						}
HXDLIN( 182)						_hx_tmp73->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((((HX_("  ",00,1c,00,00) + _hx_tmp74) + HX_(" for ",17,f1,92,b0)) + _hx_tmp75) + HX_(" secs",e2,13,23,b9))));
HXLINE( 180)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("ConditionEffectSelf",18,c4,e6,d7)) ){
HXLINE( 184)						this->effects->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Effect on Self",de,21,fa,0c),HX_("",00,00,00,00)));
HXLINE( 185)						::Array< ::Dynamic> _hx_tmp76 = this->effects;
HXDLIN( 185)						::String tmp14 = activateXML1->get(HX_("effect",91,5a,a3,60));
HXDLIN( 185)						::String _hx_tmp77;
HXDLIN( 185)						if (::hx::IsNotNull( tmp14 )) {
HXLINE( 185)							_hx_tmp77 = tmp14;
            						}
            						else {
HXLINE( 185)							_hx_tmp77 = HX_("",00,00,00,00);
            						}
HXDLIN( 185)						::String tmp15 = activateXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 185)						::String _hx_tmp78;
HXDLIN( 185)						if (::hx::IsNotNull( tmp15 )) {
HXLINE( 185)							_hx_tmp78 = tmp15;
            						}
            						else {
HXLINE( 185)							_hx_tmp78 = HX_("",00,00,00,00);
            						}
HXDLIN( 185)						_hx_tmp76->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((((HX_("  ",00,1c,00,00) + _hx_tmp77) + HX_(" for ",17,f1,92,b0)) + _hx_tmp78) + HX_(" secs",e2,13,23,b9))));
HXLINE( 183)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("DamageMultiplier",f0,d8,6d,f1)) ){
HXLINE( 254)						::Array< ::Dynamic> _hx_tmp79 = this->effects;
HXLINE( 255)						::String tmp16 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 255)						::String _hx_tmp80;
HXDLIN( 255)						if (::hx::IsNotNull( tmp16 )) {
HXLINE( 255)							_hx_tmp80 = tmp16;
            						}
            						else {
HXLINE( 255)							_hx_tmp80 = HX_("",00,00,00,00);
            						}
HXDLIN( 255)						::String tmp17 = activateXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 255)						::String _hx_tmp81;
HXDLIN( 255)						if (::hx::IsNotNull( tmp17 )) {
HXLINE( 255)							_hx_tmp81 = tmp17;
            						}
            						else {
HXLINE( 255)							_hx_tmp81 = HX_("",00,00,00,00);
            						}
HXLINE( 254)						_hx_tmp79->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((((HX_("Deal ",d4,f7,4b,6a) + _hx_tmp80) + HX_("x damage for ",a0,f6,e9,67)) + _hx_tmp81) + HX_(" seconds",5f,fa,db,80))));
HXDLIN( 254)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("Heal",48,55,e4,2f)) ){
HXLINE( 187)						::Array< ::Dynamic> _hx_tmp82 = this->effects;
HXDLIN( 187)						::String tmp18 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 187)						::String _hx_tmp83;
HXDLIN( 187)						if (::hx::IsNotNull( tmp18 )) {
HXLINE( 187)							_hx_tmp83 = tmp18;
            						}
            						else {
HXLINE( 187)							_hx_tmp83 = HX_("",00,00,00,00);
            						}
HXDLIN( 187)						_hx_tmp82->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((HX_("+",2b,00,00,00) + _hx_tmp83) + HX_(" HP",28,87,18,00))));
HXDLIN( 187)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("HealNova",14,df,ef,a9)) ){
HXLINE( 189)						::Array< ::Dynamic> _hx_tmp84 = this->effects;
HXDLIN( 189)						::String tmp19 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 189)						::String _hx_tmp85;
HXDLIN( 189)						if (::hx::IsNotNull( tmp19 )) {
HXLINE( 189)							_hx_tmp85 = tmp19;
            						}
            						else {
HXLINE( 189)							_hx_tmp85 = HX_("",00,00,00,00);
            						}
HXDLIN( 189)						::String tmp20 = activateXML1->get(HX_("range",bd,a5,1f,e4));
HXDLIN( 189)						::String _hx_tmp86;
HXDLIN( 189)						if (::hx::IsNotNull( tmp20 )) {
HXLINE( 189)							_hx_tmp86 = tmp20;
            						}
            						else {
HXLINE( 189)							_hx_tmp86 = HX_("",00,00,00,00);
            						}
HXDLIN( 189)						_hx_tmp84->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Party Heal",a2,6e,d4,52),(((_hx_tmp85 + HX_(" HP at ",d5,0e,e0,21)) + _hx_tmp86) + HX_(" sqrs",ff,3b,2c,b9))));
HXDLIN( 189)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("HitMultiplier",94,c7,39,f2)) ){
HXLINE( 257)						::Array< ::Dynamic> _hx_tmp87 = this->effects;
HXLINE( 258)						::String tmp21 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 258)						::String _hx_tmp88;
HXDLIN( 258)						if (::hx::IsNotNull( tmp21 )) {
HXLINE( 258)							_hx_tmp88 = tmp21;
            						}
            						else {
HXLINE( 258)							_hx_tmp88 = HX_("",00,00,00,00);
            						}
HXDLIN( 258)						::String tmp22 = activateXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 258)						::String _hx_tmp89;
HXDLIN( 258)						if (::hx::IsNotNull( tmp22 )) {
HXLINE( 258)							_hx_tmp89 = tmp22;
            						}
            						else {
HXLINE( 258)							_hx_tmp89 = HX_("",00,00,00,00);
            						}
HXLINE( 257)						_hx_tmp87->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((((HX_("Take ",d9,f5,17,9e) + _hx_tmp88) + HX_("x damage for ",a0,f6,e9,67)) + _hx_tmp89) + HX_(" seconds",5f,fa,db,80))));
HXDLIN( 257)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("IncrementStat",83,a9,f4,93)) ){
HXLINE( 197)						int stat;
HXDLIN( 197)						if (::hx::IsNotNull( activateXML1->get(HX_("stat",d4,e3,5b,4c)) )) {
HXLINE( 197)							stat = ( (int)(::Std_obj::parseInt(activateXML1->get(HX_("stat",d4,e3,5b,4c)))) );
            						}
            						else {
HXLINE( 197)							stat = 0;
            						}
HXLINE( 198)						int amt;
HXDLIN( 198)						if (::hx::IsNotNull( activateXML1->get(HX_("amount",d8,11,03,d5)) )) {
HXLINE( 198)							amt = ( (int)(::Std_obj::parseInt(activateXML1->get(HX_("amount",d8,11,03,d5)))) );
            						}
            						else {
HXLINE( 198)							amt = 0;
            						}
HXLINE( 199)						::String val = HX_("",00,00,00,00);
HXLINE( 200)						bool _hx_tmp90;
HXDLIN( 200)						if ((stat != 1)) {
HXLINE( 200)							_hx_tmp90 = (stat != 4);
            						}
            						else {
HXLINE( 200)							_hx_tmp90 = false;
            						}
HXDLIN( 200)						if (_hx_tmp90) {
HXLINE( 201)							val = (HX_("Permanently increases ",74,c0,d2,07) + ::ui::tooltip::EquipmentToolTip_obj::statToName(stat));
            						}
            						else {
HXLINE( 203)							::String val1 = ((HX_("+",2b,00,00,00) + ::Std_obj::string(amt)) + HX_(" ",20,00,00,00));
HXDLIN( 203)							val = (val1 + ::ui::tooltip::EquipmentToolTip_obj::statToName(stat));
            						}
HXLINE( 205)						this->effects->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),val));
HXLINE( 196)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("Magic",0d,e1,46,96)) ){
HXLINE( 191)						::Array< ::Dynamic> _hx_tmp91 = this->effects;
HXDLIN( 191)						::String tmp23 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 191)						::String _hx_tmp92;
HXDLIN( 191)						if (::hx::IsNotNull( tmp23 )) {
HXLINE( 191)							_hx_tmp92 = tmp23;
            						}
            						else {
HXLINE( 191)							_hx_tmp92 = HX_("",00,00,00,00);
            						}
HXDLIN( 191)						_hx_tmp91->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((HX_("+",2b,00,00,00) + _hx_tmp92) + HX_(" MP",83,8b,18,00))));
HXDLIN( 191)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("MagicNova",59,31,e4,09)) ){
HXLINE( 193)						::Array< ::Dynamic> _hx_tmp93 = this->effects;
HXDLIN( 193)						::String tmp24 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 193)						::String _hx_tmp94;
HXDLIN( 193)						if (::hx::IsNotNull( tmp24 )) {
HXLINE( 193)							_hx_tmp94 = tmp24;
            						}
            						else {
HXLINE( 193)							_hx_tmp94 = HX_("",00,00,00,00);
            						}
HXDLIN( 193)						::String tmp25 = activateXML1->get(HX_("range",bd,a5,1f,e4));
HXDLIN( 193)						::String _hx_tmp95;
HXDLIN( 193)						if (::hx::IsNotNull( tmp25 )) {
HXLINE( 193)							_hx_tmp95 = tmp25;
            						}
            						else {
HXLINE( 193)							_hx_tmp95 = HX_("",00,00,00,00);
            						}
HXDLIN( 193)						_hx_tmp93->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Fill Party Magic",76,8d,0e,5e),(((_hx_tmp94 + HX_(" MP at ",b0,dc,a8,21)) + _hx_tmp95) + HX_(" sqrs",ff,3b,2c,b9))));
HXDLIN( 193)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("OpenPortal",36,ea,72,41)) ){
HXLINE( 249)						 ::haxe::ds::IntMap portalXML = ::objects::ObjectLibrary_obj::xmlLibrary;
HXDLIN( 249)						int portalXML1;
HXDLIN( 249)						if (::hx::IsNotNull( activateXML1->get(HX_("objType",51,76,23,77)) )) {
HXLINE( 249)							portalXML1 = ( (int)(::Std_obj::parseInt(activateXML1->get(HX_("objType",51,76,23,77)))) );
            						}
            						else {
HXLINE( 249)							portalXML1 = 0;
            						}
HXDLIN( 249)						 ::Xml portalXML2 = ( ( ::Xml)(portalXML->get(portalXML1)) );
HXLINE( 250)						::Array< ::Dynamic> _hx_tmp96 = this->effects;
HXDLIN( 250)						::String defaultValue;
HXDLIN( 250)						::String tmp26 = portalXML2->get(HX_("id",db,5b,00,00));
HXDLIN( 250)						if (::hx::IsNotNull( tmp26 )) {
HXLINE( 250)							defaultValue = tmp26;
            						}
            						else {
HXLINE( 250)							defaultValue = HX_("",00,00,00,00);
            						}
HXDLIN( 250)						if (::hx::IsNull( defaultValue )) {
HXLINE( 250)							defaultValue = HX_("",00,00,00,00);
            						}
HXDLIN( 250)						::String _hx_tmp97;
HXDLIN( 250)						if (( (bool)(portalXML2->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 250)							 ::Xml _this34 = ( ( ::Xml)(portalXML2->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 250)							bool _hx_tmp98;
HXDLIN( 250)							if ((_this34->nodeType != ::Xml_obj::Document)) {
HXLINE( 250)								_hx_tmp98 = (_this34->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE( 250)								_hx_tmp98 = false;
            							}
HXDLIN( 250)							if (_hx_tmp98) {
HXLINE( 250)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this34->nodeType)));
            							}
HXDLIN( 250)							 ::Xml _this35 = _this34->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 250)							bool _hx_tmp99;
HXDLIN( 250)							if ((_this35->nodeType != ::Xml_obj::Document)) {
HXLINE( 250)								_hx_tmp99 = (_this35->nodeType == ::Xml_obj::Element);
            							}
            							else {
HXLINE( 250)								_hx_tmp99 = true;
            							}
HXDLIN( 250)							if (_hx_tmp99) {
HXLINE( 250)								HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this35->nodeType)));
            							}
HXDLIN( 250)							_hx_tmp97 = _this35->nodeValue;
            						}
            						else {
HXLINE( 250)							_hx_tmp97 = defaultValue;
            						}
HXDLIN( 250)						_hx_tmp96->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Opens Portal",c3,34,90,42),((HX_("'",27,00,00,00) + _hx_tmp97) + HX_("'",27,00,00,00))));
HXLINE( 248)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("StatBoostAura",d2,2f,ec,85)) ){
HXLINE( 216)						::Array< ::Dynamic> _hx_tmp100 = this->effects;
HXLINE( 218)						::String tmp27 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 218)						::String _hx_tmp101;
HXDLIN( 218)						if (::hx::IsNotNull( tmp27 )) {
HXLINE( 218)							_hx_tmp101 = tmp27;
            						}
            						else {
HXLINE( 218)							_hx_tmp101 = HX_("",00,00,00,00);
            						}
HXLINE( 220)						int _hx_tmp102;
HXDLIN( 220)						if (::hx::IsNotNull( activateXML1->get(HX_("stat",d4,e3,5b,4c)) )) {
HXLINE( 220)							_hx_tmp102 = ( (int)(::Std_obj::parseInt(activateXML1->get(HX_("stat",d4,e3,5b,4c)))) );
            						}
            						else {
HXLINE( 220)							_hx_tmp102 = 0;
            						}
HXLINE( 217)						::String _hx_tmp103 = ((((HX_("+",2b,00,00,00) + _hx_tmp101) + HX_(" ",20,00,00,00)) + ::ui::tooltip::EquipmentToolTip_obj::statToName(_hx_tmp102)) + HX_(" for ",17,f1,92,b0));
HXLINE( 222)						::String tmp28 = activateXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 222)						::String _hx_tmp104;
HXDLIN( 222)						if (::hx::IsNotNull( tmp28 )) {
HXLINE( 222)							_hx_tmp104 = tmp28;
            						}
            						else {
HXLINE( 222)							_hx_tmp104 = HX_("",00,00,00,00);
            						}
HXLINE( 216)						_hx_tmp100->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((_hx_tmp103 + _hx_tmp104) + HX_(" seconds",5f,fa,db,80))));
HXDLIN( 216)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("StatBoostSelf",bb,dd,c5,91)) ){
HXLINE( 207)						::Array< ::Dynamic> _hx_tmp105 = this->effects;
HXLINE( 209)						::String tmp29 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 209)						::String _hx_tmp106;
HXDLIN( 209)						if (::hx::IsNotNull( tmp29 )) {
HXLINE( 209)							_hx_tmp106 = tmp29;
            						}
            						else {
HXLINE( 209)							_hx_tmp106 = HX_("",00,00,00,00);
            						}
HXLINE( 211)						int _hx_tmp107;
HXDLIN( 211)						if (::hx::IsNotNull( activateXML1->get(HX_("stat",d4,e3,5b,4c)) )) {
HXLINE( 211)							_hx_tmp107 = ( (int)(::Std_obj::parseInt(activateXML1->get(HX_("stat",d4,e3,5b,4c)))) );
            						}
            						else {
HXLINE( 211)							_hx_tmp107 = 0;
            						}
HXLINE( 208)						::String _hx_tmp108 = ((((HX_("+",2b,00,00,00) + _hx_tmp106) + HX_(" ",20,00,00,00)) + ::ui::tooltip::EquipmentToolTip_obj::statToName(_hx_tmp107)) + HX_(" for ",17,f1,92,b0));
HXLINE( 213)						::String tmp30 = activateXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 213)						::String _hx_tmp109;
HXDLIN( 213)						if (::hx::IsNotNull( tmp30 )) {
HXLINE( 213)							_hx_tmp109 = tmp30;
            						}
            						else {
HXLINE( 213)							_hx_tmp109 = HX_("",00,00,00,00);
            						}
HXLINE( 207)						_hx_tmp105->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((_hx_tmp108 + _hx_tmp109) + HX_(" seconds",5f,fa,db,80))));
HXDLIN( 207)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("Teleport",cb,5e,e5,cc)) ){
HXLINE( 195)						this->effects->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),HX_("Teleport to Target",e1,35,a8,f2)));
HXDLIN( 195)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("TierIncrease",24,fb,96,e4)) ){
HXLINE( 237)						::Array< ::Dynamic> _hx_tmp110 = this->effects;
HXDLIN( 237)						int _hx_tmp111;
HXDLIN( 237)						if (::hx::IsNotNull( activateXML1->get(HX_("amount",d8,11,03,d5)) )) {
HXLINE( 237)							_hx_tmp111 = ( (int)(::Std_obj::parseInt(activateXML1->get(HX_("amount",d8,11,03,d5)))) );
            						}
            						else {
HXLINE( 237)							_hx_tmp111 = 0;
            						}
HXDLIN( 237)						_hx_tmp110->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((HX_("Gain Tier ",5d,92,d2,04) + ::util::StringUtils_obj::toRoman(_hx_tmp111)) + HX_(" on use",e6,b4,df,ff))));
HXDLIN( 237)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("Totem",21,c7,5f,a7)) ){
HXLINE( 225)						::Array< ::Dynamic> _hx_tmp112 = this->effects;
HXDLIN( 225)						::String tmp31 = activateXML1->get(HX_("duration",54,0f,8e,14));
HXDLIN( 225)						::String _hx_tmp113;
HXDLIN( 225)						if (::hx::IsNotNull( tmp31 )) {
HXLINE( 225)							_hx_tmp113 = tmp31;
            						}
            						else {
HXLINE( 225)							_hx_tmp113 = HX_("",00,00,00,00);
            						}
HXDLIN( 225)						_hx_tmp112->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),((HX_("Summons a Totem for ",83,01,a4,d2) + _hx_tmp113) + HX_(" seconds",5f,fa,db,80))));
HXLINE( 226)						::Array< ::Dynamic> _hx_tmp114 = this->effects;
HXLINE( 227)						::String _hx_tmp115;
HXDLIN( 227)						::String tmp32 = activateXML1->get(HX_("targetPlayers",a1,ba,43,c1));
HXDLIN( 227)						::String _hx_tmp116;
HXDLIN( 227)						if (::hx::IsNotNull( tmp32 )) {
HXLINE( 227)							_hx_tmp116 = tmp32;
            						}
            						else {
HXLINE( 227)							_hx_tmp116 = HX_("",00,00,00,00);
            						}
HXDLIN( 227)						if ((_hx_tmp116 == HX_("true",4e,a7,03,4d))) {
HXLINE( 227)							_hx_tmp115 = HX_("Allies",b6,2a,2c,74);
            						}
            						else {
HXLINE( 227)							_hx_tmp115 = HX_("Enemies",86,90,5f,a0);
            						}
HXLINE( 229)						::String tmp33 = activateXML1->get(HX_("effect",91,5a,a3,60));
HXDLIN( 229)						::String _hx_tmp117;
HXDLIN( 229)						if (::hx::IsNotNull( tmp33 )) {
HXLINE( 229)							_hx_tmp117 = tmp33;
            						}
            						else {
HXLINE( 229)							_hx_tmp117 = HX_("",00,00,00,00);
            						}
HXLINE( 231)						::String tmp34 = activateXML1->get(HX_("amount",d8,11,03,d5));
HXDLIN( 231)						::String _hx_tmp118;
HXDLIN( 231)						if (::hx::IsNotNull( tmp34 )) {
HXLINE( 231)							_hx_tmp118 = tmp34;
            						}
            						else {
HXLINE( 231)							_hx_tmp118 = HX_("",00,00,00,00);
            						}
HXLINE( 234)						::String tmp35 = activateXML1->get(HX_("radius",52,d0,f6,b0));
HXDLIN( 234)						::String _hx_tmp119;
HXDLIN( 234)						if (::hx::IsNotNull( tmp35 )) {
HXLINE( 234)							_hx_tmp119 = tmp35;
            						}
            						else {
HXLINE( 234)							_hx_tmp119 = HX_("",00,00,00,00);
            						}
HXLINE( 226)						_hx_tmp114->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Totem",21,c7,5f,a7),((((((((_hx_tmp115 + HX_(" receive ",fd,64,2a,41)) + _hx_tmp117) + HX_(" for ",17,f1,92,b0)) + _hx_tmp118) + HX_(" seconds",5f,fa,db,80)) + HX_(" within ",35,e2,ca,85)) + _hx_tmp119) + HX_(" tiles",65,89,a0,db))));
HXLINE( 224)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("UnlockSkin",81,9b,ee,0d)) ){
HXLINE( 239)						 ::haxe::ds::IntMap skinXML = ::objects::ObjectLibrary_obj::xmlLibrary;
HXDLIN( 239)						int skinXML1;
HXDLIN( 239)						if (::hx::IsNotNull( activateXML1->get(HX_("objType",51,76,23,77)) )) {
HXLINE( 239)							skinXML1 = ( (int)(::Std_obj::parseInt(activateXML1->get(HX_("objType",51,76,23,77)))) );
            						}
            						else {
HXLINE( 239)							skinXML1 = 0;
            						}
HXDLIN( 239)						 ::Xml skinXML2 = ( ( ::Xml)(skinXML->get(skinXML1)) );
HXLINE( 240)						 ::haxe::ds::IntMap classXML = ::objects::ObjectLibrary_obj::xmlLibrary;
HXDLIN( 240)						int classXML1;
HXDLIN( 240)						if (( (bool)(skinXML2->elementsNamed(HX_("PlayerClassType",51,1b,2f,2c))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 240)							 ::Xml _this36 = ( ( ::Xml)(skinXML2->elementsNamed(HX_("PlayerClassType",51,1b,2f,2c))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 240)							bool classXML2;
HXDLIN( 240)							if ((_this36->nodeType != ::Xml_obj::Document)) {
HXLINE( 240)								classXML2 = (_this36->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE( 240)								classXML2 = false;
            							}
HXDLIN( 240)							if (classXML2) {
HXLINE( 240)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this36->nodeType)));
            							}
HXDLIN( 240)							 ::Xml _this37 = _this36->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 240)							bool classXML3;
HXDLIN( 240)							if ((_this37->nodeType != ::Xml_obj::Document)) {
HXLINE( 240)								classXML3 = (_this37->nodeType == ::Xml_obj::Element);
            							}
            							else {
HXLINE( 240)								classXML3 = true;
            							}
HXDLIN( 240)							if (classXML3) {
HXLINE( 240)								HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this37->nodeType)));
            							}
HXDLIN( 240)							classXML1 = ( (int)(::Std_obj::parseInt(_this37->nodeValue)) );
            						}
            						else {
HXLINE( 240)							classXML1 = 0;
            						}
HXDLIN( 240)						 ::Xml classXML4 = ( ( ::Xml)(classXML->get(classXML1)) );
HXLINE( 241)						::Array< ::Dynamic> _hx_tmp120 = this->effects;
HXLINE( 243)						::String defaultValue1;
HXDLIN( 243)						::String tmp36 = skinXML2->get(HX_("id",db,5b,00,00));
HXDLIN( 243)						if (::hx::IsNotNull( tmp36 )) {
HXLINE( 243)							defaultValue1 = tmp36;
            						}
            						else {
HXLINE( 243)							defaultValue1 = HX_("",00,00,00,00);
            						}
HXDLIN( 243)						if (::hx::IsNull( defaultValue1 )) {
HXLINE( 243)							defaultValue1 = HX_("",00,00,00,00);
            						}
HXDLIN( 243)						::String _hx_tmp121;
HXDLIN( 243)						if (( (bool)(skinXML2->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 243)							 ::Xml _this38 = ( ( ::Xml)(skinXML2->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 243)							bool _hx_tmp122;
HXDLIN( 243)							if ((_this38->nodeType != ::Xml_obj::Document)) {
HXLINE( 243)								_hx_tmp122 = (_this38->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE( 243)								_hx_tmp122 = false;
            							}
HXDLIN( 243)							if (_hx_tmp122) {
HXLINE( 243)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this38->nodeType)));
            							}
HXDLIN( 243)							 ::Xml _this39 = _this38->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 243)							bool _hx_tmp123;
HXDLIN( 243)							if ((_this39->nodeType != ::Xml_obj::Document)) {
HXLINE( 243)								_hx_tmp123 = (_this39->nodeType == ::Xml_obj::Element);
            							}
            							else {
HXLINE( 243)								_hx_tmp123 = true;
            							}
HXDLIN( 243)							if (_hx_tmp123) {
HXLINE( 243)								HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this39->nodeType)));
            							}
HXDLIN( 243)							_hx_tmp121 = _this39->nodeValue;
            						}
            						else {
HXLINE( 243)							_hx_tmp121 = defaultValue1;
            						}
HXLINE( 246)						::String defaultValue2;
HXDLIN( 246)						::String tmp37 = classXML4->get(HX_("id",db,5b,00,00));
HXDLIN( 246)						if (::hx::IsNotNull( tmp37 )) {
HXLINE( 246)							defaultValue2 = tmp37;
            						}
            						else {
HXLINE( 246)							defaultValue2 = HX_("",00,00,00,00);
            						}
HXDLIN( 246)						if (::hx::IsNull( defaultValue2 )) {
HXLINE( 246)							defaultValue2 = HX_("",00,00,00,00);
            						}
HXDLIN( 246)						::String _hx_tmp124;
HXDLIN( 246)						if (( (bool)(classXML4->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 246)							 ::Xml _this40 = ( ( ::Xml)(classXML4->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 246)							bool _hx_tmp125;
HXDLIN( 246)							if ((_this40->nodeType != ::Xml_obj::Document)) {
HXLINE( 246)								_hx_tmp125 = (_this40->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE( 246)								_hx_tmp125 = false;
            							}
HXDLIN( 246)							if (_hx_tmp125) {
HXLINE( 246)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this40->nodeType)));
            							}
HXDLIN( 246)							 ::Xml _this41 = _this40->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 246)							bool _hx_tmp126;
HXDLIN( 246)							if ((_this41->nodeType != ::Xml_obj::Document)) {
HXLINE( 246)								_hx_tmp126 = (_this41->nodeType == ::Xml_obj::Element);
            							}
            							else {
HXLINE( 246)								_hx_tmp126 = true;
            							}
HXDLIN( 246)							if (_hx_tmp126) {
HXLINE( 246)								HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this41->nodeType)));
            							}
HXDLIN( 246)							_hx_tmp124 = _this41->nodeValue;
            						}
            						else {
HXLINE( 246)							_hx_tmp124 = defaultValue2;
            						}
HXLINE( 241)						_hx_tmp120->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Unlocks Skin",4e,ab,3e,e9),(((((HX_("'",27,00,00,00) + _hx_tmp121) + HX_("' ",19,22,00,00)) + HX_("(",28,00,00,00)) + _hx_tmp124) + HX_(")",29,00,00,00))));
HXLINE( 238)						goto _hx_goto_2;
            					}
            					_hx_goto_2:;
            				}
            			}
            		}
HXLINE( 271)		{
HXLINE( 271)			 ::Dynamic activateXML2 = this->objectXML->elementsNamed(HX_("ActivateOnEquip",7e,b5,c0,ee));
HXDLIN( 271)			while(( (bool)(activateXML2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 271)				 ::Xml activateXML3 = ( ( ::Xml)(activateXML2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 272)				::String tmp38;
HXDLIN( 272)				if (::hx::IsNotNull( activateXML3 )) {
HXLINE( 272)					bool tmp39;
HXDLIN( 272)					if ((activateXML3->nodeType != ::Xml_obj::Document)) {
HXLINE( 272)						tmp39 = (activateXML3->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 272)						tmp39 = false;
            					}
HXDLIN( 272)					if (tmp39) {
HXLINE( 272)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(activateXML3->nodeType)));
            					}
HXDLIN( 272)					 ::Xml _this42 = activateXML3->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 272)					bool tmp40;
HXDLIN( 272)					if ((_this42->nodeType != ::Xml_obj::Document)) {
HXLINE( 272)						tmp40 = (_this42->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 272)						tmp40 = true;
            					}
HXDLIN( 272)					if (tmp40) {
HXLINE( 272)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this42->nodeType)));
            					}
HXDLIN( 272)					tmp38 = _this42->nodeValue;
            				}
            				else {
HXLINE( 272)					tmp38 = null();
            				}
HXDLIN( 272)				::String _hx_tmp127;
HXDLIN( 272)				if (::hx::IsNotNull( tmp38 )) {
HXLINE( 272)					_hx_tmp127 = tmp38;
            				}
            				else {
HXLINE( 272)					_hx_tmp127 = HX_("",00,00,00,00);
            				}
HXDLIN( 272)				if ((_hx_tmp127 == HX_("IncrementStat",83,a9,f4,93))) {
HXLINE( 273)					::Array< ::Dynamic> _hx_tmp128 = this->effects;
HXDLIN( 273)					_hx_tmp128->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),this->compareIncrementStat(activateXML3)));
            				}
            			}
            		}
HXLINE( 275)		if (( (bool)(this->objectXML->elementsNamed(HX_("Cooldown",cb,07,54,d3))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 276)			::Array< ::Dynamic> _hx_tmp129 = this->effects;
HXDLIN( 276)			 ::Xml xml7 = this->objectXML;
HXDLIN( 276)			::String _hx_tmp130;
HXDLIN( 276)			if (( (bool)(xml7->elementsNamed(HX_("Cooldown",cb,07,54,d3))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 276)				 ::Xml _this43 = ( ( ::Xml)(xml7->elementsNamed(HX_("Cooldown",cb,07,54,d3))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 276)				bool _hx_tmp131;
HXDLIN( 276)				if ((_this43->nodeType != ::Xml_obj::Document)) {
HXLINE( 276)					_hx_tmp131 = (_this43->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 276)					_hx_tmp131 = false;
            				}
HXDLIN( 276)				if (_hx_tmp131) {
HXLINE( 276)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this43->nodeType)));
            				}
HXDLIN( 276)				 ::Xml _this44 = _this43->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 276)				bool _hx_tmp132;
HXDLIN( 276)				if ((_this44->nodeType != ::Xml_obj::Document)) {
HXLINE( 276)					_hx_tmp132 = (_this44->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 276)					_hx_tmp132 = true;
            				}
HXDLIN( 276)				if (_hx_tmp132) {
HXLINE( 276)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this44->nodeType)));
            				}
HXDLIN( 276)				_hx_tmp130 = _this44->nodeValue;
            			}
            			else {
HXLINE( 276)				_hx_tmp130 = HX_("",00,00,00,00);
            			}
HXDLIN( 276)			_hx_tmp129->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("Cooldown",cb,07,54,d3),(_hx_tmp130 + HX_(" seconds",5f,fa,db,80))));
            		}
HXLINE( 278)		if (( (bool)(this->objectXML->elementsNamed(HX_("MpCost",70,ab,f9,72))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 279)			::Array< ::Dynamic> _hx_tmp133 = this->effects;
HXDLIN( 279)			 ::Xml xml8 = this->objectXML;
HXDLIN( 279)			::String _hx_tmp134;
HXDLIN( 279)			if (( (bool)(xml8->elementsNamed(HX_("MpCost",70,ab,f9,72))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 279)				 ::Xml _this45 = ( ( ::Xml)(xml8->elementsNamed(HX_("MpCost",70,ab,f9,72))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 279)				bool _hx_tmp135;
HXDLIN( 279)				if ((_this45->nodeType != ::Xml_obj::Document)) {
HXLINE( 279)					_hx_tmp135 = (_this45->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 279)					_hx_tmp135 = false;
            				}
HXDLIN( 279)				if (_hx_tmp135) {
HXLINE( 279)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this45->nodeType)));
            				}
HXDLIN( 279)				 ::Xml _this46 = _this45->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 279)				bool _hx_tmp136;
HXDLIN( 279)				if ((_this46->nodeType != ::Xml_obj::Document)) {
HXLINE( 279)					_hx_tmp136 = (_this46->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 279)					_hx_tmp136 = true;
            				}
HXDLIN( 279)				if (_hx_tmp136) {
HXLINE( 279)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this46->nodeType)));
            				}
HXDLIN( 279)				_hx_tmp134 = _this46->nodeValue;
            			}
            			else {
HXLINE( 279)				_hx_tmp134 = HX_("",00,00,00,00);
            			}
HXDLIN( 279)			_hx_tmp133->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("MP Cost",4a,10,f2,17),_hx_tmp134));
            		}
HXLINE( 281)		if (( (bool)(this->objectXML->elementsNamed(HX_("HpCost",95,dd,30,73))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 282)			::Array< ::Dynamic> _hx_tmp137 = this->effects;
HXDLIN( 282)			 ::Xml xml9 = this->objectXML;
HXDLIN( 282)			::String _hx_tmp138;
HXDLIN( 282)			if (( (bool)(xml9->elementsNamed(HX_("HpCost",95,dd,30,73))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 282)				 ::Xml _this47 = ( ( ::Xml)(xml9->elementsNamed(HX_("HpCost",95,dd,30,73))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 282)				bool _hx_tmp139;
HXDLIN( 282)				if ((_this47->nodeType != ::Xml_obj::Document)) {
HXLINE( 282)					_hx_tmp139 = (_this47->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 282)					_hx_tmp139 = false;
            				}
HXDLIN( 282)				if (_hx_tmp139) {
HXLINE( 282)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this47->nodeType)));
            				}
HXDLIN( 282)				 ::Xml _this48 = _this47->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 282)				bool _hx_tmp140;
HXDLIN( 282)				if ((_this48->nodeType != ::Xml_obj::Document)) {
HXLINE( 282)					_hx_tmp140 = (_this48->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 282)					_hx_tmp140 = true;
            				}
HXDLIN( 282)				if (_hx_tmp140) {
HXLINE( 282)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this48->nodeType)));
            				}
HXDLIN( 282)				_hx_tmp138 = _this48->nodeValue;
            			}
            			else {
HXLINE( 282)				_hx_tmp138 = HX_("",00,00,00,00);
            			}
HXDLIN( 282)			_hx_tmp137->push( ::ui::tooltip::Effect_obj::__alloc( HX_CTX ,HX_("HP Cost",85,be,06,48),_hx_tmp138));
            		}
HXLINE( 284)		Float _hx_tmp141 = this->tierText->get_y();
HXDLIN( 284)		this->yOffset = ::Std_obj::_hx_int(((_hx_tmp141 + this->tierText->get_height()) + 8));
HXLINE( 285)		bool _hx_tmp142;
HXDLIN( 285)		if ((this->effects->length == 0)) {
HXLINE( 285)			_hx_tmp142 = ( (bool)(this->objectXML->elementsNamed(HX_("ExtraTooltipData",3d,30,42,74))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 285)			_hx_tmp142 = true;
            		}
HXDLIN( 285)		if (_hx_tmp142) {
HXLINE( 286)			this->line1 =  ::ui::LineBreakDesign_obj::__alloc( HX_CTX ,218,this->rarityColor);
HXLINE( 287)			this->line1->set_x(( (Float)(8) ));
HXLINE( 288)			this->line1->set_y(( (Float)(this->yOffset) ));
HXLINE( 289)			this->addChild(this->line1);
HXLINE( 290)			this->effectsText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,false,::Std_obj::_hx_int(((( (Float)(230) ) - this->icon->get_width()) - ( (Float)(4) ))),0,null());
HXLINE( 291)			this->effectsText->set_wordWrap(true);
HXLINE( 292)			 ::ui::SimpleText _hx_tmp143 = this->effectsText;
HXDLIN( 292)			_hx_tmp143->set_htmlText(this->buildEffectsHTML(this->effects));
HXLINE( 293)			this->effectsText->useTextDimensions();
HXLINE( 294)			 ::ui::SimpleText _hx_tmp144 = this->effectsText;
HXDLIN( 294)			_hx_tmp144->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE( 295)			this->effectsText->set_x(( (Float)(4) ));
HXLINE( 296)			 ::ui::SimpleText _hx_tmp145 = this->effectsText;
HXDLIN( 296)			_hx_tmp145->set_y((this->line1->get_y() + 8));
HXLINE( 297)			this->addChild(this->effectsText);
HXLINE( 298)			Float _hx_tmp146 = this->effectsText->get_y();
HXDLIN( 298)			this->yOffset = ::Std_obj::_hx_int(((_hx_tmp146 + this->effectsText->get_height()) + 8));
            		}
HXLINE( 301)		this->restrictions = ::Array_obj< ::Dynamic>::__new();
HXLINE( 302)		if (( (bool)(this->objectXML->elementsNamed(HX_("Untradable",74,f3,f7,88))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 303)			this->restrictions->push( ::ui::tooltip::Restriction_obj::__alloc( HX_CTX ,HX_("Untradable",74,f3,f7,88),16777215,false));
            		}
HXLINE( 305)		if (this->playerCanUse) {
HXLINE( 306)			if (( (bool)(this->objectXML->elementsNamed(HX_("InvUse",f6,37,61,d4))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 307)				this->restrictions->push( ::ui::tooltip::Restriction_obj::__alloc( HX_CTX ,HX_("Can be used multiple times",8c,73,19,08),16777215,false));
            			}
            		}
            		else {
HXLINE( 308)			if (::hx::IsNotNull( this->player )) {
HXLINE( 309)				::Array< ::Dynamic> _hx_tmp147 = this->restrictions;
HXDLIN( 309)				_hx_tmp147->push( ::ui::tooltip::Restriction_obj::__alloc( HX_CTX ,(HX_("Not usable by ",4e,b7,15,1d) + ::objects::ObjectLibrary_obj::typeToDisplayId->get(this->player->objectType)),11141120,true));
            			}
            		}
HXLINE( 311)		if ((this->restrictions->length != 0)) {
HXLINE( 312)			this->line2 =  ::ui::LineBreakDesign_obj::__alloc( HX_CTX ,218,this->rarityColor);
HXLINE( 313)			this->line2->set_x(( (Float)(8) ));
HXLINE( 314)			this->line2->set_y(( (Float)(this->yOffset) ));
HXLINE( 315)			this->addChild(this->line2);
HXLINE( 316)			this->restrictionsText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,false,226,0,null());
HXLINE( 317)			this->restrictionsText->set_wordWrap(true);
HXLINE( 318)			 ::ui::SimpleText _hx_tmp148 = this->restrictionsText;
HXDLIN( 318)			_hx_tmp148->set_htmlText(((HX_("<span class='in'>",c4,e3,02,af) + ::ui::tooltip::EquipmentToolTip_obj::buildRestrictionsHTML(this->restrictions)) + HX_("</span>",e1,60,34,0b)));
HXLINE( 319)			this->restrictionsText->useTextDimensions();
HXLINE( 320)			 ::ui::SimpleText _hx_tmp149 = this->restrictionsText;
HXDLIN( 320)			_hx_tmp149->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE( 321)			this->restrictionsText->set_x(( (Float)(4) ));
HXLINE( 322)			 ::ui::SimpleText _hx_tmp150 = this->restrictionsText;
HXDLIN( 322)			_hx_tmp150->set_y((this->line2->get_y() + 8));
HXLINE( 323)			this->addChild(this->restrictionsText);
            		}
            	}

Dynamic EquipmentToolTip_obj::__CreateEmpty() { return new EquipmentToolTip_obj; }

void *EquipmentToolTip_obj::_hx_vtable = 0;

Dynamic EquipmentToolTip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EquipmentToolTip_obj > _hx_result = new EquipmentToolTip_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool EquipmentToolTip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0637743c) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0637743c;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7f0fd0c4;
		}
	}
}

::String EquipmentToolTip_obj::compareIncrementStat( ::Xml activateXML){
            	HX_STACKFRAME(&_hx_pos_9288db9c7cb7db9d_327_compareIncrementStat)
HXLINE( 328)		int stat;
HXDLIN( 328)		if (::hx::IsNotNull( activateXML->get(HX_("stat",d4,e3,5b,4c)) )) {
HXLINE( 328)			stat = ( (int)(::Std_obj::parseInt(activateXML->get(HX_("stat",d4,e3,5b,4c)))) );
            		}
            		else {
HXLINE( 328)			stat = 0;
            		}
HXLINE( 329)		int amount;
HXDLIN( 329)		if (::hx::IsNotNull( activateXML->get(HX_("amount",d8,11,03,d5)) )) {
HXLINE( 329)			amount = ( (int)(::Std_obj::parseInt(activateXML->get(HX_("amount",d8,11,03,d5)))) );
            		}
            		else {
HXLINE( 329)			amount = 0;
            		}
HXLINE( 330)		::String _hx_tmp;
HXDLIN( 330)		if ((amount > -1)) {
HXLINE( 330)			::String tmp = activateXML->get(HX_("amount",d8,11,03,d5));
HXDLIN( 330)			::String _hx_tmp1;
HXDLIN( 330)			if (::hx::IsNotNull( tmp )) {
HXLINE( 330)				_hx_tmp1 = tmp;
            			}
            			else {
HXLINE( 330)				_hx_tmp1 = HX_("",00,00,00,00);
            			}
HXDLIN( 330)			_hx_tmp = (HX_("+",2b,00,00,00) + _hx_tmp1);
            		}
            		else {
HXLINE( 330)			::String tmp1 = activateXML->get(HX_("amount",d8,11,03,d5));
HXDLIN( 330)			if (::hx::IsNotNull( tmp1 )) {
HXLINE( 330)				_hx_tmp = tmp1;
            			}
            			else {
HXLINE( 330)				_hx_tmp = HX_("",00,00,00,00);
            			}
            		}
HXDLIN( 330)		return ((_hx_tmp + HX_(" ",20,00,00,00)) + ::ui::tooltip::EquipmentToolTip_obj::statToName(stat));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EquipmentToolTip_obj,compareIncrementStat,return )

::String EquipmentToolTip_obj::buildEffectsHTML(::Array< ::Dynamic> effects){
            	HX_STACKFRAME(&_hx_pos_9288db9c7cb7db9d_333_buildEffectsHTML)
HXLINE( 334)		::String html = HX_("",00,00,00,00);
HXLINE( 335)		bool first = true;
HXLINE( 336)		{
HXLINE( 336)			int _g = 0;
HXDLIN( 336)			while((_g < effects->length)){
HXLINE( 336)				 ::ui::tooltip::Effect effect = effects->__get(_g).StaticCast<  ::ui::tooltip::Effect >();
HXDLIN( 336)				_g = (_g + 1);
HXLINE( 337)				::String textColor = HX_("#FFFF8F",f1,57,f1,28);
HXLINE( 338)				if (!(first)) {
HXLINE( 339)					html = (html + HX_("\n",0a,00,00,00));
            				}
            				else {
HXLINE( 341)					first = false;
            				}
HXLINE( 343)				if ((effect->name != HX_("",00,00,00,00))) {
HXLINE( 344)					html = (html + (effect->name + HX_(": ",a6,32,00,00)));
            				}
HXLINE( 346)				bool _hx_tmp;
HXDLIN( 346)				if (this->isEquippable) {
HXLINE( 346)					_hx_tmp = ::hx::IsNull( this->curItemXML );
            				}
            				else {
HXLINE( 346)					_hx_tmp = false;
            				}
HXDLIN( 346)				if (_hx_tmp) {
HXLINE( 347)					textColor = HX_("#00ff00",a3,b9,85,c7);
            				}
HXLINE( 349)				html = (html + ((((HX_("<font color=\"",53,f8,ea,b6) + textColor) + HX_("\">",dc,1d,00,00)) + effect->value) + HX_("</font>",3c,82,5f,8e)));
            			}
            		}
HXLINE( 352)		return html;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EquipmentToolTip_obj,buildEffectsHTML,return )

::String EquipmentToolTip_obj::buildRestrictionsHTML(::Array< ::Dynamic> restrictions){
            	HX_STACKFRAME(&_hx_pos_9288db9c7cb7db9d_38_buildRestrictionsHTML)
HXLINE(  39)		::String html = HX_("",00,00,00,00);
HXLINE(  40)		bool first = true;
HXLINE(  41)		{
HXLINE(  41)			int _g = 0;
HXDLIN(  41)			while((_g < restrictions->length)){
HXLINE(  41)				 ::ui::tooltip::Restriction restriction = restrictions->__get(_g).StaticCast<  ::ui::tooltip::Restriction >();
HXDLIN(  41)				_g = (_g + 1);
HXLINE(  42)				if (!(first)) {
HXLINE(  43)					html = (html + HX_("\n",0a,00,00,00));
            				}
            				else {
HXLINE(  45)					first = false;
            				}
HXLINE(  47)				::String line = ((HX_("<font color=\"#",70,50,ae,56) + ::Std_obj::string(restriction->color)) + HX_("\">",dc,1d,00,00));
HXDLIN(  47)				::String line1 = ((line + restriction->text) + HX_("</font>",3c,82,5f,8e));
HXLINE(  48)				if (restriction->bold) {
HXLINE(  49)					line1 = ((HX_("<b>",d8,dc,2d,00) + line1) + HX_("</b>",cf,cc,cc,27));
            				}
HXLINE(  51)				html = (html + line1);
            			}
            		}
HXLINE(  54)		return html;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(EquipmentToolTip_obj,buildRestrictionsHTML,return )

::String EquipmentToolTip_obj::statToName(int stat){
            	HX_STACKFRAME(&_hx_pos_9288db9c7cb7db9d_58_statToName)
HXDLIN(  58)		switch((int)(stat)){
            			case (int)0: {
HXLINE(  60)				return HX_("Health",bc,9c,9a,31);
            			}
            			break;
            			case (int)1: {
HXLINE(  62)				return HX_("HP",08,3f,00,00);
            			}
            			break;
            			case (int)2: {
HXLINE(  64)				return HX_("Size",e1,cc,2c,37);
            			}
            			break;
            			case (int)3: {
HXLINE(  66)				return HX_("Mana",a7,68,2f,33);
            			}
            			break;
            			case (int)4: {
HXLINE(  68)				return HX_("MP",63,43,00,00);
            			}
            			break;
            			case (int)20: {
HXLINE(  70)				return HX_("Strength",a1,8e,40,68);
            			}
            			break;
            			case (int)21: {
HXLINE(  74)				return HX_("Defense",60,91,b4,6b);
            			}
            			break;
            			case (int)22: {
HXLINE(  78)				return HX_("Speed",67,07,97,14);
            			}
            			break;
            			case (int)27: {
HXLINE(  82)				return HX_("Stamina",0f,ef,15,ff);
            			}
            			break;
            			case (int)30: {
HXLINE(  88)				return HX_("Penetration",6b,f8,c8,ea);
            			}
            			break;
            			case (int)77: {
HXLINE(  72)				return HX_("Wit",02,60,42,00);
            			}
            			break;
            			case (int)78: {
HXLINE(  76)				return HX_("Resistance",d9,15,07,97);
            			}
            			break;
            			case (int)79: {
HXLINE(  80)				return HX_("Haste",2b,1f,4f,b5);
            			}
            			break;
            			case (int)80: {
HXLINE(  84)				return HX_("Intelligence",5f,53,50,b3);
            			}
            			break;
            			case (int)81: {
HXLINE(  86)				return HX_("Piercing",25,1e,8b,35);
            			}
            			break;
            			case (int)82: {
HXLINE(  90)				return HX_("Tenacity",af,73,65,43);
            			}
            			break;
            			default:{
HXLINE(  92)				return HX_("Unknown Stat",6a,b4,9f,f7);
            			}
            		}
HXLINE(  58)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(EquipmentToolTip_obj,statToName,return )


::hx::ObjectPtr< EquipmentToolTip_obj > EquipmentToolTip_obj::__new(int objectType, ::objects::Player player,int invType,::String inventoryOwnerType,::hx::Null< int >  __o_inventorySlotID) {
	::hx::ObjectPtr< EquipmentToolTip_obj > __this = new EquipmentToolTip_obj();
	__this->__construct(objectType,player,invType,inventoryOwnerType,__o_inventorySlotID);
	return __this;
}

::hx::ObjectPtr< EquipmentToolTip_obj > EquipmentToolTip_obj::__alloc(::hx::Ctx *_hx_ctx,int objectType, ::objects::Player player,int invType,::String inventoryOwnerType,::hx::Null< int >  __o_inventorySlotID) {
	EquipmentToolTip_obj *__this = (EquipmentToolTip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EquipmentToolTip_obj), true, "ui.tooltip.EquipmentToolTip"));
	*(void **)__this = EquipmentToolTip_obj::_hx_vtable;
	__this->__construct(objectType,player,invType,inventoryOwnerType,__o_inventorySlotID);
	return __this;
}

EquipmentToolTip_obj::EquipmentToolTip_obj()
{
}

void EquipmentToolTip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EquipmentToolTip);
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(tierText,"tierText");
	HX_MARK_MEMBER_NAME(line1,"line1");
	HX_MARK_MEMBER_NAME(effectsText,"effectsText");
	HX_MARK_MEMBER_NAME(line2,"line2");
	HX_MARK_MEMBER_NAME(restrictionsText,"restrictionsText");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(isEquippable,"isEquippable");
	HX_MARK_MEMBER_NAME(objectType,"objectType");
	HX_MARK_MEMBER_NAME(curItemXML,"curItemXML");
	HX_MARK_MEMBER_NAME(objectXML,"objectXML");
	HX_MARK_MEMBER_NAME(playerCanUse,"playerCanUse");
	HX_MARK_MEMBER_NAME(restrictions,"restrictions");
	HX_MARK_MEMBER_NAME(effects,"effects");
	HX_MARK_MEMBER_NAME(yOffset,"yOffset");
	HX_MARK_MEMBER_NAME(rarityColor,"rarityColor");
	 ::ui::tooltip::ToolTip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EquipmentToolTip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(tierText,"tierText");
	HX_VISIT_MEMBER_NAME(line1,"line1");
	HX_VISIT_MEMBER_NAME(effectsText,"effectsText");
	HX_VISIT_MEMBER_NAME(line2,"line2");
	HX_VISIT_MEMBER_NAME(restrictionsText,"restrictionsText");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(isEquippable,"isEquippable");
	HX_VISIT_MEMBER_NAME(objectType,"objectType");
	HX_VISIT_MEMBER_NAME(curItemXML,"curItemXML");
	HX_VISIT_MEMBER_NAME(objectXML,"objectXML");
	HX_VISIT_MEMBER_NAME(playerCanUse,"playerCanUse");
	HX_VISIT_MEMBER_NAME(restrictions,"restrictions");
	HX_VISIT_MEMBER_NAME(effects,"effects");
	HX_VISIT_MEMBER_NAME(yOffset,"yOffset");
	HX_VISIT_MEMBER_NAME(rarityColor,"rarityColor");
	 ::ui::tooltip::ToolTip_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EquipmentToolTip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"line1") ) { return ::hx::Val( line1 ); }
		if (HX_FIELD_EQ(inName,"line2") ) { return ::hx::Val( line2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"effects") ) { return ::hx::Val( effects ); }
		if (HX_FIELD_EQ(inName,"yOffset") ) { return ::hx::Val( yOffset ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tierText") ) { return ::hx::Val( tierText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"objectXML") ) { return ::hx::Val( objectXML ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objectType") ) { return ::hx::Val( objectType ); }
		if (HX_FIELD_EQ(inName,"curItemXML") ) { return ::hx::Val( curItemXML ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"effectsText") ) { return ::hx::Val( effectsText ); }
		if (HX_FIELD_EQ(inName,"rarityColor") ) { return ::hx::Val( rarityColor ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isEquippable") ) { return ::hx::Val( isEquippable ); }
		if (HX_FIELD_EQ(inName,"playerCanUse") ) { return ::hx::Val( playerCanUse ); }
		if (HX_FIELD_EQ(inName,"restrictions") ) { return ::hx::Val( restrictions ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"restrictionsText") ) { return ::hx::Val( restrictionsText ); }
		if (HX_FIELD_EQ(inName,"buildEffectsHTML") ) { return ::hx::Val( buildEffectsHTML_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"compareIncrementStat") ) { return ::hx::Val( compareIncrementStat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EquipmentToolTip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"statToName") ) { outValue = statToName_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"buildRestrictionsHTML") ) { outValue = buildRestrictionsHTML_dyn(); return true; }
	}
	return false;
}

::hx::Val EquipmentToolTip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"line1") ) { line1=inValue.Cast<  ::ui::LineBreakDesign >(); return inValue; }
		if (HX_FIELD_EQ(inName,"line2") ) { line2=inValue.Cast<  ::ui::LineBreakDesign >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::objects::Player >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"effects") ) { effects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yOffset") ) { yOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tierText") ) { tierText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"objectXML") ) { objectXML=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objectType") ) { objectType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curItemXML") ) { curItemXML=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"effectsText") ) { effectsText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rarityColor") ) { rarityColor=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isEquippable") ) { isEquippable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerCanUse") ) { playerCanUse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrictions") ) { restrictions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"restrictionsText") ) { restrictionsText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EquipmentToolTip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("tierText",ef,f6,b5,36));
	outFields->push(HX_("line1",bd,dd,01,75));
	outFields->push(HX_("effectsText",8f,66,9d,f7));
	outFields->push(HX_("line2",be,dd,01,75));
	outFields->push(HX_("restrictionsText",34,13,1f,86));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("isEquippable",e4,79,ad,83));
	outFields->push(HX_("objectType",19,69,41,cf));
	outFields->push(HX_("curItemXML",e4,c4,64,ea));
	outFields->push(HX_("objectXML",58,0c,86,43));
	outFields->push(HX_("playerCanUse",58,f8,1a,b4));
	outFields->push(HX_("restrictions",e7,1a,27,42));
	outFields->push(HX_("effects",c2,e4,4b,2e));
	outFields->push(HX_("yOffset",ec,2c,79,3c));
	outFields->push(HX_("rarityColor",38,19,e7,ba));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EquipmentToolTip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(EquipmentToolTip_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(EquipmentToolTip_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(EquipmentToolTip_obj,tierText),HX_("tierText",ef,f6,b5,36)},
	{::hx::fsObject /*  ::ui::LineBreakDesign */ ,(int)offsetof(EquipmentToolTip_obj,line1),HX_("line1",bd,dd,01,75)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(EquipmentToolTip_obj,effectsText),HX_("effectsText",8f,66,9d,f7)},
	{::hx::fsObject /*  ::ui::LineBreakDesign */ ,(int)offsetof(EquipmentToolTip_obj,line2),HX_("line2",be,dd,01,75)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(EquipmentToolTip_obj,restrictionsText),HX_("restrictionsText",34,13,1f,86)},
	{::hx::fsObject /*  ::objects::Player */ ,(int)offsetof(EquipmentToolTip_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsBool,(int)offsetof(EquipmentToolTip_obj,isEquippable),HX_("isEquippable",e4,79,ad,83)},
	{::hx::fsInt,(int)offsetof(EquipmentToolTip_obj,objectType),HX_("objectType",19,69,41,cf)},
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(EquipmentToolTip_obj,curItemXML),HX_("curItemXML",e4,c4,64,ea)},
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(EquipmentToolTip_obj,objectXML),HX_("objectXML",58,0c,86,43)},
	{::hx::fsBool,(int)offsetof(EquipmentToolTip_obj,playerCanUse),HX_("playerCanUse",58,f8,1a,b4)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EquipmentToolTip_obj,restrictions),HX_("restrictions",e7,1a,27,42)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EquipmentToolTip_obj,effects),HX_("effects",c2,e4,4b,2e)},
	{::hx::fsInt,(int)offsetof(EquipmentToolTip_obj,yOffset),HX_("yOffset",ec,2c,79,3c)},
	{::hx::fsInt,(int)offsetof(EquipmentToolTip_obj,rarityColor),HX_("rarityColor",38,19,e7,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EquipmentToolTip_obj_sStaticStorageInfo = 0;
#endif

static ::String EquipmentToolTip_obj_sMemberFields[] = {
	HX_("icon",79,e7,b2,45),
	HX_("titleText",65,ba,a4,70),
	HX_("tierText",ef,f6,b5,36),
	HX_("line1",bd,dd,01,75),
	HX_("effectsText",8f,66,9d,f7),
	HX_("line2",be,dd,01,75),
	HX_("restrictionsText",34,13,1f,86),
	HX_("player",61,eb,b8,37),
	HX_("isEquippable",e4,79,ad,83),
	HX_("objectType",19,69,41,cf),
	HX_("curItemXML",e4,c4,64,ea),
	HX_("objectXML",58,0c,86,43),
	HX_("playerCanUse",58,f8,1a,b4),
	HX_("restrictions",e7,1a,27,42),
	HX_("effects",c2,e4,4b,2e),
	HX_("yOffset",ec,2c,79,3c),
	HX_("rarityColor",38,19,e7,ba),
	HX_("compareIncrementStat",be,4d,73,1c),
	HX_("buildEffectsHTML",9f,1a,57,20),
	::String(null()) };

::hx::Class EquipmentToolTip_obj::__mClass;

static ::String EquipmentToolTip_obj_sStaticFields[] = {
	HX_("buildRestrictionsHTML",20,eb,7e,63),
	HX_("statToName",5a,cc,fb,2d),
	::String(null())
};

void EquipmentToolTip_obj::__register()
{
	EquipmentToolTip_obj _hx_dummy;
	EquipmentToolTip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.tooltip.EquipmentToolTip",7a,97,b9,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EquipmentToolTip_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(EquipmentToolTip_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EquipmentToolTip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EquipmentToolTip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EquipmentToolTip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EquipmentToolTip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tooltip
