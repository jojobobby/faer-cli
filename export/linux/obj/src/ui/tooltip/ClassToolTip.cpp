// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_tooltip_ClassToolTip
#include <ui/tooltip/ClassToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif
#ifndef INCLUDED_util_AnimatedChars
#include <util/AnimatedChars.h>
#endif
#ifndef INCLUDED_util_MaskedImage
#include <util/MaskedImage.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d61328565331fcea_16_new,"ui.tooltip.ClassToolTip","new",0x0790c742,"ui.tooltip.ClassToolTip.new","ui/tooltip/ClassToolTip.hx",16,0xcf4c5fac)
namespace ui{
namespace tooltip{

void ClassToolTip_obj::__construct( ::Xml playerXML){
            	HX_GC_STACKFRAME(&_hx_pos_d61328565331fcea_16_new)
HXLINE(  17)		super::__construct(3552822,1,16777215,1,null());
HXLINE(  19)		 ::Xml xml = ( ( ::Xml)(playerXML->elementsNamed(HX_("AnimatedTexture",58,70,fc,07))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  20)		 ::Xml _this = ( ( ::Xml)(xml->elementsNamed(HX_("Sheet",7f,52,4d,0f))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  20)		bool animatedChar;
HXDLIN(  20)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  20)			animatedChar = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  20)			animatedChar = false;
            		}
HXDLIN(  20)		if (animatedChar) {
HXLINE(  20)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(  20)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  20)		bool animatedChar1;
HXDLIN(  20)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  20)			animatedChar1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  20)			animatedChar1 = true;
            		}
HXDLIN(  20)		if (animatedChar1) {
HXLINE(  20)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN(  20)		::String animatedChar2 = _this1->nodeValue;
HXLINE(  21)		 ::Xml _this2 = ( ( ::Xml)(xml->elementsNamed(HX_("Index",f2,0a,42,51))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  21)		bool animatedChar3;
HXDLIN(  21)		if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE(  21)			animatedChar3 = (_this2->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  21)			animatedChar3 = false;
            		}
HXDLIN(  21)		if (animatedChar3) {
HXLINE(  21)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            		}
HXDLIN(  21)		 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  21)		bool animatedChar4;
HXDLIN(  21)		if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE(  21)			animatedChar4 = (_this3->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  21)			animatedChar4 = true;
            		}
HXDLIN(  21)		if (animatedChar4) {
HXLINE(  21)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            		}
HXLINE(  22)		 ::util::MaskedImage image = ::util::AnimatedChars_obj::getAnimatedChar(animatedChar2,( (int)(::Std_obj::parseInt(_this3->nodeValue)) ))->imageFromDir(0,0,( (Float)(0) ));
HXLINE(  23)		int size = ::Std_obj::_hx_int(((( (Float)(4) ) / ( (Float)(image->width()) )) * ( (Float)(100) )));
HXLINE(  24)		 ::openfl::display::BitmapData bd = ::util::TextureRedrawer_obj::redraw(image->image,size,true,0,null(),null(),null());
HXLINE(  26)		this->portrait =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  27)		this->portrait->set_bitmapData(bd);
HXLINE(  28)		this->portrait->set_x(( (Float)(4) ));
HXLINE(  29)		this->portrait->set_y(( (Float)(0) ));
HXLINE(  30)		this->addChild(this->portrait);
HXLINE(  32)		this->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,13,11776947,false,0,0,null());
HXLINE(  33)		this->nameText->setBold(true);
HXLINE(  34)		 ::ui::SimpleText _hx_tmp = this->nameText;
HXDLIN(  34)		_hx_tmp->set_text(playerXML->get(HX_("id",db,5b,00,00)));
HXLINE(  35)		this->nameText->updateMetrics();
HXLINE(  36)		 ::ui::SimpleText _hx_tmp1 = this->nameText;
HXDLIN(  36)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  37)		this->nameText->set_x(( (Float)(40) ));
HXLINE(  38)		this->nameText->set_y(( (Float)(6) ));
HXLINE(  39)		this->addChild(this->nameText);
HXLINE(  41)		this->descriptionText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,13,11776947,false,174,0,null());
HXLINE(  42)		this->descriptionText->set_wordWrap(true);
HXLINE(  43)		this->descriptionText->set_multiline(true);
HXLINE(  44)		 ::ui::SimpleText _hx_tmp2 = this->descriptionText;
HXDLIN(  44)		 ::Xml _this4 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Description",dc,a0,4f,43))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  44)		bool _hx_tmp3;
HXDLIN(  44)		if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE(  44)			_hx_tmp3 = (_this4->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  44)			_hx_tmp3 = false;
            		}
HXDLIN(  44)		if (_hx_tmp3) {
HXLINE(  44)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            		}
HXDLIN(  44)		 ::Xml _this5 = _this4->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  44)		bool _hx_tmp4;
HXDLIN(  44)		if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE(  44)			_hx_tmp4 = (_this5->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  44)			_hx_tmp4 = true;
            		}
HXDLIN(  44)		if (_hx_tmp4) {
HXLINE(  44)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            		}
HXDLIN(  44)		_hx_tmp2->set_text(_this5->nodeValue);
HXLINE(  45)		this->descriptionText->updateMetrics();
HXLINE(  46)		 ::ui::SimpleText _hx_tmp5 = this->descriptionText;
HXDLIN(  46)		_hx_tmp5->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  47)		this->descriptionText->set_x(( (Float)(8) ));
HXLINE(  48)		this->descriptionText->set_y(( (Float)(40) ));
HXLINE(  49)		this->addChild(this->descriptionText);
            	}

Dynamic ClassToolTip_obj::__CreateEmpty() { return new ClassToolTip_obj; }

void *ClassToolTip_obj::_hx_vtable = 0;

Dynamic ClassToolTip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ClassToolTip_obj > _hx_result = new ClassToolTip_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ClassToolTip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0637743c) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0637743c;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x4513255a || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}


::hx::ObjectPtr< ClassToolTip_obj > ClassToolTip_obj::__new( ::Xml playerXML) {
	::hx::ObjectPtr< ClassToolTip_obj > __this = new ClassToolTip_obj();
	__this->__construct(playerXML);
	return __this;
}

::hx::ObjectPtr< ClassToolTip_obj > ClassToolTip_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml playerXML) {
	ClassToolTip_obj *__this = (ClassToolTip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ClassToolTip_obj), true, "ui.tooltip.ClassToolTip"));
	*(void **)__this = ClassToolTip_obj::_hx_vtable;
	__this->__construct(playerXML);
	return __this;
}

ClassToolTip_obj::ClassToolTip_obj()
{
}

void ClassToolTip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ClassToolTip);
	HX_MARK_MEMBER_NAME(portrait,"portrait");
	HX_MARK_MEMBER_NAME(nameText,"nameText");
	HX_MARK_MEMBER_NAME(descriptionText,"descriptionText");
	 ::ui::tooltip::ToolTip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ClassToolTip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(portrait,"portrait");
	HX_VISIT_MEMBER_NAME(nameText,"nameText");
	HX_VISIT_MEMBER_NAME(descriptionText,"descriptionText");
	 ::ui::tooltip::ToolTip_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ClassToolTip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { return ::hx::Val( portrait ); }
		if (HX_FIELD_EQ(inName,"nameText") ) { return ::hx::Val( nameText ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"descriptionText") ) { return ::hx::Val( descriptionText ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ClassToolTip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { portrait=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameText") ) { nameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"descriptionText") ) { descriptionText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ClassToolTip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("portrait",5b,21,af,b8));
	outFields->push(HX_("nameText",98,ec,80,49));
	outFields->push(HX_("descriptionText",c9,2f,0e,37));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ClassToolTip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(ClassToolTip_obj,portrait),HX_("portrait",5b,21,af,b8)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(ClassToolTip_obj,nameText),HX_("nameText",98,ec,80,49)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(ClassToolTip_obj,descriptionText),HX_("descriptionText",c9,2f,0e,37)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ClassToolTip_obj_sStaticStorageInfo = 0;
#endif

static ::String ClassToolTip_obj_sMemberFields[] = {
	HX_("portrait",5b,21,af,b8),
	HX_("nameText",98,ec,80,49),
	HX_("descriptionText",c9,2f,0e,37),
	::String(null()) };

::hx::Class ClassToolTip_obj::__mClass;

void ClassToolTip_obj::__register()
{
	ClassToolTip_obj _hx_dummy;
	ClassToolTip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.tooltip.ClassToolTip",50,be,0f,83);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ClassToolTip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ClassToolTip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClassToolTip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClassToolTip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tooltip
