// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_assets_CharacterFactory
#include <assets/CharacterFactory.h>
#endif
#ifndef INCLUDED_assets_CharacterTemplate
#include <assets/CharacterTemplate.h>
#endif
#ifndef INCLUDED_classes_model_CharacterClass
#include <classes/model/CharacterClass.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkin
#include <classes/model/CharacterSkin.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkins
#include <classes/model/CharacterSkins.h>
#endif
#ifndef INCLUDED_classes_model_ClassModel
#include <classes/model/ClassModel.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_GameObjectListItem
#include <ui/GameObjectListItem.h>
#endif
#ifndef INCLUDED_ui_StatusBar
#include <ui/StatusBar.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_EquippedGrid
#include <ui/panels/itemgrids/EquippedGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_InventoryGrid
#include <ui/panels/itemgrids/InventoryGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_tooltip_MyPlayerToolTip
#include <ui/tooltip/MyPlayerToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eacc4eb45776a72c_22_new,"ui.tooltip.MyPlayerToolTip","new",0x0b707043,"ui.tooltip.MyPlayerToolTip.new","ui/tooltip/MyPlayerToolTip.hx",22,0x15455a0f)
HX_LOCAL_STACK_FRAME(_hx_pos_eacc4eb45776a72c_58_draw,"ui.tooltip.MyPlayerToolTip","draw",0xf05f72c1,"ui.tooltip.MyPlayerToolTip.draw","ui/tooltip/MyPlayerToolTip.hx",58,0x15455a0f)
namespace ui{
namespace tooltip{

void MyPlayerToolTip_obj::__construct(::String accountName, ::Xml charXML){
            	HX_GC_STACKFRAME(&_hx_pos_eacc4eb45776a72c_22_new)
HXLINE(  23)		super::__construct(3552822,1,16777215,1,null());
HXLINE(  24)		this->player = ::objects::Player_obj::fromPlayerXML(accountName,charXML);
HXLINE(  26)		 ::classes::model::CharacterSkins chrClass = ::Global_obj::classModel->getCharacterClass(this->player->objectType)->skins;
HXDLIN(  26)		 ::Xml _this = ( ( ::Xml)(charXML->elementsNamed(HX_("Texture",bb,f0,31,6c))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  26)		bool skin;
HXDLIN(  26)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  26)			skin = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  26)			skin = false;
            		}
HXDLIN(  26)		if (skin) {
HXLINE(  26)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(  26)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  26)		bool skin1;
HXDLIN(  26)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  26)			skin1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  26)			skin1 = true;
            		}
HXDLIN(  26)		if (skin1) {
HXLINE(  26)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN(  26)		 ::classes::model::CharacterSkin skin2 = chrClass->getSkin(( (int)(::Std_obj::parseInt(_this1->nodeValue)) ));
HXLINE(  27)		this->player->animatedChar = ::assets::CharacterFactory_obj::makeCharacter(skin2->_hx_template);
HXLINE(  28)		this->playerPanel =  ::ui::GameObjectListItem_obj::__alloc( HX_CTX ,11776947,true,this->player);
HXLINE(  29)		this->addChild(this->playerPanel);
HXLINE(  30)		if ((this->player->maxMP < 0)) {
HXLINE(  31)			this->hpBar =  ::ui::StatusBar_obj::__alloc( HX_CTX ,176,40,14693428,5526612,null(),null());
HXLINE(  32)			this->hpBar->set_x(( (Float)(6) ));
HXLINE(  33)			this->hpBar->set_y(( (Float)(40) ));
HXLINE(  34)			this->addChild(this->hpBar);
            		}
            		else {
HXLINE(  36)			this->hpBar =  ::ui::StatusBar_obj::__alloc( HX_CTX ,176,16,14693428,5526612,null(),null());
HXLINE(  37)			this->hpBar->set_x(( (Float)(6) ));
HXLINE(  38)			this->hpBar->set_y(( (Float)(40) ));
HXLINE(  39)			this->addChild(this->hpBar);
HXLINE(  40)			this->mpBar =  ::ui::StatusBar_obj::__alloc( HX_CTX ,176,16,6325472,5526612,null(),null());
HXLINE(  41)			this->mpBar->set_x(( (Float)(6) ));
HXLINE(  42)			this->mpBar->set_y(( (Float)(64) ));
HXLINE(  43)			this->addChild(this->mpBar);
            		}
HXLINE(  46)		this->eGrid =  ::ui::panels::itemgrids::EquippedGrid_obj::__alloc( HX_CTX ,null(),this->player->slotTypes,this->player,null(),null());
HXLINE(  47)		this->eGrid->set_x(( (Float)(8) ));
HXLINE(  48)		this->eGrid->set_y(( (Float)(88) ));
HXLINE(  49)		this->addChild(this->eGrid);
HXLINE(  50)		this->eGrid->setItems(this->player->equipment,null());
HXLINE(  51)		this->iGrid =  ::ui::panels::itemgrids::InventoryGrid_obj::__alloc( HX_CTX ,null(),this->player,4,null(),null());
HXLINE(  52)		this->iGrid->set_x(( (Float)(8) ));
HXLINE(  53)		this->iGrid->set_y(( (Float)(132) ));
HXLINE(  54)		this->addChild(this->iGrid);
HXLINE(  55)		this->iGrid->setItems(this->player->equipment,null());
            	}

Dynamic MyPlayerToolTip_obj::__CreateEmpty() { return new MyPlayerToolTip_obj; }

void *MyPlayerToolTip_obj::_hx_vtable = 0;

Dynamic MyPlayerToolTip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MyPlayerToolTip_obj > _hx_result = new MyPlayerToolTip_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MyPlayerToolTip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0637743c) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0637743c;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x60b7ae07) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x60b7ae07;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void MyPlayerToolTip_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_eacc4eb45776a72c_58_draw)
HXLINE(  59)		this->hpBar->draw(this->player->hp,this->player->maxHP,this->player->maxHPBoost,this->player->maxHPMax);
HXLINE(  60)		{
HXLINE(  60)			 ::ui::StatusBar tmp = this->mpBar;
HXDLIN(  60)			if (::hx::IsNotNull( tmp )) {
HXLINE(  60)				tmp->draw(this->player->mp,this->player->maxMP,this->player->maxMPBoost,this->player->maxMPMax);
            			}
            		}
HXLINE(  61)		this->super::draw();
            	}



::hx::ObjectPtr< MyPlayerToolTip_obj > MyPlayerToolTip_obj::__new(::String accountName, ::Xml charXML) {
	::hx::ObjectPtr< MyPlayerToolTip_obj > __this = new MyPlayerToolTip_obj();
	__this->__construct(accountName,charXML);
	return __this;
}

::hx::ObjectPtr< MyPlayerToolTip_obj > MyPlayerToolTip_obj::__alloc(::hx::Ctx *_hx_ctx,::String accountName, ::Xml charXML) {
	MyPlayerToolTip_obj *__this = (MyPlayerToolTip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MyPlayerToolTip_obj), true, "ui.tooltip.MyPlayerToolTip"));
	*(void **)__this = MyPlayerToolTip_obj::_hx_vtable;
	__this->__construct(accountName,charXML);
	return __this;
}

MyPlayerToolTip_obj::MyPlayerToolTip_obj()
{
}

void MyPlayerToolTip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MyPlayerToolTip);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(playerPanel,"playerPanel");
	HX_MARK_MEMBER_NAME(hpBar,"hpBar");
	HX_MARK_MEMBER_NAME(mpBar,"mpBar");
	HX_MARK_MEMBER_NAME(eGrid,"eGrid");
	HX_MARK_MEMBER_NAME(iGrid,"iGrid");
	 ::ui::tooltip::ToolTip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MyPlayerToolTip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(playerPanel,"playerPanel");
	HX_VISIT_MEMBER_NAME(hpBar,"hpBar");
	HX_VISIT_MEMBER_NAME(mpBar,"mpBar");
	HX_VISIT_MEMBER_NAME(eGrid,"eGrid");
	HX_VISIT_MEMBER_NAME(iGrid,"iGrid");
	 ::ui::tooltip::ToolTip_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MyPlayerToolTip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"hpBar") ) { return ::hx::Val( hpBar ); }
		if (HX_FIELD_EQ(inName,"mpBar") ) { return ::hx::Val( mpBar ); }
		if (HX_FIELD_EQ(inName,"eGrid") ) { return ::hx::Val( eGrid ); }
		if (HX_FIELD_EQ(inName,"iGrid") ) { return ::hx::Val( iGrid ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerPanel") ) { return ::hx::Val( playerPanel ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MyPlayerToolTip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"hpBar") ) { hpBar=inValue.Cast<  ::ui::StatusBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mpBar") ) { mpBar=inValue.Cast<  ::ui::StatusBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eGrid") ) { eGrid=inValue.Cast<  ::ui::panels::itemgrids::EquippedGrid >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iGrid") ) { iGrid=inValue.Cast<  ::ui::panels::itemgrids::InventoryGrid >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::objects::Player >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerPanel") ) { playerPanel=inValue.Cast<  ::ui::GameObjectListItem >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MyPlayerToolTip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("playerPanel",e3,1f,31,c4));
	outFields->push(HX_("hpBar",ab,a3,e6,2b));
	outFields->push(HX_("mpBar",30,8a,e7,0c));
	outFields->push(HX_("eGrid",cb,99,bd,56));
	outFields->push(HX_("iGrid",cf,eb,57,a4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MyPlayerToolTip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::Player */ ,(int)offsetof(MyPlayerToolTip_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::ui::GameObjectListItem */ ,(int)offsetof(MyPlayerToolTip_obj,playerPanel),HX_("playerPanel",e3,1f,31,c4)},
	{::hx::fsObject /*  ::ui::StatusBar */ ,(int)offsetof(MyPlayerToolTip_obj,hpBar),HX_("hpBar",ab,a3,e6,2b)},
	{::hx::fsObject /*  ::ui::StatusBar */ ,(int)offsetof(MyPlayerToolTip_obj,mpBar),HX_("mpBar",30,8a,e7,0c)},
	{::hx::fsObject /*  ::ui::panels::itemgrids::EquippedGrid */ ,(int)offsetof(MyPlayerToolTip_obj,eGrid),HX_("eGrid",cb,99,bd,56)},
	{::hx::fsObject /*  ::ui::panels::itemgrids::InventoryGrid */ ,(int)offsetof(MyPlayerToolTip_obj,iGrid),HX_("iGrid",cf,eb,57,a4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MyPlayerToolTip_obj_sStaticStorageInfo = 0;
#endif

static ::String MyPlayerToolTip_obj_sMemberFields[] = {
	HX_("player",61,eb,b8,37),
	HX_("playerPanel",e3,1f,31,c4),
	HX_("hpBar",ab,a3,e6,2b),
	HX_("mpBar",30,8a,e7,0c),
	HX_("eGrid",cb,99,bd,56),
	HX_("iGrid",cf,eb,57,a4),
	HX_("draw",04,2c,70,42),
	::String(null()) };

::hx::Class MyPlayerToolTip_obj::__mClass;

void MyPlayerToolTip_obj::__register()
{
	MyPlayerToolTip_obj _hx_dummy;
	MyPlayerToolTip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.tooltip.MyPlayerToolTip",d1,92,44,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MyPlayerToolTip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MyPlayerToolTip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MyPlayerToolTip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MyPlayerToolTip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tooltip
