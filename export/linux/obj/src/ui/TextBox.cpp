// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_core_PlayerModel
#include <core/PlayerModel.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_Timer
#include <openfl/utils/Timer.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_TextBox
#include <ui/TextBox.h>
#endif
#ifndef INCLUDED_ui_TextBoxLine
#include <ui/TextBoxLine.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_24_new,"ui.TextBox","new",0xa8e89a16,"ui.TextBox.new","ui/TextBox.hx",24,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_88_onAdded,"ui.TextBox","onAdded",0x8a9c4fd7,"ui.TextBox.onAdded","ui/TextBox.hx",88,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_95_onClick,"ui.TextBox","onClick",0xb6b6f75f,"ui.TextBox.onClick","ui/TextBox.hx",95,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_98_addText,"ui.TextBox","addText",0x6151ec24,"ui.TextBox.addText","ui/TextBox.hx",98,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_110_addTextFull,"ui.TextBox","addTextFull",0x57c2e3d3,"ui.TextBox.addTextFull","ui/TextBox.hx",110,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_123_clearTextSprite,"ui.TextBox","clearTextSprite",0x7122a735,"ui.TextBox.clearTextSprite","ui/TextBox.hx",123,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_129_addTextBlock,"ui.TextBox","addTextBlock",0x1f397689,"ui.TextBox.addTextBlock","ui/TextBox.hx",129,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_140_refreshStatusBox,"ui.TextBox","refreshStatusBox",0x330be928,"ui.TextBox.refreshStatusBox","ui/TextBox.hx",140,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_163_insertTellPrefix,"ui.TextBox","insertTellPrefix",0x459f0fc6,"ui.TextBox.insertTellPrefix","ui/TextBox.hx",163,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_183_selectInput,"ui.TextBox","selectInput",0xf72f3724,"ui.TextBox.selectInput","ui/TextBox.hx",183,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_197_unselectInput,"ui.TextBox","unselectInput",0x22ad86eb,"ui.TextBox.unselectInput","ui/TextBox.hx",197,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_212_placeTextField,"ui.TextBox","placeTextField",0x34608510,"ui.TextBox.placeTextField","ui/TextBox.hx",212,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_219_onTimer,"ui.TextBox","onTimer",0x7e8e3adc,"ui.TextBox.onTimer","ui/TextBox.hx",219,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_222_onAddedToStage,"ui.TextBox","onAddedToStage",0xf95a482c,"ui.TextBox.onAddedToStage","ui/TextBox.hx",222,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_230_onRemovedFromStage,"ui.TextBox","onRemovedFromStage",0x9cfc5f7d,"ui.TextBox.onRemovedFromStage","ui/TextBox.hx",230,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_236_onKeyUp,"ui.TextBox","onKeyUp",0x4d5734f1,"ui.TextBox.onKeyUp","ui/TextBox.hx",236,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_286_onInputFieldKeyUp,"ui.TextBox","onInputFieldKeyUp",0x98390941,"ui.TextBox.onInputFieldKeyUp","ui/TextBox.hx",286,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_29_boot,"ui.TextBox","boot",0x1ab739bc,"ui.TextBox.boot","ui/TextBox.hx",29,0x16dd255b)
HX_LOCAL_STACK_FRAME(_hx_pos_19d84b28d5fe09a7_30_boot,"ui.TextBox","boot",0x1ab739bc,"ui.TextBox.boot","ui/TextBox.hx",30,0x16dd255b)
namespace ui{

void TextBox_obj::__construct( ::game::GameSprite gs,int w,int h){
            	HX_GC_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_24_new)
HXLINE(  44)		this->selectedMessageIdx = -1;
HXLINE(  42)		this->currentTeller = 0;
HXLINE(  40)		this->lc = 0;
HXLINE(  39)		this->showMax = false;
HXLINE(  37)		this->textSpriteYPos = ((Float)0.0);
HXLINE(  36)		this->h = 0;
HXLINE(  35)		this->w = 0;
HXLINE(  48)		super::__construct();
HXLINE(  50)		this->tellers = ::Array_obj< ::String >::__new(0);
HXLINE(  51)		this->timer =  ::openfl::utils::Timer_obj::__alloc( HX_CTX ,( (Float)(1000) ),null());
HXLINE(  52)		this->gs = gs;
HXLINE(  53)		this->w = w;
HXLINE(  54)		this->h = h;
HXLINE(  55)		this->decor =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/ui/chat.png",a2,ef,09,df),null()),null(),null());
HXLINE(  56)		this->decor->set_cacheAsBitmap(true);
HXLINE(  57)		this->decor->set_visible(false);
HXLINE(  58)		this->addChild(this->decor);
HXLINE(  59)		this->textSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  60)		this->textSprite->set_x(( (Float)(5) ));
HXLINE(  61)		 ::openfl::display::Sprite _hx_tmp = this->textSprite;
HXDLIN(  61)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,3,3,2,1,null(),null())));
HXLINE(  62)		this->textSprite->mouseEnabled = false;
HXLINE(  63)		this->textSprite->mouseChildren = false;
HXLINE(  64)		this->addChild(this->textSprite);
HXLINE(  65)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  66)		format->font = HX_("Faer",88,e2,8e,2e);
HXLINE(  67)		format->size = 14;
HXLINE(  68)		format->color = 16777215;
HXLINE(  69)		format->bold = true;
HXLINE(  70)		this->inputField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  71)		this->inputField->set_embedFonts(true);
HXLINE(  72)		this->inputField->set_defaultTextFormat(format);
HXLINE(  73)		this->inputField->set_type(1);
HXLINE(  74)		this->inputField->set_border(false);
HXLINE(  75)		this->inputField->set_maxChars(128);
HXLINE(  76)		 ::openfl::text::TextField _hx_tmp1 = this->inputField;
HXDLIN(  76)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,3,3,2,1,null(),null())));
HXLINE(  77)		this->inputField->addEventListener(HX_("keyUp",da,b9,fe,de),this->onInputFieldKeyUp_dyn(),null(),null(),null());
HXLINE(  78)		this->inputField->set_width(( (Float)((this->w - 10)) ));
HXLINE(  79)		this->inputField->set_height(( (Float)(18) ));
HXLINE(  80)		this->inputField->set_x(( (Float)(5) ));
HXLINE(  81)		this->inputField->set_y(( (Float)(-5) ));
HXLINE(  82)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  83)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
HXLINE(  84)		this->inputField->addEventListener(HX_("click",48,7c,5e,48),this->onClick_dyn(),null(),null(),null());
HXLINE(  85)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic TextBox_obj::__CreateEmpty() { return new TextBox_obj; }

void *TextBox_obj::_hx_vtable = 0;

Dynamic TextBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextBox_obj > _hx_result = new TextBox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TextBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			if (inClassId<=(int)0x00fcddca) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x00fcddca;
			} else {
				return inClassId==(int)0x0330636f;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void TextBox_obj::onAdded( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_88_onAdded)
HXLINE(  89)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  91)		this->addText((HX_("Faer v",de,b0,f2,19) + HX_("0.5",77,94,24,00)),( (unsigned int)(255) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,onAdded,(void))

void TextBox_obj::onClick( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_95_onClick)
HXDLIN(  95)		this->stage->set_focus(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,onClick,(void))

void TextBox_obj::addText(::String text,unsigned int textColor){
            	HX_GC_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_98_addText)
HXLINE(  99)		 ::ui::TextBoxLine textBoxLine =  ::ui::TextBoxLine_obj::__alloc( HX_CTX ,::lime::_hx_system::System_obj::getTimer(),HX_("",00,00,00,00),text,HX_("",00,00,00,00),false,16777215,textColor);
HXLINE( 100)		::ui::TextBox_obj::lines->push(textBoxLine);
HXLINE( 101)		this->refreshStatusBox();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextBox_obj,addText,(void))

void TextBox_obj::addTextFull(::String name,::String recipient,::String text,unsigned int nameColor,unsigned int textColor){
            	HX_GC_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_110_addTextFull)
HXLINE( 111)		bool fromMe;
HXDLIN( 111)		if ((recipient != HX_("",00,00,00,00))) {
HXLINE( 111)			fromMe = (name == ::Global_obj::playerModel->getName());
            		}
            		else {
HXLINE( 111)			fromMe = false;
            		}
HXLINE( 112)		bool toMe = (recipient == ::Global_obj::playerModel->getName());
HXLINE( 113)		 ::ui::TextBoxLine textBoxLine =  ::ui::TextBoxLine_obj::__alloc( HX_CTX ,::lime::_hx_system::System_obj::getTimer(),name,text,recipient,toMe,nameColor,textColor);
HXLINE( 114)		::ui::TextBox_obj::lines->push(textBoxLine);
HXLINE( 115)		this->refreshStatusBox();
HXLINE( 116)		if (toMe) {
HXLINE( 117)			bool _hx_tmp;
HXDLIN( 117)			if ((this->tellers->length != 0)) {
HXLINE( 117)				_hx_tmp = (this->tellers->__get((this->tellers->length - 1)) != name);
            			}
            			else {
HXLINE( 117)				_hx_tmp = true;
            			}
HXDLIN( 117)			if (_hx_tmp) {
HXLINE( 118)				this->tellers->push(name);
            			}
            		}
            		else {
HXLINE( 119)			bool _hx_tmp1;
HXDLIN( 119)			bool _hx_tmp2;
HXDLIN( 119)			bool _hx_tmp3;
HXDLIN( 119)			if ((recipient != HX_("*Guild*",e1,aa,77,d9))) {
HXLINE( 119)				_hx_tmp3 = fromMe;
            			}
            			else {
HXLINE( 119)				_hx_tmp3 = false;
            			}
HXDLIN( 119)			if (_hx_tmp3) {
HXLINE( 119)				_hx_tmp2 = (this->tellers->length == 0);
            			}
            			else {
HXLINE( 119)				_hx_tmp2 = false;
            			}
HXDLIN( 119)			if (!(_hx_tmp2)) {
HXLINE( 119)				_hx_tmp1 = (this->tellers->__get((this->tellers->length - 1)) != recipient);
            			}
            			else {
HXLINE( 119)				_hx_tmp1 = true;
            			}
HXDLIN( 119)			if (_hx_tmp1) {
HXLINE( 120)				this->tellers->push(recipient);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(TextBox_obj,addTextFull,(void))

void TextBox_obj::clearTextSprite(){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_123_clearTextSprite)
HXLINE( 124)		this->textSprite->removeChildren(null(),null());
HXLINE( 125)		this->textSprite->set_visible(false);
HXLINE( 126)		this->textSpriteYPos = ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBox_obj,clearTextSprite,(void))

void TextBox_obj::addTextBlock(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_129_addTextBlock)
HXLINE( 130)		 ::ui::SimpleText textSpr =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,false,395,null(),null());
HXLINE( 131)		textSpr->set_wordWrap(true);
HXLINE( 132)		textSpr->setHtmlText(text);
HXLINE( 133)		textSpr->updateMetrics();
HXLINE( 134)		textSpr->set_y(this->textSpriteYPos);
HXLINE( 135)		this->textSprite->addChild(textSpr);
HXLINE( 136)		this->textSprite->set_visible(true);
HXLINE( 137)		Float _hx_tmp = this->textSpriteYPos;
HXDLIN( 137)		this->textSpriteYPos = (_hx_tmp + (20 * textSpr->get_numLines()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,addTextBlock,(void))

void TextBox_obj::refreshStatusBox(){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_140_refreshStatusBox)
HXLINE( 141)		this->clearTextSprite();
HXLINE( 143)		int now = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 144)		int startL = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)((((::ui::TextBox_obj::lines->length - 1) - this->lc) - 10)) )));
HXLINE( 145)		int endL = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(::ui::TextBox_obj::lines->length) ),( (Float)(((startL + 10) + 1)) )));
HXLINE( 146)		{
HXLINE( 146)			int _g = startL;
HXDLIN( 146)			while((_g < endL)){
HXLINE( 146)				_g = (_g + 1);
HXLINE( 147)				 ::ui::TextBoxLine line = ::ui::TextBox_obj::lines->__get((_g - 1)).StaticCast<  ::ui::TextBoxLine >();
HXLINE( 148)				bool _hx_tmp;
HXDLIN( 148)				if (!(this->showMax)) {
HXLINE( 148)					_hx_tmp = (now <= (line->time + 20000));
            				}
            				else {
HXLINE( 148)					_hx_tmp = true;
            				}
HXDLIN( 148)				if (_hx_tmp) {
HXLINE( 149)					bool _hx_tmp1;
HXDLIN( 149)					if ((line->name != HX_("",00,00,00,00))) {
HXLINE( 149)						_hx_tmp1 = ::hx::IsNull( line->name );
            					}
            					else {
HXLINE( 149)						_hx_tmp1 = true;
            					}
HXDLIN( 149)					if (_hx_tmp1) {
HXLINE( 150)						::String _hx_tmp2 = ((HX_("<i><b><font color=\"#",37,b5,5b,e3) + ::StringTools_obj::hex(( (int)(line->textColor) ),6)) + HX_("\">",dc,1d,00,00));
HXDLIN( 150)						this->addTextBlock(((_hx_tmp2 + ::StringTools_obj::replace(line->text,HX_("<",3c,00,00,00),HX_("&lt;",4d,74,70,19))) + HX_("</b></i></font>",e5,b3,40,b8)));
HXLINE( 151)						continue;
            					}
HXLINE( 154)					::String _hx_tmp3 = ((HX_("<b><font color=\"#",48,f7,33,5d) + ::StringTools_obj::hex(( (int)(line->nameColor) ),6)) + HX_("\">[",ff,02,1a,00));
HXDLIN( 154)					::String _hx_tmp4 = (_hx_tmp3 + line->name);
HXDLIN( 154)					::String _hx_tmp5 = (_hx_tmp4 + ((HX_("]:</b></font> <i><font color=\"#",31,6a,a8,c5) + ::StringTools_obj::hex(( (int)(line->textColor) ),6)) + HX_("\">",dc,1d,00,00)));
HXDLIN( 154)					this->addTextBlock(((_hx_tmp5 + ::StringTools_obj::replace(line->text,HX_("<",3c,00,00,00),HX_("&lt;",4d,74,70,19))) + HX_("</font></i>",24,23,20,75)));
            				}
            			}
            		}
HXLINE( 160)		this->placeTextField();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBox_obj,refreshStatusBox,(void))

void TextBox_obj::insertTellPrefix(bool backward){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_163_insertTellPrefix)
HXLINE( 164)		this->inputField->set_text(HX_("/tell ",40,1e,56,d8));
HXLINE( 165)		if ((this->tellers->length != 0)) {
HXLINE( 166)			if (backward) {
HXLINE( 167)				this->currentTeller++;
            			}
            			else {
HXLINE( 169)				this->currentTeller--;
            			}
HXLINE( 171)			if ((this->currentTeller <= 0)) {
HXLINE( 172)				this->currentTeller = 0;
            			}
HXLINE( 174)			if ((this->currentTeller >= this->tellers->length)) {
HXLINE( 175)				this->currentTeller = (this->tellers->length - 1);
            			}
HXLINE( 177)			this->inputField->appendText((this->tellers->__get(this->currentTeller) + HX_(" ",20,00,00,00)));
            		}
HXLINE( 180)		 ::openfl::text::TextField _hx_tmp = this->inputField;
HXDLIN( 180)		int _hx_tmp1 = this->inputField->get_length();
HXDLIN( 180)		_hx_tmp->setSelection(_hx_tmp1,this->inputField->get_length());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,insertTellPrefix,(void))

void TextBox_obj::selectInput(){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_183_selectInput)
HXLINE( 184)		this->decor->set_visible(true);
HXLINE( 186)		this->inputField->set_type(1);
HXLINE( 187)		::ui::TextBox_obj::isInputtingText = true;
HXLINE( 188)		if (!(this->contains(this->inputField))) {
HXLINE( 189)			this->addChild(this->inputField);
            		}
HXLINE( 190)		if (::hx::IsNotNull( this->stage )) {
HXLINE( 191)			this->stage->set_focus(this->inputField);
            		}
HXLINE( 193)		this->placeTextField();
HXLINE( 194)		this->currentTeller = this->tellers->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBox_obj,selectInput,(void))

void TextBox_obj::unselectInput(){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_197_unselectInput)
HXLINE( 198)		if (::hx::IsNotNull( this->stage )) {
HXLINE( 199)			this->stage->set_focus(null());
            		}
HXLINE( 201)		this->decor->set_visible(false);
HXLINE( 203)		if (this->contains(this->inputField)) {
HXLINE( 204)			::ui::TextBox_obj::isInputtingText = false;
HXLINE( 205)			this->removeChild(this->inputField);
            		}
HXLINE( 208)		this->placeTextField();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBox_obj,unselectInput,(void))

void TextBox_obj::placeTextField(){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_212_placeTextField)
HXDLIN( 212)		if (this->contains(this->inputField)) {
HXLINE( 213)			 ::openfl::display::Sprite _hx_tmp = this->textSprite;
HXDLIN( 213)			int _hx_tmp1 = (this->h - 20);
HXDLIN( 213)			Float _hx_tmp2 = (( (Float)(_hx_tmp1) ) - this->inputField->get_height());
HXDLIN( 213)			_hx_tmp->set_y((_hx_tmp2 - this->textSpriteYPos));
            		}
            		else {
HXLINE( 215)			this->textSprite->set_y((( (Float)((this->h - 4)) ) - this->textSpriteYPos));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextBox_obj,placeTextField,(void))

void TextBox_obj::onTimer( ::openfl::events::TimerEvent event){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_219_onTimer)
HXDLIN( 219)		this->refreshStatusBox();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,onTimer,(void))

void TextBox_obj::onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_222_onAddedToStage)
HXLINE( 223)		this->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyUp_dyn(),null(),null(),null());
HXLINE( 224)		this->inputField->set_y(( (Float)((this->h - 25)) ));
HXLINE( 225)		this->placeTextField();
HXLINE( 226)		this->timer->addEventListener(HX_("timer",c5,bf,35,10),this->onTimer_dyn(),null(),null(),null());
HXLINE( 227)		this->timer->start();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,onAddedToStage,(void))

void TextBox_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_230_onRemovedFromStage)
HXLINE( 231)		this->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyUp_dyn(),null());
HXLINE( 232)		this->timer->stop();
HXLINE( 233)		this->timer->removeEventListener(HX_("timer",c5,bf,35,10),this->onTimer_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,onRemovedFromStage,(void))

void TextBox_obj::onKeyUp( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_236_onKeyUp)
HXLINE( 237)		unsigned char keyCode = ( (unsigned char)(event->keyCode) );
HXLINE( 238)		if ((keyCode == ::util::Settings_obj::chatCmd)) {
HXLINE( 239)			if (::hx::IsNull( this->stage->get_focus() )) {
HXLINE( 240)				this->selectInput();
HXLINE( 241)				this->inputField->set_text(HX_("/",2f,00,00,00));
HXLINE( 242)				 ::openfl::text::TextField _hx_tmp = this->inputField;
HXDLIN( 242)				int _hx_tmp1 = this->inputField->get_length();
HXDLIN( 242)				_hx_tmp->setSelection(_hx_tmp1,this->inputField->get_length());
            			}
            		}
            		else {
HXLINE( 244)			if ((keyCode == ::util::Settings_obj::chat)) {
HXLINE( 245)				if (::hx::IsNull( this->stage->get_focus() )) {
HXLINE( 246)					this->selectInput();
            				}
            			}
            			else {
HXLINE( 247)				if ((keyCode == ::util::Settings_obj::respond)) {
HXLINE( 248)					if (::hx::IsNull( this->stage->get_focus() )) {
HXLINE( 249)						this->selectInput();
            					}
HXLINE( 251)					this->insertTellPrefix(event->shiftKey);
            				}
            				else {
HXLINE( 252)					if ((keyCode == ::util::Settings_obj::guildChat)) {
HXLINE( 253)						if (::hx::IsNull( this->stage->get_focus() )) {
HXLINE( 254)							this->selectInput();
HXLINE( 255)							this->inputField->set_text(HX_("/g ",c8,03,24,00));
HXLINE( 256)							 ::openfl::text::TextField _hx_tmp2 = this->inputField;
HXDLIN( 256)							int _hx_tmp3 = this->inputField->get_length();
HXDLIN( 256)							_hx_tmp2->setSelection(_hx_tmp3,this->inputField->get_length());
            						}
            					}
            					else {
HXLINE( 258)						if ((keyCode == ::util::Settings_obj::chatUp)) {
HXLINE( 259)							if (!(this->showMax)) {
HXLINE( 260)								this->showMax = true;
            							}
            							else {
HXLINE( 262)								this->lc = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)((::ui::TextBox_obj::lines->length - 10)) ),( (Float)((this->lc + 10)) ))));
            							}
HXLINE( 264)							this->refreshStatusBox();
            						}
            						else {
HXLINE( 265)							if ((keyCode == ::util::Settings_obj::chatDown)) {
HXLINE( 266)								if ((this->lc == 0)) {
HXLINE( 267)									this->showMax = false;
            								}
            								else {
HXLINE( 269)									this->lc = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)((this->lc - 10)) )));
            								}
HXLINE( 271)								this->refreshStatusBox();
            							}
            							else {
HXLINE( 272)								if ((keyCode == ( (unsigned char)(38) ))) {
HXLINE( 273)									bool _hx_tmp4;
HXDLIN( 273)									 ::openfl::display::InteractiveObject _hx_tmp5 = this->stage->get_focus();
HXDLIN( 273)									if (::hx::IsInstanceEq( _hx_tmp5,this->inputField )) {
HXLINE( 273)										_hx_tmp4 = (this->selectedMessageIdx < (::util::Settings_obj::messagesSent->length - 1));
            									}
            									else {
HXLINE( 273)										_hx_tmp4 = false;
            									}
HXDLIN( 273)									if (_hx_tmp4) {
HXLINE( 274)										this->inputField->set_text(::util::Settings_obj::messagesSent->__get(((::util::Settings_obj::messagesSent->length - ++this->selectedMessageIdx) - 1)));
HXLINE( 275)										 ::openfl::text::TextField _hx_tmp6 = this->inputField;
HXDLIN( 275)										int _hx_tmp7 = this->inputField->get_length();
HXDLIN( 275)										_hx_tmp6->setSelection(_hx_tmp7,this->inputField->get_length());
            									}
            								}
            								else {
HXLINE( 277)									if ((keyCode == ( (unsigned char)(40) ))) {
HXLINE( 278)										bool _hx_tmp8;
HXDLIN( 278)										 ::openfl::display::InteractiveObject _hx_tmp9 = this->stage->get_focus();
HXDLIN( 278)										if (::hx::IsInstanceEq( _hx_tmp9,this->inputField )) {
HXLINE( 278)											_hx_tmp8 = (this->selectedMessageIdx > 0);
            										}
            										else {
HXLINE( 278)											_hx_tmp8 = false;
            										}
HXDLIN( 278)										if (_hx_tmp8) {
HXLINE( 279)											this->inputField->set_text(::util::Settings_obj::messagesSent->__get(((::util::Settings_obj::messagesSent->length - --this->selectedMessageIdx) - 1)));
HXLINE( 280)											 ::openfl::text::TextField _hx_tmp10 = this->inputField;
HXDLIN( 280)											int _hx_tmp11 = this->inputField->get_length();
HXDLIN( 280)											_hx_tmp10->setSelection(_hx_tmp11,this->inputField->get_length());
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,onKeyUp,(void))

void TextBox_obj::onInputFieldKeyUp( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_286_onInputFieldKeyUp)
HXDLIN( 286)		if ((event->keyCode == ::util::Settings_obj::chat)) {
HXLINE( 287)			if ((this->inputField->get_text().length != 0)) {
HXLINE( 288)				if (::hx::IsNotNull( this->gs->map->player )) {
HXLINE( 289)					::network::NetworkHandler_obj::playerText(this->inputField->get_text());
            				}
HXLINE( 290)				::Array< ::String > _hx_tmp = ::util::Settings_obj::messagesSent;
HXDLIN( 290)				_hx_tmp->push(this->inputField->get_text());
HXLINE( 291)				this->selectedMessageIdx = 0;
HXLINE( 292)				this->inputField->set_text(HX_("",00,00,00,00));
            			}
HXLINE( 295)			this->unselectInput();
HXLINE( 296)			event->stopImmediatePropagation();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextBox_obj,onInputFieldKeyUp,(void))

bool TextBox_obj::isInputtingText;

::Array< ::Dynamic> TextBox_obj::lines;


::hx::ObjectPtr< TextBox_obj > TextBox_obj::__new( ::game::GameSprite gs,int w,int h) {
	::hx::ObjectPtr< TextBox_obj > __this = new TextBox_obj();
	__this->__construct(gs,w,h);
	return __this;
}

::hx::ObjectPtr< TextBox_obj > TextBox_obj::__alloc(::hx::Ctx *_hx_ctx, ::game::GameSprite gs,int w,int h) {
	TextBox_obj *__this = (TextBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextBox_obj), true, "ui.TextBox"));
	*(void **)__this = TextBox_obj::_hx_vtable;
	__this->__construct(gs,w,h);
	return __this;
}

TextBox_obj::TextBox_obj()
{
}

void TextBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextBox);
	HX_MARK_MEMBER_NAME(textSprite,"textSprite");
	HX_MARK_MEMBER_NAME(gs,"gs");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(textSpriteYPos,"textSpriteYPos");
	HX_MARK_MEMBER_NAME(inputField,"inputField");
	HX_MARK_MEMBER_NAME(showMax,"showMax");
	HX_MARK_MEMBER_NAME(lc,"lc");
	HX_MARK_MEMBER_NAME(tellers,"tellers");
	HX_MARK_MEMBER_NAME(currentTeller,"currentTeller");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(selectedMessageIdx,"selectedMessageIdx");
	HX_MARK_MEMBER_NAME(decor,"decor");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(textSprite,"textSprite");
	HX_VISIT_MEMBER_NAME(gs,"gs");
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(textSpriteYPos,"textSpriteYPos");
	HX_VISIT_MEMBER_NAME(inputField,"inputField");
	HX_VISIT_MEMBER_NAME(showMax,"showMax");
	HX_VISIT_MEMBER_NAME(lc,"lc");
	HX_VISIT_MEMBER_NAME(tellers,"tellers");
	HX_VISIT_MEMBER_NAME(currentTeller,"currentTeller");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(selectedMessageIdx,"selectedMessageIdx");
	HX_VISIT_MEMBER_NAME(decor,"decor");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return ::hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"h") ) { return ::hx::Val( h ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"gs") ) { return ::hx::Val( gs ); }
		if (HX_FIELD_EQ(inName,"lc") ) { return ::hx::Val( lc ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return ::hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"decor") ) { return ::hx::Val( decor ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"showMax") ) { return ::hx::Val( showMax ); }
		if (HX_FIELD_EQ(inName,"tellers") ) { return ::hx::Val( tellers ); }
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		if (HX_FIELD_EQ(inName,"onClick") ) { return ::hx::Val( onClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"addText") ) { return ::hx::Val( addText_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTimer") ) { return ::hx::Val( onTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return ::hx::Val( onKeyUp_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textSprite") ) { return ::hx::Val( textSprite ); }
		if (HX_FIELD_EQ(inName,"inputField") ) { return ::hx::Val( inputField ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addTextFull") ) { return ::hx::Val( addTextFull_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectInput") ) { return ::hx::Val( selectInput_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addTextBlock") ) { return ::hx::Val( addTextBlock_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentTeller") ) { return ::hx::Val( currentTeller ); }
		if (HX_FIELD_EQ(inName,"unselectInput") ) { return ::hx::Val( unselectInput_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"textSpriteYPos") ) { return ::hx::Val( textSpriteYPos ); }
		if (HX_FIELD_EQ(inName,"placeTextField") ) { return ::hx::Val( placeTextField_dyn() ); }
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"clearTextSprite") ) { return ::hx::Val( clearTextSprite_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"refreshStatusBox") ) { return ::hx::Val( refreshStatusBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"insertTellPrefix") ) { return ::hx::Val( insertTellPrefix_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onInputFieldKeyUp") ) { return ::hx::Val( onInputFieldKeyUp_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"selectedMessageIdx") ) { return ::hx::Val( selectedMessageIdx ); }
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextBox_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { outValue = ( lines ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isInputtingText") ) { outValue = ( isInputtingText ); return true; }
	}
	return false;
}

::hx::Val TextBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"gs") ) { gs=inValue.Cast<  ::game::GameSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lc") ) { lc=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::openfl::utils::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"decor") ) { decor=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"showMax") ) { showMax=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tellers") ) { tellers=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textSprite") ) { textSprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputField") ) { inputField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentTeller") ) { currentTeller=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"textSpriteYPos") ) { textSpriteYPos=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"selectedMessageIdx") ) { selectedMessageIdx=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextBox_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { lines=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isInputtingText") ) { isInputtingText=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void TextBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("textSprite",92,5c,86,fa));
	outFields->push(HX_("gs",2c,5a,00,00));
	outFields->push(HX_("w",77,00,00,00));
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("textSpriteYPos",4d,20,76,de));
	outFields->push(HX_("inputField",50,5c,ce,7e));
	outFields->push(HX_("showMax",a7,69,9f,7b));
	outFields->push(HX_("lc",77,5e,00,00));
	outFields->push(HX_("tellers",d5,f9,bb,b0));
	outFields->push(HX_("currentTeller",f7,49,f0,b3));
	outFields->push(HX_("timer",c5,bf,35,10));
	outFields->push(HX_("selectedMessageIdx",f1,ea,a5,b1));
	outFields->push(HX_("decor",65,0f,20,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(TextBox_obj,textSprite),HX_("textSprite",92,5c,86,fa)},
	{::hx::fsObject /*  ::game::GameSprite */ ,(int)offsetof(TextBox_obj,gs),HX_("gs",2c,5a,00,00)},
	{::hx::fsInt,(int)offsetof(TextBox_obj,w),HX_("w",77,00,00,00)},
	{::hx::fsInt,(int)offsetof(TextBox_obj,h),HX_("h",68,00,00,00)},
	{::hx::fsFloat,(int)offsetof(TextBox_obj,textSpriteYPos),HX_("textSpriteYPos",4d,20,76,de)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextBox_obj,inputField),HX_("inputField",50,5c,ce,7e)},
	{::hx::fsBool,(int)offsetof(TextBox_obj,showMax),HX_("showMax",a7,69,9f,7b)},
	{::hx::fsInt,(int)offsetof(TextBox_obj,lc),HX_("lc",77,5e,00,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(TextBox_obj,tellers),HX_("tellers",d5,f9,bb,b0)},
	{::hx::fsInt,(int)offsetof(TextBox_obj,currentTeller),HX_("currentTeller",f7,49,f0,b3)},
	{::hx::fsObject /*  ::openfl::utils::Timer */ ,(int)offsetof(TextBox_obj,timer),HX_("timer",c5,bf,35,10)},
	{::hx::fsInt,(int)offsetof(TextBox_obj,selectedMessageIdx),HX_("selectedMessageIdx",f1,ea,a5,b1)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(TextBox_obj,decor),HX_("decor",65,0f,20,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextBox_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &TextBox_obj::isInputtingText,HX_("isInputtingText",7b,fc,74,06)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &TextBox_obj::lines,HX_("lines",ff,dd,01,75)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextBox_obj_sMemberFields[] = {
	HX_("textSprite",92,5c,86,fa),
	HX_("gs",2c,5a,00,00),
	HX_("w",77,00,00,00),
	HX_("h",68,00,00,00),
	HX_("textSpriteYPos",4d,20,76,de),
	HX_("inputField",50,5c,ce,7e),
	HX_("showMax",a7,69,9f,7b),
	HX_("lc",77,5e,00,00),
	HX_("tellers",d5,f9,bb,b0),
	HX_("currentTeller",f7,49,f0,b3),
	HX_("timer",c5,bf,35,10),
	HX_("selectedMessageIdx",f1,ea,a5,b1),
	HX_("decor",65,0f,20,d7),
	HX_("onAdded",21,73,81,b2),
	HX_("onClick",a9,1a,9c,de),
	HX_("addText",6e,0f,37,89),
	HX_("addTextFull",1d,74,1c,78),
	HX_("clearTextSprite",7f,24,2b,81),
	HX_("addTextBlock",ff,26,3e,4d),
	HX_("refreshStatusBox",9e,0c,71,2a),
	HX_("insertTellPrefix",3c,33,04,3d),
	HX_("selectInput",6e,c7,88,17),
	HX_("unselectInput",b5,3d,c3,38),
	HX_("placeTextField",06,bf,4a,71),
	HX_("onTimer",26,5e,73,a6),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onKeyUp",3b,58,3c,75),
	HX_("onInputFieldKeyUp",0b,ed,52,19),
	::String(null()) };

static void TextBox_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextBox_obj::isInputtingText,"isInputtingText");
	HX_MARK_MEMBER_NAME(TextBox_obj::lines,"lines");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextBox_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextBox_obj::isInputtingText,"isInputtingText");
	HX_VISIT_MEMBER_NAME(TextBox_obj::lines,"lines");
};

#endif

::hx::Class TextBox_obj::__mClass;

static ::String TextBox_obj_sStaticFields[] = {
	HX_("isInputtingText",7b,fc,74,06),
	HX_("lines",ff,dd,01,75),
	::String(null())
};

void TextBox_obj::__register()
{
	TextBox_obj _hx_dummy;
	TextBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.TextBox",24,97,28,1a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextBox_obj::__GetStatic;
	__mClass->mSetStaticField = &TextBox_obj::__SetStatic;
	__mClass->mMarkFunc = TextBox_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextBox_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextBox_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextBox_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextBox_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_29_boot)
HXDLIN(  29)		isInputtingText = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_19d84b28d5fe09a7_30_boot)
HXDLIN(  30)		lines = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace ui
