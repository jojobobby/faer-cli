// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_menu_MenuOption
#include <ui/menu/MenuOption.h>
#endif
#ifndef INCLUDED_util_CachingColorTransformer
#include <util/CachingColorTransformer.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_88de7376f9975ceb_14_new,"ui.menu.MenuOption","new",0x2151c45b,"ui.menu.MenuOption.new","ui/menu/MenuOption.hx",14,0xdb64a715)
HX_LOCAL_STACK_FRAME(_hx_pos_88de7376f9975ceb_49_setColorTransform,"ui.menu.MenuOption","setColorTransform",0x30383406,"ui.menu.MenuOption.setColorTransform","ui/menu/MenuOption.hx",49,0xdb64a715)
HX_LOCAL_STACK_FRAME(_hx_pos_88de7376f9975ceb_67_redrawSize,"ui.menu.MenuOption","redrawSize",0xda916afd,"ui.menu.MenuOption.redrawSize","ui/menu/MenuOption.hx",67,0xdb64a715)
HX_LOCAL_STACK_FRAME(_hx_pos_88de7376f9975ceb_71_onMouseOver,"ui.menu.MenuOption","onMouseOver",0xf7ab13f5,"ui.menu.MenuOption.onMouseOver","ui/menu/MenuOption.hx",71,0xdb64a715)
HX_LOCAL_STACK_FRAME(_hx_pos_88de7376f9975ceb_75_onMouseOut,"ui.menu.MenuOption","onMouseOut",0x21410d0d,"ui.menu.MenuOption.onMouseOut","ui/menu/MenuOption.hx",75,0xdb64a715)
HX_LOCAL_STACK_FRAME(_hx_pos_88de7376f9975ceb_15_boot,"ui.menu.MenuOption","boot",0xfe530bd7,"ui.menu.MenuOption.boot","ui/menu/MenuOption.hx",15,0xdb64a715)
namespace ui{
namespace menu{

void MenuOption_obj::__construct( ::openfl::display::BitmapData origIconBitmapData,int color,::String textStr){
            	HX_GC_STACKFRAME(&_hx_pos_88de7376f9975ceb_14_new)
HXLINE(  21)		this->ct = null();
HXLINE(  24)		super::__construct();
HXLINE(  26)		this->origIconBitmapData = origIconBitmapData;
HXLINE(  27)		this->iconBitmapData = ::util::TextureRedrawer_obj::redraw(origIconBitmapData,this->redrawSize(),true,0,null(),null(),null());
HXLINE(  28)		this->icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->iconBitmapData,null(),null());
HXLINE(  29)		 ::openfl::display::Bitmap _hx_tmp = this->icon;
HXDLIN(  29)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  30)		this->icon->set_x(( (Float)(-12) ));
HXLINE(  31)		this->icon->set_y(( (Float)(-12) ));
HXLINE(  32)		this->addChild(this->icon);
HXLINE(  33)		this->text =  ::ui::SimpleText_obj::__alloc( HX_CTX ,18,color,false,0,0,null());
HXLINE(  34)		this->text->setBold(true);
HXLINE(  35)		this->text->set_text(textStr);
HXLINE(  36)		this->text->updateMetrics();
HXLINE(  37)		 ::ui::SimpleText _hx_tmp1 = this->text;
HXDLIN(  37)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  38)		this->text->set_x(( (Float)(20) ));
HXLINE(  39)		this->text->set_y(( (Float)(-6) ));
HXLINE(  40)		this->addChild(this->text);
HXLINE(  42)		this->get_graphics()->clear();
HXLINE(  43)		this->get_graphics()->beginFill(16777215,0);
HXLINE(  44)		 ::openfl::display::Graphics _hx_tmp2 = this->get_graphics();
HXDLIN(  44)		Float _hx_tmp3 = (this->text->get_x() - ( (Float)(4) ));
HXDLIN(  44)		Float _hx_tmp4 = (this->text->get_y() - ( (Float)(4) ));
HXDLIN(  44)		Float _hx_tmp5 = (this->text->get_width() + 8);
HXDLIN(  44)		_hx_tmp2->drawRect(_hx_tmp3,_hx_tmp4,_hx_tmp5,(this->text->get_height() + 8));
HXLINE(  45)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE(  46)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null(),null(),null());
            	}

Dynamic MenuOption_obj::__CreateEmpty() { return new MenuOption_obj; }

void *MenuOption_obj::_hx_vtable = 0;

Dynamic MenuOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuOption_obj > _hx_result = new MenuOption_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MenuOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0cae573b) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x0cae573b;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void MenuOption_obj::setColorTransform( ::openfl::geom::ColorTransform ct){
            	HX_STACKFRAME(&_hx_pos_88de7376f9975ceb_49_setColorTransform)
HXLINE(  50)		 ::openfl::display::BitmapData transformedBitmapData = null();
HXLINE(  51)		if (::hx::IsInstanceEq( ct,this->ct )) {
HXLINE(  52)			return;
            		}
HXLINE(  54)		this->ct = ct;
HXLINE(  55)		if (::hx::IsNull( this->ct )) {
HXLINE(  56)			this->icon->set_bitmapData(this->iconBitmapData);
HXLINE(  57)			this->text->get_transform()->set_colorTransform(::util::ColorUtils_obj::identity);
            		}
            		else {
HXLINE(  59)			transformedBitmapData = ::util::CachingColorTransformer_obj::transformBitmapData(this->origIconBitmapData,this->ct);
HXLINE(  60)			transformedBitmapData = ::util::TextureRedrawer_obj::redraw(transformedBitmapData,this->redrawSize(),true,0,null(),null(),null());
HXLINE(  61)			this->icon->set_bitmapData(transformedBitmapData);
HXLINE(  62)			this->text->get_transform()->set_colorTransform(this->ct);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuOption_obj,setColorTransform,(void))

int MenuOption_obj::redrawSize(){
            	HX_STACKFRAME(&_hx_pos_88de7376f9975ceb_67_redrawSize)
HXDLIN(  67)		return ::Std_obj::_hx_int((( (Float)(40) ) / (( (Float)(this->origIconBitmapData->width) ) / ( (Float)(8) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuOption_obj,redrawSize,return )

void MenuOption_obj::onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_88de7376f9975ceb_71_onMouseOver)
HXDLIN(  71)		this->setColorTransform(::ui::menu::MenuOption_obj::mouseOverCT);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuOption_obj,onMouseOver,(void))

void MenuOption_obj::onMouseOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_88de7376f9975ceb_75_onMouseOut)
HXDLIN(  75)		this->setColorTransform(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuOption_obj,onMouseOut,(void))

 ::openfl::geom::ColorTransform MenuOption_obj::mouseOverCT;


::hx::ObjectPtr< MenuOption_obj > MenuOption_obj::__new( ::openfl::display::BitmapData origIconBitmapData,int color,::String textStr) {
	::hx::ObjectPtr< MenuOption_obj > __this = new MenuOption_obj();
	__this->__construct(origIconBitmapData,color,textStr);
	return __this;
}

::hx::ObjectPtr< MenuOption_obj > MenuOption_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::BitmapData origIconBitmapData,int color,::String textStr) {
	MenuOption_obj *__this = (MenuOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuOption_obj), true, "ui.menu.MenuOption"));
	*(void **)__this = MenuOption_obj::_hx_vtable;
	__this->__construct(origIconBitmapData,color,textStr);
	return __this;
}

MenuOption_obj::MenuOption_obj()
{
}

void MenuOption_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuOption);
	HX_MARK_MEMBER_NAME(origIconBitmapData,"origIconBitmapData");
	HX_MARK_MEMBER_NAME(iconBitmapData,"iconBitmapData");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(ct,"ct");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuOption_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(origIconBitmapData,"origIconBitmapData");
	HX_VISIT_MEMBER_NAME(iconBitmapData,"iconBitmapData");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(ct,"ct");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ct") ) { return ::hx::Val( ct ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"redrawSize") ) { return ::hx::Val( redrawSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"iconBitmapData") ) { return ::hx::Val( iconBitmapData ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setColorTransform") ) { return ::hx::Val( setColorTransform_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"origIconBitmapData") ) { return ::hx::Val( origIconBitmapData ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuOption_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"mouseOverCT") ) { outValue = ( mouseOverCT ); return true; }
	}
	return false;
}

::hx::Val MenuOption_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ct") ) { ct=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"iconBitmapData") ) { iconBitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"origIconBitmapData") ) { origIconBitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuOption_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"mouseOverCT") ) { mouseOverCT=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

void MenuOption_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("origIconBitmapData",33,e2,c7,76));
	outFields->push(HX_("iconBitmapData",92,12,8c,de));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("ct",b1,56,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuOption_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MenuOption_obj,origIconBitmapData),HX_("origIconBitmapData",33,e2,c7,76)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MenuOption_obj,iconBitmapData),HX_("iconBitmapData",92,12,8c,de)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(MenuOption_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(MenuOption_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(MenuOption_obj,ct),HX_("ct",b1,56,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuOption_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &MenuOption_obj::mouseOverCT,HX_("mouseOverCT",0a,fd,86,8b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuOption_obj_sMemberFields[] = {
	HX_("origIconBitmapData",33,e2,c7,76),
	HX_("iconBitmapData",92,12,8c,de),
	HX_("icon",79,e7,b2,45),
	HX_("text",ad,cc,f9,4c),
	HX_("ct",b1,56,00,00),
	HX_("setColorTransform",cb,5e,21,43),
	HX_("redrawSize",98,19,25,3b),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onMouseOut",a8,bb,d4,81),
	::String(null()) };

static void MenuOption_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuOption_obj::mouseOverCT,"mouseOverCT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuOption_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuOption_obj::mouseOverCT,"mouseOverCT");
};

#endif

::hx::Class MenuOption_obj::__mClass;

static ::String MenuOption_obj_sStaticFields[] = {
	HX_("mouseOverCT",0a,fd,86,8b),
	::String(null())
};

void MenuOption_obj::__register()
{
	MenuOption_obj _hx_dummy;
	MenuOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.menu.MenuOption",e9,fa,b3,57);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuOption_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuOption_obj::__SetStatic;
	__mClass->mMarkFunc = MenuOption_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuOption_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuOption_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuOption_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuOption_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_88de7376f9975ceb_15_boot)
HXDLIN(  15)		mouseOverCT =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,((Float)0.86274509803921573),((Float)0.521568627450980427),null(),null(),null(),null(),null());
            	}
}

} // end namespace ui
} // end namespace menu
