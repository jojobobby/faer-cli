// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_Slot
#include <ui/Slot.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c27a9dff41d45842_17_new,"ui.Slot","new",0x0cd01f6a,"ui.Slot.new","ui/Slot.hx",17,0xc79aad65)
HX_LOCAL_STACK_FRAME(_hx_pos_c27a9dff41d45842_87_drawBackground,"ui.Slot","drawBackground",0x3a79ca48,"ui.Slot.drawBackground","ui/Slot.hx",87,0xc79aad65)
HX_LOCAL_STACK_FRAME(_hx_pos_c27a9dff41d45842_33_slotTypeToName,"ui.Slot","slotTypeToName",0xe70df094,"ui.Slot.slotTypeToName","ui/Slot.hx",33,0xc79aad65)
HX_LOCAL_STACK_FRAME(_hx_pos_c27a9dff41d45842_21_boot,"ui.Slot","boot",0x21645de8,"ui.Slot.boot","ui/Slot.hx",21,0xc79aad65)
namespace ui{

void Slot_obj::__construct(int itemType,int hotkey,::Array< int > cuts){
            	HX_GC_STACKFRAME(&_hx_pos_c27a9dff41d45842_17_new)
HXLINE(  24)		this->hotkey = 0;
HXLINE(  23)		this->itemType = 0;
HXLINE(  76)		super::__construct();
HXLINE(  78)		this->fill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,5526612,1);
HXLINE(  79)		this->path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  80)		this->graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(3)->init(0,this->fill)->init(1,this->path)->init(2,::util::GraphicsUtil_obj::END_FILL),true);
HXLINE(  81)		this->itemType = itemType;
HXLINE(  82)		this->hotkey = hotkey;
HXLINE(  83)		this->cuts = cuts;
HXLINE(  84)		this->drawBackground();
            	}

Dynamic Slot_obj::__CreateEmpty() { return new Slot_obj; }

void *Slot_obj::_hx_vtable = 0;

Dynamic Slot_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Slot_obj > _hx_result = new Slot_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Slot_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x5b0c6cf2) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x5b0c6cf2;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Slot_obj::drawBackground(){
            	HX_GC_STACKFRAME(&_hx_pos_c27a9dff41d45842_87_drawBackground)
HXLINE(  88)		::util::GraphicsUtil_obj::clearPath(this->path);
HXLINE(  89)		::util::GraphicsUtil_obj::drawCutEdgeRect(0,0,40,40,4,this->cuts,this->path);
HXLINE(  90)		this->get_graphics()->clear();
HXLINE(  91)		this->graphicsData->set(1,this->path);
HXLINE(  92)		this->get_graphics()->drawGraphicsData(this->graphicsData);
HXLINE(  94)		int sheetId = -1;
HXLINE(  95)		switch((int)(this->itemType)){
            			case (int)1: {
HXLINE( 100)				sheetId = 1;
            			}
            			break;
            			case (int)3: {
HXLINE( 102)				sheetId = 65;
            			}
            			break;
            			case (int)4: {
HXLINE( 116)				sheetId = 113;
            			}
            			break;
            			case (int)5: {
HXLINE( 118)				sheetId = 129;
            			}
            			break;
            			case (int)6: {
HXLINE( 111)				sheetId = 17;
            			}
            			break;
            			case (int)7: {
HXLINE( 109)				sheetId = 33;
            			}
            			break;
            			case (int)8: {
HXLINE( 120)				sheetId = 145;
            			}
            			break;
            			case (int)9: {
HXLINE(  97)				sheetId = 241;
            			}
            			break;
            			case (int)12: {
HXLINE( 124)				sheetId = 193;
            			}
            			break;
            			case (int)14: {
HXLINE( 113)				sheetId = 97;
            			}
            			break;
            			case (int)15: {
HXLINE( 126)				sheetId = 209;
            			}
            			break;
            			case (int)16: {
HXLINE( 122)				sheetId = 177;
            			}
            			break;
            			case (int)17: {
HXLINE( 104)				sheetId = 81;
            			}
            			break;
            			case (int)19: {
HXLINE( 128)				sheetId = 225;
            			}
            			break;
            			case (int)23: {
HXLINE( 106)				sheetId = 161;
            			}
            			break;
            		}
HXLINE( 131)		if (::hx::IsNull( this->backgroundImage )) {
HXLINE( 132)			if ((sheetId != -1)) {
HXLINE( 133)				this->backgroundImage =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("tieredItems",3f,0e,eb,ad),sheetId),null(),null());
HXLINE( 134)				 ::openfl::display::Bitmap _hx_tmp = this->backgroundImage;
HXDLIN( 134)				_hx_tmp->set_x(((( (Float)(40) ) - this->backgroundImage->get_width()) / ( (Float)(2) )));
HXLINE( 135)				 ::openfl::display::Bitmap _hx_tmp1 = this->backgroundImage;
HXDLIN( 135)				_hx_tmp1->set_y(((( (Float)(40) ) - this->backgroundImage->get_height()) / ( (Float)(2) )));
HXLINE( 136)				this->backgroundImage->set_scaleX(( (Float)(4) ));
HXLINE( 137)				this->backgroundImage->set_scaleY(( (Float)(4) ));
HXLINE( 138)				this->backgroundImage->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0,::ui::Slot_obj::greyColorFilter));
HXLINE( 139)				this->addChild(this->backgroundImage);
            			}
            			else {
HXLINE( 140)				if ((this->hotkey > 0)) {
HXLINE( 141)					 ::ui::SimpleText hotkeyText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,26,3552822,false,0,0,null());
HXLINE( 142)					hotkeyText->set_text(::Std_obj::string(this->hotkey));
HXLINE( 143)					hotkeyText->setBold(true);
HXLINE( 144)					hotkeyText->updateMetrics();
HXLINE( 145)					 ::openfl::display::BitmapData bd =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,26,30,true,0);
HXLINE( 147)					bd->draw(hotkeyText, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()),null(),null(),null(),null());
HXLINE( 148)					this->backgroundImage =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bd,null(),null());
HXLINE( 149)					 ::openfl::display::Bitmap _hx_tmp2 = this->backgroundImage;
HXDLIN( 149)					_hx_tmp2->set_x((((Float)20.) - (hotkeyText->get_width() / ( (Float)(2) ))));
HXLINE( 150)					this->backgroundImage->set_y(((Float)2.));
HXLINE( 151)					this->addChild(this->backgroundImage);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Slot_obj,drawBackground,(void))

 ::openfl::filters::ColorMatrixFilter Slot_obj::greyColorFilter;

::String Slot_obj::slotTypeToName(int itemType){
            	HX_STACKFRAME(&_hx_pos_c27a9dff41d45842_33_slotTypeToName)
HXDLIN(  33)		switch((int)(itemType)){
            			case (int)1: {
HXLINE(  40)				return HX_("Sword",9d,27,3f,19);
            			}
            			break;
            			case (int)3: {
HXLINE(  42)				return HX_("Bow",ea,75,32,00);
            			}
            			break;
            			case (int)4: {
HXLINE(  56)				return HX_("Flask",93,a5,b9,95);
            			}
            			break;
            			case (int)5: {
HXLINE(  58)				return HX_("Bloodstone",8b,52,7f,e5);
            			}
            			break;
            			case (int)6: {
HXLINE(  51)				return HX_("Hide",e2,60,e7,2f);
            			}
            			break;
            			case (int)7: {
HXLINE(  49)				return HX_("Vest",b0,61,25,39);
            			}
            			break;
            			case (int)8: {
HXLINE(  60)				return HX_("Totem",21,c7,5f,a7);
            			}
            			break;
            			case (int)9: {
HXLINE(  35)				return HX_("Ring",d0,8b,83,36);
            			}
            			break;
            			case (int)10: {
HXLINE(  37)				return HX_("Consumable",c3,28,d2,d6);
            			}
            			break;
            			case (int)12: {
HXLINE(  64)				return HX_("Bulwark",dc,dd,82,fe);
            			}
            			break;
            			case (int)14: {
HXLINE(  53)				return HX_("Robe",e0,0e,88,36);
            			}
            			break;
            			case (int)15: {
HXLINE(  66)				return HX_("Clock",ae,79,90,db);
            			}
            			break;
            			case (int)16: {
HXLINE(  62)				return HX_("Helm",de,5e,e4,2f);
            			}
            			break;
            			case (int)17: {
HXLINE(  44)				return HX_("Staff",c0,d9,38,17);
            			}
            			break;
            			case (int)19: {
HXLINE(  68)				return HX_("Cage",5c,40,93,2c);
            			}
            			break;
            			case (int)23: {
HXLINE(  46)				return HX_("Scepter",a6,13,a3,82);
            			}
            			break;
            			default:{
HXLINE(  71)				return HX_("Unknown",6a,4b,cc,ae);
            			}
            		}
HXLINE(  33)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Slot_obj,slotTypeToName,return )


::hx::ObjectPtr< Slot_obj > Slot_obj::__new(int itemType,int hotkey,::Array< int > cuts) {
	::hx::ObjectPtr< Slot_obj > __this = new Slot_obj();
	__this->__construct(itemType,hotkey,cuts);
	return __this;
}

::hx::ObjectPtr< Slot_obj > Slot_obj::__alloc(::hx::Ctx *_hx_ctx,int itemType,int hotkey,::Array< int > cuts) {
	Slot_obj *__this = (Slot_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Slot_obj), true, "ui.Slot"));
	*(void **)__this = Slot_obj::_hx_vtable;
	__this->__construct(itemType,hotkey,cuts);
	return __this;
}

Slot_obj::Slot_obj()
{
}

void Slot_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Slot);
	HX_MARK_MEMBER_NAME(itemType,"itemType");
	HX_MARK_MEMBER_NAME(hotkey,"hotkey");
	HX_MARK_MEMBER_NAME(cuts,"cuts");
	HX_MARK_MEMBER_NAME(backgroundImage,"backgroundImage");
	HX_MARK_MEMBER_NAME(fill,"fill");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Slot_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(itemType,"itemType");
	HX_VISIT_MEMBER_NAME(hotkey,"hotkey");
	HX_VISIT_MEMBER_NAME(cuts,"cuts");
	HX_VISIT_MEMBER_NAME(backgroundImage,"backgroundImage");
	HX_VISIT_MEMBER_NAME(fill,"fill");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Slot_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"cuts") ) { return ::hx::Val( cuts ); }
		if (HX_FIELD_EQ(inName,"fill") ) { return ::hx::Val( fill ); }
		if (HX_FIELD_EQ(inName,"path") ) { return ::hx::Val( path ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hotkey") ) { return ::hx::Val( hotkey ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"itemType") ) { return ::hx::Val( itemType ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { return ::hx::Val( graphicsData ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawBackground") ) { return ::hx::Val( drawBackground_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundImage") ) { return ::hx::Val( backgroundImage ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Slot_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"slotTypeToName") ) { outValue = slotTypeToName_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"greyColorFilter") ) { outValue = ( greyColorFilter ); return true; }
	}
	return false;
}

::hx::Val Slot_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"cuts") ) { cuts=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fill") ) { fill=inValue.Cast<  ::openfl::display::GraphicsSolidFill >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast<  ::openfl::display::GraphicsPath >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hotkey") ) { hotkey=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"itemType") ) { itemType=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { graphicsData=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundImage") ) { backgroundImage=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Slot_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"greyColorFilter") ) { greyColorFilter=ioValue.Cast<  ::openfl::filters::ColorMatrixFilter >(); return true; }
	}
	return false;
}

void Slot_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("itemType",6d,69,05,aa));
	outFields->push(HX_("hotkey",32,34,96,cb));
	outFields->push(HX_("cuts",b1,4c,c9,41));
	outFields->push(HX_("backgroundImage",8d,fc,53,80));
	outFields->push(HX_("fill",83,ce,bb,43));
	outFields->push(HX_("path",a5,e5,51,4a));
	outFields->push(HX_("graphicsData",95,3c,58,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Slot_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Slot_obj,itemType),HX_("itemType",6d,69,05,aa)},
	{::hx::fsInt,(int)offsetof(Slot_obj,hotkey),HX_("hotkey",32,34,96,cb)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Slot_obj,cuts),HX_("cuts",b1,4c,c9,41)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(Slot_obj,backgroundImage),HX_("backgroundImage",8d,fc,53,80)},
	{::hx::fsObject /*  ::openfl::display::GraphicsSolidFill */ ,(int)offsetof(Slot_obj,fill),HX_("fill",83,ce,bb,43)},
	{::hx::fsObject /*  ::openfl::display::GraphicsPath */ ,(int)offsetof(Slot_obj,path),HX_("path",a5,e5,51,4a)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(Slot_obj,graphicsData),HX_("graphicsData",95,3c,58,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Slot_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::filters::ColorMatrixFilter */ ,(void *) &Slot_obj::greyColorFilter,HX_("greyColorFilter",5c,04,69,5e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Slot_obj_sMemberFields[] = {
	HX_("itemType",6d,69,05,aa),
	HX_("hotkey",32,34,96,cb),
	HX_("cuts",b1,4c,c9,41),
	HX_("backgroundImage",8d,fc,53,80),
	HX_("fill",83,ce,bb,43),
	HX_("path",a5,e5,51,4a),
	HX_("graphicsData",95,3c,58,41),
	HX_("drawBackground",12,71,27,09),
	::String(null()) };

static void Slot_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Slot_obj::greyColorFilter,"greyColorFilter");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Slot_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Slot_obj::greyColorFilter,"greyColorFilter");
};

#endif

::hx::Class Slot_obj::__mClass;

static ::String Slot_obj_sStaticFields[] = {
	HX_("greyColorFilter",5c,04,69,5e),
	HX_("slotTypeToName",5e,97,bb,b5),
	::String(null())
};

void Slot_obj::__register()
{
	Slot_obj _hx_dummy;
	Slot_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.Slot",78,e2,65,b0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Slot_obj::__GetStatic;
	__mClass->mSetStaticField = &Slot_obj::__SetStatic;
	__mClass->mMarkFunc = Slot_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Slot_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Slot_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Slot_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Slot_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Slot_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Slot_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Slot_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_c27a9dff41d45842_21_boot)
HXDLIN(  21)		greyColorFilter =  ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,::util::ColorUtils_obj::singleColorFilterMatrix(3552822));
            	}
}

} // end namespace ui
