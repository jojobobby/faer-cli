// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_ui_MiniMapZoomButtons
#include <ui/MiniMapZoomButtons.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_35c15824c7647302_11_new,"ui.MiniMapZoomButtons","new",0x11747b95,"ui.MiniMapZoomButtons.new","ui/MiniMapZoomButtons.hx",11,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_35_setZoomLevel,"ui.MiniMapZoomButtons","setZoomLevel",0x72dd639a,"ui.MiniMapZoomButtons.setZoomLevel","ui/MiniMapZoomButtons.hx",35,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_49_setZoomLevels,"ui.MiniMapZoomButtons","setZoomLevels",0x0ed9c399,"ui.MiniMapZoomButtons.setZoomLevels","ui/MiniMapZoomButtons.hx",49,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_58_makeZoomOut,"ui.MiniMapZoomButtons","makeZoomOut",0xc6e33322,"ui.MiniMapZoomButtons.makeZoomOut","ui/MiniMapZoomButtons.hx",58,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_69_makeZoomIn,"ui.MiniMapZoomButtons","makeZoomIn",0x291237d1,"ui.MiniMapZoomButtons.makeZoomIn","ui/MiniMapZoomButtons.hx",69,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_81_canZoomOut,"ui.MiniMapZoomButtons","canZoomOut",0xec6a4e76,"ui.MiniMapZoomButtons.canZoomOut","ui/MiniMapZoomButtons.hx",81,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_85_canZoomIn,"ui.MiniMapZoomButtons","canZoomIn",0x6860e2fd,"ui.MiniMapZoomButtons.canZoomIn","ui/MiniMapZoomButtons.hx",85,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_88_updateButtons,"ui.MiniMapZoomButtons","updateButtons",0x8eb456ad,"ui.MiniMapZoomButtons.updateButtons","ui/MiniMapZoomButtons.hx",88,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_94_onZoomOut,"ui.MiniMapZoomButtons","onZoomOut",0x57a9dcd1,"ui.MiniMapZoomButtons.onZoomOut","ui/MiniMapZoomButtons.hx",94,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_101_onZoomIn,"ui.MiniMapZoomButtons","onZoomIn",0xece09902,"ui.MiniMapZoomButtons.onZoomIn","ui/MiniMapZoomButtons.hx",101,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_12_boot,"ui.MiniMapZoomButtons","boot",0x2c90a75d,"ui.MiniMapZoomButtons.boot","ui/MiniMapZoomButtons.hx",12,0x5a3217da)
HX_LOCAL_STACK_FRAME(_hx_pos_35c15824c7647302_13_boot,"ui.MiniMapZoomButtons","boot",0x2c90a75d,"ui.MiniMapZoomButtons.boot","ui/MiniMapZoomButtons.hx",13,0x5a3217da)
namespace ui{

void MiniMapZoomButtons_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_35c15824c7647302_11_new)
HXLINE(  20)		this->zoomLevel = 0;
HXLINE(  19)		this->zoomLevels = 0;
HXLINE(  15)		this->zoom =  ::util::Signal_obj::__alloc( HX_CTX );
HXLINE(  23)		super::__construct();
HXLINE(  25)		this->zoomLevel = 0;
HXLINE(  26)		this->makeZoomOut();
HXLINE(  27)		this->makeZoomIn();
HXLINE(  28)		this->updateButtons();
            	}

Dynamic MiniMapZoomButtons_obj::__CreateEmpty() { return new MiniMapZoomButtons_obj; }

void *MiniMapZoomButtons_obj::_hx_vtable = 0;

Dynamic MiniMapZoomButtons_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MiniMapZoomButtons_obj > _hx_result = new MiniMapZoomButtons_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MiniMapZoomButtons_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4e294581) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x4e294581;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

int MiniMapZoomButtons_obj::setZoomLevel(int value){
            	HX_STACKFRAME(&_hx_pos_35c15824c7647302_35_setZoomLevel)
HXLINE(  36)		if ((this->zoomLevels == 0)) {
HXLINE(  37)			return this->zoomLevel;
            		}
HXLINE(  39)		if ((value < 0)) {
HXLINE(  40)			value = 0;
            		}
            		else {
HXLINE(  41)			if ((value >= (this->zoomLevels - 1))) {
HXLINE(  42)				value = (this->zoomLevels - 1);
            			}
            		}
HXLINE(  44)		this->zoomLevel = value;
HXLINE(  45)		this->updateButtons();
HXLINE(  46)		return this->zoomLevel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMapZoomButtons_obj,setZoomLevel,return )

int MiniMapZoomButtons_obj::setZoomLevels(int count){
            	HX_STACKFRAME(&_hx_pos_35c15824c7647302_49_setZoomLevels)
HXLINE(  50)		this->zoomLevels = count;
HXLINE(  51)		if ((this->zoomLevel >= this->zoomLevels)) {
HXLINE(  52)			this->zoomLevel = (this->zoomLevels - 1);
            		}
HXLINE(  54)		this->updateButtons();
HXLINE(  55)		return this->zoomLevels;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMapZoomButtons_obj,setZoomLevels,return )

void MiniMapZoomButtons_obj::makeZoomOut(){
            	HX_GC_STACKFRAME(&_hx_pos_35c15824c7647302_58_makeZoomOut)
HXLINE(  60)		 ::openfl::display::Bitmap bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("misc16",d1,10,48,56),66),null(),null());
HXLINE(  61)		this->zoomOut =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  62)		this->zoomOut->set_x(( (Float)(0) ));
HXLINE(  63)		this->zoomOut->set_y(( (Float)(20) ));
HXLINE(  64)		this->zoomOut->addChild(bitmap);
HXLINE(  65)		this->zoomOut->addEventListener(HX_("click",48,7c,5e,48),this->onZoomOut_dyn(),null(),null(),null());
HXLINE(  66)		this->addChild(this->zoomOut);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMapZoomButtons_obj,makeZoomOut,(void))

void MiniMapZoomButtons_obj::makeZoomIn(){
            	HX_GC_STACKFRAME(&_hx_pos_35c15824c7647302_69_makeZoomIn)
HXLINE(  71)		 ::openfl::display::Bitmap bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("misc16",d1,10,48,56),65),null(),null());
HXLINE(  72)		this->zoomIn =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  73)		this->zoomIn->set_x(( (Float)(0) ));
HXLINE(  74)		this->zoomIn->set_y(( (Float)(4) ));
HXLINE(  75)		this->zoomIn->addChild(bitmap);
HXLINE(  76)		this->zoomIn->addEventListener(HX_("click",48,7c,5e,48),this->onZoomIn_dyn(),null(),null(),null());
HXLINE(  77)		this->addChild(this->zoomIn);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMapZoomButtons_obj,makeZoomIn,(void))

bool MiniMapZoomButtons_obj::canZoomOut(){
            	HX_STACKFRAME(&_hx_pos_35c15824c7647302_81_canZoomOut)
HXDLIN(  81)		return (this->zoomLevel > 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMapZoomButtons_obj,canZoomOut,return )

bool MiniMapZoomButtons_obj::canZoomIn(){
            	HX_STACKFRAME(&_hx_pos_35c15824c7647302_85_canZoomIn)
HXDLIN(  85)		return (this->zoomLevel < (this->zoomLevels - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMapZoomButtons_obj,canZoomIn,return )

void MiniMapZoomButtons_obj::updateButtons(){
            	HX_STACKFRAME(&_hx_pos_35c15824c7647302_88_updateButtons)
HXLINE(  89)		 ::openfl::geom::Transform _hx_tmp = this->zoomIn->get_transform();
HXDLIN(  89)		 ::openfl::geom::ColorTransform _hx_tmp1;
HXDLIN(  89)		if (this->canZoomIn()) {
HXLINE(  89)			_hx_tmp1 = ::ui::MiniMapZoomButtons_obj::NORM;
            		}
            		else {
HXLINE(  89)			_hx_tmp1 = ::ui::MiniMapZoomButtons_obj::FADE;
            		}
HXDLIN(  89)		_hx_tmp->set_colorTransform(_hx_tmp1);
HXLINE(  90)		 ::openfl::geom::Transform _hx_tmp2 = this->zoomOut->get_transform();
HXDLIN(  90)		 ::openfl::geom::ColorTransform _hx_tmp3;
HXDLIN(  90)		if (this->canZoomOut()) {
HXLINE(  90)			_hx_tmp3 = ::ui::MiniMapZoomButtons_obj::NORM;
            		}
            		else {
HXLINE(  90)			_hx_tmp3 = ::ui::MiniMapZoomButtons_obj::FADE;
            		}
HXDLIN(  90)		_hx_tmp2->set_colorTransform(_hx_tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MiniMapZoomButtons_obj,updateButtons,(void))

void MiniMapZoomButtons_obj::onZoomOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_35c15824c7647302_94_onZoomOut)
HXDLIN(  94)		if (this->canZoomOut()) {
HXLINE(  95)			this->zoom->emit(--this->zoomLevel);
HXLINE(  96)			 ::openfl::geom::Transform _hx_tmp = this->zoomOut->get_transform();
HXDLIN(  96)			 ::openfl::geom::ColorTransform _hx_tmp1;
HXDLIN(  96)			if (this->canZoomOut()) {
HXLINE(  96)				_hx_tmp1 = ::ui::MiniMapZoomButtons_obj::NORM;
            			}
            			else {
HXLINE(  96)				_hx_tmp1 = ::ui::MiniMapZoomButtons_obj::FADE;
            			}
HXDLIN(  96)			_hx_tmp->set_colorTransform(_hx_tmp1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMapZoomButtons_obj,onZoomOut,(void))

void MiniMapZoomButtons_obj::onZoomIn( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_35c15824c7647302_101_onZoomIn)
HXDLIN( 101)		if (this->canZoomIn()) {
HXLINE( 102)			this->zoom->emit(++this->zoomLevel);
HXLINE( 103)			 ::openfl::geom::Transform _hx_tmp = this->zoomIn->get_transform();
HXDLIN( 103)			 ::openfl::geom::ColorTransform _hx_tmp1;
HXDLIN( 103)			if (this->canZoomIn()) {
HXLINE( 103)				_hx_tmp1 = ::ui::MiniMapZoomButtons_obj::NORM;
            			}
            			else {
HXLINE( 103)				_hx_tmp1 = ::ui::MiniMapZoomButtons_obj::FADE;
            			}
HXDLIN( 103)			_hx_tmp->set_colorTransform(_hx_tmp1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MiniMapZoomButtons_obj,onZoomIn,(void))

 ::openfl::geom::ColorTransform MiniMapZoomButtons_obj::FADE;

 ::openfl::geom::ColorTransform MiniMapZoomButtons_obj::NORM;


::hx::ObjectPtr< MiniMapZoomButtons_obj > MiniMapZoomButtons_obj::__new() {
	::hx::ObjectPtr< MiniMapZoomButtons_obj > __this = new MiniMapZoomButtons_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MiniMapZoomButtons_obj > MiniMapZoomButtons_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MiniMapZoomButtons_obj *__this = (MiniMapZoomButtons_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MiniMapZoomButtons_obj), true, "ui.MiniMapZoomButtons"));
	*(void **)__this = MiniMapZoomButtons_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MiniMapZoomButtons_obj::MiniMapZoomButtons_obj()
{
}

void MiniMapZoomButtons_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MiniMapZoomButtons);
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(zoomOut,"zoomOut");
	HX_MARK_MEMBER_NAME(zoomIn,"zoomIn");
	HX_MARK_MEMBER_NAME(zoomLevels,"zoomLevels");
	HX_MARK_MEMBER_NAME(zoomLevel,"zoomLevel");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MiniMapZoomButtons_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(zoomOut,"zoomOut");
	HX_VISIT_MEMBER_NAME(zoomIn,"zoomIn");
	HX_VISIT_MEMBER_NAME(zoomLevels,"zoomLevels");
	HX_VISIT_MEMBER_NAME(zoomLevel,"zoomLevel");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MiniMapZoomButtons_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return ::hx::Val( zoom ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"zoomIn") ) { return ::hx::Val( zoomIn ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"zoomOut") ) { return ::hx::Val( zoomOut ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onZoomIn") ) { return ::hx::Val( onZoomIn_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zoomLevel") ) { return ::hx::Val( zoomLevel ); }
		if (HX_FIELD_EQ(inName,"canZoomIn") ) { return ::hx::Val( canZoomIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"onZoomOut") ) { return ::hx::Val( onZoomOut_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zoomLevels") ) { return ::hx::Val( zoomLevels ); }
		if (HX_FIELD_EQ(inName,"makeZoomIn") ) { return ::hx::Val( makeZoomIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"canZoomOut") ) { return ::hx::Val( canZoomOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"makeZoomOut") ) { return ::hx::Val( makeZoomOut_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setZoomLevel") ) { return ::hx::Val( setZoomLevel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setZoomLevels") ) { return ::hx::Val( setZoomLevels_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateButtons") ) { return ::hx::Val( updateButtons_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MiniMapZoomButtons_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"FADE") ) { outValue = ( FADE ); return true; }
		if (HX_FIELD_EQ(inName,"NORM") ) { outValue = ( NORM ); return true; }
	}
	return false;
}

::hx::Val MiniMapZoomButtons_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { zoom=inValue.Cast<  ::util::Signal >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"zoomIn") ) { zoomIn=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"zoomOut") ) { zoomOut=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zoomLevel") ) { zoomLevel=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zoomLevels") ) { zoomLevels=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MiniMapZoomButtons_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"FADE") ) { FADE=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
		if (HX_FIELD_EQ(inName,"NORM") ) { NORM=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

void MiniMapZoomButtons_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("zoomOut",3b,a3,9a,64));
	outFields->push(HX_("zoomIn",d8,0d,b6,fa));
	outFields->push(HX_("zoomLevels",e2,e5,90,74));
	outFields->push(HX_("zoomLevel",71,dd,30,f6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MiniMapZoomButtons_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::util::Signal */ ,(int)offsetof(MiniMapZoomButtons_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(MiniMapZoomButtons_obj,zoomOut),HX_("zoomOut",3b,a3,9a,64)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(MiniMapZoomButtons_obj,zoomIn),HX_("zoomIn",d8,0d,b6,fa)},
	{::hx::fsInt,(int)offsetof(MiniMapZoomButtons_obj,zoomLevels),HX_("zoomLevels",e2,e5,90,74)},
	{::hx::fsInt,(int)offsetof(MiniMapZoomButtons_obj,zoomLevel),HX_("zoomLevel",71,dd,30,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MiniMapZoomButtons_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &MiniMapZoomButtons_obj::FADE,HX_("FADE",7c,7d,76,2e)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &MiniMapZoomButtons_obj::NORM,HX_("NORM",3c,de,ca,33)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MiniMapZoomButtons_obj_sMemberFields[] = {
	HX_("zoom",13,a3,f8,50),
	HX_("zoomOut",3b,a3,9a,64),
	HX_("zoomIn",d8,0d,b6,fa),
	HX_("zoomLevels",e2,e5,90,74),
	HX_("zoomLevel",71,dd,30,f6),
	HX_("setZoomLevel",6f,9d,80,1a),
	HX_("setZoomLevels",24,24,09,16),
	HX_("makeZoomOut",ed,ca,a4,a8),
	HX_("makeZoomIn",66,e2,85,4c),
	HX_("canZoomOut",0b,f9,dd,0f),
	HX_("canZoomIn",08,62,fc,4c),
	HX_("updateButtons",38,b7,e3,95),
	HX_("onZoomOut",dc,5b,45,3c),
	HX_("onZoomIn",57,04,63,da),
	::String(null()) };

static void MiniMapZoomButtons_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MiniMapZoomButtons_obj::FADE,"FADE");
	HX_MARK_MEMBER_NAME(MiniMapZoomButtons_obj::NORM,"NORM");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MiniMapZoomButtons_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MiniMapZoomButtons_obj::FADE,"FADE");
	HX_VISIT_MEMBER_NAME(MiniMapZoomButtons_obj::NORM,"NORM");
};

#endif

::hx::Class MiniMapZoomButtons_obj::__mClass;

static ::String MiniMapZoomButtons_obj_sStaticFields[] = {
	HX_("FADE",7c,7d,76,2e),
	HX_("NORM",3c,de,ca,33),
	::String(null())
};

void MiniMapZoomButtons_obj::__register()
{
	MiniMapZoomButtons_obj _hx_dummy;
	MiniMapZoomButtons_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.MiniMapZoomButtons",23,0d,28,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MiniMapZoomButtons_obj::__GetStatic;
	__mClass->mSetStaticField = &MiniMapZoomButtons_obj::__SetStatic;
	__mClass->mMarkFunc = MiniMapZoomButtons_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MiniMapZoomButtons_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MiniMapZoomButtons_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MiniMapZoomButtons_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MiniMapZoomButtons_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MiniMapZoomButtons_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MiniMapZoomButtons_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MiniMapZoomButtons_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_35c15824c7647302_12_boot)
HXDLIN(  12)		FADE =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,((Float)0.5),((Float)0.5),((Float)0.5),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_35c15824c7647302_13_boot)
HXDLIN(  13)		NORM =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,1,1,null(),null(),null(),null(),null());
            	}
}

} // end namespace ui
