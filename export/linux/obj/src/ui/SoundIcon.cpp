// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_sound_Music
#include <sound/Music.h>
#endif
#ifndef INCLUDED_sound_SoundEffectLibrary
#include <sound/SoundEffectLibrary.h>
#endif
#ifndef INCLUDED_ui_SoundIcon
#include <ui/SoundIcon.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_27d1e000b1556fff_15_new,"ui.SoundIcon","new",0x65550520,"ui.SoundIcon.new","ui/SoundIcon.hx",15,0x70ae7bd1)
HX_LOCAL_STACK_FRAME(_hx_pos_27d1e000b1556fff_28_setBitmap,"ui.SoundIcon","setBitmap",0x78acc9f1,"ui.SoundIcon.setBitmap","ui/SoundIcon.hx",28,0x70ae7bd1)
HX_LOCAL_STACK_FRAME(_hx_pos_27d1e000b1556fff_32_onIconClick,"ui.SoundIcon","onIconClick",0xb0c925b0,"ui.SoundIcon.onIconClick","ui/SoundIcon.hx",32,0x70ae7bd1)
namespace ui{

void SoundIcon_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_27d1e000b1556fff_15_new)
HXLINE(  16)		super::__construct();
HXLINE(  18)		this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  19)		this->addChild(this->bitmap);
HXLINE(  20)		this->bitmap->set_scaleX(( (Float)(2) ));
HXLINE(  21)		this->bitmap->set_scaleY(( (Float)(2) ));
HXLINE(  22)		this->setBitmap();
HXLINE(  23)		this->addEventListener(HX_("click",48,7c,5e,48),this->onIconClick_dyn(),null(),null(),null());
HXLINE(  24)		this->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,4,4,2,1,null(),null())));
            	}

Dynamic SoundIcon_obj::__CreateEmpty() { return new SoundIcon_obj; }

void *SoundIcon_obj::_hx_vtable = 0;

Dynamic SoundIcon_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SoundIcon_obj > _hx_result = new SoundIcon_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SoundIcon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6a5b7074) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6a5b7074;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void SoundIcon_obj::setBitmap(){
            	HX_STACKFRAME(&_hx_pos_27d1e000b1556fff_28_setBitmap)
HXDLIN(  28)		 ::openfl::display::Bitmap _hx_tmp = this->bitmap;
HXDLIN(  28)		 ::openfl::display::BitmapData _hx_tmp1;
HXDLIN(  28)		bool _hx_tmp2;
HXDLIN(  28)		if (!(::util::Settings_obj::playMusic)) {
HXDLIN(  28)			_hx_tmp2 = ::util::Settings_obj::playSfx;
            		}
            		else {
HXDLIN(  28)			_hx_tmp2 = true;
            		}
HXDLIN(  28)		if (_hx_tmp2) {
HXDLIN(  28)			_hx_tmp1 = ::util::AssetLibrary_obj::getImageFromSet(HX_("misc16",d1,10,48,56),18);
            		}
            		else {
HXDLIN(  28)			_hx_tmp1 = ::util::AssetLibrary_obj::getImageFromSet(HX_("misc16",d1,10,48,56),17);
            		}
HXDLIN(  28)		_hx_tmp->set_bitmapData(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundIcon_obj,setBitmap,(void))

void SoundIcon_obj::onIconClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_27d1e000b1556fff_32_onIconClick)
HXLINE(  33)		bool value;
HXDLIN(  33)		if (!(::util::Settings_obj::playMusic)) {
HXLINE(  33)			value = ::util::Settings_obj::playSfx;
            		}
            		else {
HXLINE(  33)			value = true;
            		}
HXDLIN(  33)		bool value1 = !(value);
HXLINE(  34)		::sound::Music_obj::setPlayMusic(value1);
HXLINE(  35)		::sound::SoundEffectLibrary_obj::setPlaySFX(value1);
HXLINE(  36)		::util::Settings_obj::playWepSfx = value1;
HXLINE(  37)		::util::Settings_obj::save();
HXLINE(  38)		this->setBitmap();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundIcon_obj,onIconClick,(void))


::hx::ObjectPtr< SoundIcon_obj > SoundIcon_obj::__new() {
	::hx::ObjectPtr< SoundIcon_obj > __this = new SoundIcon_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< SoundIcon_obj > SoundIcon_obj::__alloc(::hx::Ctx *_hx_ctx) {
	SoundIcon_obj *__this = (SoundIcon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SoundIcon_obj), true, "ui.SoundIcon"));
	*(void **)__this = SoundIcon_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SoundIcon_obj::SoundIcon_obj()
{
}

void SoundIcon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SoundIcon);
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SoundIcon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SoundIcon_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return ::hx::Val( bitmap ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setBitmap") ) { return ::hx::Val( setBitmap_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onIconClick") ) { return ::hx::Val( onIconClick_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SoundIcon_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SoundIcon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bitmap",ef,0f,0c,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SoundIcon_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(SoundIcon_obj,bitmap),HX_("bitmap",ef,0f,0c,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SoundIcon_obj_sStaticStorageInfo = 0;
#endif

static ::String SoundIcon_obj_sMemberFields[] = {
	HX_("bitmap",ef,0f,0c,f1),
	HX_("setBitmap",31,85,b3,50),
	HX_("onIconClick",f0,30,65,a4),
	::String(null()) };

::hx::Class SoundIcon_obj::__mClass;

void SoundIcon_obj::__register()
{
	SoundIcon_obj _hx_dummy;
	SoundIcon_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.SoundIcon",2e,35,6c,67);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SoundIcon_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SoundIcon_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundIcon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundIcon_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
