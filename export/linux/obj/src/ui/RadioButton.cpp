// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_RadioButton
#include <ui/RadioButton.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_529110068050ca87_17_new,"ui.RadioButton","new",0x1049da85,"ui.RadioButton.new","ui/RadioButton.hx",17,0x8bdf3c4c)
HX_LOCAL_STACK_FRAME(_hx_pos_529110068050ca87_34_setSelected,"ui.RadioButton","setSelected",0xc2c22b42,"ui.RadioButton.setSelected","ui/RadioButton.hx",34,0x8bdf3c4c)
HX_LOCAL_STACK_FRAME(_hx_pos_529110068050ca87_40_makeUnselected,"ui.RadioButton","makeUnselected",0x751e533d,"ui.RadioButton.makeUnselected","ui/RadioButton.hx",40,0x8bdf3c4c)
HX_LOCAL_STACK_FRAME(_hx_pos_529110068050ca87_46_makeSelected,"ui.RadioButton","makeSelected",0xeb01c7a4,"ui.RadioButton.makeSelected","ui/RadioButton.hx",46,0x8bdf3c4c)
HX_LOCAL_STACK_FRAME(_hx_pos_529110068050ca87_53_drawOutline,"ui.RadioButton","drawOutline",0x0bfa9303,"ui.RadioButton.drawOutline","ui/RadioButton.hx",53,0x8bdf3c4c)
HX_LOCAL_STACK_FRAME(_hx_pos_529110068050ca87_69_drawFill,"ui.RadioButton","drawFill",0x093f8862,"ui.RadioButton.drawFill","ui/RadioButton.hx",69,0x8bdf3c4c)
namespace ui{

void RadioButton_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_529110068050ca87_17_new)
HXLINE(  18)		this->changed =  ::util::Signal_obj::__alloc( HX_CTX );
HXLINE(  27)		super::__construct();
HXLINE(  29)		this->addChild((this->unselected = this->makeUnselected()));
HXLINE(  30)		this->addChild((this->selected = this->makeSelected()));
HXLINE(  31)		this->setSelected(false);
            	}

Dynamic RadioButton_obj::__CreateEmpty() { return new RadioButton_obj; }

void *RadioButton_obj::_hx_vtable = 0;

Dynamic RadioButton_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RadioButton_obj > _hx_result = new RadioButton_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RadioButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x120c3a2d) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x120c3a2d;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void RadioButton_obj::setSelected(bool value){
            	HX_STACKFRAME(&_hx_pos_529110068050ca87_34_setSelected)
HXLINE(  35)		this->unselected->set_visible(!(value));
HXLINE(  36)		this->selected->set_visible(value);
HXLINE(  37)		this->changed->emit(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RadioButton_obj,setSelected,(void))

 ::openfl::display::Shape RadioButton_obj::makeUnselected(){
            	HX_GC_STACKFRAME(&_hx_pos_529110068050ca87_40_makeUnselected)
HXLINE(  41)		 ::openfl::display::Shape shape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  42)		this->drawOutline(shape->get_graphics());
HXLINE(  43)		return shape;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RadioButton_obj,makeUnselected,return )

 ::openfl::display::Shape RadioButton_obj::makeSelected(){
            	HX_GC_STACKFRAME(&_hx_pos_529110068050ca87_46_makeSelected)
HXLINE(  47)		 ::openfl::display::Shape shape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  48)		this->drawOutline(shape->get_graphics());
HXLINE(  49)		this->drawFill(shape->get_graphics());
HXLINE(  50)		return shape;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RadioButton_obj,makeSelected,return )

void RadioButton_obj::drawOutline( ::openfl::display::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_529110068050ca87_53_drawOutline)
HXLINE(  54)		 ::openfl::display::GraphicsSolidFill internalFill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,0,((Float)0.01));
HXLINE(  56)		 ::openfl::display::GraphicsStroke outlineStyle =  ::openfl::display::GraphicsStroke_obj::__alloc( HX_CTX ,2,false,2,0,2,3, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,16777215,1));
HXLINE(  57)		 ::openfl::display::GraphicsPath outlinePath =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  58)		::util::GraphicsUtil_obj::drawCutEdgeRect(0,0,28,28,4,::util::GraphicsUtil_obj::ALL_CUTS,outlinePath);
HXLINE(  66)		graphics->drawGraphicsData( ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(5)->init(0,outlineStyle)->init(1,internalFill)->init(2,outlinePath)->init(3,::util::GraphicsUtil_obj::END_FILL)->init(4,::util::GraphicsUtil_obj::END_STROKE),true));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RadioButton_obj,drawOutline,(void))

void RadioButton_obj::drawFill( ::openfl::display::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_529110068050ca87_69_drawFill)
HXLINE(  70)		 ::openfl::display::GraphicsSolidFill boxFill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,16777215,1);
HXLINE(  71)		 ::openfl::display::GraphicsPath boxPath =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  72)		::util::GraphicsUtil_obj::drawCutEdgeRect(4,4,20,20,2,::util::GraphicsUtil_obj::ALL_CUTS,boxPath);
HXLINE(  74)		graphics->drawGraphicsData( ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(3)->init(0,boxFill)->init(1,boxPath)->init(2,::util::GraphicsUtil_obj::END_FILL),true));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RadioButton_obj,drawFill,(void))


::hx::ObjectPtr< RadioButton_obj > RadioButton_obj::__new() {
	::hx::ObjectPtr< RadioButton_obj > __this = new RadioButton_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< RadioButton_obj > RadioButton_obj::__alloc(::hx::Ctx *_hx_ctx) {
	RadioButton_obj *__this = (RadioButton_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RadioButton_obj), true, "ui.RadioButton"));
	*(void **)__this = RadioButton_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RadioButton_obj::RadioButton_obj()
{
}

void RadioButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RadioButton);
	HX_MARK_MEMBER_NAME(changed,"changed");
	HX_MARK_MEMBER_NAME(unselected,"unselected");
	HX_MARK_MEMBER_NAME(selected,"selected");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RadioButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(changed,"changed");
	HX_VISIT_MEMBER_NAME(unselected,"unselected");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val RadioButton_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"changed") ) { return ::hx::Val( changed ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"drawFill") ) { return ::hx::Val( drawFill_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unselected") ) { return ::hx::Val( unselected ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setSelected") ) { return ::hx::Val( setSelected_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawOutline") ) { return ::hx::Val( drawOutline_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"makeSelected") ) { return ::hx::Val( makeSelected_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"makeUnselected") ) { return ::hx::Val( makeUnselected_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RadioButton_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"changed") ) { changed=inValue.Cast<  ::util::Signal >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unselected") ) { unselected=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RadioButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("changed",f4,b0,cc,cc));
	outFields->push(HX_("unselected",b4,11,31,37));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RadioButton_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::util::Signal */ ,(int)offsetof(RadioButton_obj,changed),HX_("changed",f4,b0,cc,cc)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(RadioButton_obj,unselected),HX_("unselected",b4,11,31,37)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(RadioButton_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RadioButton_obj_sStaticStorageInfo = 0;
#endif

static ::String RadioButton_obj_sMemberFields[] = {
	HX_("changed",f4,b0,cc,cc),
	HX_("unselected",b4,11,31,37),
	HX_("selected",5b,2a,6d,b1),
	HX_("setSelected",1d,f4,cd,e1),
	HX_("makeUnselected",42,45,61,d2),
	HX_("makeSelected",69,be,45,f6),
	HX_("drawOutline",de,5b,06,2b),
	HX_("drawFill",a7,78,25,58),
	::String(null()) };

::hx::Class RadioButton_obj::__mClass;

void RadioButton_obj::__register()
{
	RadioButton_obj _hx_dummy;
	RadioButton_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.RadioButton",13,34,47,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RadioButton_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RadioButton_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RadioButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RadioButton_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
