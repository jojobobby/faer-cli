// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_StatusBar
#include <ui/StatusBar.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_49657dd41985c275_6_new,"ui.StatusBar","new",0xdb163f79,"ui.StatusBar.new","ui/StatusBar.hx",6,0x40fe8f98)
HX_LOCAL_STACK_FRAME(_hx_pos_49657dd41985c275_46_draw,"ui.StatusBar","draw",0xd1cef2cb,"ui.StatusBar.draw","ui/StatusBar.hx",46,0x40fe8f98)
HX_LOCAL_STACK_FRAME(_hx_pos_49657dd41985c275_60_setTextColor,"ui.StatusBar","setTextColor",0xd5d7273b,"ui.StatusBar.setTextColor","ui/StatusBar.hx",60,0x40fe8f98)
HX_LOCAL_STACK_FRAME(_hx_pos_49657dd41985c275_68_internalDraw,"ui.StatusBar","internalDraw",0xfc2e07a8,"ui.StatusBar.internalDraw","ui/StatusBar.hx",68,0x40fe8f98)
namespace ui{

void StatusBar_obj::__construct(int w,int h,int color,int backColor,::hx::Null< Float >  __o_textScale,::hx::Null< int >  __o_textXOffset){
            		Float textScale = __o_textScale.Default(1);
            		int textXOffset = __o_textXOffset.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_49657dd41985c275_6_new)
HXLINE(  22)		this->textXOffset = 0;
HXLINE(  21)		this->defaultBackgroundColor = ((Float)0.0);
HXLINE(  20)		this->defaultForegroundColor = ((Float)0.0);
HXLINE(  15)		this->maxMax = -1;
HXLINE(  14)		this->boost = -1;
HXLINE(  13)		this->max = -1;
HXLINE(  12)		this->val = -1;
HXLINE(  11)		this->textColor = 0;
HXLINE(  10)		this->backColor = 0;
HXLINE(   9)		this->color = 0;
HXLINE(   8)		this->h = 0;
HXLINE(   7)		this->w = 0;
HXLINE(  25)		super::__construct();
HXLINE(  27)		this->colorSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  28)		this->addChild(this->colorSprite);
HXLINE(  29)		this->w = w;
HXLINE(  30)		this->h = h;
HXLINE(  31)		this->defaultForegroundColor = ( (Float)((this->color = color)) );
HXLINE(  32)		this->defaultBackgroundColor = ( (Float)((this->backColor = backColor)) );
HXLINE(  33)		this->textColor = 16777215;
HXLINE(  34)		this->valueText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((( (Float)(14) ) * textScale)),16777215,false,0,0,null());
HXLINE(  35)		this->valueText->setBold(true);
HXLINE(  36)		 ::ui::SimpleText _hx_tmp = this->valueText;
HXDLIN(  36)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  37)		 ::ui::SimpleText _hx_tmp1 = this->valueText;
HXDLIN(  37)		_hx_tmp1->set_y(((( (Float)(h) ) - this->valueText->get_height()) / ( (Float)(2) )));
HXLINE(  38)		int _hx_tmp2 = ::Std_obj::_hx_int((( (Float)(14) ) * textScale));
HXDLIN(  38)		this->boostText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,_hx_tmp2,this->textColor,false,0,0,null());
HXLINE(  39)		this->boostText->setBold(true);
HXLINE(  40)		this->boostText->set_alpha(((Float)0.6));
HXLINE(  41)		this->boostText->set_y(( (Float)(0) ));
HXLINE(  42)		 ::ui::SimpleText _hx_tmp3 = this->boostText;
HXDLIN(  42)		_hx_tmp3->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  43)		this->textXOffset = textXOffset;
            	}

Dynamic StatusBar_obj::__CreateEmpty() { return new StatusBar_obj; }

void *StatusBar_obj::_hx_vtable = 0;

Dynamic StatusBar_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StatusBar_obj > _hx_result = new StatusBar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool StatusBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x63185a69) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x63185a69;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void StatusBar_obj::draw(int val,int max,int boost,::hx::Null< int >  __o_maxMax){
            		int maxMax = __o_maxMax.Default(-1);
            	HX_STACKFRAME(&_hx_pos_49657dd41985c275_46_draw)
HXLINE(  47)		if ((max > 0)) {
HXLINE(  48)			val = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(max) ),::Math_obj::max(( (Float)(0) ),( (Float)(val) ))));
            		}
HXLINE(  50)		bool _hx_tmp;
HXDLIN(  50)		bool _hx_tmp1;
HXDLIN(  50)		bool _hx_tmp2;
HXDLIN(  50)		if ((val == this->val)) {
HXLINE(  50)			_hx_tmp2 = (max == this->max);
            		}
            		else {
HXLINE(  50)			_hx_tmp2 = false;
            		}
HXDLIN(  50)		if (_hx_tmp2) {
HXLINE(  50)			_hx_tmp1 = (boost == this->boost);
            		}
            		else {
HXLINE(  50)			_hx_tmp1 = false;
            		}
HXDLIN(  50)		if (_hx_tmp1) {
HXLINE(  50)			_hx_tmp = (maxMax == this->maxMax);
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  51)			return;
            		}
HXLINE(  53)		this->val = val;
HXLINE(  54)		this->max = max;
HXLINE(  55)		this->boost = boost;
HXLINE(  56)		this->maxMax = maxMax;
HXLINE(  57)		this->internalDraw();
            	}


HX_DEFINE_DYNAMIC_FUNC4(StatusBar_obj,draw,(void))

void StatusBar_obj::setTextColor(int textColor){
            	HX_STACKFRAME(&_hx_pos_49657dd41985c275_60_setTextColor)
HXLINE(  61)		this->textColor = textColor;
HXLINE(  62)		if (::hx::IsNotNull( this->boostText )) {
HXLINE(  63)			this->boostText->setColor(this->textColor);
            		}
HXLINE(  65)		this->valueText->setColor(this->textColor);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StatusBar_obj,setTextColor,(void))

void StatusBar_obj::internalDraw(){
            	HX_STACKFRAME(&_hx_pos_49657dd41985c275_68_internalDraw)
HXLINE(  69)		this->get_graphics()->clear();
HXLINE(  70)		this->colorSprite->get_graphics()->clear();
HXLINE(  71)		int textColor = 16777215;
HXLINE(  72)		bool _hx_tmp;
HXDLIN(  72)		if ((this->maxMax > 0)) {
HXLINE(  72)			_hx_tmp = ((this->max - this->boost) == this->maxMax);
            		}
            		else {
HXLINE(  72)			_hx_tmp = false;
            		}
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  73)			textColor = 16572160;
            		}
            		else {
HXLINE(  74)			if ((this->boost > 0)) {
HXLINE(  75)				textColor = 6206769;
            			}
            		}
HXLINE(  77)		if ((this->textColor != textColor)) {
HXLINE(  78)			this->setTextColor(textColor);
            		}
HXLINE(  80)		this->get_graphics()->beginFill(this->backColor,null());
HXLINE(  81)		this->get_graphics()->drawRoundRect(( (Float)(0) ),( (Float)(0) ),( (Float)(this->w) ),( (Float)(this->h) ),( (Float)(20) ),null());
HXLINE(  82)		this->get_graphics()->endFill();
HXLINE(  83)		this->colorSprite->get_graphics()->beginFill(this->color,null());
HXLINE(  84)		if ((this->max > 0)) {
HXLINE(  85)			 ::openfl::display::Graphics _hx_tmp1 = this->colorSprite->get_graphics();
HXDLIN(  85)			_hx_tmp1->drawRoundRect(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->w) ) * (( (Float)(this->val) ) / ( (Float)(this->max) ))),( (Float)(this->h) ),( (Float)(20) ),null());
            		}
            		else {
HXLINE(  87)			this->colorSprite->get_graphics()->drawRoundRect(( (Float)(0) ),( (Float)(0) ),( (Float)(this->w) ),( (Float)(this->h) ),( (Float)(20) ),null());
            		}
HXLINE(  89)		this->colorSprite->get_graphics()->endFill();
HXLINE(  90)		if ((this->h > 4)) {
HXLINE(  91)			if ((this->max > 0)) {
HXLINE(  92)				this->valueText->set_text((((HX_("",00,00,00,00) + this->val) + HX_("/",2f,00,00,00)) + this->max));
            			}
            			else {
HXLINE(  94)				this->valueText->set_text((HX_("",00,00,00,00) + this->val));
            			}
HXLINE(  96)			this->valueText->updateMetrics();
HXLINE(  97)			 ::ui::SimpleText _hx_tmp2 = this->valueText;
HXDLIN(  97)			int _hx_tmp3 = this->h;
HXDLIN(  97)			_hx_tmp2->set_y(((( (Float)(_hx_tmp3) ) - this->valueText->get_height()) / ( (Float)(2) )));
HXLINE(  99)			if (!(this->contains(this->valueText))) {
HXLINE( 100)				this->addChild(this->valueText);
            			}
HXLINE( 102)			if ((this->boost != 0)) {
HXLINE( 103)				 ::ui::SimpleText _hx_tmp4 = this->boostText;
HXDLIN( 103)				::String _hx_tmp5;
HXDLIN( 103)				if ((this->boost > 0)) {
HXLINE( 103)					_hx_tmp5 = HX_("+",2b,00,00,00);
            				}
            				else {
HXLINE( 103)					_hx_tmp5 = HX_("",00,00,00,00);
            				}
HXDLIN( 103)				_hx_tmp4->set_text((((HX_(" (",08,1c,00,00) + _hx_tmp5) + ::Std_obj::string(this->boost)) + HX_(")",29,00,00,00)));
HXLINE( 104)				this->boostText->updateMetrics();
HXLINE( 105)				 ::ui::SimpleText _hx_tmp6 = this->valueText;
HXDLIN( 105)				Float _hx_tmp7 = (( (Float)(this->w) ) / ( (Float)(2) ));
HXDLIN( 105)				Float _hx_tmp8 = this->valueText->get_width();
HXDLIN( 105)				Float _hx_tmp9 = (_hx_tmp7 - ((_hx_tmp8 + this->boostText->get_width()) / ( (Float)(2) )));
HXDLIN( 105)				_hx_tmp6->set_x((_hx_tmp9 + this->textXOffset));
HXLINE( 106)				 ::ui::SimpleText _hx_tmp10 = this->boostText;
HXDLIN( 106)				Float _hx_tmp11 = this->valueText->get_x();
HXDLIN( 106)				Float _hx_tmp12 = (_hx_tmp11 + this->valueText->get_width());
HXDLIN( 106)				_hx_tmp10->set_x((_hx_tmp12 + this->textXOffset));
HXLINE( 107)				if (!(this->contains(this->boostText))) {
HXLINE( 108)					this->addChild(this->boostText);
            				}
            			}
            			else {
HXLINE( 111)				 ::ui::SimpleText _hx_tmp13 = this->valueText;
HXDLIN( 111)				Float _hx_tmp14 = (( (Float)(this->w) ) / ( (Float)(2) ));
HXDLIN( 111)				Float _hx_tmp15 = (_hx_tmp14 - (this->valueText->get_width() / ( (Float)(2) )));
HXDLIN( 111)				_hx_tmp13->set_x((_hx_tmp15 + this->textXOffset));
HXLINE( 112)				if (this->contains(this->boostText)) {
HXLINE( 113)					this->removeChild(this->boostText);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StatusBar_obj,internalDraw,(void))


::hx::ObjectPtr< StatusBar_obj > StatusBar_obj::__new(int w,int h,int color,int backColor,::hx::Null< Float >  __o_textScale,::hx::Null< int >  __o_textXOffset) {
	::hx::ObjectPtr< StatusBar_obj > __this = new StatusBar_obj();
	__this->__construct(w,h,color,backColor,__o_textScale,__o_textXOffset);
	return __this;
}

::hx::ObjectPtr< StatusBar_obj > StatusBar_obj::__alloc(::hx::Ctx *_hx_ctx,int w,int h,int color,int backColor,::hx::Null< Float >  __o_textScale,::hx::Null< int >  __o_textXOffset) {
	StatusBar_obj *__this = (StatusBar_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StatusBar_obj), true, "ui.StatusBar"));
	*(void **)__this = StatusBar_obj::_hx_vtable;
	__this->__construct(w,h,color,backColor,__o_textScale,__o_textXOffset);
	return __this;
}

StatusBar_obj::StatusBar_obj()
{
}

void StatusBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StatusBar);
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(backColor,"backColor");
	HX_MARK_MEMBER_NAME(textColor,"textColor");
	HX_MARK_MEMBER_NAME(val,"val");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(boost,"boost");
	HX_MARK_MEMBER_NAME(maxMax,"maxMax");
	HX_MARK_MEMBER_NAME(valueText,"valueText");
	HX_MARK_MEMBER_NAME(boostText,"boostText");
	HX_MARK_MEMBER_NAME(colorSprite,"colorSprite");
	HX_MARK_MEMBER_NAME(defaultForegroundColor,"defaultForegroundColor");
	HX_MARK_MEMBER_NAME(defaultBackgroundColor,"defaultBackgroundColor");
	HX_MARK_MEMBER_NAME(textXOffset,"textXOffset");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StatusBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(backColor,"backColor");
	HX_VISIT_MEMBER_NAME(textColor,"textColor");
	HX_VISIT_MEMBER_NAME(val,"val");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(boost,"boost");
	HX_VISIT_MEMBER_NAME(maxMax,"maxMax");
	HX_VISIT_MEMBER_NAME(valueText,"valueText");
	HX_VISIT_MEMBER_NAME(boostText,"boostText");
	HX_VISIT_MEMBER_NAME(colorSprite,"colorSprite");
	HX_VISIT_MEMBER_NAME(defaultForegroundColor,"defaultForegroundColor");
	HX_VISIT_MEMBER_NAME(defaultBackgroundColor,"defaultBackgroundColor");
	HX_VISIT_MEMBER_NAME(textXOffset,"textXOffset");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StatusBar_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return ::hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"h") ) { return ::hx::Val( h ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"val") ) { return ::hx::Val( val ); }
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"boost") ) { return ::hx::Val( boost ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"maxMax") ) { return ::hx::Val( maxMax ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"backColor") ) { return ::hx::Val( backColor ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { return ::hx::Val( textColor ); }
		if (HX_FIELD_EQ(inName,"valueText") ) { return ::hx::Val( valueText ); }
		if (HX_FIELD_EQ(inName,"boostText") ) { return ::hx::Val( boostText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorSprite") ) { return ::hx::Val( colorSprite ); }
		if (HX_FIELD_EQ(inName,"textXOffset") ) { return ::hx::Val( textXOffset ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setTextColor") ) { return ::hx::Val( setTextColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"internalDraw") ) { return ::hx::Val( internalDraw_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"defaultForegroundColor") ) { return ::hx::Val( defaultForegroundColor ); }
		if (HX_FIELD_EQ(inName,"defaultBackgroundColor") ) { return ::hx::Val( defaultBackgroundColor ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StatusBar_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"val") ) { val=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boost") ) { boost=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"maxMax") ) { maxMax=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"backColor") ) { backColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textColor") ) { textColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"valueText") ) { valueText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boostText") ) { boostText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorSprite") ) { colorSprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textXOffset") ) { textXOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"defaultForegroundColor") ) { defaultForegroundColor=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultBackgroundColor") ) { defaultBackgroundColor=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StatusBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("w",77,00,00,00));
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("backColor",bc,d9,0d,27));
	outFields->push(HX_("textColor",76,01,4a,e3));
	outFields->push(HX_("val",e1,de,59,00));
	outFields->push(HX_("max",a4,0a,53,00));
	outFields->push(HX_("boost",23,27,f8,b6));
	outFields->push(HX_("maxMax",60,f6,50,be));
	outFields->push(HX_("valueText",be,84,7e,99));
	outFields->push(HX_("boostText",70,ed,70,92));
	outFields->push(HX_("colorSprite",c8,6d,be,7d));
	outFields->push(HX_("defaultForegroundColor",df,55,a5,d8));
	outFields->push(HX_("defaultBackgroundColor",d4,7e,71,53));
	outFields->push(HX_("textXOffset",fe,b0,63,ee));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StatusBar_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(StatusBar_obj,w),HX_("w",77,00,00,00)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,h),HX_("h",68,00,00,00)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,backColor),HX_("backColor",bc,d9,0d,27)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,textColor),HX_("textColor",76,01,4a,e3)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,val),HX_("val",e1,de,59,00)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,max),HX_("max",a4,0a,53,00)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,boost),HX_("boost",23,27,f8,b6)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,maxMax),HX_("maxMax",60,f6,50,be)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(StatusBar_obj,valueText),HX_("valueText",be,84,7e,99)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(StatusBar_obj,boostText),HX_("boostText",70,ed,70,92)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(StatusBar_obj,colorSprite),HX_("colorSprite",c8,6d,be,7d)},
	{::hx::fsFloat,(int)offsetof(StatusBar_obj,defaultForegroundColor),HX_("defaultForegroundColor",df,55,a5,d8)},
	{::hx::fsFloat,(int)offsetof(StatusBar_obj,defaultBackgroundColor),HX_("defaultBackgroundColor",d4,7e,71,53)},
	{::hx::fsInt,(int)offsetof(StatusBar_obj,textXOffset),HX_("textXOffset",fe,b0,63,ee)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StatusBar_obj_sStaticStorageInfo = 0;
#endif

static ::String StatusBar_obj_sMemberFields[] = {
	HX_("w",77,00,00,00),
	HX_("h",68,00,00,00),
	HX_("color",63,71,5c,4a),
	HX_("backColor",bc,d9,0d,27),
	HX_("textColor",76,01,4a,e3),
	HX_("val",e1,de,59,00),
	HX_("max",a4,0a,53,00),
	HX_("boost",23,27,f8,b6),
	HX_("maxMax",60,f6,50,be),
	HX_("valueText",be,84,7e,99),
	HX_("boostText",70,ed,70,92),
	HX_("colorSprite",c8,6d,be,7d),
	HX_("defaultForegroundColor",df,55,a5,d8),
	HX_("defaultBackgroundColor",d4,7e,71,53),
	HX_("textXOffset",fe,b0,63,ee),
	HX_("draw",04,2c,70,42),
	HX_("setTextColor",74,c1,99,07),
	HX_("internalDraw",e1,a1,f0,2d),
	::String(null()) };

::hx::Class StatusBar_obj::__mClass;

void StatusBar_obj::__register()
{
	StatusBar_obj _hx_dummy;
	StatusBar_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.StatusBar",07,0f,59,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StatusBar_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StatusBar_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StatusBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StatusBar_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
