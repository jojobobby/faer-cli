// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_LineBreakDesign
#include <ui/LineBreakDesign.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5fe8a0d6ac733c9a_11_new,"ui.LineBreakDesign","new",0xf8dc1901,"ui.LineBreakDesign.new","ui/LineBreakDesign.hx",11,0x67bed5d0)
HX_LOCAL_STACK_FRAME(_hx_pos_5fe8a0d6ac733c9a_26_setWidthColor,"ui.LineBreakDesign","setWidthColor",0xb7c38fa0,"ui.LineBreakDesign.setWidthColor","ui/LineBreakDesign.hx",26,0x67bed5d0)
namespace ui{

void LineBreakDesign_obj::__construct(int width,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5fe8a0d6ac733c9a_11_new)
HXLINE(  14)		this->designGraphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(3)->init(0, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,16777215,1))->init(1, ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),1))->init(2,::util::GraphicsUtil_obj::END_FILL),true);
HXLINE(  13)		this->designPath =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),1);
HXLINE(  12)		this->designFill =  ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,16777215,1);
HXLINE(  21)		super::__construct();
HXLINE(  23)		this->setWidthColor(width,color);
            	}

Dynamic LineBreakDesign_obj::__CreateEmpty() { return new LineBreakDesign_obj; }

void *LineBreakDesign_obj::_hx_vtable = 0;

Dynamic LineBreakDesign_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LineBreakDesign_obj > _hx_result = new LineBreakDesign_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LineBreakDesign_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3957928d) {
		if (inClassId<=(int)0x0c89e854) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
		} else {
			return inClassId==(int)0x3957928d;
		}
	} else {
		return inClassId==(int)0x4a85ffb3 || inClassId==(int)0x6b353933;
	}
}

void LineBreakDesign_obj::setWidthColor(int width,int color){
            	HX_STACKFRAME(&_hx_pos_5fe8a0d6ac733c9a_26_setWidthColor)
HXLINE(  27)		this->get_graphics()->clear();
HXLINE(  28)		this->designFill->color = color;
HXLINE(  29)		::util::GraphicsUtil_obj::clearPath(this->designPath);
HXLINE(  30)		::util::GraphicsUtil_obj::drawDiamond(( (Float)(0) ),( (Float)(0) ),( (Float)(4) ),this->designPath);
HXLINE(  31)		::util::GraphicsUtil_obj::drawDiamond(( (Float)(width) ),( (Float)(0) ),( (Float)(4) ),this->designPath);
HXLINE(  32)		::util::GraphicsUtil_obj::drawRect(0,-1,width,2,this->designPath);
HXLINE(  33)		this->designGraphicsData->set(1,this->designPath);
HXLINE(  34)		this->get_graphics()->drawGraphicsData(this->designGraphicsData);
            	}


HX_DEFINE_DYNAMIC_FUNC2(LineBreakDesign_obj,setWidthColor,(void))


::hx::ObjectPtr< LineBreakDesign_obj > LineBreakDesign_obj::__new(int width,int color) {
	::hx::ObjectPtr< LineBreakDesign_obj > __this = new LineBreakDesign_obj();
	__this->__construct(width,color);
	return __this;
}

::hx::ObjectPtr< LineBreakDesign_obj > LineBreakDesign_obj::__alloc(::hx::Ctx *_hx_ctx,int width,int color) {
	LineBreakDesign_obj *__this = (LineBreakDesign_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LineBreakDesign_obj), true, "ui.LineBreakDesign"));
	*(void **)__this = LineBreakDesign_obj::_hx_vtable;
	__this->__construct(width,color);
	return __this;
}

LineBreakDesign_obj::LineBreakDesign_obj()
{
}

void LineBreakDesign_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LineBreakDesign);
	HX_MARK_MEMBER_NAME(designFill,"designFill");
	HX_MARK_MEMBER_NAME(designPath,"designPath");
	HX_MARK_MEMBER_NAME(designGraphicsData,"designGraphicsData");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LineBreakDesign_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(designFill,"designFill");
	HX_VISIT_MEMBER_NAME(designPath,"designPath");
	HX_VISIT_MEMBER_NAME(designGraphicsData,"designGraphicsData");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val LineBreakDesign_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"designFill") ) { return ::hx::Val( designFill ); }
		if (HX_FIELD_EQ(inName,"designPath") ) { return ::hx::Val( designPath ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setWidthColor") ) { return ::hx::Val( setWidthColor_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"designGraphicsData") ) { return ::hx::Val( designGraphicsData ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineBreakDesign_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"designFill") ) { designFill=inValue.Cast<  ::openfl::display::GraphicsSolidFill >(); return inValue; }
		if (HX_FIELD_EQ(inName,"designPath") ) { designPath=inValue.Cast<  ::openfl::display::GraphicsPath >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"designGraphicsData") ) { designGraphicsData=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineBreakDesign_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("designFill",e1,2d,b7,c9));
	outFields->push(HX_("designPath",03,45,4d,d0));
	outFields->push(HX_("designGraphicsData",f3,29,ef,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineBreakDesign_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::GraphicsSolidFill */ ,(int)offsetof(LineBreakDesign_obj,designFill),HX_("designFill",e1,2d,b7,c9)},
	{::hx::fsObject /*  ::openfl::display::GraphicsPath */ ,(int)offsetof(LineBreakDesign_obj,designPath),HX_("designPath",03,45,4d,d0)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(LineBreakDesign_obj,designGraphicsData),HX_("designGraphicsData",f3,29,ef,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineBreakDesign_obj_sStaticStorageInfo = 0;
#endif

static ::String LineBreakDesign_obj_sMemberFields[] = {
	HX_("designFill",e1,2d,b7,c9),
	HX_("designPath",03,45,4d,d0),
	HX_("designGraphicsData",f3,29,ef,c4),
	HX_("setWidthColor",bf,d3,2f,2b),
	::String(null()) };

::hx::Class LineBreakDesign_obj::__mClass;

void LineBreakDesign_obj::__register()
{
	LineBreakDesign_obj _hx_dummy;
	LineBreakDesign_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.LineBreakDesign",8f,84,c1,aa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineBreakDesign_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineBreakDesign_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineBreakDesign_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineBreakDesign_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
