// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_ui_IconButton
#include <ui/IconButton.h>
#endif
#ifndef INCLUDED_ui_tooltip_TextToolTip
#include <ui/tooltip/TextToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91e3f5c95b2eae50_14_new,"ui.IconButton","new",0x446061b7,"ui.IconButton.new","ui/IconButton.hx",14,0xa522d4f8)
HX_LOCAL_STACK_FRAME(_hx_pos_91e3f5c95b2eae50_40_setColorTransform,"ui.IconButton","setColorTransform",0x2b2cfa62,"ui.IconButton.setColorTransform","ui/IconButton.hx",40,0xa522d4f8)
HX_LOCAL_STACK_FRAME(_hx_pos_91e3f5c95b2eae50_51_onMouseOver,"ui.IconButton","onMouseOver",0xb4e06d51,"ui.IconButton.onMouseOver","ui/IconButton.hx",51,0xa522d4f8)
HX_LOCAL_STACK_FRAME(_hx_pos_91e3f5c95b2eae50_59_onMouseOut,"ui.IconButton","onMouseOut",0x1a111331,"ui.IconButton.onMouseOut","ui/IconButton.hx",59,0xa522d4f8)
HX_LOCAL_STACK_FRAME(_hx_pos_91e3f5c95b2eae50_66_onRemovedFromStage,"ui.IconButton","onRemovedFromStage",0x34a654fc,"ui.IconButton.onRemovedFromStage","ui/IconButton.hx",66,0xa522d4f8)
HX_LOCAL_STACK_FRAME(_hx_pos_91e3f5c95b2eae50_15_boot,"ui.IconButton","boot",0x880e1efb,"ui.IconButton.boot","ui/IconButton.hx",15,0xa522d4f8)
namespace ui{

void IconButton_obj::__construct( ::openfl::display::BitmapData bitmapData,::String toolTipTitle,::String hotkeyName){
            	HX_GC_STACKFRAME(&_hx_pos_91e3f5c95b2eae50_14_new)
HXLINE(  22)		this->toolTip = null();
HXLINE(  21)		this->ct = null();
HXLINE(  20)		this->hotkeyName = HX_("",00,00,00,00);
HXLINE(  25)		super::__construct();
HXLINE(  27)		this->origIconBitmapData = bitmapData;
HXLINE(  28)		 ::openfl::display::BitmapData _hx_tmp = this->origIconBitmapData;
HXDLIN(  28)		this->iconBitmapData = ::util::TextureRedrawer_obj::redraw(_hx_tmp,::Std_obj::_hx_int((( (Float)(320) ) / ( (Float)(this->origIconBitmapData->width) ))),true,0,null(),null(),null());
HXLINE(  29)		this->icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->iconBitmapData,null(),null());
HXLINE(  30)		 ::openfl::display::Bitmap _hx_tmp1 = this->icon;
HXDLIN(  30)		_hx_tmp1->set_x(this->icon->set_y(( (Float)(-12) )));
HXLINE(  31)		this->addChild(this->icon);
HXLINE(  32)		this->hotkeyName = hotkeyName;
HXLINE(  33)		if ((toolTipTitle != HX_("",00,00,00,00))) {
HXLINE(  34)			this->toolTip =  ::ui::tooltip::TextToolTip_obj::__alloc( HX_CTX ,3552822,10197915,toolTipTitle,HX_("",00,00,00,00));
            		}
HXLINE(  35)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
HXLINE(  36)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE(  37)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null(),null(),null());
            	}

Dynamic IconButton_obj::__CreateEmpty() { return new IconButton_obj; }

void *IconButton_obj::_hx_vtable = 0;

Dynamic IconButton_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IconButton_obj > _hx_result = new IconButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool IconButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x26b8756b || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void IconButton_obj::setColorTransform( ::openfl::geom::ColorTransform ct){
            	HX_STACKFRAME(&_hx_pos_91e3f5c95b2eae50_40_setColorTransform)
HXLINE(  41)		if (::hx::IsInstanceEq( ct,this->ct )) {
HXLINE(  42)			return;
            		}
HXLINE(  44)		this->ct = ct;
HXLINE(  45)		if (::hx::IsNull( this->ct )) {
HXLINE(  46)			this->get_transform()->set_colorTransform(::util::ColorUtils_obj::identity);
            		}
            		else {
HXLINE(  48)			this->get_transform()->set_colorTransform(this->ct);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconButton_obj,setColorTransform,(void))

void IconButton_obj::onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_91e3f5c95b2eae50_51_onMouseOver)
HXLINE(  52)		this->setColorTransform(::ui::IconButton_obj::mouseOverCT);
HXLINE(  53)		bool _hx_tmp;
HXDLIN(  53)		if (::hx::IsNotNull( this->toolTip )) {
HXLINE(  53)			_hx_tmp = !(this->stage->contains(this->toolTip));
            		}
            		else {
HXLINE(  53)			_hx_tmp = false;
            		}
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  55)			this->stage->addChild(this->toolTip);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconButton_obj,onMouseOver,(void))

void IconButton_obj::onMouseOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_91e3f5c95b2eae50_59_onMouseOut)
HXLINE(  60)		this->setColorTransform(null());
HXLINE(  61)		bool _hx_tmp;
HXDLIN(  61)		if (::hx::IsNotNull( this->toolTip )) {
HXLINE(  61)			_hx_tmp = ::hx::IsNotNull( this->toolTip->parent );
            		}
            		else {
HXLINE(  61)			_hx_tmp = false;
            		}
HXDLIN(  61)		if (_hx_tmp) {
HXLINE(  62)			this->toolTip->parent->removeChild(this->toolTip);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconButton_obj,onMouseOut,(void))

void IconButton_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_91e3f5c95b2eae50_66_onRemovedFromStage)
HXDLIN(  66)		bool _hx_tmp;
HXDLIN(  66)		if (::hx::IsNotNull( this->toolTip )) {
HXDLIN(  66)			_hx_tmp = ::hx::IsNotNull( this->toolTip->parent );
            		}
            		else {
HXDLIN(  66)			_hx_tmp = false;
            		}
HXDLIN(  66)		if (_hx_tmp) {
HXLINE(  67)			this->toolTip->parent->removeChild(this->toolTip);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconButton_obj,onRemovedFromStage,(void))

 ::openfl::geom::ColorTransform IconButton_obj::mouseOverCT;


::hx::ObjectPtr< IconButton_obj > IconButton_obj::__new( ::openfl::display::BitmapData bitmapData,::String toolTipTitle,::String hotkeyName) {
	::hx::ObjectPtr< IconButton_obj > __this = new IconButton_obj();
	__this->__construct(bitmapData,toolTipTitle,hotkeyName);
	return __this;
}

::hx::ObjectPtr< IconButton_obj > IconButton_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::BitmapData bitmapData,::String toolTipTitle,::String hotkeyName) {
	IconButton_obj *__this = (IconButton_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IconButton_obj), true, "ui.IconButton"));
	*(void **)__this = IconButton_obj::_hx_vtable;
	__this->__construct(bitmapData,toolTipTitle,hotkeyName);
	return __this;
}

IconButton_obj::IconButton_obj()
{
}

void IconButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IconButton);
	HX_MARK_MEMBER_NAME(origIconBitmapData,"origIconBitmapData");
	HX_MARK_MEMBER_NAME(iconBitmapData,"iconBitmapData");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(hotkeyName,"hotkeyName");
	HX_MARK_MEMBER_NAME(ct,"ct");
	HX_MARK_MEMBER_NAME(toolTip,"toolTip");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void IconButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(origIconBitmapData,"origIconBitmapData");
	HX_VISIT_MEMBER_NAME(iconBitmapData,"iconBitmapData");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(hotkeyName,"hotkeyName");
	HX_VISIT_MEMBER_NAME(ct,"ct");
	HX_VISIT_MEMBER_NAME(toolTip,"toolTip");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val IconButton_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ct") ) { return ::hx::Val( ct ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toolTip") ) { return ::hx::Val( toolTip ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hotkeyName") ) { return ::hx::Val( hotkeyName ); }
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"iconBitmapData") ) { return ::hx::Val( iconBitmapData ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setColorTransform") ) { return ::hx::Val( setColorTransform_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"origIconBitmapData") ) { return ::hx::Val( origIconBitmapData ); }
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool IconButton_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"mouseOverCT") ) { outValue = ( mouseOverCT ); return true; }
	}
	return false;
}

::hx::Val IconButton_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ct") ) { ct=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toolTip") ) { toolTip=inValue.Cast<  ::ui::tooltip::TextToolTip >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hotkeyName") ) { hotkeyName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"iconBitmapData") ) { iconBitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"origIconBitmapData") ) { origIconBitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool IconButton_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"mouseOverCT") ) { mouseOverCT=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

void IconButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("origIconBitmapData",33,e2,c7,76));
	outFields->push(HX_("iconBitmapData",92,12,8c,de));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("hotkeyName",9d,d3,a1,22));
	outFields->push(HX_("ct",b1,56,00,00));
	outFields->push(HX_("toolTip",e3,64,74,6a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IconButton_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(IconButton_obj,origIconBitmapData),HX_("origIconBitmapData",33,e2,c7,76)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(IconButton_obj,iconBitmapData),HX_("iconBitmapData",92,12,8c,de)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(IconButton_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsString,(int)offsetof(IconButton_obj,hotkeyName),HX_("hotkeyName",9d,d3,a1,22)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(IconButton_obj,ct),HX_("ct",b1,56,00,00)},
	{::hx::fsObject /*  ::ui::tooltip::TextToolTip */ ,(int)offsetof(IconButton_obj,toolTip),HX_("toolTip",e3,64,74,6a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo IconButton_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &IconButton_obj::mouseOverCT,HX_("mouseOverCT",0a,fd,86,8b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String IconButton_obj_sMemberFields[] = {
	HX_("origIconBitmapData",33,e2,c7,76),
	HX_("iconBitmapData",92,12,8c,de),
	HX_("icon",79,e7,b2,45),
	HX_("hotkeyName",9d,d3,a1,22),
	HX_("ct",b1,56,00,00),
	HX_("toolTip",e3,64,74,6a),
	HX_("setColorTransform",cb,5e,21,43),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onMouseOut",a8,bb,d4,81),
	HX_("onRemovedFromStage",73,cc,89,12),
	::String(null()) };

static void IconButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IconButton_obj::mouseOverCT,"mouseOverCT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IconButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IconButton_obj::mouseOverCT,"mouseOverCT");
};

#endif

::hx::Class IconButton_obj::__mClass;

static ::String IconButton_obj_sStaticFields[] = {
	HX_("mouseOverCT",0a,fd,86,8b),
	::String(null())
};

void IconButton_obj::__register()
{
	IconButton_obj _hx_dummy;
	IconButton_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ui.IconButton",45,ba,99,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IconButton_obj::__GetStatic;
	__mClass->mSetStaticField = &IconButton_obj::__SetStatic;
	__mClass->mMarkFunc = IconButton_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(IconButton_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IconButton_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IconButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IconButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IconButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IconButton_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IconButton_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_91e3f5c95b2eae50_15_boot)
HXDLIN(  15)		mouseOverCT =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,((Float)0.86274509803921573),((Float)0.521568627450980427),null(),null(),null(),null(),null());
            	}
}

} // end namespace ui
