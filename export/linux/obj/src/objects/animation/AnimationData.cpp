// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_objects_animation_AnimationData
#include <objects/animation/AnimationData.h>
#endif
#ifndef INCLUDED_objects_animation_FrameData
#include <objects/animation/FrameData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c46c1197c0a718f8_5_new,"objects.animation.AnimationData","new",0x3ff6049c,"objects.animation.AnimationData.new","objects/animation/AnimationData.hx",5,0x79011196)
HX_LOCAL_STACK_FRAME(_hx_pos_c46c1197c0a718f8_22_getLastRun,"objects.animation.AnimationData","getLastRun",0xa6acbfe3,"objects.animation.AnimationData.getLastRun","objects/animation/AnimationData.hx",22,0x79011196)
HX_LOCAL_STACK_FRAME(_hx_pos_c46c1197c0a718f8_29_getNextRun,"objects.animation.AnimationData","getNextRun",0x74460566,"objects.animation.AnimationData.getNextRun","objects/animation/AnimationData.hx",29,0x79011196)
HX_LOCAL_STACK_FRAME(_hx_pos_c46c1197c0a718f8_36_getPeriod,"objects.animation.AnimationData","getPeriod",0x77baf373,"objects.animation.AnimationData.getPeriod","objects/animation/AnimationData.hx",36,0x79011196)
namespace objects{
namespace animation{

void AnimationData_obj::__construct( ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_c46c1197c0a718f8_5_new)
HXLINE(   9)		this->sync = false;
HXLINE(   8)		this->periodJitter = 0;
HXLINE(   7)		this->period = 0;
HXLINE(   6)		this->prob = ((Float)1.0);
HXLINE(  13)		this->frames = ::Array_obj< ::Dynamic>::__new();
HXLINE(  14)		float _hx_tmp;
HXDLIN(  14)		if (::hx::IsNotNull( xml->get(HX_("prob",95,c7,5e,4a)) )) {
HXLINE(  14)			_hx_tmp = ( (float)(::Std_obj::parseFloat(xml->get(HX_("prob",95,c7,5e,4a)))) );
            		}
            		else {
HXLINE(  14)			_hx_tmp = ( (float)(0) );
            		}
HXDLIN(  14)		this->prob = ( (Float)(_hx_tmp) );
HXLINE(  15)		int _hx_tmp1;
HXDLIN(  15)		if (::hx::IsNotNull( xml->get(HX_("period",01,61,1b,3b)) )) {
HXLINE(  15)			_hx_tmp1 = ( (int)(::Std_obj::parseInt(xml->get(HX_("period",01,61,1b,3b)))) );
            		}
            		else {
HXLINE(  15)			_hx_tmp1 = 0;
            		}
HXDLIN(  15)		this->period = _hx_tmp1;
HXLINE(  16)		int _hx_tmp2;
HXDLIN(  16)		if (::hx::IsNotNull( xml->get(HX_("periodJitter",0d,52,70,25)) )) {
HXLINE(  16)			_hx_tmp2 = ( (int)(::Std_obj::parseInt(xml->get(HX_("periodJitter",0d,52,70,25)))) );
            		}
            		else {
HXLINE(  16)			_hx_tmp2 = 0;
            		}
HXDLIN(  16)		this->periodJitter = _hx_tmp2;
HXLINE(  17)		::String tmp = xml->get(HX_("sync",5b,ba,5f,4c));
HXDLIN(  17)		::String _hx_tmp3;
HXDLIN(  17)		if (::hx::IsNotNull( tmp )) {
HXLINE(  17)			_hx_tmp3 = tmp;
            		}
            		else {
HXLINE(  17)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN(  17)		this->sync = (_hx_tmp3 == HX_("true",4e,a7,03,4d));
HXLINE(  18)		{
HXLINE(  18)			 ::Dynamic frameXML = xml->elementsNamed(HX_("Frame",0d,e8,b0,99));
HXDLIN(  18)			while(( (bool)(frameXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  18)				 ::Xml frameXML1 = ( ( ::Xml)(frameXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  19)				::Array< ::Dynamic> _hx_tmp4 = this->frames;
HXDLIN(  19)				_hx_tmp4->push( ::objects::animation::FrameData_obj::__alloc( HX_CTX ,frameXML1));
            			}
            		}
            	}

Dynamic AnimationData_obj::__CreateEmpty() { return new AnimationData_obj; }

void *AnimationData_obj::_hx_vtable = 0;

Dynamic AnimationData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnimationData_obj > _hx_result = new AnimationData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AnimationData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38c84dda;
}

int AnimationData_obj::getLastRun(int time){
            	HX_STACKFRAME(&_hx_pos_c46c1197c0a718f8_22_getLastRun)
HXLINE(  23)		if (this->sync) {
HXLINE(  24)			return (::Math_obj::round((( (Float)(time) ) / ( (Float)(this->period) ))) * this->period);
            		}
HXLINE(  26)		int _hx_tmp = (time + this->getPeriod());
HXDLIN(  26)		return ::Std_obj::_hx_int((_hx_tmp + (( (Float)(200) ) * ::Math_obj::random())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimationData_obj,getLastRun,return )

int AnimationData_obj::getNextRun(int time){
            	HX_STACKFRAME(&_hx_pos_c46c1197c0a718f8_29_getNextRun)
HXLINE(  30)		if (this->sync) {
HXLINE(  31)			return ((::Math_obj::round((( (Float)(time) ) / ( (Float)(this->period) ))) * this->period) + this->period);
            		}
HXLINE(  33)		return (time + this->getPeriod());
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimationData_obj,getNextRun,return )

int AnimationData_obj::getPeriod(){
            	HX_STACKFRAME(&_hx_pos_c46c1197c0a718f8_36_getPeriod)
HXLINE(  37)		if ((this->periodJitter == 0)) {
HXLINE(  38)			return this->period;
            		}
HXLINE(  40)		return ::Std_obj::_hx_int(((this->period - this->periodJitter) + ((( (Float)(2) ) * ::Math_obj::random()) * ( (Float)(this->periodJitter) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationData_obj,getPeriod,return )


::hx::ObjectPtr< AnimationData_obj > AnimationData_obj::__new( ::Xml xml) {
	::hx::ObjectPtr< AnimationData_obj > __this = new AnimationData_obj();
	__this->__construct(xml);
	return __this;
}

::hx::ObjectPtr< AnimationData_obj > AnimationData_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml xml) {
	AnimationData_obj *__this = (AnimationData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnimationData_obj), true, "objects.animation.AnimationData"));
	*(void **)__this = AnimationData_obj::_hx_vtable;
	__this->__construct(xml);
	return __this;
}

AnimationData_obj::AnimationData_obj()
{
}

void AnimationData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimationData);
	HX_MARK_MEMBER_NAME(prob,"prob");
	HX_MARK_MEMBER_NAME(period,"period");
	HX_MARK_MEMBER_NAME(periodJitter,"periodJitter");
	HX_MARK_MEMBER_NAME(sync,"sync");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_END_CLASS();
}

void AnimationData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(prob,"prob");
	HX_VISIT_MEMBER_NAME(period,"period");
	HX_VISIT_MEMBER_NAME(periodJitter,"periodJitter");
	HX_VISIT_MEMBER_NAME(sync,"sync");
	HX_VISIT_MEMBER_NAME(frames,"frames");
}

::hx::Val AnimationData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"prob") ) { return ::hx::Val( prob ); }
		if (HX_FIELD_EQ(inName,"sync") ) { return ::hx::Val( sync ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"period") ) { return ::hx::Val( period ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return ::hx::Val( frames ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getPeriod") ) { return ::hx::Val( getPeriod_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getLastRun") ) { return ::hx::Val( getLastRun_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNextRun") ) { return ::hx::Val( getNextRun_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"periodJitter") ) { return ::hx::Val( periodJitter ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AnimationData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"prob") ) { prob=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sync") ) { sync=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"period") ) { period=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"periodJitter") ) { periodJitter=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimationData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("prob",95,c7,5e,4a));
	outFields->push(HX_("period",01,61,1b,3b));
	outFields->push(HX_("periodJitter",0d,52,70,25));
	outFields->push(HX_("sync",5b,ba,5f,4c));
	outFields->push(HX_("frames",a6,af,85,ac));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AnimationData_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(AnimationData_obj,prob),HX_("prob",95,c7,5e,4a)},
	{::hx::fsInt,(int)offsetof(AnimationData_obj,period),HX_("period",01,61,1b,3b)},
	{::hx::fsInt,(int)offsetof(AnimationData_obj,periodJitter),HX_("periodJitter",0d,52,70,25)},
	{::hx::fsBool,(int)offsetof(AnimationData_obj,sync),HX_("sync",5b,ba,5f,4c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AnimationData_obj,frames),HX_("frames",a6,af,85,ac)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AnimationData_obj_sStaticStorageInfo = 0;
#endif

static ::String AnimationData_obj_sMemberFields[] = {
	HX_("prob",95,c7,5e,4a),
	HX_("period",01,61,1b,3b),
	HX_("periodJitter",0d,52,70,25),
	HX_("sync",5b,ba,5f,4c),
	HX_("frames",a6,af,85,ac),
	HX_("getLastRun",9f,b4,0d,27),
	HX_("getNextRun",22,fa,a6,f4),
	HX_("getPeriod",37,ea,71,b7),
	::String(null()) };

::hx::Class AnimationData_obj::__mClass;

void AnimationData_obj::__register()
{
	AnimationData_obj _hx_dummy;
	AnimationData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.animation.AnimationData",aa,c6,40,c8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnimationData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnimationData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimationData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimationData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
} // end namespace animation
