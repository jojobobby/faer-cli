// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_objects_TextureData
#include <objects/TextureData.h>
#endif
#ifndef INCLUDED_objects_animation_FrameData
#include <objects/animation/FrameData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_17edf9ddbaec5999_7_new,"objects.animation.FrameData","new",0xdfc480c5,"objects.animation.FrameData.new","objects/animation/FrameData.hx",7,0xb6e1c48d)
namespace objects{
namespace animation{

void FrameData_obj::__construct( ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_17edf9ddbaec5999_7_new)
HXLINE(   8)		this->time = 0;
HXLINE(  12)		float _hx_tmp;
HXDLIN(  12)		if (::hx::IsNotNull( xml->get(HX_("time",0d,cc,fc,4c)) )) {
HXLINE(  12)			_hx_tmp = ( (float)(::Std_obj::parseFloat(xml->get(HX_("time",0d,cc,fc,4c)))) );
            		}
            		else {
HXLINE(  12)			_hx_tmp = ( (float)(0) );
            		}
HXDLIN(  12)		this->time = ::Std_obj::_hx_int(( (Float)((_hx_tmp * ( (float)(1000) ))) ));
HXLINE(  13)		this->textureData =  ::objects::TextureData_obj::__alloc( HX_CTX ,xml,null());
            	}

Dynamic FrameData_obj::__CreateEmpty() { return new FrameData_obj; }

void *FrameData_obj::_hx_vtable = 0;

Dynamic FrameData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FrameData_obj > _hx_result = new FrameData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FrameData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fcee167;
}


::hx::ObjectPtr< FrameData_obj > FrameData_obj::__new( ::Xml xml) {
	::hx::ObjectPtr< FrameData_obj > __this = new FrameData_obj();
	__this->__construct(xml);
	return __this;
}

::hx::ObjectPtr< FrameData_obj > FrameData_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml xml) {
	FrameData_obj *__this = (FrameData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FrameData_obj), true, "objects.animation.FrameData"));
	*(void **)__this = FrameData_obj::_hx_vtable;
	__this->__construct(xml);
	return __this;
}

FrameData_obj::FrameData_obj()
{
}

void FrameData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FrameData);
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(textureData,"textureData");
	HX_MARK_END_CLASS();
}

void FrameData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(textureData,"textureData");
}

::hx::Val FrameData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return ::hx::Val( time ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textureData") ) { return ::hx::Val( textureData ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FrameData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textureData") ) { textureData=inValue.Cast<  ::objects::TextureData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FrameData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("textureData",a5,54,e2,f8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FrameData_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FrameData_obj,time),HX_("time",0d,cc,fc,4c)},
	{::hx::fsObject /*  ::objects::TextureData */ ,(int)offsetof(FrameData_obj,textureData),HX_("textureData",a5,54,e2,f8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FrameData_obj_sStaticStorageInfo = 0;
#endif

static ::String FrameData_obj_sMemberFields[] = {
	HX_("time",0d,cc,fc,4c),
	HX_("textureData",a5,54,e2,f8),
	::String(null()) };

::hx::Class FrameData_obj::__mClass;

void FrameData_obj::__register()
{
	FrameData_obj _hx_dummy;
	FrameData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.animation.FrameData",53,ba,61,2a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FrameData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FrameData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FrameData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FrameData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
} // end namespace animation
