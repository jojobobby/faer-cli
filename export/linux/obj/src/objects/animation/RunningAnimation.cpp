// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_objects_TextureData
#include <objects/TextureData.h>
#endif
#ifndef INCLUDED_objects_animation_AnimationData
#include <objects/animation/AnimationData.h>
#endif
#ifndef INCLUDED_objects_animation_FrameData
#include <objects/animation/FrameData.h>
#endif
#ifndef INCLUDED_objects_animation_RunningAnimation
#include <objects/animation/RunningAnimation.h>
#endif
#ifndef INCLUDED_util_Rect
#include <util/Rect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fbeab5aa65b5c48a_46_new,"objects.animation.RunningAnimation","new",0x5b51109b,"objects.animation.RunningAnimation.new","objects/animation/Animations.hx",46,0x56154409)
HX_LOCAL_STACK_FRAME(_hx_pos_fbeab5aa65b5c48a_61_getRect,"objects.animation.RunningAnimation","getRect",0xd96b7695,"objects.animation.RunningAnimation.getRect","objects/animation/Animations.hx",61,0x56154409)
namespace objects{
namespace animation{

void RunningAnimation_obj::__construct( ::objects::animation::AnimationData animationData,int start){
            	HX_STACKFRAME(&_hx_pos_fbeab5aa65b5c48a_46_new)
HXLINE(  50)		this->frameStart = 0;
HXLINE(  49)		this->frameId = 0;
HXLINE(  48)		this->start = 0;
HXLINE(  54)		this->animationData = animationData;
HXLINE(  55)		this->start = start;
HXLINE(  56)		this->frameId = 0;
HXLINE(  57)		this->frameStart = start;
HXLINE(  58)		this->rect = null();
            	}

Dynamic RunningAnimation_obj::__CreateEmpty() { return new RunningAnimation_obj; }

void *RunningAnimation_obj::_hx_vtable = 0;

Dynamic RunningAnimation_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RunningAnimation_obj > _hx_result = new RunningAnimation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool RunningAnimation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x260eca95;
}

 ::util::Rect RunningAnimation_obj::getRect(int time){
            	HX_STACKFRAME(&_hx_pos_fbeab5aa65b5c48a_61_getRect)
HXLINE(  62)		 ::objects::animation::FrameData frame = this->animationData->frames->__get(this->frameId).StaticCast<  ::objects::animation::FrameData >();
HXLINE(  63)		while(((time - this->frameStart) > frame->time)){
HXLINE(  64)			if ((this->frameId >= (this->animationData->frames->length - 1))) {
HXLINE(  65)				return null();
            			}
HXLINE(  67)			this->frameStart = (this->frameStart + frame->time);
HXLINE(  68)			this->frameId++;
HXLINE(  69)			frame = this->animationData->frames->__get(this->frameId).StaticCast<  ::objects::animation::FrameData >();
HXLINE(  70)			this->rect = null();
            		}
HXLINE(  73)		if (::hx::IsNull( this->rect )) {
HXLINE(  74)			 ::objects::TextureData frame1 = frame->textureData;
HXDLIN(  74)			this->rect = frame1->getRect(::Std_obj::_hx_int((::Math_obj::random() * ( (Float)(100) ))));
            		}
HXLINE(  76)		return this->rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RunningAnimation_obj,getRect,return )


::hx::ObjectPtr< RunningAnimation_obj > RunningAnimation_obj::__new( ::objects::animation::AnimationData animationData,int start) {
	::hx::ObjectPtr< RunningAnimation_obj > __this = new RunningAnimation_obj();
	__this->__construct(animationData,start);
	return __this;
}

::hx::ObjectPtr< RunningAnimation_obj > RunningAnimation_obj::__alloc(::hx::Ctx *_hx_ctx, ::objects::animation::AnimationData animationData,int start) {
	RunningAnimation_obj *__this = (RunningAnimation_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RunningAnimation_obj), true, "objects.animation.RunningAnimation"));
	*(void **)__this = RunningAnimation_obj::_hx_vtable;
	__this->__construct(animationData,start);
	return __this;
}

RunningAnimation_obj::RunningAnimation_obj()
{
}

void RunningAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RunningAnimation);
	HX_MARK_MEMBER_NAME(animationData,"animationData");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(frameId,"frameId");
	HX_MARK_MEMBER_NAME(frameStart,"frameStart");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_END_CLASS();
}

void RunningAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(animationData,"animationData");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(frameId,"frameId");
	HX_VISIT_MEMBER_NAME(frameStart,"frameStart");
	HX_VISIT_MEMBER_NAME(rect,"rect");
}

::hx::Val RunningAnimation_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return ::hx::Val( rect ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"frameId") ) { return ::hx::Val( frameId ); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return ::hx::Val( getRect_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameStart") ) { return ::hx::Val( frameStart ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animationData") ) { return ::hx::Val( animationData ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RunningAnimation_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::util::Rect >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"frameId") ) { frameId=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameStart") ) { frameStart=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animationData") ) { animationData=inValue.Cast<  ::objects::animation::AnimationData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RunningAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("animationData",4e,43,af,34));
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("frameId",68,dd,73,48));
	outFields->push(HX_("frameStart",f5,a8,31,67));
	outFields->push(HX_("rect",24,4d,a7,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RunningAnimation_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::animation::AnimationData */ ,(int)offsetof(RunningAnimation_obj,animationData),HX_("animationData",4e,43,af,34)},
	{::hx::fsInt,(int)offsetof(RunningAnimation_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsInt,(int)offsetof(RunningAnimation_obj,frameId),HX_("frameId",68,dd,73,48)},
	{::hx::fsInt,(int)offsetof(RunningAnimation_obj,frameStart),HX_("frameStart",f5,a8,31,67)},
	{::hx::fsObject /*  ::util::Rect */ ,(int)offsetof(RunningAnimation_obj,rect),HX_("rect",24,4d,a7,4b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RunningAnimation_obj_sStaticStorageInfo = 0;
#endif

static ::String RunningAnimation_obj_sMemberFields[] = {
	HX_("animationData",4e,43,af,34),
	HX_("start",62,74,0b,84),
	HX_("frameId",68,dd,73,48),
	HX_("frameStart",f5,a8,31,67),
	HX_("rect",24,4d,a7,4b),
	HX_("getRect",da,fc,29,1e),
	::String(null()) };

::hx::Class RunningAnimation_obj::__mClass;

void RunningAnimation_obj::__register()
{
	RunningAnimation_obj _hx_dummy;
	RunningAnimation_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.animation.RunningAnimation",29,27,88,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RunningAnimation_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RunningAnimation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RunningAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RunningAnimation_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
} // end namespace animation
