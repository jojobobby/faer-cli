// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_objects_animation_AnimationData
#include <objects/animation/AnimationData.h>
#endif
#ifndef INCLUDED_objects_animation_Animations
#include <objects/animation/Animations.h>
#endif
#ifndef INCLUDED_objects_animation_AnimationsData
#include <objects/animation/AnimationsData.h>
#endif
#ifndef INCLUDED_objects_animation_RunningAnimation
#include <objects/animation/RunningAnimation.h>
#endif
#ifndef INCLUDED_util_Rect
#include <util/Rect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c939682d9199ded_6_new,"objects.animation.Animations","new",0x5e87e685,"objects.animation.Animations.new","objects/animation/Animations.hx",6,0x56154409)
HX_LOCAL_STACK_FRAME(_hx_pos_1c939682d9199ded_15_getTexture,"objects.animation.Animations","getTexture",0x18a77760,"objects.animation.Animations.getTexture","objects/animation/Animations.hx",15,0x56154409)
namespace objects{
namespace animation{

void Animations_obj::__construct( ::objects::animation::AnimationsData animationsData){
            	HX_STACKFRAME(&_hx_pos_1c939682d9199ded_6_new)
HXLINE(   9)		this->running = null();
HXLINE(   8)		this->nextRun = null();
HXLINE(  12)		this->animationsData = animationsData;
            	}

Dynamic Animations_obj::__CreateEmpty() { return new Animations_obj; }

void *Animations_obj::_hx_vtable = 0;

Dynamic Animations_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Animations_obj > _hx_result = new Animations_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Animations_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20a44a7f;
}

 ::util::Rect Animations_obj::getTexture(int time){
            	HX_GC_STACKFRAME(&_hx_pos_1c939682d9199ded_15_getTexture)
HXLINE(  16)		 ::objects::animation::AnimationData animationData = null();
HXLINE(  17)		int start = 0;
HXLINE(  18)		if (::hx::IsNull( this->nextRun )) {
HXLINE(  19)			this->nextRun = ::Array_obj< int >::__new(0);
HXLINE(  20)			{
HXLINE(  20)				int _g = 0;
HXDLIN(  20)				::Array< ::Dynamic> _g1 = this->animationsData->animations;
HXDLIN(  20)				while((_g < _g1->length)){
HXLINE(  20)					 ::objects::animation::AnimationData animationData1 = _g1->__get(_g).StaticCast<  ::objects::animation::AnimationData >();
HXDLIN(  20)					_g = (_g + 1);
HXLINE(  21)					::Array< int > _hx_tmp = this->nextRun;
HXDLIN(  21)					_hx_tmp->push(animationData1->getLastRun(time));
            				}
            			}
            		}
HXLINE(  24)		if (::hx::IsNotNull( this->running )) {
HXLINE(  25)			 ::util::Rect rect = this->running->getRect(time);
HXLINE(  26)			if (::hx::IsNotNull( rect )) {
HXLINE(  27)				return rect;
            			}
HXLINE(  28)			this->running = null();
            		}
HXLINE(  31)		{
HXLINE(  31)			int _g2 = 0;
HXDLIN(  31)			int _g3 = this->nextRun->length;
HXDLIN(  31)			while((_g2 < _g3)){
HXLINE(  31)				_g2 = (_g2 + 1);
HXDLIN(  31)				int i = (_g2 - 1);
HXLINE(  32)				if ((time > this->nextRun->__get(i))) {
HXLINE(  33)					start = this->nextRun->__get(i);
HXLINE(  34)					animationData = this->animationsData->animations->__get(i).StaticCast<  ::objects::animation::AnimationData >();
HXLINE(  35)					this->nextRun[i] = animationData->getNextRun(time);
HXLINE(  36)					bool _hx_tmp1;
HXDLIN(  36)					if ((animationData->prob != 1)) {
HXLINE(  36)						_hx_tmp1 = (::Math_obj::random() > animationData->prob);
            					}
            					else {
HXLINE(  36)						_hx_tmp1 = false;
            					}
HXDLIN(  36)					if (!(_hx_tmp1)) {
HXLINE(  37)						this->running =  ::objects::animation::RunningAnimation_obj::__alloc( HX_CTX ,animationData,start);
HXLINE(  38)						return this->running->getRect(time);
            					}
            				}
            			}
            		}
HXLINE(  42)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animations_obj,getTexture,return )


::hx::ObjectPtr< Animations_obj > Animations_obj::__new( ::objects::animation::AnimationsData animationsData) {
	::hx::ObjectPtr< Animations_obj > __this = new Animations_obj();
	__this->__construct(animationsData);
	return __this;
}

::hx::ObjectPtr< Animations_obj > Animations_obj::__alloc(::hx::Ctx *_hx_ctx, ::objects::animation::AnimationsData animationsData) {
	Animations_obj *__this = (Animations_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Animations_obj), true, "objects.animation.Animations"));
	*(void **)__this = Animations_obj::_hx_vtable;
	__this->__construct(animationsData);
	return __this;
}

Animations_obj::Animations_obj()
{
}

void Animations_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Animations);
	HX_MARK_MEMBER_NAME(animationsData,"animationsData");
	HX_MARK_MEMBER_NAME(nextRun,"nextRun");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_END_CLASS();
}

void Animations_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(animationsData,"animationsData");
	HX_VISIT_MEMBER_NAME(nextRun,"nextRun");
	HX_VISIT_MEMBER_NAME(running,"running");
}

::hx::Val Animations_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nextRun") ) { return ::hx::Val( nextRun ); }
		if (HX_FIELD_EQ(inName,"running") ) { return ::hx::Val( running ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getTexture") ) { return ::hx::Val( getTexture_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animationsData") ) { return ::hx::Val( animationsData ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Animations_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nextRun") ) { nextRun=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast<  ::objects::animation::RunningAnimation >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animationsData") ) { animationsData=inValue.Cast<  ::objects::animation::AnimationsData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Animations_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("animationsData",b9,5a,47,e1));
	outFields->push(HX_("nextRun",18,74,45,a5));
	outFields->push(HX_("running",ff,6d,69,eb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Animations_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::animation::AnimationsData */ ,(int)offsetof(Animations_obj,animationsData),HX_("animationsData",b9,5a,47,e1)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Animations_obj,nextRun),HX_("nextRun",18,74,45,a5)},
	{::hx::fsObject /*  ::objects::animation::RunningAnimation */ ,(int)offsetof(Animations_obj,running),HX_("running",ff,6d,69,eb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Animations_obj_sStaticStorageInfo = 0;
#endif

static ::String Animations_obj_sMemberFields[] = {
	HX_("animationsData",b9,5a,47,e1),
	HX_("nextRun",18,74,45,a5),
	HX_("running",ff,6d,69,eb),
	HX_("getTexture",e5,4e,42,ee),
	::String(null()) };

::hx::Class Animations_obj::__mClass;

void Animations_obj::__register()
{
	Animations_obj _hx_dummy;
	Animations_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.animation.Animations",13,40,8f,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Animations_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Animations_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Animations_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Animations_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
} // end namespace animation
