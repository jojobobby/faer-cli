// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_objects_WhileMovingProperties
#include <objects/WhileMovingProperties.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6d0727c315df8672_199_new,"objects.WhileMovingProperties","new",0xf6edd3aa,"objects.WhileMovingProperties.new","objects/ObjectProperties.hx",199,0xfce94251)
namespace objects{

void WhileMovingProperties_obj::__construct( ::Xml whileMovingXML){
            	HX_STACKFRAME(&_hx_pos_6d0727c315df8672_199_new)
HXLINE( 201)		this->flying = false;
HXLINE( 200)		this->z = ((Float)0.0);
HXLINE( 204)		if (( (bool)(whileMovingXML->elementsNamed(HX_("Z",5a,00,00,00))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 205)			 ::Xml _this = ( ( ::Xml)(whileMovingXML->elementsNamed(HX_("Z",5a,00,00,00))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 205)			bool _hx_tmp;
HXDLIN( 205)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 205)				_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 205)				_hx_tmp = false;
            			}
HXDLIN( 205)			if (_hx_tmp) {
HXLINE( 205)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 205)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 205)			bool _hx_tmp1;
HXDLIN( 205)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 205)				_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 205)				_hx_tmp1 = true;
            			}
HXDLIN( 205)			if (_hx_tmp1) {
HXLINE( 205)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN( 205)			this->z = ::Std_obj::parseFloat(_this1->nodeValue);
            		}
HXLINE( 207)		this->flying = ( (bool)(whileMovingXML->elementsNamed(HX_("Flying",6f,c6,8c,7c))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            	}

Dynamic WhileMovingProperties_obj::__CreateEmpty() { return new WhileMovingProperties_obj; }

void *WhileMovingProperties_obj::_hx_vtable = 0;

Dynamic WhileMovingProperties_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WhileMovingProperties_obj > _hx_result = new WhileMovingProperties_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WhileMovingProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50921c46;
}


::hx::ObjectPtr< WhileMovingProperties_obj > WhileMovingProperties_obj::__new( ::Xml whileMovingXML) {
	::hx::ObjectPtr< WhileMovingProperties_obj > __this = new WhileMovingProperties_obj();
	__this->__construct(whileMovingXML);
	return __this;
}

::hx::ObjectPtr< WhileMovingProperties_obj > WhileMovingProperties_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml whileMovingXML) {
	WhileMovingProperties_obj *__this = (WhileMovingProperties_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WhileMovingProperties_obj), false, "objects.WhileMovingProperties"));
	*(void **)__this = WhileMovingProperties_obj::_hx_vtable;
	__this->__construct(whileMovingXML);
	return __this;
}

WhileMovingProperties_obj::WhileMovingProperties_obj()
{
}

::hx::Val WhileMovingProperties_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"z") ) { return ::hx::Val( z ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"flying") ) { return ::hx::Val( flying ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WhileMovingProperties_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"flying") ) { flying=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WhileMovingProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("flying",4f,52,f8,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WhileMovingProperties_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(WhileMovingProperties_obj,z),HX_("z",7a,00,00,00)},
	{::hx::fsBool,(int)offsetof(WhileMovingProperties_obj,flying),HX_("flying",4f,52,f8,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WhileMovingProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String WhileMovingProperties_obj_sMemberFields[] = {
	HX_("z",7a,00,00,00),
	HX_("flying",4f,52,f8,47),
	::String(null()) };

::hx::Class WhileMovingProperties_obj::__mClass;

void WhileMovingProperties_obj::__register()
{
	WhileMovingProperties_obj _hx_dummy;
	WhileMovingProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.WhileMovingProperties",b8,76,04,4c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WhileMovingProperties_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WhileMovingProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WhileMovingProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WhileMovingProperties_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
