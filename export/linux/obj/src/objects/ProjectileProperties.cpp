// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_objects_ProjectileProperties
#include <objects/ProjectileProperties.h>
#endif
#ifndef INCLUDED_util_ConditionEffect
#include <util/ConditionEffect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_38712fdbca5cfffe_6_new,"objects.ProjectileProperties","new",0x2e0fdd28,"objects.ProjectileProperties.new","objects/ProjectileProperties.hx",6,0x03b0df67)
namespace objects{

void ProjectileProperties_obj::__construct( ::Xml projectileXML){
            	HX_STACKFRAME(&_hx_pos_38712fdbca5cfffe_6_new)
HXLINE(  28)		this->speedClamp = 0;
HXLINE(  27)		this->accelerationDelay = 0;
HXLINE(  26)		this->acceleration = ((Float)0.0);
HXLINE(  25)		this->magnitude = ((Float)0.0);
HXLINE(  24)		this->frequency = ((Float)0.0);
HXLINE(  23)		this->amplitude = ((Float)0.0);
HXLINE(  22)		this->boomerang = false;
HXLINE(  21)		this->parametric = false;
HXLINE(  20)		this->wavy = false;
HXLINE(  19)		this->particleTrail = false;
HXLINE(  18)		this->armorPiercing = false;
HXLINE(  17)		this->multiHit = false;
HXLINE(  16)		this->effects = null();
HXLINE(  15)		this->trueDamage = 0;
HXLINE(  14)		this->magicDamage = 0;
HXLINE(  13)		this->physicalDamage = 0;
HXLINE(  12)		this->size = 0;
HXLINE(  11)		this->realSpeed = 0;
HXLINE(  10)		this->speed = ((Float)0.0);
HXLINE(   9)		this->lifetime = 0;
HXLINE(   8)		this->objectId = HX_("",00,00,00,00);
HXLINE(   7)		this->bulletType = 0;
HXLINE(  31)		this->bulletType = ( (int)(::Std_obj::parseInt(projectileXML->get(HX_("id",db,5b,00,00)))) );
HXLINE(  32)		 ::Xml _this = ( ( ::Xml)(projectileXML->elementsNamed(HX_("ObjectId",9a,e8,dd,5c))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  32)		bool _hx_tmp;
HXDLIN(  32)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  32)			_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  32)			_hx_tmp = false;
            		}
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  32)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(  32)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  32)		bool _hx_tmp1;
HXDLIN(  32)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  32)			_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  32)			_hx_tmp1 = true;
            		}
HXDLIN(  32)		if (_hx_tmp1) {
HXLINE(  32)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN(  32)		this->objectId = _this1->nodeValue;
HXLINE(  33)		 ::Xml _this2 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("LifetimeMS",cf,e6,02,ec))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  33)		bool _hx_tmp2;
HXDLIN(  33)		if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE(  33)			_hx_tmp2 = (_this2->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  33)			_hx_tmp2 = false;
            		}
HXDLIN(  33)		if (_hx_tmp2) {
HXLINE(  33)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            		}
HXDLIN(  33)		 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  33)		bool _hx_tmp3;
HXDLIN(  33)		if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE(  33)			_hx_tmp3 = (_this3->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  33)			_hx_tmp3 = true;
            		}
HXDLIN(  33)		if (_hx_tmp3) {
HXLINE(  33)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            		}
HXDLIN(  33)		this->lifetime = ( (int)(::Std_obj::parseInt(_this3->nodeValue)) );
HXLINE(  34)		 ::Xml _this4 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  34)		bool _hx_tmp4;
HXDLIN(  34)		if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE(  34)			_hx_tmp4 = (_this4->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  34)			_hx_tmp4 = false;
            		}
HXDLIN(  34)		if (_hx_tmp4) {
HXLINE(  34)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            		}
HXDLIN(  34)		 ::Xml _this5 = _this4->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  34)		bool _hx_tmp5;
HXDLIN(  34)		if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE(  34)			_hx_tmp5 = (_this5->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  34)			_hx_tmp5 = true;
            		}
HXDLIN(  34)		if (_hx_tmp5) {
HXLINE(  34)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            		}
HXDLIN(  34)		this->realSpeed = ( (int)(::Std_obj::parseInt(_this5->nodeValue)) );
HXLINE(  35)		this->speed = (( (Float)(this->realSpeed) ) / ((Float)10000.0));
HXLINE(  36)		int _hx_tmp6;
HXDLIN(  36)		if (( (bool)(projectileXML->elementsNamed(HX_("Size",e1,cc,2c,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  36)			 ::Xml _this6 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("Size",e1,cc,2c,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  36)			bool _hx_tmp7;
HXDLIN(  36)			if ((_this6->nodeType != ::Xml_obj::Document)) {
HXLINE(  36)				_hx_tmp7 = (_this6->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  36)				_hx_tmp7 = false;
            			}
HXDLIN(  36)			if (_hx_tmp7) {
HXLINE(  36)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this6->nodeType)));
            			}
HXDLIN(  36)			 ::Xml _this7 = _this6->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  36)			bool _hx_tmp8;
HXDLIN(  36)			if ((_this7->nodeType != ::Xml_obj::Document)) {
HXLINE(  36)				_hx_tmp8 = (_this7->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  36)				_hx_tmp8 = true;
            			}
HXDLIN(  36)			if (_hx_tmp8) {
HXLINE(  36)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this7->nodeType)));
            			}
HXDLIN(  36)			_hx_tmp6 = ( (int)(::Std_obj::parseInt(_this7->nodeValue)) );
            		}
            		else {
HXLINE(  36)			_hx_tmp6 = -1;
            		}
HXDLIN(  36)		this->size = _hx_tmp6;
HXLINE(  38)		if (( (bool)(projectileXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  39)			 ::Xml _this8 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  39)			bool _hx_tmp9;
HXDLIN(  39)			if ((_this8->nodeType != ::Xml_obj::Document)) {
HXLINE(  39)				_hx_tmp9 = (_this8->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  39)				_hx_tmp9 = false;
            			}
HXDLIN(  39)			if (_hx_tmp9) {
HXLINE(  39)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this8->nodeType)));
            			}
HXDLIN(  39)			 ::Xml _this9 = _this8->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  39)			bool _hx_tmp10;
HXDLIN(  39)			if ((_this9->nodeType != ::Xml_obj::Document)) {
HXLINE(  39)				_hx_tmp10 = (_this9->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  39)				_hx_tmp10 = true;
            			}
HXDLIN(  39)			if (_hx_tmp10) {
HXLINE(  39)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this9->nodeType)));
            			}
HXDLIN(  39)			this->physicalDamage = ( (int)(::Std_obj::parseInt(_this9->nodeValue)) );
            		}
HXLINE(  41)		if (( (bool)(projectileXML->elementsNamed(HX_("MagicDamage",5c,ad,35,5b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  42)			 ::Xml _this10 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("MagicDamage",5c,ad,35,5b))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  42)			bool _hx_tmp11;
HXDLIN(  42)			if ((_this10->nodeType != ::Xml_obj::Document)) {
HXLINE(  42)				_hx_tmp11 = (_this10->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  42)				_hx_tmp11 = false;
            			}
HXDLIN(  42)			if (_hx_tmp11) {
HXLINE(  42)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this10->nodeType)));
            			}
HXDLIN(  42)			 ::Xml _this11 = _this10->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  42)			bool _hx_tmp12;
HXDLIN(  42)			if ((_this11->nodeType != ::Xml_obj::Document)) {
HXLINE(  42)				_hx_tmp12 = (_this11->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  42)				_hx_tmp12 = true;
            			}
HXDLIN(  42)			if (_hx_tmp12) {
HXLINE(  42)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this11->nodeType)));
            			}
HXDLIN(  42)			this->magicDamage = ( (int)(::Std_obj::parseInt(_this11->nodeValue)) );
            		}
HXLINE(  44)		if (( (bool)(projectileXML->elementsNamed(HX_("TrueDamage",7d,1e,6f,e6))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  45)			 ::Xml _this12 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("TrueDamage",7d,1e,6f,e6))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  45)			bool _hx_tmp13;
HXDLIN(  45)			if ((_this12->nodeType != ::Xml_obj::Document)) {
HXLINE(  45)				_hx_tmp13 = (_this12->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  45)				_hx_tmp13 = false;
            			}
HXDLIN(  45)			if (_hx_tmp13) {
HXLINE(  45)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this12->nodeType)));
            			}
HXDLIN(  45)			 ::Xml _this13 = _this12->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  45)			bool _hx_tmp14;
HXDLIN(  45)			if ((_this13->nodeType != ::Xml_obj::Document)) {
HXLINE(  45)				_hx_tmp14 = (_this13->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  45)				_hx_tmp14 = true;
            			}
HXDLIN(  45)			if (_hx_tmp14) {
HXLINE(  45)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this13->nodeType)));
            			}
HXDLIN(  45)			this->trueDamage = ( (int)(::Std_obj::parseInt(_this13->nodeValue)) );
            		}
HXLINE(  47)		{
HXLINE(  47)			 ::Dynamic condEffectXML = projectileXML->elementsNamed(HX_("ConditionEffect",6c,66,cb,d0));
HXDLIN(  47)			while(( (bool)(condEffectXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  47)				 ::Xml condEffectXML1 = ( ( ::Xml)(condEffectXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  48)				if (::hx::IsNull( this->effects )) {
HXLINE(  49)					this->effects = ::Array_obj< int >::__new();
            				}
HXLINE(  50)				::Array< int > _hx_tmp15 = this->effects;
HXDLIN(  50)				bool _hx_tmp16;
HXDLIN(  50)				if ((condEffectXML1->nodeType != ::Xml_obj::Document)) {
HXLINE(  50)					_hx_tmp16 = (condEffectXML1->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(  50)					_hx_tmp16 = false;
            				}
HXDLIN(  50)				if (_hx_tmp16) {
HXLINE(  50)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(condEffectXML1->nodeType)));
            				}
HXDLIN(  50)				 ::Xml _this14 = condEffectXML1->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  50)				bool _hx_tmp17;
HXDLIN(  50)				if ((_this14->nodeType != ::Xml_obj::Document)) {
HXLINE(  50)					_hx_tmp17 = (_this14->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE(  50)					_hx_tmp17 = true;
            				}
HXDLIN(  50)				if (_hx_tmp17) {
HXLINE(  50)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this14->nodeType)));
            				}
HXDLIN(  50)				_hx_tmp15->push(::util::ConditionEffect_obj::getConditionEffectFromName(_this14->nodeValue));
            			}
            		}
HXLINE(  53)		this->multiHit = ( (bool)(projectileXML->elementsNamed(HX_("MultiHit",7a,41,20,74))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  54)		this->armorPiercing = ( (bool)(projectileXML->elementsNamed(HX_("ArmorPiercing",84,33,28,61))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  55)		this->particleTrail = ( (bool)(projectileXML->elementsNamed(HX_("ParticleTrail",80,97,66,74))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  56)		this->wavy = ( (bool)(projectileXML->elementsNamed(HX_("Wavy",ed,91,cb,39))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  57)		this->parametric = ( (bool)(projectileXML->elementsNamed(HX_("Parametric",30,98,39,48))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  58)		this->boomerang = ( (bool)(projectileXML->elementsNamed(HX_("Boomerang",62,44,ee,3e))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  59)		Float _hx_tmp18;
HXDLIN(  59)		if (( (bool)(projectileXML->elementsNamed(HX_("Amplitude",23,f5,cd,0b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  60)			 ::Xml _this15 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("Amplitude",23,f5,cd,0b))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  60)			bool _hx_tmp19;
HXDLIN(  60)			if ((_this15->nodeType != ::Xml_obj::Document)) {
HXLINE(  60)				_hx_tmp19 = (_this15->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  60)				_hx_tmp19 = false;
            			}
HXDLIN(  60)			if (_hx_tmp19) {
HXLINE(  60)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this15->nodeType)));
            			}
HXDLIN(  60)			 ::Xml _this16 = _this15->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  60)			bool _hx_tmp20;
HXDLIN(  60)			if ((_this16->nodeType != ::Xml_obj::Document)) {
HXLINE(  60)				_hx_tmp20 = (_this16->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  60)				_hx_tmp20 = true;
            			}
HXDLIN(  60)			if (_hx_tmp20) {
HXLINE(  60)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this16->nodeType)));
            			}
HXLINE(  59)			_hx_tmp18 = ::Std_obj::parseFloat(_this16->nodeValue);
            		}
            		else {
HXLINE(  59)			_hx_tmp18 = ( (Float)(0) );
            		}
HXDLIN(  59)		this->amplitude = _hx_tmp18;
HXLINE(  61)		Float _hx_tmp21;
HXDLIN(  61)		if (( (bool)(projectileXML->elementsNamed(HX_("Frequency",7c,62,bd,5d))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  62)			 ::Xml _this17 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("Frequency",7c,62,bd,5d))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  62)			bool _hx_tmp22;
HXDLIN(  62)			if ((_this17->nodeType != ::Xml_obj::Document)) {
HXLINE(  62)				_hx_tmp22 = (_this17->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  62)				_hx_tmp22 = false;
            			}
HXDLIN(  62)			if (_hx_tmp22) {
HXLINE(  62)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this17->nodeType)));
            			}
HXDLIN(  62)			 ::Xml _this18 = _this17->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  62)			bool _hx_tmp23;
HXDLIN(  62)			if ((_this18->nodeType != ::Xml_obj::Document)) {
HXLINE(  62)				_hx_tmp23 = (_this18->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  62)				_hx_tmp23 = true;
            			}
HXDLIN(  62)			if (_hx_tmp23) {
HXLINE(  62)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this18->nodeType)));
            			}
HXLINE(  61)			_hx_tmp21 = ::Std_obj::parseFloat(_this18->nodeValue);
            		}
            		else {
HXLINE(  61)			_hx_tmp21 = ( (Float)(1) );
            		}
HXDLIN(  61)		this->frequency = _hx_tmp21;
HXLINE(  63)		Float _hx_tmp24;
HXDLIN(  63)		if (( (bool)(projectileXML->elementsNamed(HX_("Magnitude",b0,13,37,97))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  64)			 ::Xml _this19 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("Magnitude",b0,13,37,97))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  64)			bool _hx_tmp25;
HXDLIN(  64)			if ((_this19->nodeType != ::Xml_obj::Document)) {
HXLINE(  64)				_hx_tmp25 = (_this19->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  64)				_hx_tmp25 = false;
            			}
HXDLIN(  64)			if (_hx_tmp25) {
HXLINE(  64)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this19->nodeType)));
            			}
HXDLIN(  64)			 ::Xml _this20 = _this19->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  64)			bool _hx_tmp26;
HXDLIN(  64)			if ((_this20->nodeType != ::Xml_obj::Document)) {
HXLINE(  64)				_hx_tmp26 = (_this20->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  64)				_hx_tmp26 = true;
            			}
HXDLIN(  64)			if (_hx_tmp26) {
HXLINE(  64)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this20->nodeType)));
            			}
HXLINE(  63)			_hx_tmp24 = ::Std_obj::parseFloat(_this20->nodeValue);
            		}
            		else {
HXLINE(  63)			_hx_tmp24 = ( (Float)(3) );
            		}
HXDLIN(  63)		this->magnitude = _hx_tmp24;
HXLINE(  65)		Float _hx_tmp27;
HXDLIN(  65)		if (( (bool)(projectileXML->elementsNamed(HX_("Acceleration",60,4c,73,62))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  66)			 ::Xml _this21 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("Acceleration",60,4c,73,62))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  66)			bool _hx_tmp28;
HXDLIN(  66)			if ((_this21->nodeType != ::Xml_obj::Document)) {
HXLINE(  66)				_hx_tmp28 = (_this21->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  66)				_hx_tmp28 = false;
            			}
HXDLIN(  66)			if (_hx_tmp28) {
HXLINE(  66)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this21->nodeType)));
            			}
HXDLIN(  66)			 ::Xml _this22 = _this21->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  66)			bool _hx_tmp29;
HXDLIN(  66)			if ((_this22->nodeType != ::Xml_obj::Document)) {
HXLINE(  66)				_hx_tmp29 = (_this22->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  66)				_hx_tmp29 = true;
            			}
HXDLIN(  66)			if (_hx_tmp29) {
HXLINE(  66)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this22->nodeType)));
            			}
HXLINE(  65)			_hx_tmp27 = ::Std_obj::parseFloat(_this22->nodeValue);
            		}
            		else {
HXLINE(  65)			_hx_tmp27 = ( (Float)(0) );
            		}
HXDLIN(  65)		this->acceleration = _hx_tmp27;
HXLINE(  67)		int _hx_tmp30;
HXDLIN(  67)		if (( (bool)(projectileXML->elementsNamed(HX_("AccelerationDelay",03,1f,b0,c8))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  68)			 ::Xml _this23 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("AccelerationDelay",03,1f,b0,c8))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  68)			bool _hx_tmp31;
HXDLIN(  68)			if ((_this23->nodeType != ::Xml_obj::Document)) {
HXLINE(  68)				_hx_tmp31 = (_this23->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  68)				_hx_tmp31 = false;
            			}
HXDLIN(  68)			if (_hx_tmp31) {
HXLINE(  68)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this23->nodeType)));
            			}
HXDLIN(  68)			 ::Xml _this24 = _this23->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  68)			bool _hx_tmp32;
HXDLIN(  68)			if ((_this24->nodeType != ::Xml_obj::Document)) {
HXLINE(  68)				_hx_tmp32 = (_this24->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  68)				_hx_tmp32 = true;
            			}
HXDLIN(  68)			if (_hx_tmp32) {
HXLINE(  68)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this24->nodeType)));
            			}
HXLINE(  67)			_hx_tmp30 = ( (int)(::Std_obj::parseInt(_this24->nodeValue)) );
            		}
            		else {
HXLINE(  67)			_hx_tmp30 = 0;
            		}
HXDLIN(  67)		this->accelerationDelay = _hx_tmp30;
HXLINE(  69)		int _hx_tmp33;
HXDLIN(  69)		if (( (bool)(projectileXML->elementsNamed(HX_("SpeedClamp",14,a6,d7,71))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  70)			 ::Xml _this25 = ( ( ::Xml)(projectileXML->elementsNamed(HX_("SpeedClamp",14,a6,d7,71))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  70)			bool _hx_tmp34;
HXDLIN(  70)			if ((_this25->nodeType != ::Xml_obj::Document)) {
HXLINE(  70)				_hx_tmp34 = (_this25->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  70)				_hx_tmp34 = false;
            			}
HXDLIN(  70)			if (_hx_tmp34) {
HXLINE(  70)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this25->nodeType)));
            			}
HXDLIN(  70)			 ::Xml _this26 = _this25->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  70)			bool _hx_tmp35;
HXDLIN(  70)			if ((_this26->nodeType != ::Xml_obj::Document)) {
HXLINE(  70)				_hx_tmp35 = (_this26->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  70)				_hx_tmp35 = true;
            			}
HXDLIN(  70)			if (_hx_tmp35) {
HXLINE(  70)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this26->nodeType)));
            			}
HXLINE(  69)			_hx_tmp33 = ( (int)(::Std_obj::parseInt(_this26->nodeValue)) );
            		}
            		else {
HXLINE(  69)			_hx_tmp33 = -1;
            		}
HXDLIN(  69)		this->speedClamp = _hx_tmp33;
            	}

Dynamic ProjectileProperties_obj::__CreateEmpty() { return new ProjectileProperties_obj; }

void *ProjectileProperties_obj::_hx_vtable = 0;

Dynamic ProjectileProperties_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ProjectileProperties_obj > _hx_result = new ProjectileProperties_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ProjectileProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f0b6390;
}


::hx::ObjectPtr< ProjectileProperties_obj > ProjectileProperties_obj::__new( ::Xml projectileXML) {
	::hx::ObjectPtr< ProjectileProperties_obj > __this = new ProjectileProperties_obj();
	__this->__construct(projectileXML);
	return __this;
}

::hx::ObjectPtr< ProjectileProperties_obj > ProjectileProperties_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml projectileXML) {
	ProjectileProperties_obj *__this = (ProjectileProperties_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ProjectileProperties_obj), true, "objects.ProjectileProperties"));
	*(void **)__this = ProjectileProperties_obj::_hx_vtable;
	__this->__construct(projectileXML);
	return __this;
}

ProjectileProperties_obj::ProjectileProperties_obj()
{
}

void ProjectileProperties_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ProjectileProperties);
	HX_MARK_MEMBER_NAME(bulletType,"bulletType");
	HX_MARK_MEMBER_NAME(objectId,"objectId");
	HX_MARK_MEMBER_NAME(lifetime,"lifetime");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(realSpeed,"realSpeed");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(physicalDamage,"physicalDamage");
	HX_MARK_MEMBER_NAME(magicDamage,"magicDamage");
	HX_MARK_MEMBER_NAME(trueDamage,"trueDamage");
	HX_MARK_MEMBER_NAME(effects,"effects");
	HX_MARK_MEMBER_NAME(multiHit,"multiHit");
	HX_MARK_MEMBER_NAME(armorPiercing,"armorPiercing");
	HX_MARK_MEMBER_NAME(particleTrail,"particleTrail");
	HX_MARK_MEMBER_NAME(wavy,"wavy");
	HX_MARK_MEMBER_NAME(parametric,"parametric");
	HX_MARK_MEMBER_NAME(boomerang,"boomerang");
	HX_MARK_MEMBER_NAME(amplitude,"amplitude");
	HX_MARK_MEMBER_NAME(frequency,"frequency");
	HX_MARK_MEMBER_NAME(magnitude,"magnitude");
	HX_MARK_MEMBER_NAME(acceleration,"acceleration");
	HX_MARK_MEMBER_NAME(accelerationDelay,"accelerationDelay");
	HX_MARK_MEMBER_NAME(speedClamp,"speedClamp");
	HX_MARK_END_CLASS();
}

void ProjectileProperties_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bulletType,"bulletType");
	HX_VISIT_MEMBER_NAME(objectId,"objectId");
	HX_VISIT_MEMBER_NAME(lifetime,"lifetime");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(realSpeed,"realSpeed");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(physicalDamage,"physicalDamage");
	HX_VISIT_MEMBER_NAME(magicDamage,"magicDamage");
	HX_VISIT_MEMBER_NAME(trueDamage,"trueDamage");
	HX_VISIT_MEMBER_NAME(effects,"effects");
	HX_VISIT_MEMBER_NAME(multiHit,"multiHit");
	HX_VISIT_MEMBER_NAME(armorPiercing,"armorPiercing");
	HX_VISIT_MEMBER_NAME(particleTrail,"particleTrail");
	HX_VISIT_MEMBER_NAME(wavy,"wavy");
	HX_VISIT_MEMBER_NAME(parametric,"parametric");
	HX_VISIT_MEMBER_NAME(boomerang,"boomerang");
	HX_VISIT_MEMBER_NAME(amplitude,"amplitude");
	HX_VISIT_MEMBER_NAME(frequency,"frequency");
	HX_VISIT_MEMBER_NAME(magnitude,"magnitude");
	HX_VISIT_MEMBER_NAME(acceleration,"acceleration");
	HX_VISIT_MEMBER_NAME(accelerationDelay,"accelerationDelay");
	HX_VISIT_MEMBER_NAME(speedClamp,"speedClamp");
}

::hx::Val ProjectileProperties_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size ); }
		if (HX_FIELD_EQ(inName,"wavy") ) { return ::hx::Val( wavy ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"effects") ) { return ::hx::Val( effects ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectId") ) { return ::hx::Val( objectId ); }
		if (HX_FIELD_EQ(inName,"lifetime") ) { return ::hx::Val( lifetime ); }
		if (HX_FIELD_EQ(inName,"multiHit") ) { return ::hx::Val( multiHit ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"realSpeed") ) { return ::hx::Val( realSpeed ); }
		if (HX_FIELD_EQ(inName,"boomerang") ) { return ::hx::Val( boomerang ); }
		if (HX_FIELD_EQ(inName,"amplitude") ) { return ::hx::Val( amplitude ); }
		if (HX_FIELD_EQ(inName,"frequency") ) { return ::hx::Val( frequency ); }
		if (HX_FIELD_EQ(inName,"magnitude") ) { return ::hx::Val( magnitude ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bulletType") ) { return ::hx::Val( bulletType ); }
		if (HX_FIELD_EQ(inName,"trueDamage") ) { return ::hx::Val( trueDamage ); }
		if (HX_FIELD_EQ(inName,"parametric") ) { return ::hx::Val( parametric ); }
		if (HX_FIELD_EQ(inName,"speedClamp") ) { return ::hx::Val( speedClamp ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"magicDamage") ) { return ::hx::Val( magicDamage ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"acceleration") ) { return ::hx::Val( acceleration ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"armorPiercing") ) { return ::hx::Val( armorPiercing ); }
		if (HX_FIELD_EQ(inName,"particleTrail") ) { return ::hx::Val( particleTrail ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"physicalDamage") ) { return ::hx::Val( physicalDamage ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"accelerationDelay") ) { return ::hx::Val( accelerationDelay ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ProjectileProperties_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wavy") ) { wavy=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"effects") ) { effects=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectId") ) { objectId=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lifetime") ) { lifetime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multiHit") ) { multiHit=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"realSpeed") ) { realSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boomerang") ) { boomerang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"amplitude") ) { amplitude=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frequency") ) { frequency=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"magnitude") ) { magnitude=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bulletType") ) { bulletType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trueDamage") ) { trueDamage=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parametric") ) { parametric=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedClamp") ) { speedClamp=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"magicDamage") ) { magicDamage=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"acceleration") ) { acceleration=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"armorPiercing") ) { armorPiercing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particleTrail") ) { particleTrail=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"physicalDamage") ) { physicalDamage=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"accelerationDelay") ) { accelerationDelay=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ProjectileProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bulletType",1c,fa,95,15));
	outFields->push(HX_("objectId",7a,2c,2c,83));
	outFields->push(HX_("lifetime",09,0b,72,6c));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("realSpeed",49,c7,2b,85));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("physicalDamage",e6,95,f7,74));
	outFields->push(HX_("magicDamage",7c,15,03,77));
	outFields->push(HX_("trueDamage",5d,1a,be,ef));
	outFields->push(HX_("effects",c2,e4,4b,2e));
	outFields->push(HX_("multiHit",5a,85,6e,9a));
	outFields->push(HX_("armorPiercing",a4,e3,37,19));
	outFields->push(HX_("particleTrail",a0,47,76,2c));
	outFields->push(HX_("wavy",cd,65,f2,4e));
	outFields->push(HX_("parametric",10,94,88,51));
	outFields->push(HX_("boomerang",82,64,1b,9d));
	outFields->push(HX_("amplitude",43,15,fb,69));
	outFields->push(HX_("frequency",9c,82,ea,bb));
	outFields->push(HX_("magnitude",d0,33,64,f5));
	outFields->push(HX_("acceleration",40,00,61,9a));
	outFields->push(HX_("accelerationDelay",23,5f,2a,27));
	outFields->push(HX_("speedClamp",f4,a1,26,7b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ProjectileProperties_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,bulletType),HX_("bulletType",1c,fa,95,15)},
	{::hx::fsString,(int)offsetof(ProjectileProperties_obj,objectId),HX_("objectId",7a,2c,2c,83)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,lifetime),HX_("lifetime",09,0b,72,6c)},
	{::hx::fsFloat,(int)offsetof(ProjectileProperties_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,realSpeed),HX_("realSpeed",49,c7,2b,85)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,size),HX_("size",c1,a0,53,4c)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,physicalDamage),HX_("physicalDamage",e6,95,f7,74)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,magicDamage),HX_("magicDamage",7c,15,03,77)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,trueDamage),HX_("trueDamage",5d,1a,be,ef)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ProjectileProperties_obj,effects),HX_("effects",c2,e4,4b,2e)},
	{::hx::fsBool,(int)offsetof(ProjectileProperties_obj,multiHit),HX_("multiHit",5a,85,6e,9a)},
	{::hx::fsBool,(int)offsetof(ProjectileProperties_obj,armorPiercing),HX_("armorPiercing",a4,e3,37,19)},
	{::hx::fsBool,(int)offsetof(ProjectileProperties_obj,particleTrail),HX_("particleTrail",a0,47,76,2c)},
	{::hx::fsBool,(int)offsetof(ProjectileProperties_obj,wavy),HX_("wavy",cd,65,f2,4e)},
	{::hx::fsBool,(int)offsetof(ProjectileProperties_obj,parametric),HX_("parametric",10,94,88,51)},
	{::hx::fsBool,(int)offsetof(ProjectileProperties_obj,boomerang),HX_("boomerang",82,64,1b,9d)},
	{::hx::fsFloat,(int)offsetof(ProjectileProperties_obj,amplitude),HX_("amplitude",43,15,fb,69)},
	{::hx::fsFloat,(int)offsetof(ProjectileProperties_obj,frequency),HX_("frequency",9c,82,ea,bb)},
	{::hx::fsFloat,(int)offsetof(ProjectileProperties_obj,magnitude),HX_("magnitude",d0,33,64,f5)},
	{::hx::fsFloat,(int)offsetof(ProjectileProperties_obj,acceleration),HX_("acceleration",40,00,61,9a)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,accelerationDelay),HX_("accelerationDelay",23,5f,2a,27)},
	{::hx::fsInt,(int)offsetof(ProjectileProperties_obj,speedClamp),HX_("speedClamp",f4,a1,26,7b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ProjectileProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String ProjectileProperties_obj_sMemberFields[] = {
	HX_("bulletType",1c,fa,95,15),
	HX_("objectId",7a,2c,2c,83),
	HX_("lifetime",09,0b,72,6c),
	HX_("speed",87,97,69,81),
	HX_("realSpeed",49,c7,2b,85),
	HX_("size",c1,a0,53,4c),
	HX_("physicalDamage",e6,95,f7,74),
	HX_("magicDamage",7c,15,03,77),
	HX_("trueDamage",5d,1a,be,ef),
	HX_("effects",c2,e4,4b,2e),
	HX_("multiHit",5a,85,6e,9a),
	HX_("armorPiercing",a4,e3,37,19),
	HX_("particleTrail",a0,47,76,2c),
	HX_("wavy",cd,65,f2,4e),
	HX_("parametric",10,94,88,51),
	HX_("boomerang",82,64,1b,9d),
	HX_("amplitude",43,15,fb,69),
	HX_("frequency",9c,82,ea,bb),
	HX_("magnitude",d0,33,64,f5),
	HX_("acceleration",40,00,61,9a),
	HX_("accelerationDelay",23,5f,2a,27),
	HX_("speedClamp",f4,a1,26,7b),
	::String(null()) };

::hx::Class ProjectileProperties_obj::__mClass;

void ProjectileProperties_obj::__register()
{
	ProjectileProperties_obj _hx_dummy;
	ProjectileProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.ProjectileProperties",36,69,c8,e0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ProjectileProperties_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ProjectileProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProjectileProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProjectileProperties_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
