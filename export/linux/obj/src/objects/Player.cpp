// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_InputHandler
#include <game/InputHandler.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_objects_Projectile
#include <lime/utils/ObjectPool_objects_Projectile.h>
#endif
#ifndef INCLUDED_map_AnimateProperties
#include <map/AnimateProperties.h>
#endif
#ifndef INCLUDED_map_Camera
#include <map/Camera.h>
#endif
#ifndef INCLUDED_map_GroundProperties
#include <map/GroundProperties.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_map_Square
#include <map/Square.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_ObjectProperties
#include <objects/ObjectProperties.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_objects_Projectile
#include <objects/Projectile.h>
#endif
#ifndef INCLUDED_objects_ProjectileProperties
#include <objects/ProjectileProperties.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_sound_SoundEffectLibrary
#include <sound/SoundEffectLibrary.h>
#endif
#ifndef INCLUDED_ui_TextBox
#include <ui/TextBox.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif
#ifndef INCLUDED_util_GlowRedrawer
#include <util/GlowRedrawer.h>
#endif
#ifndef INCLUDED_util_MaskedImage
#include <util/MaskedImage.h>
#endif
#ifndef INCLUDED_util_MathUtil
#include <util/MathUtil.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_76cb3f6186044bdd_29_new,"objects.Player","new",0x7e6cfa4d,"objects.Player.new","objects/Player.hx",29,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_152_updateMaxValues,"objects.Player","updateMaxValues",0xf5b3bfca,"objects.Player.updateMaxValues","objects/Player.hx",152,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_168_update,"objects.Player","update",0xd4f38e3c,"objects.Player.update","objects/Player.hx",168,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_205_damage,"objects.Player","damage",0x6bd298a2,"objects.Player.damage","objects/Player.hx",205,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_228_getPortrait,"objects.Player","getPortrait",0x910b42fe,"objects.Player.getPortrait","objects/Player.hx",228,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_242_setRelativeMovement,"objects.Player","setRelativeMovement",0xa47199ca,"objects.Player.setRelativeMovement","objects/Player.hx",242,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_251_setGuildName,"objects.Player","setGuildName",0x952d260f,"objects.Player.setGuildName","objects/Player.hx",251,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_271_msUntilTeleport,"objects.Player","msUntilTeleport",0x81228790,"objects.Player.msUntilTeleport","objects/Player.hx",271,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_274_teleportTo,"objects.Player","teleportTo",0x5063cab9,"objects.Player.teleportTo","objects/Player.hx",274,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_286_walkTo,"objects.Player","walkTo",0x03f8c317,"objects.Player.walkTo","objects/Player.hx",286,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_291_modifyMove,"objects.Player","modifyMove",0xd282865e,"objects.Player.modifyMove","objects/Player.hx",291,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_315_modifyStep,"objects.Player","modifyStep",0xd67d8a99,"objects.Player.modifyStep","objects/Player.hx",315,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_382_isValidPosition,"objects.Player","isValidPosition",0x558450e8,"objects.Player.isValidPosition","objects/Player.hx",382,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_422_isFullOccupy,"objects.Player","isFullOccupy",0xc607103b,"objects.Player.isFullOccupy","objects/Player.hx",422,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_427_useAltWeapon,"objects.Player","useAltWeapon",0xeff8ec11,"objects.Player.useAltWeapon","objects/Player.hx",427,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_483_attemptAttackAngle,"objects.Player","attemptAttackAngle",0x9d2a0b91,"objects.Player.attemptAttackAngle","objects/Player.hx",483,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_486_nextAvailableInventorySlot,"objects.Player","nextAvailableInventorySlot",0xae330637,"objects.Player.nextAvailableInventorySlot","objects/Player.hx",486,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_495_swapInventoryIndex,"objects.Player","swapInventoryIndex",0x0925217c,"objects.Player.swapInventoryIndex","objects/Player.hx",495,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_517_getVialCount,"objects.Player","getVialCount",0xf6f62e0e,"objects.Player.getVialCount","objects/Player.hx",517,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_527_getMoveSpeed,"objects.Player","getMoveSpeed",0xb771b3b3,"objects.Player.getMoveSpeed","objects/Player.hx",527,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_538_strMult,"objects.Player","strMult",0xc8d00dae,"objects.Player.strMult","objects/Player.hx",538,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_551_witMult,"objects.Player","witMult",0x3006199f,"objects.Player.witMult","objects/Player.hx",551,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_561_shoot,"objects.Player","shoot",0x9250c10c,"objects.Player.shoot","objects/Player.hx",561,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_587_doShoot,"objects.Player","doShoot",0x91ad86c1,"objects.Player.doShoot","objects/Player.hx",587,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_111_fromPlayerXML,"objects.Player","fromPlayerXML",0xd925a259,"objects.Player.fromPlayerXML","objects/Player.hx",111,0x1efe05a2)
HX_LOCAL_STACK_FRAME(_hx_pos_76cb3f6186044bdd_39_boot,"objects.Player","boot",0x190709a5,"objects.Player.boot","objects/Player.hx",39,0x1efe05a2)
namespace objects{

void Player_obj::__construct( ::Xml objectXML){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_29_new)
HXLINE( 107)		this->lastAttackError = -1;
HXLINE( 106)		this->relMoveVec = null();
HXLINE( 105)		this->rotate = ((Float)0.0);
HXLINE( 103)		this->deathSound = HX_("",00,00,00,00);
HXLINE( 102)		this->hurtSound = HX_("",00,00,00,00);
HXLINE( 101)		this->moveMultiplier = ((Float)1.0);
HXLINE( 100)		this->isDefaultAnimatedChar = true;
HXLINE(  99)		this->nextTeleportAt = 0;
HXLINE(  98)		this->nextAltAttack = 0;
HXLINE(  97)		this->attackPeriod = ::Std_obj::_hx_int(((Float)200.));
HXLINE(  93)		this->hasBackpack = false;
HXLINE(  92)		this->tier = 1;
HXLINE(  91)		this->hitMult = ((Float)1.0);
HXLINE(  90)		this->damageMult = ((Float)1.0);
HXLINE(  89)		this->magicVialCount = 0;
HXLINE(  88)		this->healthVialCount = 0;
HXLINE(  87)		this->tenacityMax = 0;
HXLINE(  86)		this->tenacityBoost = 0;
HXLINE(  85)		this->tenacity = 0;
HXLINE(  84)		this->penetrationMax = 0;
HXLINE(  83)		this->penetrationBoost = 0;
HXLINE(  82)		this->penetration = 0;
HXLINE(  81)		this->piercingMax = 0;
HXLINE(  80)		this->piercingBoost = 0;
HXLINE(  79)		this->piercing = 0;
HXLINE(  78)		this->intelligenceMax = 0;
HXLINE(  77)		this->intelligenceBoost = 0;
HXLINE(  76)		this->intelligence = 0;
HXLINE(  75)		this->staminaMax = 0;
HXLINE(  74)		this->staminaBoost = 0;
HXLINE(  73)		this->stamina = 0;
HXLINE(  72)		this->hasteMax = 0;
HXLINE(  71)		this->hasteBoost = 0;
HXLINE(  70)		this->haste = 0;
HXLINE(  69)		this->speedMax = 0;
HXLINE(  68)		this->speedBoost = 0;
HXLINE(  67)		this->speed = 0;
HXLINE(  66)		this->witMax = 0;
HXLINE(  65)		this->witBoost = 0;
HXLINE(  64)		this->wit = 0;
HXLINE(  63)		this->strengthMax = 0;
HXLINE(  62)		this->strengthBoost = 0;
HXLINE(  61)		this->strength = 0;
HXLINE(  60)		this->resistanceMax = 0;
HXLINE(  59)		this->resistanceBoost = 0;
HXLINE(  58)		this->defenseMax = 0;
HXLINE(  57)		this->defenseBoost = 0;
HXLINE(  56)		this->maxMPMax = 0;
HXLINE(  55)		this->maxMPBoost = 0;
HXLINE(  54)		this->maxMP = 200;
HXLINE(  53)		this->maxHPMax = 0;
HXLINE(  52)		this->maxHPBoost = 0;
HXLINE(  51)		this->mp = 0;
HXLINE(  50)		this->isFellowGuild = false;
HXLINE(  49)		this->guildRank = -1;
HXLINE(  48)		this->guildName = HX_("",00,00,00,00);
HXLINE(  47)		this->crowns = 0;
HXLINE(  46)		this->gold = 0;
HXLINE(  45)		this->gems = 0;
HXLINE(  44)		this->accountId = -1;
HXLINE(  42)		this->skinId = 0;
HXLINE( 136)		super::__construct(objectXML,HX_("Player",81,5f,4d,6c));
HXLINE( 137)		::String _hx_tmp;
HXDLIN( 137)		if (( (bool)(objectXML->elementsNamed(HX_("HitSound",9c,a5,dd,99))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 138)			 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("HitSound",9c,a5,dd,99))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 138)			bool _hx_tmp1;
HXDLIN( 138)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 138)				_hx_tmp1 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 138)				_hx_tmp1 = false;
            			}
HXDLIN( 138)			if (_hx_tmp1) {
HXLINE( 138)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 138)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 138)			bool _hx_tmp2;
HXDLIN( 138)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 138)				_hx_tmp2 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 138)				_hx_tmp2 = true;
            			}
HXDLIN( 138)			if (_hx_tmp2) {
HXLINE( 138)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXLINE( 137)			_hx_tmp = _this1->nodeValue;
            		}
            		else {
HXLINE( 137)			_hx_tmp = HX_("monster/default_hit",e0,8b,90,77);
            		}
HXDLIN( 137)		this->hurtSound = _hx_tmp;
HXLINE( 142)		::String _hx_tmp3;
HXDLIN( 142)		if (( (bool)(objectXML->elementsNamed(HX_("DeathSound",1b,d5,f4,79))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 143)			 ::Xml _this2 = ( ( ::Xml)(objectXML->elementsNamed(HX_("DeathSound",1b,d5,f4,79))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 143)			bool _hx_tmp4;
HXDLIN( 143)			if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 143)				_hx_tmp4 = (_this2->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 143)				_hx_tmp4 = false;
            			}
HXDLIN( 143)			if (_hx_tmp4) {
HXLINE( 143)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            			}
HXDLIN( 143)			 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 143)			bool _hx_tmp5;
HXDLIN( 143)			if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE( 143)				_hx_tmp5 = (_this3->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 143)				_hx_tmp5 = true;
            			}
HXDLIN( 143)			if (_hx_tmp5) {
HXLINE( 143)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            			}
HXLINE( 142)			_hx_tmp3 = _this3->nodeValue;
            		}
            		else {
HXLINE( 142)			_hx_tmp3 = HX_("monster/default_death",01,12,66,95);
            		}
HXDLIN( 142)		this->deathSound = _hx_tmp3;
HXLINE( 147)		int _hx_tmp6;
HXDLIN( 147)		if (( (bool)(objectXML->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 147)			 ::Xml _this4 = ( ( ::Xml)(objectXML->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 147)			bool _hx_tmp7;
HXDLIN( 147)			if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE( 147)				_hx_tmp7 = (_this4->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 147)				_hx_tmp7 = false;
            			}
HXDLIN( 147)			if (_hx_tmp7) {
HXLINE( 147)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            			}
HXDLIN( 147)			 ::Xml _this5 = _this4->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 147)			bool _hx_tmp8;
HXDLIN( 147)			if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE( 147)				_hx_tmp8 = (_this5->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 147)				_hx_tmp8 = true;
            			}
HXDLIN( 147)			if (_hx_tmp8) {
HXLINE( 147)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            			}
HXDLIN( 147)			_hx_tmp6 = ( (int)(::Std_obj::parseInt(_this5->nodeValue)) );
            		}
            		else {
HXLINE( 147)			_hx_tmp6 = 0;
            		}
HXDLIN( 147)		this->tier = _hx_tmp6;
HXLINE( 148)		this->objectXML = objectXML;
HXLINE( 149)		this->updateMaxValues();
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0cff6b45) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0cff6b45;
	} else {
		return inClassId==(int)0x45a16455;
	}
}

void Player_obj::updateMaxValues(){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_152_updateMaxValues)
HXLINE( 153)		 ::Xml xml = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Health",bc,9c,9a,31))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 153)		int attr;
HXDLIN( 153)		if ((this->tier > 0)) {
HXLINE( 153)			attr = this->tier;
            		}
            		else {
HXLINE( 153)			attr = 1;
            		}
HXDLIN( 153)		::String attr1 = (HX_("t",74,00,00,00) + attr);
HXDLIN( 153)		int _hx_tmp;
HXDLIN( 153)		if (::hx::IsNotNull( xml->get(attr1) )) {
HXLINE( 153)			_hx_tmp = ( (int)(::Std_obj::parseInt(xml->get(attr1))) );
            		}
            		else {
HXLINE( 153)			_hx_tmp = 0;
            		}
HXDLIN( 153)		this->maxHPMax = _hx_tmp;
HXLINE( 154)		 ::Xml xml1 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Mana",a7,68,2f,33))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 154)		int attr2;
HXDLIN( 154)		if ((this->tier > 0)) {
HXLINE( 154)			attr2 = this->tier;
            		}
            		else {
HXLINE( 154)			attr2 = 1;
            		}
HXDLIN( 154)		::String attr3 = (HX_("t",74,00,00,00) + attr2);
HXDLIN( 154)		int _hx_tmp1;
HXDLIN( 154)		if (::hx::IsNotNull( xml1->get(attr3) )) {
HXLINE( 154)			_hx_tmp1 = ( (int)(::Std_obj::parseInt(xml1->get(attr3))) );
            		}
            		else {
HXLINE( 154)			_hx_tmp1 = 0;
            		}
HXDLIN( 154)		this->maxMPMax = _hx_tmp1;
HXLINE( 155)		 ::Xml xml2 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Strength",a1,8e,40,68))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 155)		int attr4;
HXDLIN( 155)		if ((this->tier > 0)) {
HXLINE( 155)			attr4 = this->tier;
            		}
            		else {
HXLINE( 155)			attr4 = 1;
            		}
HXDLIN( 155)		::String attr5 = (HX_("t",74,00,00,00) + attr4);
HXDLIN( 155)		int _hx_tmp2;
HXDLIN( 155)		if (::hx::IsNotNull( xml2->get(attr5) )) {
HXLINE( 155)			_hx_tmp2 = ( (int)(::Std_obj::parseInt(xml2->get(attr5))) );
            		}
            		else {
HXLINE( 155)			_hx_tmp2 = 0;
            		}
HXDLIN( 155)		this->strengthMax = _hx_tmp2;
HXLINE( 156)		 ::Xml xml3 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Wit",02,60,42,00))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 156)		int attr6;
HXDLIN( 156)		if ((this->tier > 0)) {
HXLINE( 156)			attr6 = this->tier;
            		}
            		else {
HXLINE( 156)			attr6 = 1;
            		}
HXDLIN( 156)		::String attr7 = (HX_("t",74,00,00,00) + attr6);
HXDLIN( 156)		int _hx_tmp3;
HXDLIN( 156)		if (::hx::IsNotNull( xml3->get(attr7) )) {
HXLINE( 156)			_hx_tmp3 = ( (int)(::Std_obj::parseInt(xml3->get(attr7))) );
            		}
            		else {
HXLINE( 156)			_hx_tmp3 = 0;
            		}
HXDLIN( 156)		this->witMax = _hx_tmp3;
HXLINE( 157)		 ::Xml xml4 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Defense",60,91,b4,6b))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 157)		int attr8;
HXDLIN( 157)		if ((this->tier > 0)) {
HXLINE( 157)			attr8 = this->tier;
            		}
            		else {
HXLINE( 157)			attr8 = 1;
            		}
HXDLIN( 157)		::String attr9 = (HX_("t",74,00,00,00) + attr8);
HXDLIN( 157)		int _hx_tmp4;
HXDLIN( 157)		if (::hx::IsNotNull( xml4->get(attr9) )) {
HXLINE( 157)			_hx_tmp4 = ( (int)(::Std_obj::parseInt(xml4->get(attr9))) );
            		}
            		else {
HXLINE( 157)			_hx_tmp4 = 0;
            		}
HXDLIN( 157)		this->defenseMax = _hx_tmp4;
HXLINE( 158)		 ::Xml xml5 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Resistance",d9,15,07,97))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 158)		int attr10;
HXDLIN( 158)		if ((this->tier > 0)) {
HXLINE( 158)			attr10 = this->tier;
            		}
            		else {
HXLINE( 158)			attr10 = 1;
            		}
HXDLIN( 158)		::String attr11 = (HX_("t",74,00,00,00) + attr10);
HXDLIN( 158)		int _hx_tmp5;
HXDLIN( 158)		if (::hx::IsNotNull( xml5->get(attr11) )) {
HXLINE( 158)			_hx_tmp5 = ( (int)(::Std_obj::parseInt(xml5->get(attr11))) );
            		}
            		else {
HXLINE( 158)			_hx_tmp5 = 0;
            		}
HXDLIN( 158)		this->resistanceMax = _hx_tmp5;
HXLINE( 159)		 ::Xml xml6 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 159)		int attr12;
HXDLIN( 159)		if ((this->tier > 0)) {
HXLINE( 159)			attr12 = this->tier;
            		}
            		else {
HXLINE( 159)			attr12 = 1;
            		}
HXDLIN( 159)		::String attr13 = (HX_("t",74,00,00,00) + attr12);
HXDLIN( 159)		int _hx_tmp6;
HXDLIN( 159)		if (::hx::IsNotNull( xml6->get(attr13) )) {
HXLINE( 159)			_hx_tmp6 = ( (int)(::Std_obj::parseInt(xml6->get(attr13))) );
            		}
            		else {
HXLINE( 159)			_hx_tmp6 = 0;
            		}
HXDLIN( 159)		this->speedMax = _hx_tmp6;
HXLINE( 160)		 ::Xml xml7 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Haste",2b,1f,4f,b5))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 160)		int attr14;
HXDLIN( 160)		if ((this->tier > 0)) {
HXLINE( 160)			attr14 = this->tier;
            		}
            		else {
HXLINE( 160)			attr14 = 1;
            		}
HXDLIN( 160)		::String attr15 = (HX_("t",74,00,00,00) + attr14);
HXDLIN( 160)		int _hx_tmp7;
HXDLIN( 160)		if (::hx::IsNotNull( xml7->get(attr15) )) {
HXLINE( 160)			_hx_tmp7 = ( (int)(::Std_obj::parseInt(xml7->get(attr15))) );
            		}
            		else {
HXLINE( 160)			_hx_tmp7 = 0;
            		}
HXDLIN( 160)		this->hasteMax = _hx_tmp7;
HXLINE( 161)		 ::Xml xml8 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Stamina",0f,ef,15,ff))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 161)		int attr16;
HXDLIN( 161)		if ((this->tier > 0)) {
HXLINE( 161)			attr16 = this->tier;
            		}
            		else {
HXLINE( 161)			attr16 = 1;
            		}
HXDLIN( 161)		::String attr17 = (HX_("t",74,00,00,00) + attr16);
HXDLIN( 161)		int _hx_tmp8;
HXDLIN( 161)		if (::hx::IsNotNull( xml8->get(attr17) )) {
HXLINE( 161)			_hx_tmp8 = ( (int)(::Std_obj::parseInt(xml8->get(attr17))) );
            		}
            		else {
HXLINE( 161)			_hx_tmp8 = 0;
            		}
HXDLIN( 161)		this->staminaMax = _hx_tmp8;
HXLINE( 162)		 ::Xml xml9 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Intelligence",5f,53,50,b3))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 162)		int attr18;
HXDLIN( 162)		if ((this->tier > 0)) {
HXLINE( 162)			attr18 = this->tier;
            		}
            		else {
HXLINE( 162)			attr18 = 1;
            		}
HXDLIN( 162)		::String attr19 = (HX_("t",74,00,00,00) + attr18);
HXDLIN( 162)		int _hx_tmp9;
HXDLIN( 162)		if (::hx::IsNotNull( xml9->get(attr19) )) {
HXLINE( 162)			_hx_tmp9 = ( (int)(::Std_obj::parseInt(xml9->get(attr19))) );
            		}
            		else {
HXLINE( 162)			_hx_tmp9 = 0;
            		}
HXDLIN( 162)		this->intelligenceMax = _hx_tmp9;
HXLINE( 163)		 ::Xml xml10 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Piercing",25,1e,8b,35))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 163)		int attr20;
HXDLIN( 163)		if ((this->tier > 0)) {
HXLINE( 163)			attr20 = this->tier;
            		}
            		else {
HXLINE( 163)			attr20 = 1;
            		}
HXDLIN( 163)		::String attr21 = (HX_("t",74,00,00,00) + attr20);
HXDLIN( 163)		int _hx_tmp10;
HXDLIN( 163)		if (::hx::IsNotNull( xml10->get(attr21) )) {
HXLINE( 163)			_hx_tmp10 = ( (int)(::Std_obj::parseInt(xml10->get(attr21))) );
            		}
            		else {
HXLINE( 163)			_hx_tmp10 = 0;
            		}
HXDLIN( 163)		this->piercingMax = _hx_tmp10;
HXLINE( 164)		 ::Xml xml11 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Penetration",6b,f8,c8,ea))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 164)		int attr22;
HXDLIN( 164)		if ((this->tier > 0)) {
HXLINE( 164)			attr22 = this->tier;
            		}
            		else {
HXLINE( 164)			attr22 = 1;
            		}
HXDLIN( 164)		::String attr23 = (HX_("t",74,00,00,00) + attr22);
HXDLIN( 164)		int _hx_tmp11;
HXDLIN( 164)		if (::hx::IsNotNull( xml11->get(attr23) )) {
HXLINE( 164)			_hx_tmp11 = ( (int)(::Std_obj::parseInt(xml11->get(attr23))) );
            		}
            		else {
HXLINE( 164)			_hx_tmp11 = 0;
            		}
HXDLIN( 164)		this->penetrationMax = _hx_tmp11;
HXLINE( 165)		 ::Xml xml12 = ( ( ::Xml)(this->objectXML->elementsNamed(HX_("Tenacity",af,73,65,43))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 165)		int attr24;
HXDLIN( 165)		if ((this->tier > 0)) {
HXLINE( 165)			attr24 = this->tier;
            		}
            		else {
HXLINE( 165)			attr24 = 1;
            		}
HXDLIN( 165)		::String attr25 = (HX_("t",74,00,00,00) + attr24);
HXDLIN( 165)		int _hx_tmp12;
HXDLIN( 165)		if (::hx::IsNotNull( xml12->get(attr25) )) {
HXLINE( 165)			_hx_tmp12 = ( (int)(::Std_obj::parseInt(xml12->get(attr25))) );
            		}
            		else {
HXLINE( 165)			_hx_tmp12 = 0;
            		}
HXDLIN( 165)		this->tenacityMax = _hx_tmp12;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,updateMaxValues,(void))

bool Player_obj::update(int time,short dt){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_168_update)
HXLINE( 169)		if (::hx::IsNotNull( this->relMoveVec )) {
HXLINE( 170)			if ((this->rotate != 0)) {
HXLINE( 171)				::map::Camera_obj::angleRad = ( (float)(::hx::Mod((::map::Camera_obj::angleRad + ((( (Float)(dt) ) * ( (Float)(( (float)(((Float)0.003)) )) )) * this->rotate)),(( (float)(((Float)3.141592653589793)) ) * ( (float)(2) )))) );
            			}
HXLINE( 173)			bool _hx_tmp;
HXDLIN( 173)			if ((this->relMoveVec->x == 0)) {
HXLINE( 173)				_hx_tmp = (this->relMoveVec->y != 0);
            			}
            			else {
HXLINE( 173)				_hx_tmp = true;
            			}
HXDLIN( 173)			if (_hx_tmp) {
HXLINE( 174)				Float moveSpeed = this->getMoveSpeed();
HXLINE( 175)				Float moveVecAngle = ::Math_obj::atan2(this->relMoveVec->y,this->relMoveVec->x);
HXLINE( 176)				this->moveVec->x = (moveSpeed * ( (Float)(::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((( (float)((::map::Camera_obj::angleRad + moveVecAngle)) ) + ((Float)1.57079632679489656)) * ((Float)10430.3783504704534))) & 65535)]) ));
HXLINE( 177)				this->moveVec->y = (moveSpeed * ( (Float)(::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((( (Float)(( (float)((::map::Camera_obj::angleRad + moveVecAngle)) )) ) * ((Float)10430.3783504704534))) & 65535)]) ));
            			}
            			else {
HXLINE( 179)				this->moveVec->x = ( (Float)(0) );
HXLINE( 180)				this->moveVec->y = ( (Float)(0) );
            			}
HXLINE( 183)			bool _hx_tmp1;
HXDLIN( 183)			if (::hx::IsNotNull( this->curSquare )) {
HXLINE( 183)				_hx_tmp1 = this->curSquare->props->push;
            			}
            			else {
HXLINE( 183)				_hx_tmp1 = false;
            			}
HXDLIN( 183)			if (_hx_tmp1) {
HXLINE( 184)				 ::openfl::geom::Vector3D fh = this->moveVec;
HXDLIN( 184)				fh->x = (fh->x - (this->curSquare->props->animate->dx / ( (Float)(1000) )));
HXLINE( 185)				 ::openfl::geom::Vector3D fh1 = this->moveVec;
HXDLIN( 185)				fh1->y = (fh1->y - (this->curSquare->props->animate->dy / ( (Float)(1000) )));
            			}
HXLINE( 187)			this->walkTo(( (float)((this->mapX + (( (Float)(dt) ) * this->moveVec->x))) ),( (float)((this->mapY + (( (Float)(dt) ) * this->moveVec->y))) ));
            		}
            		else {
HXLINE( 188)			if (!(this->super::update(time,dt))) {
HXLINE( 189)				return false;
            			}
            		}
HXLINE( 191)		bool _hx_tmp2;
HXDLIN( 191)		bool _hx_tmp3;
HXDLIN( 191)		bool _hx_tmp4;
HXDLIN( 191)		bool _hx_tmp5;
HXDLIN( 191)		if (::hx::IsInstanceEq( this->map->player,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 191)			_hx_tmp5 = ::hx::IsNotNull( this->curSquare );
            		}
            		else {
HXLINE( 191)			_hx_tmp5 = false;
            		}
HXDLIN( 191)		if (_hx_tmp5) {
HXLINE( 191)			_hx_tmp4 = (this->curSquare->props->damage > 0);
            		}
            		else {
HXLINE( 191)			_hx_tmp4 = false;
            		}
HXDLIN( 191)		if (_hx_tmp4) {
HXLINE( 191)			_hx_tmp3 = ((this->curSquare->lastDamage + 500) < time);
            		}
            		else {
HXLINE( 191)			_hx_tmp3 = false;
            		}
HXDLIN( 191)		if (_hx_tmp3) {
HXLINE( 195)			if (::hx::IsNotNull( this->curSquare->obj )) {
HXLINE( 191)				_hx_tmp2 = !(this->curSquare->obj->props->protectFromGroundDamage);
            			}
            			else {
HXLINE( 191)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE( 191)			_hx_tmp2 = false;
            		}
HXDLIN( 191)		if (_hx_tmp2) {
HXLINE( 196)			int dmg = this->curSquare->props->damage;
HXLINE( 197)			int _hx_tmp6 = ::Std_obj::_hx_int((( (Float)(dmg) ) * this->hitMult));
HXDLIN( 197)			this->damage(-1,_hx_tmp6,null(),(this->hp <= dmg),null(),null());
HXLINE( 198)			::network::NetworkHandler_obj::groundDamage(time,( (Float)(this->mapX) ),( (Float)(this->mapY) ));
HXLINE( 199)			this->curSquare->lastDamage = time;
            		}
HXLINE( 202)		return true;
            	}


void Player_obj::damage(int origType,int damageAmount,::Array< int > effects,bool kill, ::objects::Projectile proj,::hx::Null< unsigned int >  __o_textColor){
            		unsigned int textColor = __o_textColor.Default(11542560);
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_205_damage)
HXLINE( 206)		this->super::damage(origType,damageAmount,effects,kill,proj,textColor);
HXLINE( 207)		if (this->dead) {
HXLINE( 208)			::sound::SoundEffectLibrary_obj::play(this->deathSound,null(),null());
            		}
            		else {
HXLINE( 210)			::sound::SoundEffectLibrary_obj::play(this->hurtSound,null(),null());
            		}
            	}


 ::openfl::display::BitmapData Player_obj::getPortrait(::hx::Null< float >  __o_sizeMult, ::util::AnimatedChar animCharOverride){
            		float sizeMult = __o_sizeMult.Default(1);
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_228_getPortrait)
HXLINE( 229)		 ::util::MaskedImage image = null();
HXLINE( 230)		int size = 0;
HXLINE( 231)		if (::hx::IsNull( this->portrait )) {
HXLINE( 232)			if (::hx::IsNotNull( animCharOverride )) {
HXLINE( 232)				image = animCharOverride->imageFromDir(0,0,( (Float)(0) ));
            			}
            			else {
HXLINE( 233)				image = this->animatedChar->imageFromDir(0,0,( (Float)(0) ));
            			}
HXLINE( 234)			size = ::Std_obj::_hx_int((((( (Float)(4) ) / ( (Float)(image->image->width) )) * ( (Float)(100) )) * ( (Float)(sizeMult) )));
HXLINE( 235)			this->portrait = ::util::TextureRedrawer_obj::resize(image->image,size,true,null());
HXLINE( 236)			this->portrait = ::util::GlowRedrawer_obj::outlineGlow(this->portrait,0,null(),null(),null());
            		}
HXLINE( 239)		return this->portrait;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,getPortrait,return )

void Player_obj::setRelativeMovement(float rotate,float relMoveVecX,float relMoveVecY){
            	HX_GC_STACKFRAME(&_hx_pos_76cb3f6186044bdd_242_setRelativeMovement)
HXLINE( 243)		if (::hx::IsNull( this->relMoveVec )) {
HXLINE( 244)			this->relMoveVec =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 246)		this->rotate = ( (Float)(rotate) );
HXLINE( 247)		this->relMoveVec->x = ( (Float)(relMoveVecX) );
HXLINE( 248)		this->relMoveVec->y = ( (Float)(relMoveVecY) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(Player_obj,setRelativeMovement,(void))

void Player_obj::setGuildName(::String guildName){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_251_setGuildName)
HXLINE( 253)		bool isFellowGuild = false;
HXLINE( 254)		this->guildName = guildName;
HXLINE( 255)		 ::map::Map tmp = this->map;
HXDLIN( 255)		 ::objects::Player myPlayer;
HXDLIN( 255)		if (::hx::IsNotNull( tmp )) {
HXLINE( 255)			myPlayer = tmp->player;
            		}
            		else {
HXLINE( 255)			myPlayer = null();
            		}
HXLINE( 256)		if (::hx::IsInstanceEq( myPlayer,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 257)			int _g = 0;
HXDLIN( 257)			::Array< ::Dynamic> _g1 = this->map->gameObjects;
HXDLIN( 257)			while((_g < _g1->length)){
HXLINE( 257)				 ::objects::GameObject go = _g1->__get(_g).StaticCast<  ::objects::GameObject >();
HXDLIN( 257)				_g = (_g + 1);
HXLINE( 258)				bool _hx_tmp;
HXDLIN( 258)				bool _hx_tmp1;
HXDLIN( 258)				if (::hx::IsNotNull( go )) {
HXLINE( 258)					_hx_tmp1 = go->props->isPlayer;
            				}
            				else {
HXLINE( 258)					_hx_tmp1 = false;
            				}
HXDLIN( 258)				if (_hx_tmp1) {
HXLINE( 258)					_hx_tmp = ::hx::IsInstanceNotEq( go,::hx::ObjectPtr<OBJ_>(this) );
            				}
            				else {
HXLINE( 258)					_hx_tmp = false;
            				}
HXDLIN( 258)				if (_hx_tmp) {
HXLINE( 259)					::hx::TCast<  ::objects::Player >::cast(go)->setGuildName(::hx::TCast<  ::objects::Player >::cast(go)->guildName);
            				}
            			}
            		}
            		else {
HXLINE( 262)			bool isFellowGuild1;
HXDLIN( 262)			bool isFellowGuild2;
HXDLIN( 262)			if (::hx::IsNotNull( myPlayer )) {
HXLINE( 262)				isFellowGuild2 = ::hx::IsNotNull( myPlayer->guildName );
            			}
            			else {
HXLINE( 262)				isFellowGuild2 = false;
            			}
HXDLIN( 262)			if (isFellowGuild2) {
HXLINE( 262)				isFellowGuild1 = (myPlayer->guildName != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 262)				isFellowGuild1 = false;
            			}
HXDLIN( 262)			if (isFellowGuild1) {
HXLINE( 262)				isFellowGuild = (myPlayer->guildName == this->guildName);
            			}
            			else {
HXLINE( 262)				isFellowGuild = false;
            			}
HXLINE( 263)			if ((isFellowGuild != this->isFellowGuild)) {
HXLINE( 264)				this->isFellowGuild = isFellowGuild;
HXLINE( 265)				this->nameTex = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,setGuildName,(void))

int Player_obj::msUntilTeleport(){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_271_msUntilTeleport)
HXDLIN( 271)		int _hx_tmp = this->nextTeleportAt;
HXDLIN( 271)		return ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)((_hx_tmp - ::lime::_hx_system::System_obj::getTimer())) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,msUntilTeleport,return )

bool Player_obj::teleportTo( ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_274_teleportTo)
HXLINE( 275)		int msUntil = this->msUntilTeleport();
HXLINE( 276)		if ((msUntil > 0)) {
HXLINE( 277)			 ::ui::TextBox _hx_tmp = ::Global_obj::gameSprite->textBox;
HXDLIN( 277)			_hx_tmp->addText(((HX_("You can not teleport for another ",8b,05,cc,6c) + ::Std_obj::_hx_int(((( (Float)(msUntil) ) / ( (Float)(1000) )) + 1))) + HX_(" seconds.",ef,18,9f,3f)),( (unsigned int)(16711680) ));
HXLINE( 278)			return false;
            		}
HXLINE( 281)		::network::NetworkHandler_obj::teleport(player->objectId);
HXLINE( 282)		this->nextTeleportAt = (::lime::_hx_system::System_obj::getTimer() + 10000);
HXLINE( 283)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,teleportTo,return )

bool Player_obj::walkTo(float x,float y){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_286_walkTo)
HXLINE( 287)		this->modifyMove(x,y,::objects::Player_obj::newP);
HXLINE( 288)		return this->moveTo(( (float)(::objects::Player_obj::newP->x) ),( (float)(::objects::Player_obj::newP->y) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,walkTo,return )

void Player_obj::modifyMove(float x,float y, ::openfl::geom::Point newP){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_291_modifyMove)
HXLINE( 292)		float dx = (x - this->mapX);
HXLINE( 293)		float dy = (y - this->mapY);
HXLINE( 294)		bool _hx_tmp;
HXDLIN( 294)		bool _hx_tmp1;
HXDLIN( 294)		bool _hx_tmp2;
HXDLIN( 294)		if ((dx < ( (float)(((Float)0.4)) ))) {
HXLINE( 294)			_hx_tmp2 = (dx > -(( (float)(((Float)0.4)) )));
            		}
            		else {
HXLINE( 294)			_hx_tmp2 = false;
            		}
HXDLIN( 294)		if (_hx_tmp2) {
HXLINE( 294)			_hx_tmp1 = (dy < ( (float)(((Float)0.4)) ));
            		}
            		else {
HXLINE( 294)			_hx_tmp1 = false;
            		}
HXDLIN( 294)		if (_hx_tmp1) {
HXLINE( 294)			_hx_tmp = (dy > -(( (float)(((Float)0.4)) )));
            		}
            		else {
HXLINE( 294)			_hx_tmp = false;
            		}
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 295)			this->modifyStep(x,y,newP);
HXLINE( 296)			return;
            		}
HXLINE( 299)		Float stepSize = (( (Float)(( (float)(((Float)0.4)) )) ) / ::Math_obj::max(::Math_obj::abs(( (Float)(dx) )),::Math_obj::abs(( (Float)(dy) ))));
HXLINE( 300)		Float d = ((Float)0.0);
HXLINE( 301)		newP->x = ( (Float)(this->mapX) );
HXLINE( 302)		newP->y = ( (Float)(this->mapY) );
HXLINE( 303)		bool done = false;
HXLINE( 304)		while(!(done)){
HXLINE( 305)			if (((d + stepSize) >= 1)) {
HXLINE( 306)				stepSize = (( (Float)(1) ) - d);
HXLINE( 307)				done = true;
            			}
HXLINE( 310)			this->modifyStep(( (float)((newP->x + (( (Float)(dx) ) * stepSize))) ),( (float)((newP->y + (( (Float)(dy) ) * stepSize))) ),newP);
HXLINE( 311)			d = (d + stepSize);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Player_obj,modifyMove,(void))

void Player_obj::modifyStep(float x,float y, ::openfl::geom::Point newP){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_315_modifyStep)
HXLINE( 316)		Float nextXBorder = ((Float)0.0);
HXLINE( 317)		Float nextYBorder = ((Float)0.0);
HXLINE( 318)		bool xCross;
HXDLIN( 318)		bool xCross1;
HXDLIN( 318)		if ((::hx::Mod(this->mapX,((Float)0.5)) == 0)) {
HXLINE( 318)			xCross1 = (x != this->mapX);
            		}
            		else {
HXLINE( 318)			xCross1 = false;
            		}
HXDLIN( 318)		if (!(xCross1)) {
HXLINE( 318)			xCross = (::Math_obj::floor((( (Float)(this->mapX) ) / ((Float)0.5))) != ::Math_obj::floor((( (Float)(x) ) / ((Float)0.5))));
            		}
            		else {
HXLINE( 318)			xCross = true;
            		}
HXLINE( 319)		bool yCross;
HXDLIN( 319)		bool yCross1;
HXDLIN( 319)		if ((::hx::Mod(this->mapY,((Float)0.5)) == 0)) {
HXLINE( 319)			yCross1 = (y != this->mapY);
            		}
            		else {
HXLINE( 319)			yCross1 = false;
            		}
HXDLIN( 319)		if (!(yCross1)) {
HXLINE( 319)			yCross = (::Math_obj::floor((( (Float)(this->mapY) ) / ((Float)0.5))) != ::Math_obj::floor((( (Float)(y) ) / ((Float)0.5))));
            		}
            		else {
HXLINE( 319)			yCross = true;
            		}
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		bool _hx_tmp1;
HXDLIN( 320)		if (!(xCross)) {
HXLINE( 320)			_hx_tmp1 = !(yCross);
            		}
            		else {
HXLINE( 320)			_hx_tmp1 = false;
            		}
HXDLIN( 320)		if (!(_hx_tmp1)) {
HXLINE( 320)			_hx_tmp = this->isValidPosition(x,y);
            		}
            		else {
HXLINE( 320)			_hx_tmp = true;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 321)			newP->x = ( (Float)(x) );
HXLINE( 322)			newP->y = ( (Float)(y) );
HXLINE( 323)			return;
            		}
HXLINE( 326)		if (xCross) {
HXLINE( 327)			if ((x > this->mapX)) {
HXLINE( 327)				nextXBorder = (( (Float)(::Math_obj::floor(( (Float)((x * ( (float)(2) ))) ))) ) / ( (Float)(2) ));
            			}
            			else {
HXLINE( 327)				nextXBorder = (( (Float)(::Math_obj::floor(( (Float)((this->mapX * ( (float)(2) ))) ))) ) / ( (Float)(2) ));
            			}
HXLINE( 328)			if ((::Math_obj::floor(nextXBorder) > ::Math_obj::floor(( (Float)(this->mapX) )))) {
HXLINE( 329)				nextXBorder = (nextXBorder - ((Float)0.01));
            			}
            		}
HXLINE( 332)		if (yCross) {
HXLINE( 333)			if ((y > this->mapY)) {
HXLINE( 333)				nextYBorder = (( (Float)(::Math_obj::floor(( (Float)((y * ( (float)(2) ))) ))) ) / ( (Float)(2) ));
            			}
            			else {
HXLINE( 333)				nextYBorder = (( (Float)(::Math_obj::floor(( (Float)((this->mapY * ( (float)(2) ))) ))) ) / ( (Float)(2) ));
            			}
HXLINE( 334)			if ((::Math_obj::floor(nextYBorder) > ::Math_obj::floor(( (Float)(this->mapY) )))) {
HXLINE( 335)				nextYBorder = (nextYBorder - ((Float)0.01));
            			}
            		}
HXLINE( 338)		if (!(xCross)) {
HXLINE( 339)			newP->x = ( (Float)(x) );
HXLINE( 340)			newP->y = nextYBorder;
HXLINE( 341)			return;
            		}
HXLINE( 344)		if (!(yCross)) {
HXLINE( 345)			newP->x = nextXBorder;
HXLINE( 346)			newP->y = ( (Float)(y) );
HXLINE( 347)			return;
            		}
HXLINE( 350)		Float xBorderDist;
HXDLIN( 350)		if ((x > this->mapX)) {
HXLINE( 350)			xBorderDist = (( (Float)(x) ) - nextXBorder);
            		}
            		else {
HXLINE( 350)			xBorderDist = (nextXBorder - ( (Float)(x) ));
            		}
HXLINE( 351)		Float yBorderDist;
HXDLIN( 351)		if ((y > this->mapY)) {
HXLINE( 351)			yBorderDist = (( (Float)(y) ) - nextYBorder);
            		}
            		else {
HXLINE( 351)			yBorderDist = (nextYBorder - ( (Float)(y) ));
            		}
HXLINE( 352)		if ((xBorderDist > yBorderDist)) {
HXLINE( 353)			if (this->isValidPosition(x,( (float)(nextYBorder) ))) {
HXLINE( 354)				newP->x = ( (Float)(x) );
HXLINE( 355)				newP->y = nextYBorder;
HXLINE( 356)				return;
            			}
HXLINE( 359)			if (this->isValidPosition(( (float)(nextXBorder) ),y)) {
HXLINE( 360)				newP->x = nextXBorder;
HXLINE( 361)				newP->y = ( (Float)(y) );
HXLINE( 362)				return;
            			}
            		}
            		else {
HXLINE( 365)			if (this->isValidPosition(( (float)(nextXBorder) ),y)) {
HXLINE( 366)				newP->x = nextXBorder;
HXLINE( 367)				newP->y = ( (Float)(y) );
HXLINE( 368)				return;
            			}
HXLINE( 371)			if (this->isValidPosition(x,( (float)(nextYBorder) ))) {
HXLINE( 372)				newP->x = ( (Float)(x) );
HXLINE( 373)				newP->y = nextYBorder;
HXLINE( 374)				return;
            			}
            		}
HXLINE( 378)		newP->x = nextXBorder;
HXLINE( 379)		newP->y = nextYBorder;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Player_obj,modifyStep,(void))

bool Player_obj::isValidPosition(float x,float y){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_382_isValidPosition)
HXLINE( 383)		 ::map::Map square = this->map;
HXDLIN( 383)		int square1 = ::Std_obj::_hx_int(( (Float)(x) ));
HXDLIN( 383)		 ::map::Square square2 = square->lookupSquare(( (unsigned short)(square1) ),( (unsigned short)(::Std_obj::_hx_int(( (Float)(y) ))) ));
HXLINE( 384)		bool _hx_tmp;
HXDLIN( 384)		if (::hx::IsInstanceNotEq( this->curSquare,square2 )) {
HXLINE( 384)			if (::hx::IsNotNull( square2 )) {
HXLINE( 384)				bool _hx_tmp1;
HXDLIN( 384)				if (!(square2->props->noWalk)) {
HXLINE( 384)					if (::hx::IsNotNull( square2->obj )) {
HXLINE( 384)						_hx_tmp1 = !(square2->obj->props->occupySquare);
            					}
            					else {
HXLINE( 384)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE( 384)					_hx_tmp1 = false;
            				}
HXDLIN( 384)				_hx_tmp = !(_hx_tmp1);
            			}
            			else {
HXLINE( 384)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 384)			_hx_tmp = false;
            		}
HXDLIN( 384)		if (_hx_tmp) {
HXLINE( 385)			return false;
            		}
HXLINE( 387)		float xFrac = (x - ( (float)(::Math_obj::floor(( (Float)(x) ))) ));
HXLINE( 388)		float yFrac = (y - ( (float)(::Math_obj::floor(( (Float)(y) ))) ));
HXLINE( 389)		if ((xFrac < ((Float)0.5))) {
HXLINE( 390)			if (this->isFullOccupy((x - ( (float)(1) )),y)) {
HXLINE( 391)				return false;
            			}
HXLINE( 393)			if ((yFrac < ((Float)0.5))) {
HXLINE( 394)				bool _hx_tmp2;
HXDLIN( 394)				if (!(this->isFullOccupy(x,(y - ( (float)(1) ))))) {
HXLINE( 394)					_hx_tmp2 = this->isFullOccupy((x - ( (float)(1) )),(y - ( (float)(1) )));
            				}
            				else {
HXLINE( 394)					_hx_tmp2 = true;
            				}
HXDLIN( 394)				if (_hx_tmp2) {
HXLINE( 395)					return false;
            				}
            			}
            			else {
HXLINE( 396)				if ((yFrac > ((Float)0.5))) {
HXLINE( 397)					bool _hx_tmp3;
HXDLIN( 397)					if (!(this->isFullOccupy(x,(y + 1)))) {
HXLINE( 397)						_hx_tmp3 = this->isFullOccupy((x - ( (float)(1) )),(y + 1));
            					}
            					else {
HXLINE( 397)						_hx_tmp3 = true;
            					}
HXDLIN( 397)					if (_hx_tmp3) {
HXLINE( 398)						return false;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 400)			if ((xFrac > ((Float)0.5))) {
HXLINE( 401)				if (this->isFullOccupy((x + 1),y)) {
HXLINE( 402)					return false;
            				}
HXLINE( 404)				if ((yFrac < ((Float)0.5))) {
HXLINE( 405)					bool _hx_tmp4;
HXDLIN( 405)					if (!(this->isFullOccupy(x,(y - ( (float)(1) ))))) {
HXLINE( 405)						_hx_tmp4 = this->isFullOccupy((x + 1),(y - ( (float)(1) )));
            					}
            					else {
HXLINE( 405)						_hx_tmp4 = true;
            					}
HXDLIN( 405)					if (_hx_tmp4) {
HXLINE( 406)						return false;
            					}
            				}
            				else {
HXLINE( 407)					if ((yFrac > ((Float)0.5))) {
HXLINE( 408)						bool _hx_tmp5;
HXDLIN( 408)						if (!(this->isFullOccupy(x,(y + 1)))) {
HXLINE( 408)							_hx_tmp5 = this->isFullOccupy((x + 1),(y + 1));
            						}
            						else {
HXLINE( 408)							_hx_tmp5 = true;
            						}
HXDLIN( 408)						if (_hx_tmp5) {
HXLINE( 409)							return false;
            						}
            					}
            				}
            			}
            			else {
HXLINE( 411)				if ((yFrac < ((Float)0.5))) {
HXLINE( 412)					if (this->isFullOccupy(x,(y - ( (float)(1) )))) {
HXLINE( 413)						return false;
            					}
            				}
            				else {
HXLINE( 414)					if ((yFrac > ((Float)0.5))) {
HXLINE( 415)						if (this->isFullOccupy(x,(y + 1))) {
HXLINE( 416)							return false;
            						}
            					}
            				}
            			}
            		}
HXLINE( 419)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,isValidPosition,return )

bool Player_obj::isFullOccupy(float x,float y){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_422_isFullOccupy)
HXLINE( 423)		 ::map::Square square = this->map->lookupSquare(( (unsigned short)(::Math_obj::floor(( (Float)(x) ))) ),( (unsigned short)(::Math_obj::floor(( (Float)(y) ))) ));
HXLINE( 424)		bool _hx_tmp;
HXDLIN( 424)		if (::hx::IsNotNull( square )) {
HXLINE( 424)			_hx_tmp = (square->tileType == 255);
            		}
            		else {
HXLINE( 424)			_hx_tmp = true;
            		}
HXDLIN( 424)		if (!(_hx_tmp)) {
HXLINE( 424)			if (::hx::IsNotNull( square->obj )) {
HXLINE( 424)				return square->obj->props->fullOccupy;
            			}
            			else {
HXLINE( 424)				return false;
            			}
            		}
            		else {
HXLINE( 424)			return true;
            		}
HXDLIN( 424)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,isFullOccupy,return )

bool Player_obj::useAltWeapon(float xS,float yS,int useType){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_427_useAltWeapon)
HXLINE( 428)		int now = 0;
HXLINE( 429)		int cooldown = 0;
HXLINE( 430)		bool _hx_tmp;
HXDLIN( 430)		if (::hx::IsNotNull( this->map )) {
HXLINE( 430)			int _hx_tmp1 = this->objectType;
HXDLIN( 430)			_hx_tmp = ::hx::IsEq( _hx_tmp1,::objects::ObjectLibrary_obj::idToType->get(HX_("Warlock",f3,18,cf,d5)) );
            		}
            		else {
HXLINE( 430)			_hx_tmp = true;
            		}
HXDLIN( 430)		if (_hx_tmp) {
HXLINE( 431)			return false;
            		}
HXLINE( 433)		int itemType = this->equipment->__get(1);
HXLINE( 434)		if ((itemType == -1)) {
HXLINE( 435)			return false;
            		}
HXLINE( 437)		 ::Xml objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(itemType)) );
HXLINE( 438)		if (::hx::IsNull( objectXML )) {
HXLINE( 439)			return false;
            		}
HXLINE( 441)		float angle = ::map::Camera_obj::angleRad;
HXLINE( 442)		float cosAngle = ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((angle + ((Float)1.57079632679489656)) * ((Float)10430.3783504704534))) & 65535)];
HXDLIN( 442)		float sinAngle = ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((( (Float)(angle) ) * ((Float)10430.3783504704534))) & 65535)];
HXLINE( 443)		xS = (( (Float)(xS) ) / ( (Float)(( (signed char)(88) )) ));
HXLINE( 444)		yS = (( (Float)(yS) ) / ( (Float)(( (signed char)(88) )) ));
HXLINE( 445)		float targetX = ((xS * cosAngle) + (yS * sinAngle));
HXLINE( 446)		float targetY = ((xS * -(sinAngle)) + (yS * cosAngle));
HXLINE( 448)		{
HXLINE( 448)			 ::Dynamic activateXML = objectXML->elementsNamed(HX_("Activate",d3,d7,5d,bf));
HXDLIN( 448)			while(( (bool)(activateXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 448)				 ::Xml activateXML1 = ( ( ::Xml)(activateXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 449)				bool _hx_tmp2;
HXDLIN( 449)				::String tmp;
HXDLIN( 449)				if (::hx::IsNotNull( activateXML1 )) {
HXLINE( 449)					bool tmp1;
HXDLIN( 449)					if ((activateXML1->nodeType != ::Xml_obj::Document)) {
HXLINE( 449)						tmp1 = (activateXML1->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 449)						tmp1 = false;
            					}
HXDLIN( 449)					if (tmp1) {
HXLINE( 449)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(activateXML1->nodeType)));
            					}
HXDLIN( 449)					 ::Xml _this = activateXML1->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 449)					bool tmp2;
HXDLIN( 449)					if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 449)						tmp2 = (_this->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 449)						tmp2 = true;
            					}
HXDLIN( 449)					if (tmp2) {
HXLINE( 449)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            					}
HXDLIN( 449)					tmp = _this->nodeValue;
            				}
            				else {
HXLINE( 449)					tmp = null();
            				}
HXDLIN( 449)				::String _hx_tmp3;
HXDLIN( 449)				if (::hx::IsNotNull( tmp )) {
HXLINE( 449)					_hx_tmp3 = tmp;
            				}
            				else {
HXLINE( 449)					_hx_tmp3 = HX_("",00,00,00,00);
            				}
HXDLIN( 449)				if ((_hx_tmp3 == HX_("Teleport",cb,5e,e5,cc))) {
HXLINE( 449)					_hx_tmp2 = !(this->isValidPosition(targetX,targetY));
            				}
            				else {
HXLINE( 449)					_hx_tmp2 = false;
            				}
HXDLIN( 449)				if (_hx_tmp2) {
HXLINE( 450)					::sound::SoundEffectLibrary_obj::play(HX_("error",c8,cb,29,73),null(),null());
HXLINE( 451)					return false;
            				}
            			}
            		}
HXLINE( 454)		now = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 455)		if ((useType == 1)) {
HXLINE( 456)			if ((now < this->nextAltAttack)) {
HXLINE( 457)				::sound::SoundEffectLibrary_obj::play(HX_("error",c8,cb,29,73),null(),null());
HXLINE( 458)				return false;
            			}
HXLINE( 461)			int mpCost;
HXDLIN( 461)			if (( (bool)(objectXML->elementsNamed(HX_("MpCost",70,ab,f9,72))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 461)				 ::Xml _this1 = ( ( ::Xml)(objectXML->elementsNamed(HX_("MpCost",70,ab,f9,72))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 461)				bool mpCost1;
HXDLIN( 461)				if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 461)					mpCost1 = (_this1->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 461)					mpCost1 = false;
            				}
HXDLIN( 461)				if (mpCost1) {
HXLINE( 461)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            				}
HXDLIN( 461)				 ::Xml _this2 = _this1->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 461)				bool mpCost2;
HXDLIN( 461)				if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 461)					mpCost2 = (_this2->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 461)					mpCost2 = true;
            				}
HXDLIN( 461)				if (mpCost2) {
HXLINE( 461)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            				}
HXDLIN( 461)				mpCost = ( (int)(::Std_obj::parseInt(_this2->nodeValue)) );
            			}
            			else {
HXLINE( 461)				mpCost = 0;
            			}
HXDLIN( 461)			int hpCost;
HXLINE( 462)			if (( (bool)(objectXML->elementsNamed(HX_("HpCost",95,dd,30,73))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 462)				 ::Xml _this3 = ( ( ::Xml)(objectXML->elementsNamed(HX_("HpCost",95,dd,30,73))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 462)				bool hpCost1;
HXDLIN( 462)				if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE( 462)					hpCost1 = (_this3->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 462)					hpCost1 = false;
            				}
HXDLIN( 462)				if (hpCost1) {
HXLINE( 462)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            				}
HXDLIN( 462)				 ::Xml _this4 = _this3->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 462)				bool hpCost2;
HXDLIN( 462)				if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE( 462)					hpCost2 = (_this4->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 462)					hpCost2 = true;
            				}
HXDLIN( 462)				if (hpCost2) {
HXLINE( 462)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            				}
HXLINE( 461)				hpCost = ( (int)(::Std_obj::parseInt(_this4->nodeValue)) );
            			}
            			else {
HXLINE( 461)				hpCost = 0;
            			}
HXLINE( 463)			bool _hx_tmp4;
HXDLIN( 463)			if (!((mpCost > this->mp))) {
HXLINE( 463)				_hx_tmp4 = (hpCost > this->hp);
            			}
            			else {
HXLINE( 463)				_hx_tmp4 = true;
            			}
HXDLIN( 463)			if (_hx_tmp4) {
HXLINE( 464)				::sound::SoundEffectLibrary_obj::play(HX_("no_mana",85,6c,3d,3b),null(),null());
HXLINE( 465)				return false;
            			}
HXLINE( 468)			cooldown = 500;
HXLINE( 469)			if (( (bool)(objectXML->elementsNamed(HX_("Cooldown",cb,07,54,d3))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 470)				int cooldown1;
HXDLIN( 470)				if (( (bool)(objectXML->elementsNamed(HX_("Cooldown",cb,07,54,d3))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 470)					 ::Xml _this5 = ( ( ::Xml)(objectXML->elementsNamed(HX_("Cooldown",cb,07,54,d3))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 470)					bool cooldown2;
HXDLIN( 470)					if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE( 470)						cooldown2 = (_this5->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 470)						cooldown2 = false;
            					}
HXDLIN( 470)					if (cooldown2) {
HXLINE( 470)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            					}
HXDLIN( 470)					 ::Xml _this6 = _this5->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 470)					bool cooldown3;
HXDLIN( 470)					if ((_this6->nodeType != ::Xml_obj::Document)) {
HXLINE( 470)						cooldown3 = (_this6->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 470)						cooldown3 = true;
            					}
HXDLIN( 470)					if (cooldown3) {
HXLINE( 470)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this6->nodeType)));
            					}
HXDLIN( 470)					cooldown1 = ( (int)(::Std_obj::parseInt(_this6->nodeValue)) );
            				}
            				else {
HXLINE( 470)					cooldown1 = 0;
            				}
HXDLIN( 470)				cooldown = (cooldown1 * 1000);
            			}
HXLINE( 472)			if (( (bool)(objectXML->elementsNamed(HX_("Sound",af,fc,f9,13))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 473)				::String _hx_tmp5;
HXDLIN( 473)				if (( (bool)(objectXML->elementsNamed(HX_("Sound",af,fc,f9,13))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 473)					 ::Xml _this7 = ( ( ::Xml)(objectXML->elementsNamed(HX_("Sound",af,fc,f9,13))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 473)					bool _hx_tmp6;
HXDLIN( 473)					if ((_this7->nodeType != ::Xml_obj::Document)) {
HXLINE( 473)						_hx_tmp6 = (_this7->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 473)						_hx_tmp6 = false;
            					}
HXDLIN( 473)					if (_hx_tmp6) {
HXLINE( 473)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this7->nodeType)));
            					}
HXDLIN( 473)					 ::Xml _this8 = _this7->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 473)					bool _hx_tmp7;
HXDLIN( 473)					if ((_this8->nodeType != ::Xml_obj::Document)) {
HXLINE( 473)						_hx_tmp7 = (_this8->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 473)						_hx_tmp7 = true;
            					}
HXDLIN( 473)					if (_hx_tmp7) {
HXLINE( 473)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this8->nodeType)));
            					}
HXDLIN( 473)					_hx_tmp5 = _this8->nodeValue;
            				}
            				else {
HXLINE( 473)					_hx_tmp5 = HX_("",00,00,00,00);
            				}
HXDLIN( 473)				::sound::SoundEffectLibrary_obj::play(_hx_tmp5,null(),null());
            			}
HXLINE( 475)			this->nextAltAttack = (now + cooldown);
HXLINE( 476)			::network::NetworkHandler_obj::useItem(now,this->objectId,1,itemType,( (Float)(targetX) ),( (Float)(targetY) ),useType);
            		}
HXLINE( 479)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Player_obj,useAltWeapon,return )

void Player_obj::attemptAttackAngle(float angle){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_483_attemptAttackAngle)
HXDLIN( 483)		this->shoot((::map::Camera_obj::angleRad + angle));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,attemptAttackAngle,(void))

int Player_obj::nextAvailableInventorySlot(){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_486_nextAvailableInventorySlot)
HXLINE( 487)		int len;
HXDLIN( 487)		if (this->hasBackpack) {
HXLINE( 487)			len = this->equipment->length;
            		}
            		else {
HXLINE( 487)			len = (this->equipment->length - 8);
            		}
HXLINE( 488)		{
HXLINE( 488)			int _g = 4;
HXDLIN( 488)			int _g1 = len;
HXDLIN( 488)			while((_g < _g1)){
HXLINE( 488)				_g = (_g + 1);
HXDLIN( 488)				int i = (_g - 1);
HXLINE( 489)				if ((this->equipment->__get(i) <= 0)) {
HXLINE( 490)					return i;
            				}
            			}
            		}
HXLINE( 492)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,nextAvailableInventorySlot,return )

int Player_obj::swapInventoryIndex(::String current){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_495_swapInventoryIndex)
HXLINE( 496)		int start = 0;
HXLINE( 497)		int end = 0;
HXLINE( 498)		if (!(this->hasBackpack)) {
HXLINE( 499)			return -1;
            		}
HXLINE( 501)		if ((current == HX_("Backpack",a0,0c,2a,fc))) {
HXLINE( 502)			start = 4;
HXLINE( 503)			end = 12;
            		}
            		else {
HXLINE( 505)			start = 12;
HXLINE( 506)			end = this->equipment->length;
            		}
HXLINE( 509)		{
HXLINE( 509)			int _g = start;
HXDLIN( 509)			int _g1 = end;
HXDLIN( 509)			while((_g < _g1)){
HXLINE( 509)				_g = (_g + 1);
HXDLIN( 509)				int i = (_g - 1);
HXLINE( 510)				if ((this->equipment->__get(i) <= 0)) {
HXLINE( 511)					return i;
            				}
            			}
            		}
HXLINE( 513)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,swapInventoryIndex,return )

int Player_obj::getVialCount(int objectType){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_517_getVialCount)
HXDLIN( 517)		switch((int)(objectType)){
            			case (int)2721: {
HXLINE( 519)				return this->healthVialCount;
            			}
            			break;
            			case (int)2722: {
HXLINE( 521)				return this->magicVialCount;
            			}
            			break;
            			default:{
HXLINE( 523)				return 0;
            			}
            		}
HXLINE( 517)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,getVialCount,return )

Float Player_obj::getMoveSpeed(){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_527_getMoveSpeed)
HXLINE( 528)		if (((this->condition & 4) != 0)) {
HXLINE( 529)			return (( (Float)(( (float)(((Float)0.004)) )) ) * this->moveMultiplier);
            		}
HXLINE( 531)		Float moveSpeed = (( (float)(((Float)0.004)) ) + ((( (Float)(this->speed) ) / ( (Float)(75) )) * ( (Float)((( (float)(((Float)0.0096)) ) - ( (float)(((Float)0.004)) ))) )));
HXLINE( 532)		if (((this->condition & 16) != 0)) {
HXLINE( 533)			moveSpeed = (moveSpeed * ((Float)1.5));
            		}
HXLINE( 535)		Float _hx_tmp;
HXDLIN( 535)		if (::Global_obj::gameSprite->inputHandler->isWalking) {
HXLINE( 535)			_hx_tmp = ((Float)0.5);
            		}
            		else {
HXLINE( 535)			_hx_tmp = ( (Float)(1) );
            		}
HXDLIN( 535)		return ((moveSpeed * this->moveMultiplier) * _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getMoveSpeed,return )

float Player_obj::strMult(){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_538_strMult)
HXLINE( 539)		if (((this->condition & 2) != 0)) {
HXLINE( 540)			return ( (float)(((Float)0.5)) );
            		}
HXLINE( 542)		Float strMult = (( (float)(((Float)0.5)) ) + ((( (Float)(this->strength) ) / ( (Float)(75) )) * ( (Float)((( (float)(((Float)2.0)) ) - ( (float)(((Float)0.5)) ))) )));
HXLINE( 543)		if (((this->condition & 128) != 0)) {
HXLINE( 544)			strMult = (strMult * ((Float)1.5));
            		}
HXLINE( 546)		return ( (float)((strMult * this->damageMult)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,strMult,return )

Float Player_obj::witMult(){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_551_witMult)
HXDLIN( 551)		return ((( (float)(((Float)0.5)) ) + ((( (Float)(this->wit) ) / ( (Float)(75) )) * ( (Float)((( (float)(((Float)2.0)) ) - ( (float)(((Float)0.5)) ))) ))) * this->damageMult);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,witMult,return )

void Player_obj::shoot(float angle){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_561_shoot)
HXLINE( 562)		if (::hx::IsNull( this->map )) {
HXLINE( 563)			return;
            		}
HXLINE( 565)		int time = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 566)		int weaponType = this->equipment->__get(0);
HXLINE( 567)		if ((weaponType == -1)) {
HXLINE( 568)			if (((time - this->lastAttackError) > 2000)) {
HXLINE( 569)				::Global_obj::gameSprite->textBox->addText(HX_("You do not have a weapon equipped!",54,29,ff,b9),( (unsigned int)(16711680) ));
HXLINE( 570)				this->lastAttackError = time;
            			}
HXLINE( 573)			return;
            		}
HXLINE( 576)		 ::Xml weaponXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(weaponType)) );
HXLINE( 577)		float rateOfFire;
HXDLIN( 577)		if (( (bool)(weaponXML->elementsNamed(HX_("RateOfFire",8d,6b,cc,57))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 577)			 ::Xml _this = ( ( ::Xml)(weaponXML->elementsNamed(HX_("RateOfFire",8d,6b,cc,57))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 577)			bool rateOfFire1;
HXDLIN( 577)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 577)				rateOfFire1 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 577)				rateOfFire1 = false;
            			}
HXDLIN( 577)			if (rateOfFire1) {
HXLINE( 577)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 577)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 577)			bool rateOfFire2;
HXDLIN( 577)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 577)				rateOfFire2 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 577)				rateOfFire2 = true;
            			}
HXDLIN( 577)			if (rateOfFire2) {
HXLINE( 577)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN( 577)			rateOfFire = ( (float)(::Std_obj::parseFloat(_this1->nodeValue)) );
            		}
            		else {
HXLINE( 577)			rateOfFire = ( (float)(1) );
            		}
HXLINE( 578)		this->attackPeriod = ::Std_obj::_hx_int((( (Float)(1) ) / ( (Float)((( (float)(((Float)0.005)) ) * rateOfFire)) )));
HXLINE( 579)		if ((time < (this->attackStart + this->attackPeriod))) {
HXLINE( 580)			return;
            		}
HXLINE( 582)		this->attackAngle = angle;
HXLINE( 583)		this->attackStart = time;
HXLINE( 584)		this->doShoot(this->attackStart,weaponType,weaponXML,this->attackAngle,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,shoot,(void))

void Player_obj::doShoot(int time,int weaponType, ::Xml weaponXML,float attackAngle,bool useMult){
            	HX_STACKFRAME(&_hx_pos_76cb3f6186044bdd_587_doShoot)
HXLINE( 588)		int numProjs;
HXDLIN( 588)		if (( (bool)(weaponXML->elementsNamed(HX_("NumProjectiles",e4,ad,06,4a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 588)			 ::Xml _this = ( ( ::Xml)(weaponXML->elementsNamed(HX_("NumProjectiles",e4,ad,06,4a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 588)			bool numProjs1;
HXDLIN( 588)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 588)				numProjs1 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 588)				numProjs1 = false;
            			}
HXDLIN( 588)			if (numProjs1) {
HXLINE( 588)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 588)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 588)			bool numProjs2;
HXDLIN( 588)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 588)				numProjs2 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 588)				numProjs2 = true;
            			}
HXDLIN( 588)			if (numProjs2) {
HXLINE( 588)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN( 588)			numProjs = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
            		}
            		else {
HXLINE( 588)			numProjs = 1;
            		}
HXLINE( 589)		float arcGap;
HXDLIN( 589)		if (( (bool)(weaponXML->elementsNamed(HX_("ArcGap",04,ea,86,e2))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 589)			 ::Xml _this2 = ( ( ::Xml)(weaponXML->elementsNamed(HX_("ArcGap",04,ea,86,e2))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 589)			bool arcGap1;
HXDLIN( 589)			if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 589)				arcGap1 = (_this2->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 589)				arcGap1 = false;
            			}
HXDLIN( 589)			if (arcGap1) {
HXLINE( 589)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            			}
HXDLIN( 589)			 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 589)			bool arcGap2;
HXDLIN( 589)			if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE( 589)				arcGap2 = (_this3->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 589)				arcGap2 = true;
            			}
HXDLIN( 589)			if (arcGap2) {
HXLINE( 589)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            			}
HXDLIN( 589)			arcGap = ( (float)(::Std_obj::parseFloat(_this3->nodeValue)) );
            		}
            		else {
HXLINE( 589)			arcGap = ( (float)(((Float)11.25)) );
            		}
HXDLIN( 589)		float arcGap3 = (arcGap * ( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(180) ))) ));
HXLINE( 591)		Float angle = (( (Float)(attackAngle) ) - ((( (Float)(arcGap3) ) * ( (Float)((numProjs - 1)) )) / ( (Float)(2) )));
HXLINE( 592)		{
HXLINE( 592)			int _g = 0;
HXDLIN( 592)			int _g1 = numProjs;
HXDLIN( 592)			while((_g < _g1)){
HXLINE( 592)				_g = (_g + 1);
HXLINE( 593)				signed char bulletId = this->nextBulletId;
HXLINE( 594)				this->nextBulletId = ::hx::Mod((this->nextBulletId + 1),128);
HXLINE( 595)				 ::objects::Projectile proj = ::Global_obj::projPool->get();
HXLINE( 596)				proj->reset(weaponType,0,this->objectId,( (int)(bulletId) ),( (float)(angle) ),time);
HXLINE( 597)				int physDmg = proj->projProps->physicalDamage;
HXLINE( 598)				int magicDmg = proj->projProps->magicDamage;
HXLINE( 599)				int trueDmg = proj->projProps->trueDamage;
HXLINE( 600)				if (useMult) {
HXLINE( 601)					physDmg = ::Std_obj::_hx_int(( (Float)((( (float)(physDmg) ) * this->strMult())) ));
HXLINE( 602)					magicDmg = ::Std_obj::_hx_int((( (Float)(magicDmg) ) * this->witMult()));
HXLINE( 603)					trueDmg = ::Std_obj::_hx_int((( (Float)(trueDmg) ) * this->damageMult));
            				}
HXLINE( 606)				proj->setDamages(physDmg,magicDmg,trueDmg);
HXLINE( 607)				bool _hx_tmp;
HXDLIN( 607)				if (((_g - 1) == 0)) {
HXLINE( 607)					_hx_tmp = ::hx::IsNotNull( proj->sound );
            				}
            				else {
HXLINE( 607)					_hx_tmp = false;
            				}
HXDLIN( 607)				if (_hx_tmp) {
HXLINE( 608)					::sound::SoundEffectLibrary_obj::play(proj->sound,((Float)0.75),false);
            				}
HXLINE( 610)				this->map->addGameObject(( ( ::objects::GameObject)(proj) ),( (float)((this->mapX + (( (Float)(::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((attackAngle + ((Float)1.57079632679489656)) * ((Float)10430.3783504704534))) & 65535)]) ) * ((Float)0.25)))) ),( (float)((this->mapY + (( (Float)(::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((( (Float)(attackAngle) ) * ((Float)10430.3783504704534))) & 65535)]) ) * ((Float)0.25)))) ));
HXLINE( 611)				::network::NetworkHandler_obj::playerShoot(time,proj);
HXLINE( 612)				angle = (angle + arcGap3);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Player_obj,doShoot,(void))

 ::openfl::geom::Point Player_obj::newP;

 ::objects::Player Player_obj::fromPlayerXML(::String name, ::Xml playerXML){
            	HX_GC_STACKFRAME(&_hx_pos_76cb3f6186044bdd_111_fromPlayerXML)
HXLINE( 112)		 ::haxe::ds::IntMap player = ::objects::ObjectLibrary_obj::xmlLibrary;
HXDLIN( 112)		int player1;
HXDLIN( 112)		if (( (bool)(playerXML->elementsNamed(HX_("ObjectType",39,6d,f2,c5))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 112)			 ::Xml _this = ( ( ::Xml)(playerXML->elementsNamed(HX_("ObjectType",39,6d,f2,c5))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 112)			bool player2;
HXDLIN( 112)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 112)				player2 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 112)				player2 = false;
            			}
HXDLIN( 112)			if (player2) {
HXLINE( 112)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 112)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 112)			bool player3;
HXDLIN( 112)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 112)				player3 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 112)				player3 = true;
            			}
HXDLIN( 112)			if (player3) {
HXLINE( 112)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN( 112)			player1 = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
            		}
            		else {
HXLINE( 112)			player1 = 0;
            		}
HXDLIN( 112)		 ::objects::Player player4 =  ::objects::Player_obj::__alloc( HX_CTX ,( ( ::Xml)(player->get(player1)) ));
HXLINE( 113)		player4->name = name;
HXLINE( 114)		::Array< int > _hx_tmp;
HXDLIN( 114)		if (( (bool)(playerXML->elementsNamed(HX_("Equipment",2e,14,58,dc))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 114)			 ::Xml _this2 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Equipment",2e,14,58,dc))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 114)			bool _this3;
HXDLIN( 114)			if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 114)				_this3 = (_this2->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 114)				_this3 = false;
            			}
HXDLIN( 114)			if (_this3) {
HXLINE( 114)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            			}
HXDLIN( 114)			 ::Xml _this4 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 114)			bool _this5;
HXDLIN( 114)			if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE( 114)				_this5 = (_this4->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 114)				_this5 = true;
            			}
HXDLIN( 114)			if (_this5) {
HXLINE( 114)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            			}
HXDLIN( 114)			::Array< ::String > _this6 = _this4->nodeValue.split(HX_(",",2c,00,00,00));
HXDLIN( 114)			::Array< int > result = ::Array_obj< int >::__new(_this6->length);
HXDLIN( 114)			{
HXLINE( 114)				int _g = 0;
HXDLIN( 114)				int _g1 = _this6->length;
HXDLIN( 114)				while((_g < _g1)){
HXLINE( 114)					_g = (_g + 1);
HXDLIN( 114)					int i = (_g - 1);
HXDLIN( 114)					{
HXLINE( 114)						int inValue = ::hx::TCast< int >::cast(::Std_obj::parseInt(( (::String)(_hx_array_unsafe_get(_this6,i)) )));
HXDLIN( 114)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 114)			_hx_tmp = result;
            		}
            		else {
HXLINE( 114)			_hx_tmp = ::Array_obj< int >::__new();
            		}
HXDLIN( 114)		player4->equipment = _hx_tmp;
HXLINE( 115)		{
HXLINE( 115)			int _g2 = 0;
HXDLIN( 115)			int _g3 = player4->equipment->length;
HXDLIN( 115)			while((_g2 < _g3)){
HXLINE( 115)				_g2 = (_g2 + 1);
HXDLIN( 115)				int i1 = (_g2 - 1);
HXLINE( 116)				if ((player4->equipment->__get(i1) == 65535)) {
HXLINE( 117)					player4->equipment[i1] = -1;
            				}
            			}
            		}
HXLINE( 118)		int _hx_tmp1;
HXDLIN( 118)		if (( (bool)(playerXML->elementsNamed(HX_("Health",bc,9c,9a,31))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 118)			 ::Xml _this7 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Health",bc,9c,9a,31))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 118)			bool _hx_tmp2;
HXDLIN( 118)			if ((_this7->nodeType != ::Xml_obj::Document)) {
HXLINE( 118)				_hx_tmp2 = (_this7->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 118)				_hx_tmp2 = false;
            			}
HXDLIN( 118)			if (_hx_tmp2) {
HXLINE( 118)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this7->nodeType)));
            			}
HXDLIN( 118)			 ::Xml _this8 = _this7->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 118)			bool _hx_tmp3;
HXDLIN( 118)			if ((_this8->nodeType != ::Xml_obj::Document)) {
HXLINE( 118)				_hx_tmp3 = (_this8->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 118)				_hx_tmp3 = true;
            			}
HXDLIN( 118)			if (_hx_tmp3) {
HXLINE( 118)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this8->nodeType)));
            			}
HXDLIN( 118)			_hx_tmp1 = ( (int)(::Std_obj::parseInt(_this8->nodeValue)) );
            		}
            		else {
HXLINE( 118)			_hx_tmp1 = 0;
            		}
HXDLIN( 118)		player4->maxHP = (player4->hp = _hx_tmp1);
HXLINE( 119)		int _hx_tmp4;
HXDLIN( 119)		if (( (bool)(playerXML->elementsNamed(HX_("Mana",a7,68,2f,33))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 119)			 ::Xml _this9 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Mana",a7,68,2f,33))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 119)			bool _hx_tmp5;
HXDLIN( 119)			if ((_this9->nodeType != ::Xml_obj::Document)) {
HXLINE( 119)				_hx_tmp5 = (_this9->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 119)				_hx_tmp5 = false;
            			}
HXDLIN( 119)			if (_hx_tmp5) {
HXLINE( 119)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this9->nodeType)));
            			}
HXDLIN( 119)			 ::Xml _this10 = _this9->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 119)			bool _hx_tmp6;
HXDLIN( 119)			if ((_this10->nodeType != ::Xml_obj::Document)) {
HXLINE( 119)				_hx_tmp6 = (_this10->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 119)				_hx_tmp6 = true;
            			}
HXDLIN( 119)			if (_hx_tmp6) {
HXLINE( 119)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this10->nodeType)));
            			}
HXDLIN( 119)			_hx_tmp4 = ( (int)(::Std_obj::parseInt(_this10->nodeValue)) );
            		}
            		else {
HXLINE( 119)			_hx_tmp4 = 0;
            		}
HXDLIN( 119)		player4->maxMP = (player4->mp = _hx_tmp4);
HXLINE( 120)		int _hx_tmp7;
HXDLIN( 120)		if (( (bool)(playerXML->elementsNamed(HX_("Strength",a1,8e,40,68))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 120)			 ::Xml _this11 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Strength",a1,8e,40,68))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 120)			bool _hx_tmp8;
HXDLIN( 120)			if ((_this11->nodeType != ::Xml_obj::Document)) {
HXLINE( 120)				_hx_tmp8 = (_this11->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 120)				_hx_tmp8 = false;
            			}
HXDLIN( 120)			if (_hx_tmp8) {
HXLINE( 120)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this11->nodeType)));
            			}
HXDLIN( 120)			 ::Xml _this12 = _this11->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 120)			bool _hx_tmp9;
HXDLIN( 120)			if ((_this12->nodeType != ::Xml_obj::Document)) {
HXLINE( 120)				_hx_tmp9 = (_this12->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 120)				_hx_tmp9 = true;
            			}
HXDLIN( 120)			if (_hx_tmp9) {
HXLINE( 120)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this12->nodeType)));
            			}
HXDLIN( 120)			_hx_tmp7 = ( (int)(::Std_obj::parseInt(_this12->nodeValue)) );
            		}
            		else {
HXLINE( 120)			_hx_tmp7 = 0;
            		}
HXDLIN( 120)		player4->strength = _hx_tmp7;
HXLINE( 121)		int _hx_tmp10;
HXDLIN( 121)		if (( (bool)(playerXML->elementsNamed(HX_("Wit",02,60,42,00))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 121)			 ::Xml _this13 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Wit",02,60,42,00))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 121)			bool _hx_tmp11;
HXDLIN( 121)			if ((_this13->nodeType != ::Xml_obj::Document)) {
HXLINE( 121)				_hx_tmp11 = (_this13->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 121)				_hx_tmp11 = false;
            			}
HXDLIN( 121)			if (_hx_tmp11) {
HXLINE( 121)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this13->nodeType)));
            			}
HXDLIN( 121)			 ::Xml _this14 = _this13->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 121)			bool _hx_tmp12;
HXDLIN( 121)			if ((_this14->nodeType != ::Xml_obj::Document)) {
HXLINE( 121)				_hx_tmp12 = (_this14->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 121)				_hx_tmp12 = true;
            			}
HXDLIN( 121)			if (_hx_tmp12) {
HXLINE( 121)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this14->nodeType)));
            			}
HXDLIN( 121)			_hx_tmp10 = ( (int)(::Std_obj::parseInt(_this14->nodeValue)) );
            		}
            		else {
HXLINE( 121)			_hx_tmp10 = 0;
            		}
HXDLIN( 121)		player4->wit = _hx_tmp10;
HXLINE( 122)		int _hx_tmp13;
HXDLIN( 122)		if (( (bool)(playerXML->elementsNamed(HX_("Defense",60,91,b4,6b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 122)			 ::Xml _this15 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Defense",60,91,b4,6b))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 122)			bool _hx_tmp14;
HXDLIN( 122)			if ((_this15->nodeType != ::Xml_obj::Document)) {
HXLINE( 122)				_hx_tmp14 = (_this15->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 122)				_hx_tmp14 = false;
            			}
HXDLIN( 122)			if (_hx_tmp14) {
HXLINE( 122)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this15->nodeType)));
            			}
HXDLIN( 122)			 ::Xml _this16 = _this15->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 122)			bool _hx_tmp15;
HXDLIN( 122)			if ((_this16->nodeType != ::Xml_obj::Document)) {
HXLINE( 122)				_hx_tmp15 = (_this16->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 122)				_hx_tmp15 = true;
            			}
HXDLIN( 122)			if (_hx_tmp15) {
HXLINE( 122)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this16->nodeType)));
            			}
HXDLIN( 122)			_hx_tmp13 = ( (int)(::Std_obj::parseInt(_this16->nodeValue)) );
            		}
            		else {
HXLINE( 122)			_hx_tmp13 = 0;
            		}
HXDLIN( 122)		player4->defense = _hx_tmp13;
HXLINE( 123)		int _hx_tmp16;
HXDLIN( 123)		if (( (bool)(playerXML->elementsNamed(HX_("Resistance",d9,15,07,97))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 123)			 ::Xml _this17 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Resistance",d9,15,07,97))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 123)			bool _hx_tmp17;
HXDLIN( 123)			if ((_this17->nodeType != ::Xml_obj::Document)) {
HXLINE( 123)				_hx_tmp17 = (_this17->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 123)				_hx_tmp17 = false;
            			}
HXDLIN( 123)			if (_hx_tmp17) {
HXLINE( 123)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this17->nodeType)));
            			}
HXDLIN( 123)			 ::Xml _this18 = _this17->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 123)			bool _hx_tmp18;
HXDLIN( 123)			if ((_this18->nodeType != ::Xml_obj::Document)) {
HXLINE( 123)				_hx_tmp18 = (_this18->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 123)				_hx_tmp18 = true;
            			}
HXDLIN( 123)			if (_hx_tmp18) {
HXLINE( 123)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this18->nodeType)));
            			}
HXDLIN( 123)			_hx_tmp16 = ( (int)(::Std_obj::parseInt(_this18->nodeValue)) );
            		}
            		else {
HXLINE( 123)			_hx_tmp16 = 0;
            		}
HXDLIN( 123)		player4->resistance = _hx_tmp16;
HXLINE( 124)		int _hx_tmp19;
HXDLIN( 124)		if (( (bool)(playerXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 124)			 ::Xml _this19 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 124)			bool _hx_tmp20;
HXDLIN( 124)			if ((_this19->nodeType != ::Xml_obj::Document)) {
HXLINE( 124)				_hx_tmp20 = (_this19->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 124)				_hx_tmp20 = false;
            			}
HXDLIN( 124)			if (_hx_tmp20) {
HXLINE( 124)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this19->nodeType)));
            			}
HXDLIN( 124)			 ::Xml _this20 = _this19->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 124)			bool _hx_tmp21;
HXDLIN( 124)			if ((_this20->nodeType != ::Xml_obj::Document)) {
HXLINE( 124)				_hx_tmp21 = (_this20->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 124)				_hx_tmp21 = true;
            			}
HXDLIN( 124)			if (_hx_tmp21) {
HXLINE( 124)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this20->nodeType)));
            			}
HXDLIN( 124)			_hx_tmp19 = ( (int)(::Std_obj::parseInt(_this20->nodeValue)) );
            		}
            		else {
HXLINE( 124)			_hx_tmp19 = 0;
            		}
HXDLIN( 124)		player4->speed = _hx_tmp19;
HXLINE( 125)		int _hx_tmp22;
HXDLIN( 125)		if (( (bool)(playerXML->elementsNamed(HX_("Haste",2b,1f,4f,b5))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 125)			 ::Xml _this21 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Haste",2b,1f,4f,b5))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 125)			bool _hx_tmp23;
HXDLIN( 125)			if ((_this21->nodeType != ::Xml_obj::Document)) {
HXLINE( 125)				_hx_tmp23 = (_this21->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 125)				_hx_tmp23 = false;
            			}
HXDLIN( 125)			if (_hx_tmp23) {
HXLINE( 125)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this21->nodeType)));
            			}
HXDLIN( 125)			 ::Xml _this22 = _this21->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 125)			bool _hx_tmp24;
HXDLIN( 125)			if ((_this22->nodeType != ::Xml_obj::Document)) {
HXLINE( 125)				_hx_tmp24 = (_this22->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 125)				_hx_tmp24 = true;
            			}
HXDLIN( 125)			if (_hx_tmp24) {
HXLINE( 125)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this22->nodeType)));
            			}
HXDLIN( 125)			_hx_tmp22 = ( (int)(::Std_obj::parseInt(_this22->nodeValue)) );
            		}
            		else {
HXLINE( 125)			_hx_tmp22 = 0;
            		}
HXDLIN( 125)		player4->haste = _hx_tmp22;
HXLINE( 126)		int _hx_tmp25;
HXDLIN( 126)		if (( (bool)(playerXML->elementsNamed(HX_("Stamina",0f,ef,15,ff))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 126)			 ::Xml _this23 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Stamina",0f,ef,15,ff))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 126)			bool _hx_tmp26;
HXDLIN( 126)			if ((_this23->nodeType != ::Xml_obj::Document)) {
HXLINE( 126)				_hx_tmp26 = (_this23->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 126)				_hx_tmp26 = false;
            			}
HXDLIN( 126)			if (_hx_tmp26) {
HXLINE( 126)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this23->nodeType)));
            			}
HXDLIN( 126)			 ::Xml _this24 = _this23->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 126)			bool _hx_tmp27;
HXDLIN( 126)			if ((_this24->nodeType != ::Xml_obj::Document)) {
HXLINE( 126)				_hx_tmp27 = (_this24->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 126)				_hx_tmp27 = true;
            			}
HXDLIN( 126)			if (_hx_tmp27) {
HXLINE( 126)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this24->nodeType)));
            			}
HXDLIN( 126)			_hx_tmp25 = ( (int)(::Std_obj::parseInt(_this24->nodeValue)) );
            		}
            		else {
HXLINE( 126)			_hx_tmp25 = 0;
            		}
HXDLIN( 126)		player4->stamina = _hx_tmp25;
HXLINE( 127)		int _hx_tmp28;
HXDLIN( 127)		if (( (bool)(playerXML->elementsNamed(HX_("Intelligence",5f,53,50,b3))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 127)			 ::Xml _this25 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Intelligence",5f,53,50,b3))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 127)			bool _hx_tmp29;
HXDLIN( 127)			if ((_this25->nodeType != ::Xml_obj::Document)) {
HXLINE( 127)				_hx_tmp29 = (_this25->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 127)				_hx_tmp29 = false;
            			}
HXDLIN( 127)			if (_hx_tmp29) {
HXLINE( 127)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this25->nodeType)));
            			}
HXDLIN( 127)			 ::Xml _this26 = _this25->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 127)			bool _hx_tmp30;
HXDLIN( 127)			if ((_this26->nodeType != ::Xml_obj::Document)) {
HXLINE( 127)				_hx_tmp30 = (_this26->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 127)				_hx_tmp30 = true;
            			}
HXDLIN( 127)			if (_hx_tmp30) {
HXLINE( 127)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this26->nodeType)));
            			}
HXDLIN( 127)			_hx_tmp28 = ( (int)(::Std_obj::parseInt(_this26->nodeValue)) );
            		}
            		else {
HXLINE( 127)			_hx_tmp28 = 0;
            		}
HXDLIN( 127)		player4->intelligence = _hx_tmp28;
HXLINE( 128)		int _hx_tmp31;
HXDLIN( 128)		if (( (bool)(playerXML->elementsNamed(HX_("Piercing",25,1e,8b,35))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 128)			 ::Xml _this27 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Piercing",25,1e,8b,35))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 128)			bool _hx_tmp32;
HXDLIN( 128)			if ((_this27->nodeType != ::Xml_obj::Document)) {
HXLINE( 128)				_hx_tmp32 = (_this27->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 128)				_hx_tmp32 = false;
            			}
HXDLIN( 128)			if (_hx_tmp32) {
HXLINE( 128)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this27->nodeType)));
            			}
HXDLIN( 128)			 ::Xml _this28 = _this27->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 128)			bool _hx_tmp33;
HXDLIN( 128)			if ((_this28->nodeType != ::Xml_obj::Document)) {
HXLINE( 128)				_hx_tmp33 = (_this28->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 128)				_hx_tmp33 = true;
            			}
HXDLIN( 128)			if (_hx_tmp33) {
HXLINE( 128)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this28->nodeType)));
            			}
HXDLIN( 128)			_hx_tmp31 = ( (int)(::Std_obj::parseInt(_this28->nodeValue)) );
            		}
            		else {
HXLINE( 128)			_hx_tmp31 = 0;
            		}
HXDLIN( 128)		player4->piercing = _hx_tmp31;
HXLINE( 129)		int _hx_tmp34;
HXDLIN( 129)		if (( (bool)(playerXML->elementsNamed(HX_("Penetration",6b,f8,c8,ea))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 129)			 ::Xml _this29 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Penetration",6b,f8,c8,ea))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 129)			bool _hx_tmp35;
HXDLIN( 129)			if ((_this29->nodeType != ::Xml_obj::Document)) {
HXLINE( 129)				_hx_tmp35 = (_this29->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 129)				_hx_tmp35 = false;
            			}
HXDLIN( 129)			if (_hx_tmp35) {
HXLINE( 129)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this29->nodeType)));
            			}
HXDLIN( 129)			 ::Xml _this30 = _this29->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 129)			bool _hx_tmp36;
HXDLIN( 129)			if ((_this30->nodeType != ::Xml_obj::Document)) {
HXLINE( 129)				_hx_tmp36 = (_this30->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 129)				_hx_tmp36 = true;
            			}
HXDLIN( 129)			if (_hx_tmp36) {
HXLINE( 129)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this30->nodeType)));
            			}
HXDLIN( 129)			_hx_tmp34 = ( (int)(::Std_obj::parseInt(_this30->nodeValue)) );
            		}
            		else {
HXLINE( 129)			_hx_tmp34 = 0;
            		}
HXDLIN( 129)		player4->penetration = _hx_tmp34;
HXLINE( 130)		int _hx_tmp37;
HXDLIN( 130)		if (( (bool)(playerXML->elementsNamed(HX_("Tenacity",af,73,65,43))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 130)			 ::Xml _this31 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Tenacity",af,73,65,43))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 130)			bool _hx_tmp38;
HXDLIN( 130)			if ((_this31->nodeType != ::Xml_obj::Document)) {
HXLINE( 130)				_hx_tmp38 = (_this31->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 130)				_hx_tmp38 = false;
            			}
HXDLIN( 130)			if (_hx_tmp38) {
HXLINE( 130)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this31->nodeType)));
            			}
HXDLIN( 130)			 ::Xml _this32 = _this31->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 130)			bool _hx_tmp39;
HXDLIN( 130)			if ((_this32->nodeType != ::Xml_obj::Document)) {
HXLINE( 130)				_hx_tmp39 = (_this32->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 130)				_hx_tmp39 = true;
            			}
HXDLIN( 130)			if (_hx_tmp39) {
HXLINE( 130)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this32->nodeType)));
            			}
HXDLIN( 130)			_hx_tmp37 = ( (int)(::Std_obj::parseInt(_this32->nodeValue)) );
            		}
            		else {
HXLINE( 130)			_hx_tmp37 = 0;
            		}
HXDLIN( 130)		player4->tenacity = _hx_tmp37;
HXLINE( 131)		int _hx_tmp40;
HXDLIN( 131)		if (( (bool)(playerXML->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE( 131)			 ::Xml _this33 = ( ( ::Xml)(playerXML->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 131)			bool _hx_tmp41;
HXDLIN( 131)			if ((_this33->nodeType != ::Xml_obj::Document)) {
HXLINE( 131)				_hx_tmp41 = (_this33->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 131)				_hx_tmp41 = false;
            			}
HXDLIN( 131)			if (_hx_tmp41) {
HXLINE( 131)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this33->nodeType)));
            			}
HXDLIN( 131)			 ::Xml _this34 = _this33->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 131)			bool _hx_tmp42;
HXDLIN( 131)			if ((_this34->nodeType != ::Xml_obj::Document)) {
HXLINE( 131)				_hx_tmp42 = (_this34->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 131)				_hx_tmp42 = true;
            			}
HXDLIN( 131)			if (_hx_tmp42) {
HXLINE( 131)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this34->nodeType)));
            			}
HXDLIN( 131)			_hx_tmp40 = ( (int)(::Std_obj::parseInt(_this34->nodeValue)) );
            		}
            		else {
HXLINE( 131)			_hx_tmp40 = 0;
            		}
HXDLIN( 131)		player4->tier = _hx_tmp40;
HXLINE( 132)		return player4;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Player_obj,fromPlayerXML,return )


::hx::ObjectPtr< Player_obj > Player_obj::__new( ::Xml objectXML) {
	::hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(objectXML);
	return __this;
}

::hx::ObjectPtr< Player_obj > Player_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml objectXML) {
	Player_obj *__this = (Player_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "objects.Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(objectXML);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(skinId,"skinId");
	HX_MARK_MEMBER_NAME(skin,"skin");
	HX_MARK_MEMBER_NAME(accountId,"accountId");
	HX_MARK_MEMBER_NAME(gems,"gems");
	HX_MARK_MEMBER_NAME(gold,"gold");
	HX_MARK_MEMBER_NAME(crowns,"crowns");
	HX_MARK_MEMBER_NAME(guildName,"guildName");
	HX_MARK_MEMBER_NAME(guildRank,"guildRank");
	HX_MARK_MEMBER_NAME(isFellowGuild,"isFellowGuild");
	HX_MARK_MEMBER_NAME(mp,"mp");
	HX_MARK_MEMBER_NAME(maxHPBoost,"maxHPBoost");
	HX_MARK_MEMBER_NAME(maxHPMax,"maxHPMax");
	HX_MARK_MEMBER_NAME(maxMP,"maxMP");
	HX_MARK_MEMBER_NAME(maxMPBoost,"maxMPBoost");
	HX_MARK_MEMBER_NAME(maxMPMax,"maxMPMax");
	HX_MARK_MEMBER_NAME(defenseBoost,"defenseBoost");
	HX_MARK_MEMBER_NAME(defenseMax,"defenseMax");
	HX_MARK_MEMBER_NAME(resistanceBoost,"resistanceBoost");
	HX_MARK_MEMBER_NAME(resistanceMax,"resistanceMax");
	HX_MARK_MEMBER_NAME(strength,"strength");
	HX_MARK_MEMBER_NAME(strengthBoost,"strengthBoost");
	HX_MARK_MEMBER_NAME(strengthMax,"strengthMax");
	HX_MARK_MEMBER_NAME(wit,"wit");
	HX_MARK_MEMBER_NAME(witBoost,"witBoost");
	HX_MARK_MEMBER_NAME(witMax,"witMax");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(speedBoost,"speedBoost");
	HX_MARK_MEMBER_NAME(speedMax,"speedMax");
	HX_MARK_MEMBER_NAME(haste,"haste");
	HX_MARK_MEMBER_NAME(hasteBoost,"hasteBoost");
	HX_MARK_MEMBER_NAME(hasteMax,"hasteMax");
	HX_MARK_MEMBER_NAME(stamina,"stamina");
	HX_MARK_MEMBER_NAME(staminaBoost,"staminaBoost");
	HX_MARK_MEMBER_NAME(staminaMax,"staminaMax");
	HX_MARK_MEMBER_NAME(intelligence,"intelligence");
	HX_MARK_MEMBER_NAME(intelligenceBoost,"intelligenceBoost");
	HX_MARK_MEMBER_NAME(intelligenceMax,"intelligenceMax");
	HX_MARK_MEMBER_NAME(piercing,"piercing");
	HX_MARK_MEMBER_NAME(piercingBoost,"piercingBoost");
	HX_MARK_MEMBER_NAME(piercingMax,"piercingMax");
	HX_MARK_MEMBER_NAME(penetration,"penetration");
	HX_MARK_MEMBER_NAME(penetrationBoost,"penetrationBoost");
	HX_MARK_MEMBER_NAME(penetrationMax,"penetrationMax");
	HX_MARK_MEMBER_NAME(tenacity,"tenacity");
	HX_MARK_MEMBER_NAME(tenacityBoost,"tenacityBoost");
	HX_MARK_MEMBER_NAME(tenacityMax,"tenacityMax");
	HX_MARK_MEMBER_NAME(healthVialCount,"healthVialCount");
	HX_MARK_MEMBER_NAME(magicVialCount,"magicVialCount");
	HX_MARK_MEMBER_NAME(damageMult,"damageMult");
	HX_MARK_MEMBER_NAME(hitMult,"hitMult");
	HX_MARK_MEMBER_NAME(tier,"tier");
	HX_MARK_MEMBER_NAME(hasBackpack,"hasBackpack");
	HX_MARK_MEMBER_NAME(attackPeriod,"attackPeriod");
	HX_MARK_MEMBER_NAME(nextAltAttack,"nextAltAttack");
	HX_MARK_MEMBER_NAME(nextTeleportAt,"nextTeleportAt");
	HX_MARK_MEMBER_NAME(isDefaultAnimatedChar,"isDefaultAnimatedChar");
	HX_MARK_MEMBER_NAME(moveMultiplier,"moveMultiplier");
	HX_MARK_MEMBER_NAME(hurtSound,"hurtSound");
	HX_MARK_MEMBER_NAME(deathSound,"deathSound");
	HX_MARK_MEMBER_NAME(rotate,"rotate");
	HX_MARK_MEMBER_NAME(relMoveVec,"relMoveVec");
	HX_MARK_MEMBER_NAME(lastAttackError,"lastAttackError");
	HX_MARK_MEMBER_NAME(objectXML,"objectXML");
	 ::objects::GameObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(skinId,"skinId");
	HX_VISIT_MEMBER_NAME(skin,"skin");
	HX_VISIT_MEMBER_NAME(accountId,"accountId");
	HX_VISIT_MEMBER_NAME(gems,"gems");
	HX_VISIT_MEMBER_NAME(gold,"gold");
	HX_VISIT_MEMBER_NAME(crowns,"crowns");
	HX_VISIT_MEMBER_NAME(guildName,"guildName");
	HX_VISIT_MEMBER_NAME(guildRank,"guildRank");
	HX_VISIT_MEMBER_NAME(isFellowGuild,"isFellowGuild");
	HX_VISIT_MEMBER_NAME(mp,"mp");
	HX_VISIT_MEMBER_NAME(maxHPBoost,"maxHPBoost");
	HX_VISIT_MEMBER_NAME(maxHPMax,"maxHPMax");
	HX_VISIT_MEMBER_NAME(maxMP,"maxMP");
	HX_VISIT_MEMBER_NAME(maxMPBoost,"maxMPBoost");
	HX_VISIT_MEMBER_NAME(maxMPMax,"maxMPMax");
	HX_VISIT_MEMBER_NAME(defenseBoost,"defenseBoost");
	HX_VISIT_MEMBER_NAME(defenseMax,"defenseMax");
	HX_VISIT_MEMBER_NAME(resistanceBoost,"resistanceBoost");
	HX_VISIT_MEMBER_NAME(resistanceMax,"resistanceMax");
	HX_VISIT_MEMBER_NAME(strength,"strength");
	HX_VISIT_MEMBER_NAME(strengthBoost,"strengthBoost");
	HX_VISIT_MEMBER_NAME(strengthMax,"strengthMax");
	HX_VISIT_MEMBER_NAME(wit,"wit");
	HX_VISIT_MEMBER_NAME(witBoost,"witBoost");
	HX_VISIT_MEMBER_NAME(witMax,"witMax");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(speedBoost,"speedBoost");
	HX_VISIT_MEMBER_NAME(speedMax,"speedMax");
	HX_VISIT_MEMBER_NAME(haste,"haste");
	HX_VISIT_MEMBER_NAME(hasteBoost,"hasteBoost");
	HX_VISIT_MEMBER_NAME(hasteMax,"hasteMax");
	HX_VISIT_MEMBER_NAME(stamina,"stamina");
	HX_VISIT_MEMBER_NAME(staminaBoost,"staminaBoost");
	HX_VISIT_MEMBER_NAME(staminaMax,"staminaMax");
	HX_VISIT_MEMBER_NAME(intelligence,"intelligence");
	HX_VISIT_MEMBER_NAME(intelligenceBoost,"intelligenceBoost");
	HX_VISIT_MEMBER_NAME(intelligenceMax,"intelligenceMax");
	HX_VISIT_MEMBER_NAME(piercing,"piercing");
	HX_VISIT_MEMBER_NAME(piercingBoost,"piercingBoost");
	HX_VISIT_MEMBER_NAME(piercingMax,"piercingMax");
	HX_VISIT_MEMBER_NAME(penetration,"penetration");
	HX_VISIT_MEMBER_NAME(penetrationBoost,"penetrationBoost");
	HX_VISIT_MEMBER_NAME(penetrationMax,"penetrationMax");
	HX_VISIT_MEMBER_NAME(tenacity,"tenacity");
	HX_VISIT_MEMBER_NAME(tenacityBoost,"tenacityBoost");
	HX_VISIT_MEMBER_NAME(tenacityMax,"tenacityMax");
	HX_VISIT_MEMBER_NAME(healthVialCount,"healthVialCount");
	HX_VISIT_MEMBER_NAME(magicVialCount,"magicVialCount");
	HX_VISIT_MEMBER_NAME(damageMult,"damageMult");
	HX_VISIT_MEMBER_NAME(hitMult,"hitMult");
	HX_VISIT_MEMBER_NAME(tier,"tier");
	HX_VISIT_MEMBER_NAME(hasBackpack,"hasBackpack");
	HX_VISIT_MEMBER_NAME(attackPeriod,"attackPeriod");
	HX_VISIT_MEMBER_NAME(nextAltAttack,"nextAltAttack");
	HX_VISIT_MEMBER_NAME(nextTeleportAt,"nextTeleportAt");
	HX_VISIT_MEMBER_NAME(isDefaultAnimatedChar,"isDefaultAnimatedChar");
	HX_VISIT_MEMBER_NAME(moveMultiplier,"moveMultiplier");
	HX_VISIT_MEMBER_NAME(hurtSound,"hurtSound");
	HX_VISIT_MEMBER_NAME(deathSound,"deathSound");
	HX_VISIT_MEMBER_NAME(rotate,"rotate");
	HX_VISIT_MEMBER_NAME(relMoveVec,"relMoveVec");
	HX_VISIT_MEMBER_NAME(lastAttackError,"lastAttackError");
	HX_VISIT_MEMBER_NAME(objectXML,"objectXML");
	 ::objects::GameObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Player_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mp") ) { return ::hx::Val( mp ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"wit") ) { return ::hx::Val( wit ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"skin") ) { return ::hx::Val( skin ); }
		if (HX_FIELD_EQ(inName,"gems") ) { return ::hx::Val( gems ); }
		if (HX_FIELD_EQ(inName,"gold") ) { return ::hx::Val( gold ); }
		if (HX_FIELD_EQ(inName,"tier") ) { return ::hx::Val( tier ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maxMP") ) { return ::hx::Val( maxMP ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"haste") ) { return ::hx::Val( haste ); }
		if (HX_FIELD_EQ(inName,"shoot") ) { return ::hx::Val( shoot_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"skinId") ) { return ::hx::Val( skinId ); }
		if (HX_FIELD_EQ(inName,"crowns") ) { return ::hx::Val( crowns ); }
		if (HX_FIELD_EQ(inName,"witMax") ) { return ::hx::Val( witMax ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return ::hx::Val( rotate ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"damage") ) { return ::hx::Val( damage_dyn() ); }
		if (HX_FIELD_EQ(inName,"walkTo") ) { return ::hx::Val( walkTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stamina") ) { return ::hx::Val( stamina ); }
		if (HX_FIELD_EQ(inName,"hitMult") ) { return ::hx::Val( hitMult ); }
		if (HX_FIELD_EQ(inName,"strMult") ) { return ::hx::Val( strMult_dyn() ); }
		if (HX_FIELD_EQ(inName,"witMult") ) { return ::hx::Val( witMult_dyn() ); }
		if (HX_FIELD_EQ(inName,"doShoot") ) { return ::hx::Val( doShoot_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxHPMax") ) { return ::hx::Val( maxHPMax ); }
		if (HX_FIELD_EQ(inName,"maxMPMax") ) { return ::hx::Val( maxMPMax ); }
		if (HX_FIELD_EQ(inName,"strength") ) { return ::hx::Val( strength ); }
		if (HX_FIELD_EQ(inName,"witBoost") ) { return ::hx::Val( witBoost ); }
		if (HX_FIELD_EQ(inName,"speedMax") ) { return ::hx::Val( speedMax ); }
		if (HX_FIELD_EQ(inName,"hasteMax") ) { return ::hx::Val( hasteMax ); }
		if (HX_FIELD_EQ(inName,"piercing") ) { return ::hx::Val( piercing ); }
		if (HX_FIELD_EQ(inName,"tenacity") ) { return ::hx::Val( tenacity ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"accountId") ) { return ::hx::Val( accountId ); }
		if (HX_FIELD_EQ(inName,"guildName") ) { return ::hx::Val( guildName ); }
		if (HX_FIELD_EQ(inName,"guildRank") ) { return ::hx::Val( guildRank ); }
		if (HX_FIELD_EQ(inName,"hurtSound") ) { return ::hx::Val( hurtSound ); }
		if (HX_FIELD_EQ(inName,"objectXML") ) { return ::hx::Val( objectXML ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxHPBoost") ) { return ::hx::Val( maxHPBoost ); }
		if (HX_FIELD_EQ(inName,"maxMPBoost") ) { return ::hx::Val( maxMPBoost ); }
		if (HX_FIELD_EQ(inName,"defenseMax") ) { return ::hx::Val( defenseMax ); }
		if (HX_FIELD_EQ(inName,"speedBoost") ) { return ::hx::Val( speedBoost ); }
		if (HX_FIELD_EQ(inName,"hasteBoost") ) { return ::hx::Val( hasteBoost ); }
		if (HX_FIELD_EQ(inName,"staminaMax") ) { return ::hx::Val( staminaMax ); }
		if (HX_FIELD_EQ(inName,"damageMult") ) { return ::hx::Val( damageMult ); }
		if (HX_FIELD_EQ(inName,"deathSound") ) { return ::hx::Val( deathSound ); }
		if (HX_FIELD_EQ(inName,"relMoveVec") ) { return ::hx::Val( relMoveVec ); }
		if (HX_FIELD_EQ(inName,"teleportTo") ) { return ::hx::Val( teleportTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"modifyMove") ) { return ::hx::Val( modifyMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"modifyStep") ) { return ::hx::Val( modifyStep_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"strengthMax") ) { return ::hx::Val( strengthMax ); }
		if (HX_FIELD_EQ(inName,"piercingMax") ) { return ::hx::Val( piercingMax ); }
		if (HX_FIELD_EQ(inName,"penetration") ) { return ::hx::Val( penetration ); }
		if (HX_FIELD_EQ(inName,"tenacityMax") ) { return ::hx::Val( tenacityMax ); }
		if (HX_FIELD_EQ(inName,"hasBackpack") ) { return ::hx::Val( hasBackpack ); }
		if (HX_FIELD_EQ(inName,"getPortrait") ) { return ::hx::Val( getPortrait_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defenseBoost") ) { return ::hx::Val( defenseBoost ); }
		if (HX_FIELD_EQ(inName,"staminaBoost") ) { return ::hx::Val( staminaBoost ); }
		if (HX_FIELD_EQ(inName,"intelligence") ) { return ::hx::Val( intelligence ); }
		if (HX_FIELD_EQ(inName,"attackPeriod") ) { return ::hx::Val( attackPeriod ); }
		if (HX_FIELD_EQ(inName,"setGuildName") ) { return ::hx::Val( setGuildName_dyn() ); }
		if (HX_FIELD_EQ(inName,"isFullOccupy") ) { return ::hx::Val( isFullOccupy_dyn() ); }
		if (HX_FIELD_EQ(inName,"useAltWeapon") ) { return ::hx::Val( useAltWeapon_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVialCount") ) { return ::hx::Val( getVialCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMoveSpeed") ) { return ::hx::Val( getMoveSpeed_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isFellowGuild") ) { return ::hx::Val( isFellowGuild ); }
		if (HX_FIELD_EQ(inName,"resistanceMax") ) { return ::hx::Val( resistanceMax ); }
		if (HX_FIELD_EQ(inName,"strengthBoost") ) { return ::hx::Val( strengthBoost ); }
		if (HX_FIELD_EQ(inName,"piercingBoost") ) { return ::hx::Val( piercingBoost ); }
		if (HX_FIELD_EQ(inName,"tenacityBoost") ) { return ::hx::Val( tenacityBoost ); }
		if (HX_FIELD_EQ(inName,"nextAltAttack") ) { return ::hx::Val( nextAltAttack ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"penetrationMax") ) { return ::hx::Val( penetrationMax ); }
		if (HX_FIELD_EQ(inName,"magicVialCount") ) { return ::hx::Val( magicVialCount ); }
		if (HX_FIELD_EQ(inName,"nextTeleportAt") ) { return ::hx::Val( nextTeleportAt ); }
		if (HX_FIELD_EQ(inName,"moveMultiplier") ) { return ::hx::Val( moveMultiplier ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resistanceBoost") ) { return ::hx::Val( resistanceBoost ); }
		if (HX_FIELD_EQ(inName,"intelligenceMax") ) { return ::hx::Val( intelligenceMax ); }
		if (HX_FIELD_EQ(inName,"healthVialCount") ) { return ::hx::Val( healthVialCount ); }
		if (HX_FIELD_EQ(inName,"lastAttackError") ) { return ::hx::Val( lastAttackError ); }
		if (HX_FIELD_EQ(inName,"updateMaxValues") ) { return ::hx::Val( updateMaxValues_dyn() ); }
		if (HX_FIELD_EQ(inName,"msUntilTeleport") ) { return ::hx::Val( msUntilTeleport_dyn() ); }
		if (HX_FIELD_EQ(inName,"isValidPosition") ) { return ::hx::Val( isValidPosition_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"penetrationBoost") ) { return ::hx::Val( penetrationBoost ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"intelligenceBoost") ) { return ::hx::Val( intelligenceBoost ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"attemptAttackAngle") ) { return ::hx::Val( attemptAttackAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapInventoryIndex") ) { return ::hx::Val( swapInventoryIndex_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setRelativeMovement") ) { return ::hx::Val( setRelativeMovement_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"isDefaultAnimatedChar") ) { return ::hx::Val( isDefaultAnimatedChar ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nextAvailableInventorySlot") ) { return ::hx::Val( nextAvailableInventorySlot_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Player_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"newP") ) { outValue = ( newP ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromPlayerXML") ) { outValue = fromPlayerXML_dyn(); return true; }
	}
	return false;
}

::hx::Val Player_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mp") ) { mp=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"wit") ) { wit=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"skin") ) { skin=inValue.Cast<  ::util::AnimatedChar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gems") ) { gems=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gold") ) { gold=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tier") ) { tier=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maxMP") ) { maxMP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"haste") ) { haste=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"skinId") ) { skinId=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"crowns") ) { crowns=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"witMax") ) { witMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotate") ) { rotate=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stamina") ) { stamina=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hitMult") ) { hitMult=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxHPMax") ) { maxHPMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxMPMax") ) { maxMPMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strength") ) { strength=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"witBoost") ) { witBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedMax") ) { speedMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasteMax") ) { hasteMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"piercing") ) { piercing=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tenacity") ) { tenacity=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"accountId") ) { accountId=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"guildName") ) { guildName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"guildRank") ) { guildRank=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hurtSound") ) { hurtSound=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"objectXML") ) { objectXML=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxHPBoost") ) { maxHPBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxMPBoost") ) { maxMPBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defenseMax") ) { defenseMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedBoost") ) { speedBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasteBoost") ) { hasteBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staminaMax") ) { staminaMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"damageMult") ) { damageMult=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deathSound") ) { deathSound=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"relMoveVec") ) { relMoveVec=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"strengthMax") ) { strengthMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"piercingMax") ) { piercingMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"penetration") ) { penetration=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tenacityMax") ) { tenacityMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasBackpack") ) { hasBackpack=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defenseBoost") ) { defenseBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staminaBoost") ) { staminaBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intelligence") ) { intelligence=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"attackPeriod") ) { attackPeriod=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isFellowGuild") ) { isFellowGuild=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resistanceMax") ) { resistanceMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strengthBoost") ) { strengthBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"piercingBoost") ) { piercingBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tenacityBoost") ) { tenacityBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextAltAttack") ) { nextAltAttack=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"penetrationMax") ) { penetrationMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"magicVialCount") ) { magicVialCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextTeleportAt") ) { nextTeleportAt=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveMultiplier") ) { moveMultiplier=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resistanceBoost") ) { resistanceBoost=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intelligenceMax") ) { intelligenceMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthVialCount") ) { healthVialCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastAttackError") ) { lastAttackError=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"penetrationBoost") ) { penetrationBoost=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"intelligenceBoost") ) { intelligenceBoost=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"isDefaultAnimatedChar") ) { isDefaultAnimatedChar=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Player_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"newP") ) { newP=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
	}
	return false;
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("skinId",b8,af,a5,dc));
	outFields->push(HX_("skin",7d,16,55,4c));
	outFields->push(HX_("accountId",e8,81,54,29));
	outFields->push(HX_("gems",04,fd,61,44));
	outFields->push(HX_("gold",a0,92,69,44));
	outFields->push(HX_("crowns",9c,35,bc,82));
	outFields->push(HX_("guildName",9e,b5,f2,07));
	outFields->push(HX_("guildRank",ff,90,97,0a));
	outFields->push(HX_("isFellowGuild",02,68,a4,29));
	outFields->push(HX_("mp",63,5f,00,00));
	outFields->push(HX_("maxHPBoost",d7,2c,8f,95));
	outFields->push(HX_("maxHPMax",58,7b,e5,c0));
	outFields->push(HX_("maxMP",07,3f,26,03));
	outFields->push(HX_("maxMPBoost",9c,7e,7a,65));
	outFields->push(HX_("maxMPMax",dd,61,e6,a1));
	outFields->push(HX_("defenseBoost",83,bd,73,4b));
	outFields->push(HX_("defenseMax",04,49,ba,fd));
	outFields->push(HX_("resistanceBoost",aa,a6,37,bb));
	outFields->push(HX_("resistanceMax",6b,ca,8d,70));
	outFields->push(HX_("strength",81,d2,8e,8e));
	outFields->push(HX_("strengthBoost",e2,10,a7,be));
	outFields->push(HX_("strengthMax",a3,b6,7f,a2));
	outFields->push(HX_("wit",22,a8,5a,00));
	outFields->push(HX_("witBoost",a1,33,4c,50));
	outFields->push(HX_("witMax",a2,5b,72,56));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("speedBoost",1c,56,c6,e9));
	outFields->push(HX_("speedMax",5d,59,e5,ae));
	outFields->push(HX_("haste",4b,af,21,22));
	outFields->push(HX_("hasteBoost",d8,97,4d,41));
	outFields->push(HX_("hasteMax",19,74,a3,06));
	outFields->push(HX_("stamina",2f,c7,c4,31));
	outFields->push(HX_("staminaBoost",74,65,75,01));
	outFields->push(HX_("staminaMax",b5,62,7d,e9));
	outFields->push(HX_("intelligence",3f,07,3e,eb));
	outFields->push(HX_("intelligenceBoost",64,eb,29,8e));
	outFields->push(HX_("intelligenceMax",a5,8c,df,f9));
	outFields->push(HX_("piercing",05,62,d9,5b));
	outFields->push(HX_("piercingBoost",de,c2,d1,54));
	outFields->push(HX_("piercingMax",9f,b1,38,9c));
	outFields->push(HX_("penetration",8b,60,96,06));
	outFields->push(HX_("penetrationBoost",98,5e,0e,7a));
	outFields->push(HX_("penetrationMax",d9,0a,c1,8b));
	outFields->push(HX_("tenacity",8f,b7,b3,69));
	outFields->push(HX_("tenacityBoost",14,19,a3,53));
	outFields->push(HX_("tenacityMax",55,ee,f8,bc));
	outFields->push(HX_("healthVialCount",d5,a4,dd,22));
	outFields->push(HX_("magicVialCount",24,42,4f,1e));
	outFields->push(HX_("damageMult",ff,87,25,b0));
	outFields->push(HX_("hitMult",e3,ff,ea,dd));
	outFields->push(HX_("tier",22,c5,fc,4c));
	outFields->push(HX_("hasBackpack",fa,35,2f,f5));
	outFields->push(HX_("attackPeriod",e9,d6,32,4d));
	outFields->push(HX_("nextAltAttack",5e,d2,2e,10));
	outFields->push(HX_("nextTeleportAt",51,73,02,3a));
	outFields->push(HX_("isDefaultAnimatedChar",b0,c3,35,d8));
	outFields->push(HX_("moveMultiplier",f2,ad,09,40));
	outFields->push(HX_("hurtSound",40,8a,0f,d0));
	outFields->push(HX_("deathSound",fb,d0,43,83));
	outFields->push(HX_("rotate",5b,46,20,cb));
	outFields->push(HX_("relMoveVec",6a,53,8e,13));
	outFields->push(HX_("lastAttackError",2a,2c,16,bd));
	outFields->push(HX_("objectXML",58,0c,86,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Player_obj,skinId),HX_("skinId",b8,af,a5,dc)},
	{::hx::fsObject /*  ::util::AnimatedChar */ ,(int)offsetof(Player_obj,skin),HX_("skin",7d,16,55,4c)},
	{::hx::fsInt,(int)offsetof(Player_obj,accountId),HX_("accountId",e8,81,54,29)},
	{::hx::fsInt,(int)offsetof(Player_obj,gems),HX_("gems",04,fd,61,44)},
	{::hx::fsInt,(int)offsetof(Player_obj,gold),HX_("gold",a0,92,69,44)},
	{::hx::fsInt,(int)offsetof(Player_obj,crowns),HX_("crowns",9c,35,bc,82)},
	{::hx::fsString,(int)offsetof(Player_obj,guildName),HX_("guildName",9e,b5,f2,07)},
	{::hx::fsInt,(int)offsetof(Player_obj,guildRank),HX_("guildRank",ff,90,97,0a)},
	{::hx::fsBool,(int)offsetof(Player_obj,isFellowGuild),HX_("isFellowGuild",02,68,a4,29)},
	{::hx::fsInt,(int)offsetof(Player_obj,mp),HX_("mp",63,5f,00,00)},
	{::hx::fsInt,(int)offsetof(Player_obj,maxHPBoost),HX_("maxHPBoost",d7,2c,8f,95)},
	{::hx::fsInt,(int)offsetof(Player_obj,maxHPMax),HX_("maxHPMax",58,7b,e5,c0)},
	{::hx::fsInt,(int)offsetof(Player_obj,maxMP),HX_("maxMP",07,3f,26,03)},
	{::hx::fsInt,(int)offsetof(Player_obj,maxMPBoost),HX_("maxMPBoost",9c,7e,7a,65)},
	{::hx::fsInt,(int)offsetof(Player_obj,maxMPMax),HX_("maxMPMax",dd,61,e6,a1)},
	{::hx::fsInt,(int)offsetof(Player_obj,defenseBoost),HX_("defenseBoost",83,bd,73,4b)},
	{::hx::fsInt,(int)offsetof(Player_obj,defenseMax),HX_("defenseMax",04,49,ba,fd)},
	{::hx::fsInt,(int)offsetof(Player_obj,resistanceBoost),HX_("resistanceBoost",aa,a6,37,bb)},
	{::hx::fsInt,(int)offsetof(Player_obj,resistanceMax),HX_("resistanceMax",6b,ca,8d,70)},
	{::hx::fsInt,(int)offsetof(Player_obj,strength),HX_("strength",81,d2,8e,8e)},
	{::hx::fsInt,(int)offsetof(Player_obj,strengthBoost),HX_("strengthBoost",e2,10,a7,be)},
	{::hx::fsInt,(int)offsetof(Player_obj,strengthMax),HX_("strengthMax",a3,b6,7f,a2)},
	{::hx::fsInt,(int)offsetof(Player_obj,wit),HX_("wit",22,a8,5a,00)},
	{::hx::fsInt,(int)offsetof(Player_obj,witBoost),HX_("witBoost",a1,33,4c,50)},
	{::hx::fsInt,(int)offsetof(Player_obj,witMax),HX_("witMax",a2,5b,72,56)},
	{::hx::fsInt,(int)offsetof(Player_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsInt,(int)offsetof(Player_obj,speedBoost),HX_("speedBoost",1c,56,c6,e9)},
	{::hx::fsInt,(int)offsetof(Player_obj,speedMax),HX_("speedMax",5d,59,e5,ae)},
	{::hx::fsInt,(int)offsetof(Player_obj,haste),HX_("haste",4b,af,21,22)},
	{::hx::fsInt,(int)offsetof(Player_obj,hasteBoost),HX_("hasteBoost",d8,97,4d,41)},
	{::hx::fsInt,(int)offsetof(Player_obj,hasteMax),HX_("hasteMax",19,74,a3,06)},
	{::hx::fsInt,(int)offsetof(Player_obj,stamina),HX_("stamina",2f,c7,c4,31)},
	{::hx::fsInt,(int)offsetof(Player_obj,staminaBoost),HX_("staminaBoost",74,65,75,01)},
	{::hx::fsInt,(int)offsetof(Player_obj,staminaMax),HX_("staminaMax",b5,62,7d,e9)},
	{::hx::fsInt,(int)offsetof(Player_obj,intelligence),HX_("intelligence",3f,07,3e,eb)},
	{::hx::fsInt,(int)offsetof(Player_obj,intelligenceBoost),HX_("intelligenceBoost",64,eb,29,8e)},
	{::hx::fsInt,(int)offsetof(Player_obj,intelligenceMax),HX_("intelligenceMax",a5,8c,df,f9)},
	{::hx::fsInt,(int)offsetof(Player_obj,piercing),HX_("piercing",05,62,d9,5b)},
	{::hx::fsInt,(int)offsetof(Player_obj,piercingBoost),HX_("piercingBoost",de,c2,d1,54)},
	{::hx::fsInt,(int)offsetof(Player_obj,piercingMax),HX_("piercingMax",9f,b1,38,9c)},
	{::hx::fsInt,(int)offsetof(Player_obj,penetration),HX_("penetration",8b,60,96,06)},
	{::hx::fsInt,(int)offsetof(Player_obj,penetrationBoost),HX_("penetrationBoost",98,5e,0e,7a)},
	{::hx::fsInt,(int)offsetof(Player_obj,penetrationMax),HX_("penetrationMax",d9,0a,c1,8b)},
	{::hx::fsInt,(int)offsetof(Player_obj,tenacity),HX_("tenacity",8f,b7,b3,69)},
	{::hx::fsInt,(int)offsetof(Player_obj,tenacityBoost),HX_("tenacityBoost",14,19,a3,53)},
	{::hx::fsInt,(int)offsetof(Player_obj,tenacityMax),HX_("tenacityMax",55,ee,f8,bc)},
	{::hx::fsInt,(int)offsetof(Player_obj,healthVialCount),HX_("healthVialCount",d5,a4,dd,22)},
	{::hx::fsInt,(int)offsetof(Player_obj,magicVialCount),HX_("magicVialCount",24,42,4f,1e)},
	{::hx::fsFloat,(int)offsetof(Player_obj,damageMult),HX_("damageMult",ff,87,25,b0)},
	{::hx::fsFloat,(int)offsetof(Player_obj,hitMult),HX_("hitMult",e3,ff,ea,dd)},
	{::hx::fsInt,(int)offsetof(Player_obj,tier),HX_("tier",22,c5,fc,4c)},
	{::hx::fsBool,(int)offsetof(Player_obj,hasBackpack),HX_("hasBackpack",fa,35,2f,f5)},
	{::hx::fsInt,(int)offsetof(Player_obj,attackPeriod),HX_("attackPeriod",e9,d6,32,4d)},
	{::hx::fsInt,(int)offsetof(Player_obj,nextAltAttack),HX_("nextAltAttack",5e,d2,2e,10)},
	{::hx::fsInt,(int)offsetof(Player_obj,nextTeleportAt),HX_("nextTeleportAt",51,73,02,3a)},
	{::hx::fsBool,(int)offsetof(Player_obj,isDefaultAnimatedChar),HX_("isDefaultAnimatedChar",b0,c3,35,d8)},
	{::hx::fsFloat,(int)offsetof(Player_obj,moveMultiplier),HX_("moveMultiplier",f2,ad,09,40)},
	{::hx::fsString,(int)offsetof(Player_obj,hurtSound),HX_("hurtSound",40,8a,0f,d0)},
	{::hx::fsString,(int)offsetof(Player_obj,deathSound),HX_("deathSound",fb,d0,43,83)},
	{::hx::fsFloat,(int)offsetof(Player_obj,rotate),HX_("rotate",5b,46,20,cb)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(Player_obj,relMoveVec),HX_("relMoveVec",6a,53,8e,13)},
	{::hx::fsInt,(int)offsetof(Player_obj,lastAttackError),HX_("lastAttackError",2a,2c,16,bd)},
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(Player_obj,objectXML),HX_("objectXML",58,0c,86,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Player_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(void *) &Player_obj::newP,HX_("newP",f0,83,02,49)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("skinId",b8,af,a5,dc),
	HX_("skin",7d,16,55,4c),
	HX_("accountId",e8,81,54,29),
	HX_("gems",04,fd,61,44),
	HX_("gold",a0,92,69,44),
	HX_("crowns",9c,35,bc,82),
	HX_("guildName",9e,b5,f2,07),
	HX_("guildRank",ff,90,97,0a),
	HX_("isFellowGuild",02,68,a4,29),
	HX_("mp",63,5f,00,00),
	HX_("maxHPBoost",d7,2c,8f,95),
	HX_("maxHPMax",58,7b,e5,c0),
	HX_("maxMP",07,3f,26,03),
	HX_("maxMPBoost",9c,7e,7a,65),
	HX_("maxMPMax",dd,61,e6,a1),
	HX_("defenseBoost",83,bd,73,4b),
	HX_("defenseMax",04,49,ba,fd),
	HX_("resistanceBoost",aa,a6,37,bb),
	HX_("resistanceMax",6b,ca,8d,70),
	HX_("strength",81,d2,8e,8e),
	HX_("strengthBoost",e2,10,a7,be),
	HX_("strengthMax",a3,b6,7f,a2),
	HX_("wit",22,a8,5a,00),
	HX_("witBoost",a1,33,4c,50),
	HX_("witMax",a2,5b,72,56),
	HX_("speed",87,97,69,81),
	HX_("speedBoost",1c,56,c6,e9),
	HX_("speedMax",5d,59,e5,ae),
	HX_("haste",4b,af,21,22),
	HX_("hasteBoost",d8,97,4d,41),
	HX_("hasteMax",19,74,a3,06),
	HX_("stamina",2f,c7,c4,31),
	HX_("staminaBoost",74,65,75,01),
	HX_("staminaMax",b5,62,7d,e9),
	HX_("intelligence",3f,07,3e,eb),
	HX_("intelligenceBoost",64,eb,29,8e),
	HX_("intelligenceMax",a5,8c,df,f9),
	HX_("piercing",05,62,d9,5b),
	HX_("piercingBoost",de,c2,d1,54),
	HX_("piercingMax",9f,b1,38,9c),
	HX_("penetration",8b,60,96,06),
	HX_("penetrationBoost",98,5e,0e,7a),
	HX_("penetrationMax",d9,0a,c1,8b),
	HX_("tenacity",8f,b7,b3,69),
	HX_("tenacityBoost",14,19,a3,53),
	HX_("tenacityMax",55,ee,f8,bc),
	HX_("healthVialCount",d5,a4,dd,22),
	HX_("magicVialCount",24,42,4f,1e),
	HX_("damageMult",ff,87,25,b0),
	HX_("hitMult",e3,ff,ea,dd),
	HX_("tier",22,c5,fc,4c),
	HX_("hasBackpack",fa,35,2f,f5),
	HX_("attackPeriod",e9,d6,32,4d),
	HX_("nextAltAttack",5e,d2,2e,10),
	HX_("nextTeleportAt",51,73,02,3a),
	HX_("isDefaultAnimatedChar",b0,c3,35,d8),
	HX_("moveMultiplier",f2,ad,09,40),
	HX_("hurtSound",40,8a,0f,d0),
	HX_("deathSound",fb,d0,43,83),
	HX_("rotate",5b,46,20,cb),
	HX_("relMoveVec",6a,53,8e,13),
	HX_("lastAttackError",2a,2c,16,bd),
	HX_("objectXML",58,0c,86,43),
	HX_("updateMaxValues",5d,e6,cc,ce),
	HX_("update",09,86,05,87),
	HX_("damage",6f,90,e4,1d),
	HX_("getPortrait",11,e4,a2,de),
	HX_("setRelativeMovement",dd,05,fd,5b),
	HX_("setGuildName",9c,75,42,2c),
	HX_("msUntilTeleport",23,ae,3b,5a),
	HX_("teleportTo",06,2d,62,e1),
	HX_("walkTo",e4,ba,0a,b6),
	HX_("modifyMove",ab,e8,80,63),
	HX_("modifyStep",e6,ec,7b,67),
	HX_("isValidPosition",7b,77,9d,2e),
	HX_("isFullOccupy",c8,5f,1c,5d),
	HX_("useAltWeapon",9e,3b,0e,87),
	HX_("attemptAttackAngle",de,02,f7,38),
	HX_("nextAvailableInventorySlot",84,92,eb,54),
	HX_("swapInventoryIndex",c9,18,f2,a4),
	HX_("getVialCount",9b,7d,0b,8e),
	HX_("getMoveSpeed",40,03,87,4e),
	HX_("strMult",41,e9,76,e6),
	HX_("witMult",32,f5,ac,4d),
	HX_("shoot",df,81,27,7c),
	HX_("doShoot",54,62,54,af),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::newP,"newP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::newP,"newP");
};

#endif

::hx::Class Player_obj::__mClass;

static ::String Player_obj_sStaticFields[] = {
	HX_("newP",f0,83,02,49),
	HX_("fromPlayerXML",2c,ee,b5,74),
	::String(null())
};

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.Player",db,cf,dc,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Player_obj::__GetStatic;
	__mClass->mSetStaticField = &Player_obj::__SetStatic;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Player_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Player_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_76cb3f6186044bdd_39_boot)
HXDLIN(  39)		newP =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace objects
