// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_objects_DrainProperties
#include <objects/DrainProperties.h>
#endif
#ifndef INCLUDED_objects_ScepterProperties
#include <objects/ScepterProperties.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7bc45631b15cf1a4_169_new,"objects.ScepterProperties","new",0x503d9591,"objects.ScepterProperties.new","objects/ObjectProperties.hx",169,0xfce94251)
namespace objects{

void ScepterProperties_obj::__construct( ::Xml scepterXML){
            	HX_GC_STACKFRAME(&_hx_pos_7bc45631b15cf1a4_169_new)
HXLINE( 173)		this->damage = 0;
HXLINE( 172)		this->tickMs = 0;
HXLINE( 171)		this->range = ((Float)0.0);
HXLINE( 170)		this->color = 0;
HXLINE( 177)		 ::Xml _this = ( ( ::Xml)(scepterXML->elementsNamed(HX_("Color",43,e1,89,dd))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 177)		bool _hx_tmp;
HXDLIN( 177)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 177)			_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 177)			_hx_tmp = false;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 177)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN( 177)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 177)		bool _hx_tmp1;
HXDLIN( 177)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 177)			_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 177)			_hx_tmp1 = true;
            		}
HXDLIN( 177)		if (_hx_tmp1) {
HXLINE( 177)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN( 177)		this->color = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
HXLINE( 178)		 ::Xml _this2 = ( ( ::Xml)(scepterXML->elementsNamed(HX_("Range",9d,15,4d,77))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 178)		bool _hx_tmp2;
HXDLIN( 178)		if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE( 178)			_hx_tmp2 = (_this2->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 178)			_hx_tmp2 = false;
            		}
HXDLIN( 178)		if (_hx_tmp2) {
HXLINE( 178)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            		}
HXDLIN( 178)		 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 178)		bool _hx_tmp3;
HXDLIN( 178)		if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE( 178)			_hx_tmp3 = (_this3->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 178)			_hx_tmp3 = true;
            		}
HXDLIN( 178)		if (_hx_tmp3) {
HXLINE( 178)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            		}
HXDLIN( 178)		this->range = ::Std_obj::parseFloat(_this3->nodeValue);
HXLINE( 179)		 ::Xml _this4 = ( ( ::Xml)(scepterXML->elementsNamed(HX_("TickMS",23,cc,ce,4c))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 179)		bool _hx_tmp4;
HXDLIN( 179)		if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE( 179)			_hx_tmp4 = (_this4->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 179)			_hx_tmp4 = false;
            		}
HXDLIN( 179)		if (_hx_tmp4) {
HXLINE( 179)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            		}
HXDLIN( 179)		 ::Xml _this5 = _this4->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 179)		bool _hx_tmp5;
HXDLIN( 179)		if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE( 179)			_hx_tmp5 = (_this5->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 179)			_hx_tmp5 = true;
            		}
HXDLIN( 179)		if (_hx_tmp5) {
HXLINE( 179)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            		}
HXDLIN( 179)		this->tickMs = ( (int)(::Std_obj::parseInt(_this5->nodeValue)) );
HXLINE( 180)		 ::Xml _this6 = ( ( ::Xml)(scepterXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 180)		bool _hx_tmp6;
HXDLIN( 180)		if ((_this6->nodeType != ::Xml_obj::Document)) {
HXLINE( 180)			_hx_tmp6 = (_this6->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 180)			_hx_tmp6 = false;
            		}
HXDLIN( 180)		if (_hx_tmp6) {
HXLINE( 180)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this6->nodeType)));
            		}
HXDLIN( 180)		 ::Xml _this7 = _this6->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 180)		bool _hx_tmp7;
HXDLIN( 180)		if ((_this7->nodeType != ::Xml_obj::Document)) {
HXLINE( 180)			_hx_tmp7 = (_this7->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 180)			_hx_tmp7 = true;
            		}
HXDLIN( 180)		if (_hx_tmp7) {
HXLINE( 180)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this7->nodeType)));
            		}
HXDLIN( 180)		this->damage = ( (int)(::Std_obj::parseInt(_this7->nodeValue)) );
HXLINE( 181)		this->drain =  ::objects::DrainProperties_obj::__alloc( HX_CTX ,( ( ::Xml)(scepterXML->elementsNamed(HX_("Drain",98,bb,e3,72))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) ));
            	}

Dynamic ScepterProperties_obj::__CreateEmpty() { return new ScepterProperties_obj; }

void *ScepterProperties_obj::_hx_vtable = 0;

Dynamic ScepterProperties_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScepterProperties_obj > _hx_result = new ScepterProperties_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ScepterProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3516b149;
}


::hx::ObjectPtr< ScepterProperties_obj > ScepterProperties_obj::__new( ::Xml scepterXML) {
	::hx::ObjectPtr< ScepterProperties_obj > __this = new ScepterProperties_obj();
	__this->__construct(scepterXML);
	return __this;
}

::hx::ObjectPtr< ScepterProperties_obj > ScepterProperties_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml scepterXML) {
	ScepterProperties_obj *__this = (ScepterProperties_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScepterProperties_obj), true, "objects.ScepterProperties"));
	*(void **)__this = ScepterProperties_obj::_hx_vtable;
	__this->__construct(scepterXML);
	return __this;
}

ScepterProperties_obj::ScepterProperties_obj()
{
}

void ScepterProperties_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScepterProperties);
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(range,"range");
	HX_MARK_MEMBER_NAME(tickMs,"tickMs");
	HX_MARK_MEMBER_NAME(damage,"damage");
	HX_MARK_MEMBER_NAME(drain,"drain");
	HX_MARK_END_CLASS();
}

void ScepterProperties_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(range,"range");
	HX_VISIT_MEMBER_NAME(tickMs,"tickMs");
	HX_VISIT_MEMBER_NAME(damage,"damage");
	HX_VISIT_MEMBER_NAME(drain,"drain");
}

::hx::Val ScepterProperties_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"range") ) { return ::hx::Val( range ); }
		if (HX_FIELD_EQ(inName,"drain") ) { return ::hx::Val( drain ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tickMs") ) { return ::hx::Val( tickMs ); }
		if (HX_FIELD_EQ(inName,"damage") ) { return ::hx::Val( damage ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScepterProperties_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"range") ) { range=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drain") ) { drain=inValue.Cast<  ::objects::DrainProperties >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tickMs") ) { tickMs=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"damage") ) { damage=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScepterProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("range",bd,a5,1f,e4));
	outFields->push(HX_("tickMs",23,58,3a,18));
	outFields->push(HX_("damage",6f,90,e4,1d));
	outFields->push(HX_("drain",b8,4b,b6,df));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScepterProperties_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ScepterProperties_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsFloat,(int)offsetof(ScepterProperties_obj,range),HX_("range",bd,a5,1f,e4)},
	{::hx::fsInt,(int)offsetof(ScepterProperties_obj,tickMs),HX_("tickMs",23,58,3a,18)},
	{::hx::fsInt,(int)offsetof(ScepterProperties_obj,damage),HX_("damage",6f,90,e4,1d)},
	{::hx::fsObject /*  ::objects::DrainProperties */ ,(int)offsetof(ScepterProperties_obj,drain),HX_("drain",b8,4b,b6,df)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScepterProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String ScepterProperties_obj_sMemberFields[] = {
	HX_("color",63,71,5c,4a),
	HX_("range",bd,a5,1f,e4),
	HX_("tickMs",23,58,3a,18),
	HX_("damage",6f,90,e4,1d),
	HX_("drain",b8,4b,b6,df),
	::String(null()) };

::hx::Class ScepterProperties_obj::__mClass;

void ScepterProperties_obj::__register()
{
	ScepterProperties_obj _hx_dummy;
	ScepterProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.ScepterProperties",1f,79,65,c5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScepterProperties_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScepterProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScepterProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScepterProperties_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
