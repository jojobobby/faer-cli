// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_constants_ItemConstants
#include <constants/ItemConstants.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_ObjectProperties
#include <objects/ObjectProperties.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_objects_TextureData
#include <objects/TextureData.h>
#endif
#ifndef INCLUDED_objects_animation_AnimationsData
#include <objects/animation/AnimationsData.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_GlowRedrawer
#include <util/GlowRedrawer.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_28_parseFromXML,"objects.ObjectLibrary","parseFromXML",0x7273fdc6,"objects.ObjectLibrary.parseFromXML","objects/ObjectLibrary.hx",28,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_72_getIdFromType,"objects.ObjectLibrary","getIdFromType",0xe653c7c9,"objects.ObjectLibrary.getIdFromType","objects/ObjectLibrary.hx",72,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_76_getPropsFromId,"objects.ObjectLibrary","getPropsFromId",0x513920ab,"objects.ObjectLibrary.getPropsFromId","objects/ObjectLibrary.hx",76,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_83_getObjectFromType,"objects.ObjectLibrary","getObjectFromType",0x26fbfbad,"objects.ObjectLibrary.getObjectFromType","objects/ObjectLibrary.hx",83,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_103_getTextureFromType,"objects.ObjectLibrary","getTextureFromType",0xacdce975,"objects.ObjectLibrary.getTextureFromType","objects/ObjectLibrary.hx",103,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_106_getRedrawnTextureFromType,"objects.ObjectLibrary","getRedrawnTextureFromType",0x427b1232,"objects.ObjectLibrary.getRedrawnTextureFromType","objects/ObjectLibrary.hx",106,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_121_getSizeFromType,"objects.ObjectLibrary","getSizeFromType",0xde94d92f,"objects.ObjectLibrary.getSizeFromType","objects/ObjectLibrary.hx",121,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_129_getSlotTypeFromType,"objects.ObjectLibrary","getSlotTypeFromType",0xa4414846,"objects.ObjectLibrary.getSlotTypeFromType","objects/ObjectLibrary.hx",129,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_137_getMatchingSlotIndex,"objects.ObjectLibrary","getMatchingSlotIndex",0x1444416d,"objects.ObjectLibrary.getMatchingSlotIndex","objects/ObjectLibrary.hx",137,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_151_isUsableByPlayer,"objects.ObjectLibrary","isUsableByPlayer",0x771dc266,"objects.ObjectLibrary.isUsableByPlayer","objects/ObjectLibrary.hx",151,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_170_isUntradable,"objects.ObjectLibrary","isUntradable",0x24f99f0a,"objects.ObjectLibrary.isUntradable","objects/ObjectLibrary.hx",170,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_175_slotsMatching,"objects.ObjectLibrary","slotsMatching",0x344c35e6,"objects.ObjectLibrary.slotsMatching","objects/ObjectLibrary.hx",175,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_185_genericMatch,"objects.ObjectLibrary","genericMatch",0x9800dada,"objects.ObjectLibrary.genericMatch","objects/ObjectLibrary.hx",185,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_16_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",16,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_17_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",17,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_18_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",18,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_19_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",19,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_20_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",20,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_21_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",21,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_22_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",22,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_23_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",23,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_24_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",24,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_25_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",25,0x077f453d)
HX_LOCAL_STACK_FRAME(_hx_pos_5e0afaacd97120f5_26_boot,"objects.ObjectLibrary","boot",0x50bdff5e,"objects.ObjectLibrary.boot","objects/ObjectLibrary.hx",26,0x077f453d)
namespace objects{

void ObjectLibrary_obj::__construct() { }

Dynamic ObjectLibrary_obj::__CreateEmpty() { return new ObjectLibrary_obj; }

void *ObjectLibrary_obj::_hx_vtable = 0;

Dynamic ObjectLibrary_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ObjectLibrary_obj > _hx_result = new ObjectLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ObjectLibrary_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x56dc0388;
}

 ::haxe::ds::IntMap ObjectLibrary_obj::propsLibrary;

 ::haxe::ds::IntMap ObjectLibrary_obj::xmlLibrary;

 ::haxe::ds::StringMap ObjectLibrary_obj::idToType;

 ::haxe::ds::IntMap ObjectLibrary_obj::typeToDisplayId;

 ::haxe::ds::IntMap ObjectLibrary_obj::typeToTextureData;

 ::haxe::ds::IntMap ObjectLibrary_obj::typeToTopTextureData;

 ::haxe::ds::IntMap ObjectLibrary_obj::typeToAnimationsData;

 ::objects::ObjectProperties ObjectLibrary_obj::defaultProps;

::Array< ::Dynamic> ObjectLibrary_obj::playerChars;

::Array< ::Dynamic> ObjectLibrary_obj::hexTransforms;

 ::haxe::ds::IntMap ObjectLibrary_obj::playerClassAbbr;

void ObjectLibrary_obj::parseFromXML( ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_28_parseFromXML)
HXLINE(  29)		::String id = null();
HXLINE(  30)		::String displayId = null();
HXLINE(  31)		int objectType = 0;
HXLINE(  32)		bool found = false;
HXLINE(  33)		{
HXLINE(  33)			 ::Dynamic objectXML = xml->elementsNamed(HX_("Object",df,f2,d3,49));
HXDLIN(  33)			while(( (bool)(objectXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  33)				 ::Xml objectXML1 = ( ( ::Xml)(objectXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  34)				id = objectXML1->get(HX_("id",db,5b,00,00));
HXLINE(  35)				displayId = id;
HXLINE(  36)				if (( (bool)(objectXML1->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  37)					 ::Xml _this = ( ( ::Xml)(objectXML1->elementsNamed(HX_("DisplayId",9d,de,ad,63))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  37)					bool displayId1;
HXDLIN(  37)					if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  37)						displayId1 = (_this->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE(  37)						displayId1 = false;
            					}
HXDLIN(  37)					if (displayId1) {
HXLINE(  37)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            					}
HXDLIN(  37)					 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  37)					bool displayId2;
HXDLIN(  37)					if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  37)						displayId2 = (_this1->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE(  37)						displayId2 = true;
            					}
HXDLIN(  37)					if (displayId2) {
HXLINE(  37)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            					}
HXDLIN(  37)					displayId = _this1->nodeValue;
            				}
HXLINE(  39)				if (( (bool)(objectXML1->elementsNamed(HX_("Group",1f,23,22,2d))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  40)					 ::Xml _this2 = ( ( ::Xml)(objectXML1->elementsNamed(HX_("Group",1f,23,22,2d))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  40)					bool _hx_tmp;
HXDLIN(  40)					if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE(  40)						_hx_tmp = (_this2->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE(  40)						_hx_tmp = false;
            					}
HXDLIN(  40)					if (_hx_tmp) {
HXLINE(  40)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            					}
HXDLIN(  40)					 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  40)					bool _hx_tmp1;
HXDLIN(  40)					if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE(  40)						_hx_tmp1 = (_this3->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE(  40)						_hx_tmp1 = true;
            					}
HXDLIN(  40)					if (_hx_tmp1) {
HXLINE(  40)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            					}
HXDLIN(  40)					if ((_this3->nodeValue == HX_("Hexable",d5,e1,92,6c))) {
HXLINE(  41)						::objects::ObjectLibrary_obj::hexTransforms->push(objectXML1);
            					}
            				}
HXLINE(  43)				objectType = ( (int)(::Std_obj::parseInt(objectXML1->get(HX_("type",ba,f2,08,4d)))) );
HXLINE(  44)				 ::haxe::ds::IntMap _hx_tmp2 = ::objects::ObjectLibrary_obj::propsLibrary;
HXDLIN(  44)				_hx_tmp2->set(objectType, ::objects::ObjectProperties_obj::__alloc( HX_CTX ,objectXML1));
HXLINE(  45)				::objects::ObjectLibrary_obj::xmlLibrary->set(objectType,objectXML1);
HXLINE(  46)				::objects::ObjectLibrary_obj::idToType->set(id,objectType);
HXLINE(  47)				::objects::ObjectLibrary_obj::typeToDisplayId->set(objectType,displayId);
HXLINE(  48)				 ::Xml _this4 = ( ( ::Xml)(objectXML1->elementsNamed(HX_("Class",18,e8,85,db))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  48)				bool _hx_tmp3;
HXDLIN(  48)				if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE(  48)					_hx_tmp3 = (_this4->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(  48)					_hx_tmp3 = false;
            				}
HXDLIN(  48)				if (_hx_tmp3) {
HXLINE(  48)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            				}
HXDLIN(  48)				 ::Xml _this5 = _this4->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  48)				bool _hx_tmp4;
HXDLIN(  48)				if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE(  48)					_hx_tmp4 = (_this5->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE(  48)					_hx_tmp4 = true;
            				}
HXDLIN(  48)				if (_hx_tmp4) {
HXLINE(  48)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            				}
HXDLIN(  48)				if ((_this5->nodeValue == HX_("Player",81,5f,4d,6c))) {
HXLINE(  49)					 ::haxe::ds::IntMap _hx_tmp5 = ::objects::ObjectLibrary_obj::playerClassAbbr;
HXDLIN(  49)					_hx_tmp5->set(objectType,objectXML1->get(HX_("id",db,5b,00,00)).substr(0,2));
HXLINE(  50)					found = false;
HXLINE(  51)					{
HXLINE(  51)						int _g = 0;
HXDLIN(  51)						int _g1 = ::objects::ObjectLibrary_obj::playerChars->length;
HXDLIN(  51)						while((_g < _g1)){
HXLINE(  51)							_g = (_g + 1);
HXDLIN(  51)							int i = (_g - 1);
HXLINE(  52)							if (::hx::IsEq( ::Std_obj::parseInt(::objects::ObjectLibrary_obj::playerChars->__get(i).StaticCast<  ::Xml >()->get(HX_("type",ba,f2,08,4d))),objectType )) {
HXLINE(  53)								::objects::ObjectLibrary_obj::playerChars[i] = objectXML1;
HXLINE(  54)								found = true;
            							}
            						}
            					}
HXLINE(  57)					if (!(found)) {
HXLINE(  58)						::objects::ObjectLibrary_obj::playerChars->push(objectXML1);
            					}
            				}
HXLINE(  61)				 ::haxe::ds::IntMap _hx_tmp6 = ::objects::ObjectLibrary_obj::typeToTextureData;
HXDLIN(  61)				_hx_tmp6->set(objectType, ::objects::TextureData_obj::__alloc( HX_CTX ,objectXML1,null()));
HXLINE(  63)				if (( (bool)(objectXML1->elementsNamed(HX_("Top",75,1e,40,00))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  64)					 ::haxe::ds::IntMap _hx_tmp7 = ::objects::ObjectLibrary_obj::typeToTopTextureData;
HXDLIN(  64)					_hx_tmp7->set(objectType, ::objects::TextureData_obj::__alloc( HX_CTX ,( ( ::Xml)(objectXML1->elementsNamed(HX_("Top",75,1e,40,00))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) ),null()));
            				}
HXLINE(  66)				if (( (bool)(objectXML1->elementsNamed(HX_("Animation",e4,ce,07,ed))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  67)					 ::haxe::ds::IntMap _hx_tmp8 = ::objects::ObjectLibrary_obj::typeToAnimationsData;
HXDLIN(  67)					_hx_tmp8->set(objectType, ::objects::animation::AnimationsData_obj::__alloc( HX_CTX ,objectXML1));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,parseFromXML,(void))

::String ObjectLibrary_obj::getIdFromType(int objType){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_72_getIdFromType)
HXDLIN(  72)		 ::Xml tmp = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objType)) );
HXDLIN(  72)		if (::hx::IsNotNull( tmp )) {
HXDLIN(  72)			return tmp->get(HX_("id",db,5b,00,00));
            		}
            		else {
HXDLIN(  72)			return null();
            		}
HXDLIN(  72)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,getIdFromType,return )

 ::objects::ObjectProperties ObjectLibrary_obj::getPropsFromId(::String id){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_76_getPropsFromId)
HXDLIN(  76)		 ::haxe::ds::IntMap _hx_tmp = ::objects::ObjectLibrary_obj::propsLibrary;
HXDLIN(  76)		return ( ( ::objects::ObjectProperties)(_hx_tmp->get(::objects::ObjectLibrary_obj::idToType->get(id))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,getPropsFromId,return )

 ::objects::GameObject ObjectLibrary_obj::getObjectFromType(int objectType){
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_83_getObjectFromType)
HXLINE(  84)		bool _hx_tmp;
HXDLIN(  84)		if ((objectType != 0)) {
HXLINE(  84)			_hx_tmp = !(::objects::ObjectLibrary_obj::xmlLibrary->exists(objectType));
            		}
            		else {
HXLINE(  84)			_hx_tmp = true;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  85)			objectType = ::objects::ObjectLibrary_obj::idToType->get_int(HX_("Crocodile",aa,48,ac,76));
            		}
HXLINE(  87)		 ::Xml objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objectType)) );
HXLINE(  88)		::String objClass;
HXDLIN(  88)		if (( (bool)(objectXML->elementsNamed(HX_("Class",18,e8,85,db))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  88)			 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("Class",18,e8,85,db))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  88)			bool objClass1;
HXDLIN(  88)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  88)				objClass1 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  88)				objClass1 = false;
            			}
HXDLIN(  88)			if (objClass1) {
HXLINE(  88)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN(  88)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  88)			bool objClass2;
HXDLIN(  88)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  88)				objClass2 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  88)				objClass2 = true;
            			}
HXDLIN(  88)			if (objClass2) {
HXLINE(  88)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN(  88)			objClass = _this1->nodeValue;
            		}
            		else {
HXLINE(  88)			objClass = HX_("",00,00,00,00);
            		}
HXLINE(  89)		::String _hx_switch_0 = objClass;
            		if (  (_hx_switch_0==HX_("Player",81,5f,4d,6c)) ){
HXLINE(  95)			return  ::objects::Player_obj::__alloc( HX_CTX ,objectXML);
HXDLIN(  95)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("Bazaar",b7,0c,5a,8e)) ||  (_hx_switch_0==HX_("Character",89,bb,a4,e3)) ||  (_hx_switch_0==HX_("ClosedStashChest",38,7a,95,b7)) ||  (_hx_switch_0==HX_("Container",21,55,46,61)) ||  (_hx_switch_0==HX_("FoundingTable",ee,8b,53,a1)) ||  (_hx_switch_0==HX_("GameObject",71,6c,66,4e)) ||  (_hx_switch_0==HX_("GuildHallPortal",b8,b4,12,db)) ||  (_hx_switch_0==HX_("GuildManager",1a,31,e9,36)) ||  (_hx_switch_0==HX_("Merchant",28,e9,86,76)) ||  (_hx_switch_0==HX_("Portal",cc,ee,b9,31)) ||  (_hx_switch_0==HX_("SkinChanger",e5,d3,0b,da)) ||  (_hx_switch_0==HX_("Wall",2a,89,cb,39)) ){
HXLINE(  93)			return  ::objects::GameObject_obj::__alloc( HX_CTX ,objectXML,objClass);
HXDLIN(  93)			goto _hx_goto_5;
            		}
            		/* default */{
HXLINE(  97)			::haxe::Log_obj::trace(((HX_("Could not create object (",5f,f2,fd,e8) + objClass) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("src/objects/ObjectLibrary.hx",08,6f,b5,f0),97,HX_("objects.ObjectLibrary",c2,b4,1b,59),HX_("getObjectFromType",59,02,05,17)));
HXLINE(  98)			return null();
            		}
            		_hx_goto_5:;
HXLINE(  89)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,getObjectFromType,return )

 ::openfl::display::BitmapData ObjectLibrary_obj::getTextureFromType(int objectType){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_103_getTextureFromType)
HXDLIN( 103)		 ::objects::TextureData tmp = ( ( ::objects::TextureData)(::objects::ObjectLibrary_obj::typeToTextureData->get(objectType)) );
HXDLIN( 103)		if (::hx::IsNotNull( tmp )) {
HXDLIN( 103)			return tmp->getTexture(null());
            		}
            		else {
HXDLIN( 103)			return null();
            		}
HXDLIN( 103)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,getTextureFromType,return )

 ::openfl::display::BitmapData ObjectLibrary_obj::getRedrawnTextureFromType(int objectType,int size,bool includeBottom,::hx::Null< bool >  __o_useCaching,::hx::Null< int >  __o_scaleValue){
            		bool useCaching = __o_useCaching.Default(true);
            		int scaleValue = __o_scaleValue.Default(5);
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_106_getRedrawnTextureFromType)
HXLINE( 107)		 ::objects::TextureData textureData = ( ( ::objects::TextureData)(::objects::ObjectLibrary_obj::typeToTextureData->get(objectType)) );
HXLINE( 108)		 ::openfl::display::BitmapData texture;
HXDLIN( 108)		if (::hx::IsNotNull( textureData )) {
HXLINE( 108)			texture = textureData->getTexture(null());
            		}
            		else {
HXLINE( 108)			texture = null();
            		}
HXLINE( 109)		if (::hx::IsNull( texture )) {
HXLINE( 110)			texture = ::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),0);
            		}
HXLINE( 112)		 ::openfl::display::BitmapData mask;
HXDLIN( 112)		if (::hx::IsNotNull( textureData )) {
HXLINE( 112)			mask = textureData->mask;
            		}
            		else {
HXLINE( 112)			mask = null();
            		}
HXLINE( 113)		if (::hx::IsNull( mask )) {
HXLINE( 114)			return ::util::TextureRedrawer_obj::redraw(texture,size,includeBottom,0,useCaching,scaleValue,null());
            		}
HXLINE( 116)		texture = ::util::TextureRedrawer_obj::resize(texture,size,includeBottom,null());
HXLINE( 117)		texture = ::util::GlowRedrawer_obj::outlineGlow(texture,0,null(),null(),null());
HXLINE( 118)		return texture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ObjectLibrary_obj,getRedrawnTextureFromType,return )

int ObjectLibrary_obj::getSizeFromType(int objectType){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_121_getSizeFromType)
HXLINE( 122)		 ::Xml objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objectType)) );
HXLINE( 123)		if (!(( (bool)(objectXML->elementsNamed(HX_("Size",e1,cc,2c,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ))) {
HXLINE( 124)			return 100;
            		}
HXLINE( 126)		 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("Size",e1,cc,2c,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 126)		bool _hx_tmp;
HXDLIN( 126)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 126)			_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 126)			_hx_tmp = false;
            		}
HXDLIN( 126)		if (_hx_tmp) {
HXLINE( 126)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN( 126)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 126)		bool _hx_tmp1;
HXDLIN( 126)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 126)			_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 126)			_hx_tmp1 = true;
            		}
HXDLIN( 126)		if (_hx_tmp1) {
HXLINE( 126)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN( 126)		return ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,getSizeFromType,return )

int ObjectLibrary_obj::getSlotTypeFromType(int objectType){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_129_getSlotTypeFromType)
HXLINE( 130)		 ::Xml objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objectType)) );
HXLINE( 131)		if (!(( (bool)(objectXML->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ))) {
HXLINE( 132)			return -1;
            		}
HXLINE( 134)		 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 134)		bool _hx_tmp;
HXDLIN( 134)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 134)			_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 134)			_hx_tmp = false;
            		}
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 134)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN( 134)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 134)		bool _hx_tmp1;
HXDLIN( 134)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 134)			_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 134)			_hx_tmp1 = true;
            		}
HXDLIN( 134)		if (_hx_tmp1) {
HXLINE( 134)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN( 134)		return ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,getSlotTypeFromType,return )

int ObjectLibrary_obj::getMatchingSlotIndex(int objectType, ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_137_getMatchingSlotIndex)
HXLINE( 138)		 ::Xml objectXML = null();
HXLINE( 139)		int slotType = 0;
HXLINE( 140)		if ((objectType != -1)) {
HXLINE( 141)			objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objectType)) );
HXLINE( 142)			 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 142)			bool slotType1;
HXDLIN( 142)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 142)				slotType1 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 142)				slotType1 = false;
            			}
HXDLIN( 142)			if (slotType1) {
HXLINE( 142)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN( 142)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 142)			bool slotType2;
HXDLIN( 142)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 142)				slotType2 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE( 142)				slotType2 = true;
            			}
HXDLIN( 142)			if (slotType2) {
HXLINE( 142)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN( 142)			slotType = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
HXLINE( 143)			{
HXLINE( 144)				if ((player->slotTypes->__get(0) == slotType)) {
HXLINE( 145)					return 0;
            				}
HXLINE( 144)				if ((player->slotTypes->__get(1) == slotType)) {
HXLINE( 145)					return 1;
            				}
HXLINE( 144)				if ((player->slotTypes->__get(2) == slotType)) {
HXLINE( 145)					return 2;
            				}
HXLINE( 144)				if ((player->slotTypes->__get(3) == slotType)) {
HXLINE( 145)					return 3;
            				}
            			}
            		}
HXLINE( 148)		return -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ObjectLibrary_obj,getMatchingSlotIndex,return )

bool ObjectLibrary_obj::isUsableByPlayer(int objectType, ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_151_isUsableByPlayer)
HXLINE( 152)		if (::hx::IsNull( player )) {
HXLINE( 153)			return true;
            		}
HXLINE( 155)		 ::Xml objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objectType)) );
HXLINE( 156)		bool _hx_tmp;
HXDLIN( 156)		if (::hx::IsNotNull( objectXML )) {
HXLINE( 156)			_hx_tmp = !(( (bool)(objectXML->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ));
            		}
            		else {
HXLINE( 156)			_hx_tmp = true;
            		}
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 157)			return false;
            		}
HXLINE( 159)		 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 159)		bool slotType;
HXDLIN( 159)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 159)			slotType = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 159)			slotType = false;
            		}
HXDLIN( 159)		if (slotType) {
HXLINE( 159)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN( 159)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 159)		bool slotType1;
HXDLIN( 159)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 159)			slotType1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 159)			slotType1 = true;
            		}
HXDLIN( 159)		if (slotType1) {
HXLINE( 159)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN( 159)		int slotType2 = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
HXLINE( 160)		if ((slotType2 == 10)) {
HXLINE( 161)			return true;
            		}
HXLINE( 163)		{
HXLINE( 163)			int _g = 0;
HXDLIN( 163)			int _g1 = player->slotTypes->length;
HXDLIN( 163)			while((_g < _g1)){
HXLINE( 163)				_g = (_g + 1);
HXLINE( 164)				if (::objects::ObjectLibrary_obj::slotsMatching(player->slotTypes->__get((_g - 1)),slotType2)) {
HXLINE( 165)					return true;
            				}
            			}
            		}
HXLINE( 167)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ObjectLibrary_obj,isUsableByPlayer,return )

bool ObjectLibrary_obj::isUntradable(int objectType){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_170_isUntradable)
HXLINE( 171)		 ::Xml objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(objectType)) );
HXLINE( 172)		if (::hx::IsNotNull( objectXML )) {
HXLINE( 172)			return ( (bool)(objectXML->elementsNamed(HX_("Untradable",74,f3,f7,88))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            		}
            		else {
HXLINE( 172)			return false;
            		}
HXDLIN( 172)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectLibrary_obj,isUntradable,return )

bool ObjectLibrary_obj::slotsMatching(int slot1,int slot2){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_175_slotsMatching)
HXLINE( 176)		bool _hx_tmp;
HXDLIN( 176)		bool _hx_tmp1;
HXDLIN( 176)		if (!(::objects::ObjectLibrary_obj::genericMatch(::constants::ItemConstants_obj::WEAPON_TYPES,22,slot1,slot2))) {
HXLINE( 176)			_hx_tmp1 = ::objects::ObjectLibrary_obj::genericMatch(::constants::ItemConstants_obj::ABILITY_TYPES,21,slot1,slot2);
            		}
            		else {
HXLINE( 176)			_hx_tmp1 = true;
            		}
HXDLIN( 176)		if (!(_hx_tmp1)) {
HXLINE( 176)			_hx_tmp = ::objects::ObjectLibrary_obj::genericMatch(::constants::ItemConstants_obj::ARMOR_TYPES,20,slot1,slot2);
            		}
            		else {
HXLINE( 176)			_hx_tmp = true;
            		}
HXDLIN( 176)		if (_hx_tmp) {
HXLINE( 179)			return true;
            		}
HXLINE( 181)		return (slot1 == slot2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ObjectLibrary_obj,slotsMatching,return )

bool ObjectLibrary_obj::genericMatch(::Array< int > slotTypes,int targetType,int slot1,int slot2){
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_185_genericMatch)
HXDLIN( 185)		bool _hx_tmp;
HXDLIN( 185)		if ((slotTypes->indexOf(slot1,null()) != -1)) {
HXDLIN( 185)			_hx_tmp = (slot2 == targetType);
            		}
            		else {
HXDLIN( 185)			_hx_tmp = false;
            		}
HXDLIN( 185)		if (!(_hx_tmp)) {
HXDLIN( 185)			if ((slotTypes->indexOf(slot2,null()) != -1)) {
HXDLIN( 185)				return (slot1 == targetType);
            			}
            			else {
HXDLIN( 185)				return false;
            			}
            		}
            		else {
HXDLIN( 185)			return true;
            		}
HXDLIN( 185)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ObjectLibrary_obj,genericMatch,return )


ObjectLibrary_obj::ObjectLibrary_obj()
{
}

bool ObjectLibrary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"idToType") ) { outValue = ( idToType ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xmlLibrary") ) { outValue = ( xmlLibrary ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerChars") ) { outValue = ( playerChars ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"propsLibrary") ) { outValue = ( propsLibrary ); return true; }
		if (HX_FIELD_EQ(inName,"defaultProps") ) { outValue = ( defaultProps ); return true; }
		if (HX_FIELD_EQ(inName,"parseFromXML") ) { outValue = parseFromXML_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isUntradable") ) { outValue = isUntradable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"genericMatch") ) { outValue = genericMatch_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"hexTransforms") ) { outValue = ( hexTransforms ); return true; }
		if (HX_FIELD_EQ(inName,"getIdFromType") ) { outValue = getIdFromType_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"slotsMatching") ) { outValue = slotsMatching_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getPropsFromId") ) { outValue = getPropsFromId_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"typeToDisplayId") ) { outValue = ( typeToDisplayId ); return true; }
		if (HX_FIELD_EQ(inName,"playerClassAbbr") ) { outValue = ( playerClassAbbr ); return true; }
		if (HX_FIELD_EQ(inName,"getSizeFromType") ) { outValue = getSizeFromType_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isUsableByPlayer") ) { outValue = isUsableByPlayer_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"typeToTextureData") ) { outValue = ( typeToTextureData ); return true; }
		if (HX_FIELD_EQ(inName,"getObjectFromType") ) { outValue = getObjectFromType_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getTextureFromType") ) { outValue = getTextureFromType_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getSlotTypeFromType") ) { outValue = getSlotTypeFromType_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"typeToTopTextureData") ) { outValue = ( typeToTopTextureData ); return true; }
		if (HX_FIELD_EQ(inName,"typeToAnimationsData") ) { outValue = ( typeToAnimationsData ); return true; }
		if (HX_FIELD_EQ(inName,"getMatchingSlotIndex") ) { outValue = getMatchingSlotIndex_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getRedrawnTextureFromType") ) { outValue = getRedrawnTextureFromType_dyn(); return true; }
	}
	return false;
}

bool ObjectLibrary_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"idToType") ) { idToType=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xmlLibrary") ) { xmlLibrary=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerChars") ) { playerChars=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"propsLibrary") ) { propsLibrary=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultProps") ) { defaultProps=ioValue.Cast<  ::objects::ObjectProperties >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"hexTransforms") ) { hexTransforms=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"typeToDisplayId") ) { typeToDisplayId=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"playerClassAbbr") ) { playerClassAbbr=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"typeToTextureData") ) { typeToTextureData=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"typeToTopTextureData") ) { typeToTopTextureData=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"typeToAnimationsData") ) { typeToAnimationsData=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ObjectLibrary_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ObjectLibrary_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ObjectLibrary_obj::propsLibrary,HX_("propsLibrary",6b,35,1e,8f)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ObjectLibrary_obj::xmlLibrary,HX_("xmlLibrary",e4,59,bb,21)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ObjectLibrary_obj::idToType,HX_("idToType",10,04,6a,6b)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ObjectLibrary_obj::typeToDisplayId,HX_("typeToDisplayId",28,fd,a0,07)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ObjectLibrary_obj::typeToTextureData,HX_("typeToTextureData",d0,03,f5,ba)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ObjectLibrary_obj::typeToTopTextureData,HX_("typeToTopTextureData",c5,f1,c5,33)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ObjectLibrary_obj::typeToAnimationsData,HX_("typeToAnimationsData",6e,38,38,ff)},
	{::hx::fsObject /*  ::objects::ObjectProperties */ ,(void *) &ObjectLibrary_obj::defaultProps,HX_("defaultProps",ef,22,eb,7d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &ObjectLibrary_obj::playerChars,HX_("playerChars",bc,41,92,4c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &ObjectLibrary_obj::hexTransforms,HX_("hexTransforms",42,18,e1,40)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &ObjectLibrary_obj::playerClassAbbr,HX_("playerClassAbbr",a8,85,02,bf)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ObjectLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::propsLibrary,"propsLibrary");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::xmlLibrary,"xmlLibrary");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::idToType,"idToType");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::typeToDisplayId,"typeToDisplayId");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::typeToTextureData,"typeToTextureData");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::typeToTopTextureData,"typeToTopTextureData");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::typeToAnimationsData,"typeToAnimationsData");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::defaultProps,"defaultProps");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::playerChars,"playerChars");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::hexTransforms,"hexTransforms");
	HX_MARK_MEMBER_NAME(ObjectLibrary_obj::playerClassAbbr,"playerClassAbbr");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ObjectLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::propsLibrary,"propsLibrary");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::xmlLibrary,"xmlLibrary");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::idToType,"idToType");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::typeToDisplayId,"typeToDisplayId");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::typeToTextureData,"typeToTextureData");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::typeToTopTextureData,"typeToTopTextureData");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::typeToAnimationsData,"typeToAnimationsData");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::defaultProps,"defaultProps");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::playerChars,"playerChars");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::hexTransforms,"hexTransforms");
	HX_VISIT_MEMBER_NAME(ObjectLibrary_obj::playerClassAbbr,"playerClassAbbr");
};

#endif

::hx::Class ObjectLibrary_obj::__mClass;

static ::String ObjectLibrary_obj_sStaticFields[] = {
	HX_("propsLibrary",6b,35,1e,8f),
	HX_("xmlLibrary",e4,59,bb,21),
	HX_("idToType",10,04,6a,6b),
	HX_("typeToDisplayId",28,fd,a0,07),
	HX_("typeToTextureData",d0,03,f5,ba),
	HX_("typeToTopTextureData",c5,f1,c5,33),
	HX_("typeToAnimationsData",6e,38,38,ff),
	HX_("defaultProps",ef,22,eb,7d),
	HX_("playerChars",bc,41,92,4c),
	HX_("hexTransforms",42,18,e1,40),
	HX_("playerClassAbbr",a8,85,02,bf),
	HX_("parseFromXML",9a,76,e0,b1),
	HX_("getIdFromType",75,08,d1,25),
	HX_("getPropsFromId",7f,76,54,9f),
	HX_("getObjectFromType",59,02,05,17),
	HX_("getTextureFromType",49,b9,b9,c4),
	HX_("getRedrawnTextureFromType",de,a4,2c,46),
	HX_("getSizeFromType",db,9c,64,e8),
	HX_("getSlotTypeFromType",f2,51,9a,6d),
	HX_("getMatchingSlotIndex",41,ae,d3,78),
	HX_("isUsableByPlayer",3a,35,19,03),
	HX_("isUntradable",de,17,66,64),
	HX_("slotsMatching",92,76,c9,73),
	HX_("genericMatch",ae,53,6d,d7),
	::String(null())
};

void ObjectLibrary_obj::__register()
{
	ObjectLibrary_obj _hx_dummy;
	ObjectLibrary_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.ObjectLibrary",c2,b4,1b,59);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ObjectLibrary_obj::__GetStatic;
	__mClass->mSetStaticField = &ObjectLibrary_obj::__SetStatic;
	__mClass->mMarkFunc = ObjectLibrary_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ObjectLibrary_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ObjectLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ObjectLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectLibrary_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ObjectLibrary_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_16_boot)
HXDLIN(  16)		propsLibrary =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_17_boot)
HXDLIN(  17)		xmlLibrary =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_18_boot)
HXDLIN(  18)		idToType =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_19_boot)
HXDLIN(  19)		typeToDisplayId =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_20_boot)
HXDLIN(  20)		typeToTextureData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_21_boot)
HXDLIN(  21)		typeToTopTextureData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_22_boot)
HXDLIN(  22)		typeToAnimationsData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_23_boot)
HXDLIN(  23)		defaultProps =  ::objects::ObjectProperties_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_24_boot)
HXDLIN(  24)		playerChars = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_5e0afaacd97120f5_25_boot)
HXDLIN(  25)		hexTransforms = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5e0afaacd97120f5_26_boot)
HXDLIN(  26)		playerClassAbbr =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace objects
