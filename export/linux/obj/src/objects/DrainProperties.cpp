// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_objects_DrainProperties
#include <objects/DrainProperties.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aef7cd86ff474e4a_159_new,"objects.DrainProperties","new",0x71ce5b83,"objects.DrainProperties.new","objects/ObjectProperties.hx",159,0xfce94251)
namespace objects{

void DrainProperties_obj::__construct( ::Xml drainXML){
            	HX_STACKFRAME(&_hx_pos_aef7cd86ff474e4a_159_new)
HXLINE( 161)		this->drainPerSec = 0;
HXLINE( 160)		this->drainStat = 0;
HXLINE( 164)		this->drainStat = ( (int)(::Std_obj::parseInt(drainXML->get(HX_("stat",d4,e3,5b,4c)))) );
HXLINE( 165)		bool _hx_tmp;
HXDLIN( 165)		if ((drainXML->nodeType != ::Xml_obj::Document)) {
HXLINE( 165)			_hx_tmp = (drainXML->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 165)			_hx_tmp = false;
            		}
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 165)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(drainXML->nodeType)));
            		}
HXDLIN( 165)		 ::Xml _this = drainXML->children->__get(0).StaticCast<  ::Xml >();
HXDLIN( 165)		bool _hx_tmp1;
HXDLIN( 165)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE( 165)			_hx_tmp1 = (_this->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 165)			_hx_tmp1 = true;
            		}
HXDLIN( 165)		if (_hx_tmp1) {
HXLINE( 165)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN( 165)		this->drainPerSec = ( (int)(::Std_obj::parseInt(_this->nodeValue)) );
            	}

Dynamic DrainProperties_obj::__CreateEmpty() { return new DrainProperties_obj; }

void *DrainProperties_obj::_hx_vtable = 0;

Dynamic DrainProperties_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DrainProperties_obj > _hx_result = new DrainProperties_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool DrainProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2481ea57;
}


::hx::ObjectPtr< DrainProperties_obj > DrainProperties_obj::__new( ::Xml drainXML) {
	::hx::ObjectPtr< DrainProperties_obj > __this = new DrainProperties_obj();
	__this->__construct(drainXML);
	return __this;
}

::hx::ObjectPtr< DrainProperties_obj > DrainProperties_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml drainXML) {
	DrainProperties_obj *__this = (DrainProperties_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DrainProperties_obj), false, "objects.DrainProperties"));
	*(void **)__this = DrainProperties_obj::_hx_vtable;
	__this->__construct(drainXML);
	return __this;
}

DrainProperties_obj::DrainProperties_obj()
{
}

::hx::Val DrainProperties_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"drainStat") ) { return ::hx::Val( drainStat ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drainPerSec") ) { return ::hx::Val( drainPerSec ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DrainProperties_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"drainStat") ) { drainStat=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drainPerSec") ) { drainPerSec=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DrainProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("drainStat",ac,97,27,29));
	outFields->push(HX_("drainPerSec",8c,00,0d,a9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DrainProperties_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(DrainProperties_obj,drainStat),HX_("drainStat",ac,97,27,29)},
	{::hx::fsInt,(int)offsetof(DrainProperties_obj,drainPerSec),HX_("drainPerSec",8c,00,0d,a9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DrainProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String DrainProperties_obj_sMemberFields[] = {
	HX_("drainStat",ac,97,27,29),
	HX_("drainPerSec",8c,00,0d,a9),
	::String(null()) };

::hx::Class DrainProperties_obj::__mClass;

void DrainProperties_obj::__register()
{
	DrainProperties_obj _hx_dummy;
	DrainProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.DrainProperties",11,de,fb,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DrainProperties_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DrainProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrainProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrainProperties_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
