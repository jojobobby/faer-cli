// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_map_CharacterStatusText
#include <map/CharacterStatusText.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09092a55285cfc12_14_new,"map.CharacterStatusText","new",0x9cbe3f08,"map.CharacterStatusText.new","map/CharacterStatusText.hx",14,0xdde34229)
namespace map{

void CharacterStatusText_obj::__construct( ::objects::GameObject go,::String text,int color,int lifetime){
            	HX_GC_STACKFRAME(&_hx_pos_09092a55285cfc12_14_new)
HXLINE(  21)		this->startTime = 0;
HXLINE(  20)		this->disposed = false;
HXLINE(  19)		this->lifetime = 0;
HXLINE(  18)		this->color = 0;
HXLINE(  27)		this->go = go;
HXLINE(  28)		this->color = color;
HXLINE(  29)		this->lifetime = lifetime;
HXLINE(  30)		this->startTime = ::lime::_hx_system::System_obj::getTimer();
HXLINE(  31)		this->disposed = false;
HXLINE(  32)		 ::ui::SimpleText t =  ::ui::SimpleText_obj::__alloc( HX_CTX ,22,color,null(),null(),null(),null());
HXLINE(  33)		t->setBold(true);
HXLINE(  34)		t->set_text(text);
HXLINE(  35)		t->updateMetrics();
HXLINE(  36)		t->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,8,8,2,1,null(),null())));
HXLINE(  37)		this->xOffset = ( (float)((((::Math_obj::random() * ( (Float)(5) )) * ( (Float)(2) )) - ( (Float)(5) ))) );
HXLINE(  38)		this->yOffset = ( (float)((::Math_obj::random() * ( (Float)(5) ))) );
HXLINE(  39)		this->textTex =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((t->get_width() + 20)),64,true,0);
HXLINE(  40)		this->textTex->draw(t, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,12,0),null(),null(),null(),null());
            	}

Dynamic CharacterStatusText_obj::__CreateEmpty() { return new CharacterStatusText_obj; }

void *CharacterStatusText_obj::_hx_vtable = 0;

Dynamic CharacterStatusText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterStatusText_obj > _hx_result = new CharacterStatusText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CharacterStatusText_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x09053330;
}


::hx::ObjectPtr< CharacterStatusText_obj > CharacterStatusText_obj::__new( ::objects::GameObject go,::String text,int color,int lifetime) {
	::hx::ObjectPtr< CharacterStatusText_obj > __this = new CharacterStatusText_obj();
	__this->__construct(go,text,color,lifetime);
	return __this;
}

::hx::ObjectPtr< CharacterStatusText_obj > CharacterStatusText_obj::__alloc(::hx::Ctx *_hx_ctx, ::objects::GameObject go,::String text,int color,int lifetime) {
	CharacterStatusText_obj *__this = (CharacterStatusText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterStatusText_obj), true, "map.CharacterStatusText"));
	*(void **)__this = CharacterStatusText_obj::_hx_vtable;
	__this->__construct(go,text,color,lifetime);
	return __this;
}

CharacterStatusText_obj::CharacterStatusText_obj()
{
}

void CharacterStatusText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterStatusText);
	HX_MARK_MEMBER_NAME(go,"go");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(lifetime,"lifetime");
	HX_MARK_MEMBER_NAME(disposed,"disposed");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(textTex,"textTex");
	HX_MARK_MEMBER_NAME(xOffset,"xOffset");
	HX_MARK_MEMBER_NAME(yOffset,"yOffset");
	HX_MARK_END_CLASS();
}

void CharacterStatusText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(go,"go");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(lifetime,"lifetime");
	HX_VISIT_MEMBER_NAME(disposed,"disposed");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(textTex,"textTex");
	HX_VISIT_MEMBER_NAME(xOffset,"xOffset");
	HX_VISIT_MEMBER_NAME(yOffset,"yOffset");
}

::hx::Val CharacterStatusText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"go") ) { return ::hx::Val( go ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textTex") ) { return ::hx::Val( textTex ); }
		if (HX_FIELD_EQ(inName,"xOffset") ) { return ::hx::Val( xOffset ); }
		if (HX_FIELD_EQ(inName,"yOffset") ) { return ::hx::Val( yOffset ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { return ::hx::Val( lifetime ); }
		if (HX_FIELD_EQ(inName,"disposed") ) { return ::hx::Val( disposed ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { return ::hx::Val( startTime ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CharacterStatusText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"go") ) { go=inValue.Cast<  ::objects::GameObject >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textTex") ) { textTex=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xOffset") ) { xOffset=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yOffset") ) { yOffset=inValue.Cast< float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { lifetime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disposed") ) { disposed=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharacterStatusText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("go",28,5a,00,00));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("lifetime",09,0b,72,6c));
	outFields->push(HX_("disposed",e5,0a,a4,27));
	outFields->push(HX_("startTime",8f,45,f0,05));
	outFields->push(HX_("textTex",3a,b3,c7,9e));
	outFields->push(HX_("xOffset",2b,b6,e3,12));
	outFields->push(HX_("yOffset",ec,2c,79,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterStatusText_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::GameObject */ ,(int)offsetof(CharacterStatusText_obj,go),HX_("go",28,5a,00,00)},
	{::hx::fsInt,(int)offsetof(CharacterStatusText_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsInt,(int)offsetof(CharacterStatusText_obj,lifetime),HX_("lifetime",09,0b,72,6c)},
	{::hx::fsBool,(int)offsetof(CharacterStatusText_obj,disposed),HX_("disposed",e5,0a,a4,27)},
	{::hx::fsInt,(int)offsetof(CharacterStatusText_obj,startTime),HX_("startTime",8f,45,f0,05)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(CharacterStatusText_obj,textTex),HX_("textTex",3a,b3,c7,9e)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(CharacterStatusText_obj,xOffset),HX_("xOffset",2b,b6,e3,12)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(CharacterStatusText_obj,yOffset),HX_("yOffset",ec,2c,79,3c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CharacterStatusText_obj_sStaticStorageInfo = 0;
#endif

static ::String CharacterStatusText_obj_sMemberFields[] = {
	HX_("go",28,5a,00,00),
	HX_("color",63,71,5c,4a),
	HX_("lifetime",09,0b,72,6c),
	HX_("disposed",e5,0a,a4,27),
	HX_("startTime",8f,45,f0,05),
	HX_("textTex",3a,b3,c7,9e),
	HX_("xOffset",2b,b6,e3,12),
	HX_("yOffset",ec,2c,79,3c),
	::String(null()) };

::hx::Class CharacterStatusText_obj::__mClass;

void CharacterStatusText_obj::__register()
{
	CharacterStatusText_obj _hx_dummy;
	CharacterStatusText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.CharacterStatusText",16,5b,68,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterStatusText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterStatusText_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterStatusText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterStatusText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace map
