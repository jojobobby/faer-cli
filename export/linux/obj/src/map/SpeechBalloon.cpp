// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_map_SpeechBalloon
#include <map/SpeechBalloon.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8b3bdda6f15d8cb3_12_new,"map.SpeechBalloon","new",0x67b15dad,"map.SpeechBalloon.new","map/SpeechBalloon.hx",12,0x37a68864)
namespace map{

void SpeechBalloon_obj::__construct( ::objects::GameObject go,::String text,int sbType,int lifetime){
            	HX_GC_STACKFRAME(&_hx_pos_8b3bdda6f15d8cb3_12_new)
HXLINE(  26)		this->startTime = 0;
HXLINE(  25)		this->disposed = false;
HXLINE(  24)		this->numLines = 0;
HXLINE(  21)		this->lifetime = 0;
HXLINE(  30)		this->go = go;
HXLINE(  31)		this->startTime = ::lime::_hx_system::System_obj::getTimer();
HXLINE(  32)		this->lifetime = (lifetime * 1000);
HXLINE(  33)		this->disposed = false;
HXLINE(  34)		this->sbType = sbType;
HXLINE(  35)		int color = 0;
HXLINE(  36)		switch((int)(sbType)){
            			case (int)0: {
HXLINE(  38)				color = 1381653;
            			}
            			break;
            			case (int)1: {
HXLINE(  40)				color = 10854;
            			}
            			break;
            			case (int)2: {
HXLINE(  42)				color = 26126;
            			}
            			break;
            			case (int)3: {
HXLINE(  44)				color = 6689024;
            			}
            			break;
            			case (int)4: {
HXLINE(  46)				color = 1769574;
            			}
            			break;
            			case (int)5: {
HXLINE(  48)				color = 6698250;
            			}
            			break;
            		}
HXLINE(  50)		 ::ui::SimpleText sText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,color,false,110,50,null());
HXLINE(  51)		sText->setBold(true);
HXLINE(  52)		sText->setItalic(true);
HXLINE(  53)		sText->set_text(text);
HXLINE(  54)		sText->set_wordWrap(true);
HXLINE(  55)		sText->setAlignment(0);
HXLINE(  56)		sText->updateMetrics();
HXLINE(  58)		this->numLines = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(sText->get_numLines()) ),( (Float)(3) )));
HXLINE(  59)		this->textTex =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((sText->get_width() + 20)),64,true,0);
HXLINE(  60)		this->textTex->draw(sText, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,12,0),null(),null(),null(),null());
HXLINE(  62)		this->startTime = ::lime::_hx_system::System_obj::getTimer();
            	}

Dynamic SpeechBalloon_obj::__CreateEmpty() { return new SpeechBalloon_obj; }

void *SpeechBalloon_obj::_hx_vtable = 0;

Dynamic SpeechBalloon_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SpeechBalloon_obj > _hx_result = new SpeechBalloon_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SpeechBalloon_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11496bd5;
}


::hx::ObjectPtr< SpeechBalloon_obj > SpeechBalloon_obj::__new( ::objects::GameObject go,::String text,int sbType,int lifetime) {
	::hx::ObjectPtr< SpeechBalloon_obj > __this = new SpeechBalloon_obj();
	__this->__construct(go,text,sbType,lifetime);
	return __this;
}

::hx::ObjectPtr< SpeechBalloon_obj > SpeechBalloon_obj::__alloc(::hx::Ctx *_hx_ctx, ::objects::GameObject go,::String text,int sbType,int lifetime) {
	SpeechBalloon_obj *__this = (SpeechBalloon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SpeechBalloon_obj), true, "map.SpeechBalloon"));
	*(void **)__this = SpeechBalloon_obj::_hx_vtable;
	__this->__construct(go,text,sbType,lifetime);
	return __this;
}

SpeechBalloon_obj::SpeechBalloon_obj()
{
}

void SpeechBalloon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpeechBalloon);
	HX_MARK_MEMBER_NAME(go,"go");
	HX_MARK_MEMBER_NAME(lifetime,"lifetime");
	HX_MARK_MEMBER_NAME(textTex,"textTex");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(disposed,"disposed");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(sbType,"sbType");
	HX_MARK_END_CLASS();
}

void SpeechBalloon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(go,"go");
	HX_VISIT_MEMBER_NAME(lifetime,"lifetime");
	HX_VISIT_MEMBER_NAME(textTex,"textTex");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(disposed,"disposed");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(sbType,"sbType");
}

::hx::Val SpeechBalloon_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"go") ) { return ::hx::Val( go ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sbType") ) { return ::hx::Val( sbType ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textTex") ) { return ::hx::Val( textTex ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { return ::hx::Val( lifetime ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return ::hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"disposed") ) { return ::hx::Val( disposed ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { return ::hx::Val( startTime ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SpeechBalloon_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"go") ) { go=inValue.Cast<  ::objects::GameObject >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sbType") ) { sbType=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textTex") ) { textTex=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { lifetime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disposed") ) { disposed=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpeechBalloon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("go",28,5a,00,00));
	outFields->push(HX_("lifetime",09,0b,72,6c));
	outFields->push(HX_("textTex",3a,b3,c7,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("disposed",e5,0a,a4,27));
	outFields->push(HX_("startTime",8f,45,f0,05));
	outFields->push(HX_("sbType",e9,76,31,a0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SpeechBalloon_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::GameObject */ ,(int)offsetof(SpeechBalloon_obj,go),HX_("go",28,5a,00,00)},
	{::hx::fsInt,(int)offsetof(SpeechBalloon_obj,lifetime),HX_("lifetime",09,0b,72,6c)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(SpeechBalloon_obj,textTex),HX_("textTex",3a,b3,c7,9e)},
	{::hx::fsInt,(int)offsetof(SpeechBalloon_obj,numLines),HX_("numLines",d9,f1,11,32)},
	{::hx::fsBool,(int)offsetof(SpeechBalloon_obj,disposed),HX_("disposed",e5,0a,a4,27)},
	{::hx::fsInt,(int)offsetof(SpeechBalloon_obj,startTime),HX_("startTime",8f,45,f0,05)},
	{::hx::fsInt,(int)offsetof(SpeechBalloon_obj,sbType),HX_("sbType",e9,76,31,a0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SpeechBalloon_obj_sStaticStorageInfo = 0;
#endif

static ::String SpeechBalloon_obj_sMemberFields[] = {
	HX_("go",28,5a,00,00),
	HX_("lifetime",09,0b,72,6c),
	HX_("textTex",3a,b3,c7,9e),
	HX_("numLines",d9,f1,11,32),
	HX_("disposed",e5,0a,a4,27),
	HX_("startTime",8f,45,f0,05),
	HX_("sbType",e9,76,31,a0),
	::String(null()) };

::hx::Class SpeechBalloon_obj::__mClass;

void SpeechBalloon_obj::__register()
{
	SpeechBalloon_obj _hx_dummy;
	SpeechBalloon_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.SpeechBalloon",3b,03,94,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SpeechBalloon_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SpeechBalloon_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpeechBalloon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpeechBalloon_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace map
