// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_engine_GLTextureData
#include <engine/GLTextureData.h>
#endif
#ifndef INCLUDED_engine_TextureFactory
#include <engine/TextureFactory.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_exceptions_ArgumentException
#include <haxe/exceptions/ArgumentException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_PosException
#include <haxe/exceptions/PosException.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_map_Camera
#include <map/Camera.h>
#endif
#ifndef INCLUDED_map_CharacterStatusText
#include <map/CharacterStatusText.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_map_GroundProperties
#include <map/GroundProperties.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_map_Quest
#include <map/Quest.h>
#endif
#ifndef INCLUDED_map_RenderDataSingle
#include <map/RenderDataSingle.h>
#endif
#ifndef INCLUDED_map_SpeechBalloon
#include <map/SpeechBalloon.h>
#endif
#ifndef INCLUDED_map_Square
#include <map/Square.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectProperties
#include <objects/ObjectProperties.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_objects_Projectile
#include <objects/Projectile.h>
#endif
#ifndef INCLUDED_objects_TextureData
#include <objects/TextureData.h>
#endif
#ifndef INCLUDED_objects_animation_Animations
#include <objects/animation/Animations.h>
#endif
#ifndef INCLUDED_objects_animation_AnimationsData
#include <objects/animation/AnimationsData.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_ConditionEffect
#include <util/ConditionEffect.h>
#endif
#ifndef INCLUDED_util_KeyCodeUtil
#include <util/KeyCodeUtil.h>
#endif
#ifndef INCLUDED_util_MathUtil
#include <util/MathUtil.h>
#endif
#ifndef INCLUDED_util_Rect
#include <util/Rect.h>
#endif
#ifndef INCLUDED_util_RenderUtils
#include <util/RenderUtils.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_680c17cc7afbb141_58_new,"map.Map","new",0x31c8d99c,"map.Map.new","map/Map.hx",58,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_163_addSpeechBalloon,"map.Map","addSpeechBalloon",0x97809310,"map.Map.addSpeechBalloon","map/Map.hx",163,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_167_addStatusText,"map.Map","addStatusText",0x973c16bc,"map.Map.addStatusText","map/Map.hx",167,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_170_setProps,"map.Map","setProps",0x70d84db2,"map.Map.setProps","map/Map.hx",170,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_180_initialize,"map.Map","initialize",0x31bc0794,"map.Map.initialize","map/Map.hx",180,0x6334c415)
static const Float _hx_array_data_18c51baa_5[] = {
	0.5,-0.5,(Float)0,(Float)0,-0.5,-0.5,(Float)1,(Float)0,0.5,0.5,(Float)0,(Float)1,-0.5,0.5,(Float)1,(Float)1,
};
static const int _hx_array_data_18c51baa_6[] = {
	(int)0,(int)1,(int)2,(int)2,(int)1,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_299_dispose,"map.Map","dispose",0x7284d7db,"map.Map.dispose","map/Map.hx",299,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_312_update,"map.Map","update",0x0744ea4d,"map.Map.update","map/Map.hx",312,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_403_setGroundTile,"map.Map","setGroundTile",0xffe313d3,"map.Map.setGroundTile","map/Map.hx",403,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_427_addGameObject,"map.Map","addGameObject",0x3d9a1e0e,"map.Map.addGameObject","map/Map.hx",427,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_438_removeObj,"map.Map","removeObj",0x02594c4f,"map.Map.removeObj","map/Map.hx",438,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_452_getGameObject,"map.Map","getGameObject",0x2fc330c3,"map.Map.getGameObject","map/Map.hx",452,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_464_removeGameObject,"map.Map","removeGameObject",0x135766f9,"map.Map.removeGameObject","map/Map.hx",464,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_479_lookupSquare,"map.Map","lookupSquare",0x32f21dfb,"map.Map.lookupSquare","map/Map.hx",479,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_2234_draw,"map.Map","draw",0x57633748,"map.Map.draw","map/Map.hx",2234,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_2117_draw,"map.Map","draw",0x57633748,"map.Map.draw","map/Map.hx",2117,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_63_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",63,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_64_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",64,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_65_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",65,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_66_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",66,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_67_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",67,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_68_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",68,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_69_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",69,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_70_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",70,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_71_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",71,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_72_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",72,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_73_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",73,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_74_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",74,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_75_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",75,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_76_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",76,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_77_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",77,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_78_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",78,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_79_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",79,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_80_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",80,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_81_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",81,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_82_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",82,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_83_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",83,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_84_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",84,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_85_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",85,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_86_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",86,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_87_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",87,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_88_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",88,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_89_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",89,0x6334c415)
HX_LOCAL_STACK_FRAME(_hx_pos_680c17cc7afbb141_90_boot,"map.Map","boot",0x560e8f76,"map.Map.boot","map/Map.hx",90,0x6334c415)
namespace map{

void Map_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_680c17cc7afbb141_58_new)
HXLINE( 136)		this->iIdx = 0;
HXLINE( 135)		this->vIdx = 0;
HXLINE( 134)		this->i = 0;
HXLINE( 132)		this->objIBOLen = 0;
HXLINE( 130)		this->objVBOLen = 0;
HXLINE( 127)		this->groundIBOLen = 0;
HXLINE( 125)		this->groundVBOLen = 0;
HXLINE( 111)		this->visSquareLen = ( (unsigned short)(0) );
HXLINE( 109)		this->lastBufferUpdate = -1;
HXLINE( 107)		this->lastTileUpdate = -1;
HXLINE( 105)		this->lastHeight = ( (short)(-1) );
HXLINE( 104)		this->lastWidth = ( (short)(-1) );
HXLINE( 103)		this->quest = null();
HXLINE( 102)		this->player = null();
HXLINE(  99)		this->gameObjectsLen = 0;
HXLINE(  97)		this->showDisplays = false;
HXLINE(  96)		this->allowPlayerTeleport = false;
HXLINE(  95)		this->back = 0;
HXLINE(  94)		this->mapName = HX_("",00,00,00,00);
HXLINE(  93)		this->mapHeight = ( (unsigned short)(0) );
HXLINE(  92)		this->mapWidth = ( (unsigned short)(0) );
HXLINE( 154)		this->gameObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 155)		this->rdSingle = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 156)		this->quest =  ::map::Quest_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 157)		this->visSquares = ::Array_obj< ::Dynamic>::__new(729);
HXLINE( 158)		this->speechBalloons =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 159)		this->statusTexts = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic Map_obj::__CreateEmpty() { return new Map_obj; }

void *Map_obj::_hx_vtable = 0;

Dynamic Map_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Map_obj > _hx_result = new Map_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Map_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x22569fc4;
}

void Map_obj::addSpeechBalloon( ::map::SpeechBalloon sb){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_163_addSpeechBalloon)
HXDLIN( 163)		this->speechBalloons->set(sb->go->objectId,sb);
            	}


void Map_obj::addStatusText( ::map::CharacterStatusText text){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_167_addStatusText)
HXDLIN( 167)		this->statusTexts->push(text);
            	}


void Map_obj::setProps(int width,int height,::String name,int back,bool allowPlayerTeleport,bool showDisplays){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_170_setProps)
HXLINE( 171)		this->mapWidth = ( (unsigned short)(width) );
HXLINE( 172)		this->mapHeight = ( (unsigned short)(height) );
HXLINE( 173)		this->squares = ::Array_obj< ::Dynamic>::__new(( (int)((this->mapWidth * this->mapHeight)) ));
HXLINE( 174)		this->mapName = name;
HXLINE( 175)		this->back = back;
HXLINE( 176)		this->allowPlayerTeleport = allowPlayerTeleport;
HXLINE( 177)		this->showDisplays = showDisplays;
            	}


void Map_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_680c17cc7afbb141_180_initialize)
HXLINE( 181)		this->normalBalloonTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("speechBalloons",26,43,61,f7),0);
HXLINE( 182)		this->tellBalloonTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("speechBalloons",26,43,61,f7),1);
HXLINE( 183)		this->guildBalloonTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("speechBalloons",26,43,61,f7),2);
HXLINE( 184)		this->enemyBalloonTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("speechBalloons",26,43,61,f7),3);
HXLINE( 185)		this->partyBalloonTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("speechBalloons",26,43,61,f7),4);
HXLINE( 186)		this->adminBalloonTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("speechBalloons",26,43,61,f7),5);
HXLINE( 188)		 ::util::Rect leftMaskRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("ground",87,22,28,1c),107);
HXLINE( 189)		::map::Map_obj::leftMaskU = ( (float)(((leftMaskRect->x + 2) / ( (Float)(1024) ))) );
HXLINE( 190)		::map::Map_obj::leftMaskV = ( (float)(((leftMaskRect->y + 2) / ( (Float)(1024) ))) );
HXLINE( 192)		 ::util::Rect topMaskRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("ground",87,22,28,1c),108);
HXLINE( 193)		::map::Map_obj::topMaskU = ( (float)(((topMaskRect->x + 2) / ( (Float)(1024) ))) );
HXLINE( 194)		::map::Map_obj::topMaskV = ( (float)(((topMaskRect->y + 2) / ( (Float)(1024) ))) );
HXLINE( 196)		 ::util::Rect rightMaskRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("ground",87,22,28,1c),109);
HXLINE( 197)		::map::Map_obj::rightMaskU = ( (float)(((rightMaskRect->x + 2) / ( (Float)(1024) ))) );
HXLINE( 198)		::map::Map_obj::rightMaskV = ( (float)(((rightMaskRect->y + 2) / ( (Float)(1024) ))) );
HXLINE( 200)		 ::util::Rect bottomMaskRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("ground",87,22,28,1c),110);
HXLINE( 201)		::map::Map_obj::bottomMaskU = ( (float)(((bottomMaskRect->x + 2) / ( (Float)(1024) ))) );
HXLINE( 202)		::map::Map_obj::bottomMaskV = ( (float)(((bottomMaskRect->y + 2) / ( (Float)(1024) ))) );
HXLINE( 204)		 ::util::Rect hpBarRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("bars",40,e7,10,41),0);
HXLINE( 205)		::map::Map_obj::hpBarU = ( (float)((hpBarRect->x / ( (Float)(1024) ))) );
HXLINE( 206)		::map::Map_obj::hpBarV = ( (float)((hpBarRect->y / ( (Float)(1024) ))) );
HXLINE( 207)		::map::Map_obj::hpBarW = ( (float)(hpBarRect->width) );
HXLINE( 208)		::map::Map_obj::hpBarH = ( (float)(hpBarRect->height) );
HXLINE( 210)		 ::util::Rect mpBarRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("bars",40,e7,10,41),1);
HXLINE( 211)		::map::Map_obj::mpBarU = ( (float)((mpBarRect->x / ( (Float)(1024) ))) );
HXLINE( 212)		::map::Map_obj::mpBarV = ( (float)((mpBarRect->y / ( (Float)(1024) ))) );
HXLINE( 213)		::map::Map_obj::mpBarW = ( (float)(mpBarRect->width) );
HXLINE( 214)		::map::Map_obj::mpBarH = ( (float)(mpBarRect->height) );
HXLINE( 216)		 ::util::Rect oxygenBarRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("bars",40,e7,10,41),2);
HXLINE( 217)		::map::Map_obj::oxygenBarU = ( (float)((oxygenBarRect->x / ( (Float)(1024) ))) );
HXLINE( 218)		::map::Map_obj::oxygenBarV = ( (float)((oxygenBarRect->y / ( (Float)(1024) ))) );
HXLINE( 219)		::map::Map_obj::oxygenBarW = ( (float)(oxygenBarRect->width) );
HXLINE( 220)		::map::Map_obj::oxygenBarH = ( (float)(oxygenBarRect->height) );
HXLINE( 222)		 ::util::Rect shieldBarRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("bars",40,e7,10,41),3);
HXLINE( 223)		::map::Map_obj::shieldBarU = ( (float)((shieldBarRect->x / ( (Float)(1024) ))) );
HXLINE( 224)		::map::Map_obj::shieldBarV = ( (float)((shieldBarRect->y / ( (Float)(1024) ))) );
HXLINE( 225)		::map::Map_obj::shieldBarW = ( (float)(hpBarRect->width) );
HXLINE( 226)		::map::Map_obj::shieldBarH = ( (float)(hpBarRect->height) );
HXLINE( 228)		 ::util::Rect emptyBarRect = ::util::AssetLibrary_obj::getRectFromSet(HX_("bars",40,e7,10,41),4);
HXLINE( 229)		::map::Map_obj::emptyBarU = ( (float)((emptyBarRect->x / ( (Float)(1024) ))) );
HXLINE( 230)		::map::Map_obj::emptyBarV = ( (float)((emptyBarRect->y / ( (Float)(1024) ))) );
HXLINE( 231)		::map::Map_obj::emptyBarW = ( (float)(hpBarRect->width) );
HXLINE( 232)		::map::Map_obj::emptyBarH = ( (float)(hpBarRect->height) );
HXLINE( 234)		::String vertSrc = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/base.vert",81,47,dc,af));
HXDLIN( 234)		::String fragSrc = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/base.frag",02,ac,52,a5));
HXDLIN( 234)		int id = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35633);
HXDLIN( 234)		 ::lime::graphics::opengl::GLObject vert;
HXDLIN( 234)		if ((id == 0)) {
HXLINE( 234)			vert = null();
            		}
            		else {
HXLINE( 234)			 ::lime::graphics::opengl::GLObject object =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id);
HXDLIN( 234)			object->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id,2,::hx::DynamicPtr(object))) );
HXDLIN( 234)			vert = object;
            		}
HXDLIN( 234)		 ::lime::graphics::opengl::GLObject vert1 = vert;
HXDLIN( 234)		{
HXLINE( 234)			int _hx_tmp;
HXDLIN( 234)			if (::hx::IsNull( vert1 )) {
HXLINE( 234)				_hx_tmp = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp = vert1->id;
            			}
HXDLIN( 234)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp,vertSrc);
            		}
HXDLIN( 234)		{
HXLINE( 234)			int _hx_tmp1;
HXDLIN( 234)			if (::hx::IsNull( vert1 )) {
HXLINE( 234)				_hx_tmp1 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp1 = vert1->id;
            			}
HXDLIN( 234)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp1);
            		}
HXDLIN( 234)		int _hx_tmp2;
HXDLIN( 234)		if (::hx::IsNull( vert1 )) {
HXLINE( 234)			_hx_tmp2 = 0;
            		}
            		else {
HXLINE( 234)			_hx_tmp2 = vert1->id;
            		}
HXDLIN( 234)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp2,35713) == 0)) {
HXLINE( 234)			int result;
HXDLIN( 234)			if (::hx::IsNull( vert1 )) {
HXLINE( 234)				result = 0;
            			}
            			else {
HXLINE( 234)				result = vert1->id;
            			}
HXDLIN( 234)			::String _hx_tmp3 = ((((HX_("Error compiling vertex shader:",e1,48,ce,b6) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result)) )) )) + HX_("\n",0a,00,00,00)) + vertSrc);
HXDLIN( 234)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp3,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),278,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 234)		int id1 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35632);
HXDLIN( 234)		 ::lime::graphics::opengl::GLObject frag;
HXDLIN( 234)		if ((id1 == 0)) {
HXLINE( 234)			frag = null();
            		}
            		else {
HXLINE( 234)			 ::lime::graphics::opengl::GLObject object1 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id1);
HXDLIN( 234)			object1->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id1,2,::hx::DynamicPtr(object1))) );
HXDLIN( 234)			frag = object1;
            		}
HXDLIN( 234)		 ::lime::graphics::opengl::GLObject frag1 = frag;
HXDLIN( 234)		{
HXLINE( 234)			int _hx_tmp4;
HXDLIN( 234)			if (::hx::IsNull( frag1 )) {
HXLINE( 234)				_hx_tmp4 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp4 = frag1->id;
            			}
HXDLIN( 234)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp4,fragSrc);
            		}
HXDLIN( 234)		{
HXLINE( 234)			int _hx_tmp5;
HXDLIN( 234)			if (::hx::IsNull( frag1 )) {
HXLINE( 234)				_hx_tmp5 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp5 = frag1->id;
            			}
HXDLIN( 234)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp5);
            		}
HXDLIN( 234)		int _hx_tmp6;
HXDLIN( 234)		if (::hx::IsNull( frag1 )) {
HXLINE( 234)			_hx_tmp6 = 0;
            		}
            		else {
HXLINE( 234)			_hx_tmp6 = frag1->id;
            		}
HXDLIN( 234)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp6,35713) == 0)) {
HXLINE( 234)			int result1;
HXDLIN( 234)			if (::hx::IsNull( frag1 )) {
HXLINE( 234)				result1 = 0;
            			}
            			else {
HXLINE( 234)				result1 = frag1->id;
            			}
HXDLIN( 234)			::String _hx_tmp7 = ((((HX_("Error compiling fragment shader:",4d,73,37,63) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result1)) )) )) + HX_("\n",0a,00,00,00)) + fragSrc);
HXDLIN( 234)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp7,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),285,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 234)		int id2 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_program();
HXDLIN( 234)		 ::lime::graphics::opengl::GLObject prog;
HXDLIN( 234)		if ((id2 == 0)) {
HXLINE( 234)			prog = null();
            		}
            		else {
HXLINE( 234)			 ::lime::graphics::opengl::GLObject object2 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id2);
HXDLIN( 234)			object2->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id2,1,::hx::DynamicPtr(object2))) );
HXDLIN( 234)			prog = object2;
            		}
HXDLIN( 234)		 ::lime::graphics::opengl::GLObject prog1 = prog;
HXDLIN( 234)		{
HXLINE( 234)			bool _hx_tmp8;
HXDLIN( 234)			if (::hx::IsNotNull( prog1 )) {
HXLINE( 234)				_hx_tmp8 = ::hx::IsNotNull( vert1 );
            			}
            			else {
HXLINE( 234)				_hx_tmp8 = false;
            			}
HXDLIN( 234)			if (_hx_tmp8) {
HXLINE( 234)				if (::hx::IsNull( prog1->refs )) {
HXLINE( 234)					prog1->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,vert1);
            				}
            				else {
HXLINE( 234)					if ((prog1->refs->indexOf(vert1,null()) == -1)) {
HXLINE( 234)						prog1->refs->push(vert1);
            					}
            				}
            			}
HXDLIN( 234)			int _hx_tmp9;
HXDLIN( 234)			if (::hx::IsNull( prog1 )) {
HXLINE( 234)				_hx_tmp9 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp9 = prog1->id;
            			}
HXDLIN( 234)			int _hx_tmp10;
HXDLIN( 234)			if (::hx::IsNull( vert1 )) {
HXLINE( 234)				_hx_tmp10 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp10 = vert1->id;
            			}
HXDLIN( 234)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp9,_hx_tmp10);
            		}
HXDLIN( 234)		{
HXLINE( 234)			bool _hx_tmp11;
HXDLIN( 234)			if (::hx::IsNotNull( prog1 )) {
HXLINE( 234)				_hx_tmp11 = ::hx::IsNotNull( frag1 );
            			}
            			else {
HXLINE( 234)				_hx_tmp11 = false;
            			}
HXDLIN( 234)			if (_hx_tmp11) {
HXLINE( 234)				if (::hx::IsNull( prog1->refs )) {
HXLINE( 234)					prog1->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,frag1);
            				}
            				else {
HXLINE( 234)					if ((prog1->refs->indexOf(frag1,null()) == -1)) {
HXLINE( 234)						prog1->refs->push(frag1);
            					}
            				}
            			}
HXDLIN( 234)			int _hx_tmp12;
HXDLIN( 234)			if (::hx::IsNull( prog1 )) {
HXLINE( 234)				_hx_tmp12 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp12 = prog1->id;
            			}
HXDLIN( 234)			int _hx_tmp13;
HXDLIN( 234)			if (::hx::IsNull( frag1 )) {
HXLINE( 234)				_hx_tmp13 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp13 = frag1->id;
            			}
HXDLIN( 234)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp12,_hx_tmp13);
            		}
HXDLIN( 234)		{
HXLINE( 234)			int _hx_tmp14;
HXDLIN( 234)			if (::hx::IsNull( prog1 )) {
HXLINE( 234)				_hx_tmp14 = 0;
            			}
            			else {
HXLINE( 234)				_hx_tmp14 = prog1->id;
            			}
HXDLIN( 234)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_link_program(_hx_tmp14);
            		}
HXDLIN( 234)		int _hx_tmp15;
HXDLIN( 234)		if (::hx::IsNull( prog1 )) {
HXLINE( 234)			_hx_tmp15 = 0;
            		}
            		else {
HXLINE( 234)			_hx_tmp15 = prog1->id;
            		}
HXDLIN( 234)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_programi(_hx_tmp15,35714) == 0)) {
HXLINE( 234)			int result2;
HXDLIN( 234)			if (::hx::IsNull( prog1 )) {
HXLINE( 234)				result2 = 0;
            			}
            			else {
HXLINE( 234)				result2 = prog1->id;
            			}
HXDLIN( 234)			::String _hx_tmp16 = ((HX_("Unable to initialize the shader program",f0,86,8b,39) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_program_info_log(result2)) )) ));
HXDLIN( 234)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp16,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),293,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 234)		this->defaultProgram = prog1;
HXLINE( 235)		::String vertSrc1 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/base.vert",81,47,dc,af));
HXDLIN( 235)		::String fragSrc1 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/baseLowGlow.frag",3d,f4,a3,eb));
HXDLIN( 235)		int id3 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35633);
HXDLIN( 235)		 ::lime::graphics::opengl::GLObject vert2;
HXDLIN( 235)		if ((id3 == 0)) {
HXLINE( 235)			vert2 = null();
            		}
            		else {
HXLINE( 235)			 ::lime::graphics::opengl::GLObject object3 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id3);
HXDLIN( 235)			object3->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id3,2,::hx::DynamicPtr(object3))) );
HXDLIN( 235)			vert2 = object3;
            		}
HXDLIN( 235)		 ::lime::graphics::opengl::GLObject vert3 = vert2;
HXDLIN( 235)		{
HXLINE( 235)			int _hx_tmp17;
HXDLIN( 235)			if (::hx::IsNull( vert3 )) {
HXLINE( 235)				_hx_tmp17 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp17 = vert3->id;
            			}
HXDLIN( 235)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp17,vertSrc1);
            		}
HXDLIN( 235)		{
HXLINE( 235)			int _hx_tmp18;
HXDLIN( 235)			if (::hx::IsNull( vert3 )) {
HXLINE( 235)				_hx_tmp18 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp18 = vert3->id;
            			}
HXDLIN( 235)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp18);
            		}
HXDLIN( 235)		int _hx_tmp19;
HXDLIN( 235)		if (::hx::IsNull( vert3 )) {
HXLINE( 235)			_hx_tmp19 = 0;
            		}
            		else {
HXLINE( 235)			_hx_tmp19 = vert3->id;
            		}
HXDLIN( 235)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp19,35713) == 0)) {
HXLINE( 235)			int result3;
HXDLIN( 235)			if (::hx::IsNull( vert3 )) {
HXLINE( 235)				result3 = 0;
            			}
            			else {
HXLINE( 235)				result3 = vert3->id;
            			}
HXDLIN( 235)			::String _hx_tmp20 = ((((HX_("Error compiling vertex shader:",e1,48,ce,b6) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result3)) )) )) + HX_("\n",0a,00,00,00)) + vertSrc1);
HXDLIN( 235)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp20,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),278,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 235)		int id4 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35632);
HXDLIN( 235)		 ::lime::graphics::opengl::GLObject frag2;
HXDLIN( 235)		if ((id4 == 0)) {
HXLINE( 235)			frag2 = null();
            		}
            		else {
HXLINE( 235)			 ::lime::graphics::opengl::GLObject object4 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id4);
HXDLIN( 235)			object4->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id4,2,::hx::DynamicPtr(object4))) );
HXDLIN( 235)			frag2 = object4;
            		}
HXDLIN( 235)		 ::lime::graphics::opengl::GLObject frag3 = frag2;
HXDLIN( 235)		{
HXLINE( 235)			int _hx_tmp21;
HXDLIN( 235)			if (::hx::IsNull( frag3 )) {
HXLINE( 235)				_hx_tmp21 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp21 = frag3->id;
            			}
HXDLIN( 235)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp21,fragSrc1);
            		}
HXDLIN( 235)		{
HXLINE( 235)			int _hx_tmp22;
HXDLIN( 235)			if (::hx::IsNull( frag3 )) {
HXLINE( 235)				_hx_tmp22 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp22 = frag3->id;
            			}
HXDLIN( 235)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp22);
            		}
HXDLIN( 235)		int _hx_tmp23;
HXDLIN( 235)		if (::hx::IsNull( frag3 )) {
HXLINE( 235)			_hx_tmp23 = 0;
            		}
            		else {
HXLINE( 235)			_hx_tmp23 = frag3->id;
            		}
HXDLIN( 235)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp23,35713) == 0)) {
HXLINE( 235)			int result4;
HXDLIN( 235)			if (::hx::IsNull( frag3 )) {
HXLINE( 235)				result4 = 0;
            			}
            			else {
HXLINE( 235)				result4 = frag3->id;
            			}
HXDLIN( 235)			::String _hx_tmp24 = ((((HX_("Error compiling fragment shader:",4d,73,37,63) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result4)) )) )) + HX_("\n",0a,00,00,00)) + fragSrc1);
HXDLIN( 235)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp24,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),285,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 235)		int id5 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_program();
HXDLIN( 235)		 ::lime::graphics::opengl::GLObject prog2;
HXDLIN( 235)		if ((id5 == 0)) {
HXLINE( 235)			prog2 = null();
            		}
            		else {
HXLINE( 235)			 ::lime::graphics::opengl::GLObject object5 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id5);
HXDLIN( 235)			object5->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id5,1,::hx::DynamicPtr(object5))) );
HXDLIN( 235)			prog2 = object5;
            		}
HXDLIN( 235)		 ::lime::graphics::opengl::GLObject prog3 = prog2;
HXDLIN( 235)		{
HXLINE( 235)			bool _hx_tmp25;
HXDLIN( 235)			if (::hx::IsNotNull( prog3 )) {
HXLINE( 235)				_hx_tmp25 = ::hx::IsNotNull( vert3 );
            			}
            			else {
HXLINE( 235)				_hx_tmp25 = false;
            			}
HXDLIN( 235)			if (_hx_tmp25) {
HXLINE( 235)				if (::hx::IsNull( prog3->refs )) {
HXLINE( 235)					prog3->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,vert3);
            				}
            				else {
HXLINE( 235)					if ((prog3->refs->indexOf(vert3,null()) == -1)) {
HXLINE( 235)						prog3->refs->push(vert3);
            					}
            				}
            			}
HXDLIN( 235)			int _hx_tmp26;
HXDLIN( 235)			if (::hx::IsNull( prog3 )) {
HXLINE( 235)				_hx_tmp26 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp26 = prog3->id;
            			}
HXDLIN( 235)			int _hx_tmp27;
HXDLIN( 235)			if (::hx::IsNull( vert3 )) {
HXLINE( 235)				_hx_tmp27 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp27 = vert3->id;
            			}
HXDLIN( 235)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp26,_hx_tmp27);
            		}
HXDLIN( 235)		{
HXLINE( 235)			bool _hx_tmp28;
HXDLIN( 235)			if (::hx::IsNotNull( prog3 )) {
HXLINE( 235)				_hx_tmp28 = ::hx::IsNotNull( frag3 );
            			}
            			else {
HXLINE( 235)				_hx_tmp28 = false;
            			}
HXDLIN( 235)			if (_hx_tmp28) {
HXLINE( 235)				if (::hx::IsNull( prog3->refs )) {
HXLINE( 235)					prog3->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,frag3);
            				}
            				else {
HXLINE( 235)					if ((prog3->refs->indexOf(frag3,null()) == -1)) {
HXLINE( 235)						prog3->refs->push(frag3);
            					}
            				}
            			}
HXDLIN( 235)			int _hx_tmp29;
HXDLIN( 235)			if (::hx::IsNull( prog3 )) {
HXLINE( 235)				_hx_tmp29 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp29 = prog3->id;
            			}
HXDLIN( 235)			int _hx_tmp30;
HXDLIN( 235)			if (::hx::IsNull( frag3 )) {
HXLINE( 235)				_hx_tmp30 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp30 = frag3->id;
            			}
HXDLIN( 235)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp29,_hx_tmp30);
            		}
HXDLIN( 235)		{
HXLINE( 235)			int _hx_tmp31;
HXDLIN( 235)			if (::hx::IsNull( prog3 )) {
HXLINE( 235)				_hx_tmp31 = 0;
            			}
            			else {
HXLINE( 235)				_hx_tmp31 = prog3->id;
            			}
HXDLIN( 235)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_link_program(_hx_tmp31);
            		}
HXDLIN( 235)		int _hx_tmp32;
HXDLIN( 235)		if (::hx::IsNull( prog3 )) {
HXLINE( 235)			_hx_tmp32 = 0;
            		}
            		else {
HXLINE( 235)			_hx_tmp32 = prog3->id;
            		}
HXDLIN( 235)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_programi(_hx_tmp32,35714) == 0)) {
HXLINE( 235)			int result5;
HXDLIN( 235)			if (::hx::IsNull( prog3 )) {
HXLINE( 235)				result5 = 0;
            			}
            			else {
HXLINE( 235)				result5 = prog3->id;
            			}
HXDLIN( 235)			::String _hx_tmp33 = ((HX_("Unable to initialize the shader program",f0,86,8b,39) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_program_info_log(result5)) )) ));
HXDLIN( 235)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp33,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),293,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 235)		this->lowGlowProgram = prog3;
HXLINE( 236)		::String vertSrc2 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/base.vert",81,47,dc,af));
HXDLIN( 236)		::String fragSrc2 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/baseMedGlow.frag",c5,4b,2c,df));
HXDLIN( 236)		int id6 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35633);
HXDLIN( 236)		 ::lime::graphics::opengl::GLObject vert4;
HXDLIN( 236)		if ((id6 == 0)) {
HXLINE( 236)			vert4 = null();
            		}
            		else {
HXLINE( 236)			 ::lime::graphics::opengl::GLObject object6 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id6);
HXDLIN( 236)			object6->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id6,2,::hx::DynamicPtr(object6))) );
HXDLIN( 236)			vert4 = object6;
            		}
HXDLIN( 236)		 ::lime::graphics::opengl::GLObject vert5 = vert4;
HXDLIN( 236)		{
HXLINE( 236)			int _hx_tmp34;
HXDLIN( 236)			if (::hx::IsNull( vert5 )) {
HXLINE( 236)				_hx_tmp34 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp34 = vert5->id;
            			}
HXDLIN( 236)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp34,vertSrc2);
            		}
HXDLIN( 236)		{
HXLINE( 236)			int _hx_tmp35;
HXDLIN( 236)			if (::hx::IsNull( vert5 )) {
HXLINE( 236)				_hx_tmp35 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp35 = vert5->id;
            			}
HXDLIN( 236)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp35);
            		}
HXDLIN( 236)		int _hx_tmp36;
HXDLIN( 236)		if (::hx::IsNull( vert5 )) {
HXLINE( 236)			_hx_tmp36 = 0;
            		}
            		else {
HXLINE( 236)			_hx_tmp36 = vert5->id;
            		}
HXDLIN( 236)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp36,35713) == 0)) {
HXLINE( 236)			int result6;
HXDLIN( 236)			if (::hx::IsNull( vert5 )) {
HXLINE( 236)				result6 = 0;
            			}
            			else {
HXLINE( 236)				result6 = vert5->id;
            			}
HXDLIN( 236)			::String _hx_tmp37 = ((((HX_("Error compiling vertex shader:",e1,48,ce,b6) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result6)) )) )) + HX_("\n",0a,00,00,00)) + vertSrc2);
HXDLIN( 236)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp37,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),278,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 236)		int id7 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35632);
HXDLIN( 236)		 ::lime::graphics::opengl::GLObject frag4;
HXDLIN( 236)		if ((id7 == 0)) {
HXLINE( 236)			frag4 = null();
            		}
            		else {
HXLINE( 236)			 ::lime::graphics::opengl::GLObject object7 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id7);
HXDLIN( 236)			object7->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id7,2,::hx::DynamicPtr(object7))) );
HXDLIN( 236)			frag4 = object7;
            		}
HXDLIN( 236)		 ::lime::graphics::opengl::GLObject frag5 = frag4;
HXDLIN( 236)		{
HXLINE( 236)			int _hx_tmp38;
HXDLIN( 236)			if (::hx::IsNull( frag5 )) {
HXLINE( 236)				_hx_tmp38 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp38 = frag5->id;
            			}
HXDLIN( 236)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp38,fragSrc2);
            		}
HXDLIN( 236)		{
HXLINE( 236)			int _hx_tmp39;
HXDLIN( 236)			if (::hx::IsNull( frag5 )) {
HXLINE( 236)				_hx_tmp39 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp39 = frag5->id;
            			}
HXDLIN( 236)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp39);
            		}
HXDLIN( 236)		int _hx_tmp40;
HXDLIN( 236)		if (::hx::IsNull( frag5 )) {
HXLINE( 236)			_hx_tmp40 = 0;
            		}
            		else {
HXLINE( 236)			_hx_tmp40 = frag5->id;
            		}
HXDLIN( 236)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp40,35713) == 0)) {
HXLINE( 236)			int result7;
HXDLIN( 236)			if (::hx::IsNull( frag5 )) {
HXLINE( 236)				result7 = 0;
            			}
            			else {
HXLINE( 236)				result7 = frag5->id;
            			}
HXDLIN( 236)			::String _hx_tmp41 = ((((HX_("Error compiling fragment shader:",4d,73,37,63) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result7)) )) )) + HX_("\n",0a,00,00,00)) + fragSrc2);
HXDLIN( 236)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp41,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),285,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 236)		int id8 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_program();
HXDLIN( 236)		 ::lime::graphics::opengl::GLObject prog4;
HXDLIN( 236)		if ((id8 == 0)) {
HXLINE( 236)			prog4 = null();
            		}
            		else {
HXLINE( 236)			 ::lime::graphics::opengl::GLObject object8 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id8);
HXDLIN( 236)			object8->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id8,1,::hx::DynamicPtr(object8))) );
HXDLIN( 236)			prog4 = object8;
            		}
HXDLIN( 236)		 ::lime::graphics::opengl::GLObject prog5 = prog4;
HXDLIN( 236)		{
HXLINE( 236)			bool _hx_tmp42;
HXDLIN( 236)			if (::hx::IsNotNull( prog5 )) {
HXLINE( 236)				_hx_tmp42 = ::hx::IsNotNull( vert5 );
            			}
            			else {
HXLINE( 236)				_hx_tmp42 = false;
            			}
HXDLIN( 236)			if (_hx_tmp42) {
HXLINE( 236)				if (::hx::IsNull( prog5->refs )) {
HXLINE( 236)					prog5->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,vert5);
            				}
            				else {
HXLINE( 236)					if ((prog5->refs->indexOf(vert5,null()) == -1)) {
HXLINE( 236)						prog5->refs->push(vert5);
            					}
            				}
            			}
HXDLIN( 236)			int _hx_tmp43;
HXDLIN( 236)			if (::hx::IsNull( prog5 )) {
HXLINE( 236)				_hx_tmp43 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp43 = prog5->id;
            			}
HXDLIN( 236)			int _hx_tmp44;
HXDLIN( 236)			if (::hx::IsNull( vert5 )) {
HXLINE( 236)				_hx_tmp44 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp44 = vert5->id;
            			}
HXDLIN( 236)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp43,_hx_tmp44);
            		}
HXDLIN( 236)		{
HXLINE( 236)			bool _hx_tmp45;
HXDLIN( 236)			if (::hx::IsNotNull( prog5 )) {
HXLINE( 236)				_hx_tmp45 = ::hx::IsNotNull( frag5 );
            			}
            			else {
HXLINE( 236)				_hx_tmp45 = false;
            			}
HXDLIN( 236)			if (_hx_tmp45) {
HXLINE( 236)				if (::hx::IsNull( prog5->refs )) {
HXLINE( 236)					prog5->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,frag5);
            				}
            				else {
HXLINE( 236)					if ((prog5->refs->indexOf(frag5,null()) == -1)) {
HXLINE( 236)						prog5->refs->push(frag5);
            					}
            				}
            			}
HXDLIN( 236)			int _hx_tmp46;
HXDLIN( 236)			if (::hx::IsNull( prog5 )) {
HXLINE( 236)				_hx_tmp46 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp46 = prog5->id;
            			}
HXDLIN( 236)			int _hx_tmp47;
HXDLIN( 236)			if (::hx::IsNull( frag5 )) {
HXLINE( 236)				_hx_tmp47 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp47 = frag5->id;
            			}
HXDLIN( 236)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp46,_hx_tmp47);
            		}
HXDLIN( 236)		{
HXLINE( 236)			int _hx_tmp48;
HXDLIN( 236)			if (::hx::IsNull( prog5 )) {
HXLINE( 236)				_hx_tmp48 = 0;
            			}
            			else {
HXLINE( 236)				_hx_tmp48 = prog5->id;
            			}
HXDLIN( 236)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_link_program(_hx_tmp48);
            		}
HXDLIN( 236)		int _hx_tmp49;
HXDLIN( 236)		if (::hx::IsNull( prog5 )) {
HXLINE( 236)			_hx_tmp49 = 0;
            		}
            		else {
HXLINE( 236)			_hx_tmp49 = prog5->id;
            		}
HXDLIN( 236)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_programi(_hx_tmp49,35714) == 0)) {
HXLINE( 236)			int result8;
HXDLIN( 236)			if (::hx::IsNull( prog5 )) {
HXLINE( 236)				result8 = 0;
            			}
            			else {
HXLINE( 236)				result8 = prog5->id;
            			}
HXDLIN( 236)			::String _hx_tmp50 = ((HX_("Unable to initialize the shader program",f0,86,8b,39) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_program_info_log(result8)) )) ));
HXDLIN( 236)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp50,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),293,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 236)		this->medGlowProgram = prog5;
HXLINE( 237)		::String vertSrc3 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/base.vert",81,47,dc,af));
HXDLIN( 237)		::String fragSrc3 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/baseHighGlow.frag",73,ec,99,d2));
HXDLIN( 237)		int id9 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35633);
HXDLIN( 237)		 ::lime::graphics::opengl::GLObject vert6;
HXDLIN( 237)		if ((id9 == 0)) {
HXLINE( 237)			vert6 = null();
            		}
            		else {
HXLINE( 237)			 ::lime::graphics::opengl::GLObject object9 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id9);
HXDLIN( 237)			object9->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id9,2,::hx::DynamicPtr(object9))) );
HXDLIN( 237)			vert6 = object9;
            		}
HXDLIN( 237)		 ::lime::graphics::opengl::GLObject vert7 = vert6;
HXDLIN( 237)		{
HXLINE( 237)			int _hx_tmp51;
HXDLIN( 237)			if (::hx::IsNull( vert7 )) {
HXLINE( 237)				_hx_tmp51 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp51 = vert7->id;
            			}
HXDLIN( 237)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp51,vertSrc3);
            		}
HXDLIN( 237)		{
HXLINE( 237)			int _hx_tmp52;
HXDLIN( 237)			if (::hx::IsNull( vert7 )) {
HXLINE( 237)				_hx_tmp52 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp52 = vert7->id;
            			}
HXDLIN( 237)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp52);
            		}
HXDLIN( 237)		int _hx_tmp53;
HXDLIN( 237)		if (::hx::IsNull( vert7 )) {
HXLINE( 237)			_hx_tmp53 = 0;
            		}
            		else {
HXLINE( 237)			_hx_tmp53 = vert7->id;
            		}
HXDLIN( 237)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp53,35713) == 0)) {
HXLINE( 237)			int result9;
HXDLIN( 237)			if (::hx::IsNull( vert7 )) {
HXLINE( 237)				result9 = 0;
            			}
            			else {
HXLINE( 237)				result9 = vert7->id;
            			}
HXDLIN( 237)			::String _hx_tmp54 = ((((HX_("Error compiling vertex shader:",e1,48,ce,b6) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result9)) )) )) + HX_("\n",0a,00,00,00)) + vertSrc3);
HXDLIN( 237)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp54,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),278,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 237)		int id10 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35632);
HXDLIN( 237)		 ::lime::graphics::opengl::GLObject frag6;
HXDLIN( 237)		if ((id10 == 0)) {
HXLINE( 237)			frag6 = null();
            		}
            		else {
HXLINE( 237)			 ::lime::graphics::opengl::GLObject object10 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id10);
HXDLIN( 237)			object10->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id10,2,::hx::DynamicPtr(object10))) );
HXDLIN( 237)			frag6 = object10;
            		}
HXDLIN( 237)		 ::lime::graphics::opengl::GLObject frag7 = frag6;
HXDLIN( 237)		{
HXLINE( 237)			int _hx_tmp55;
HXDLIN( 237)			if (::hx::IsNull( frag7 )) {
HXLINE( 237)				_hx_tmp55 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp55 = frag7->id;
            			}
HXDLIN( 237)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp55,fragSrc3);
            		}
HXDLIN( 237)		{
HXLINE( 237)			int _hx_tmp56;
HXDLIN( 237)			if (::hx::IsNull( frag7 )) {
HXLINE( 237)				_hx_tmp56 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp56 = frag7->id;
            			}
HXDLIN( 237)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp56);
            		}
HXDLIN( 237)		int _hx_tmp57;
HXDLIN( 237)		if (::hx::IsNull( frag7 )) {
HXLINE( 237)			_hx_tmp57 = 0;
            		}
            		else {
HXLINE( 237)			_hx_tmp57 = frag7->id;
            		}
HXDLIN( 237)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp57,35713) == 0)) {
HXLINE( 237)			int result10;
HXDLIN( 237)			if (::hx::IsNull( frag7 )) {
HXLINE( 237)				result10 = 0;
            			}
            			else {
HXLINE( 237)				result10 = frag7->id;
            			}
HXDLIN( 237)			::String _hx_tmp58 = ((((HX_("Error compiling fragment shader:",4d,73,37,63) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result10)) )) )) + HX_("\n",0a,00,00,00)) + fragSrc3);
HXDLIN( 237)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp58,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),285,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 237)		int id11 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_program();
HXDLIN( 237)		 ::lime::graphics::opengl::GLObject prog6;
HXDLIN( 237)		if ((id11 == 0)) {
HXLINE( 237)			prog6 = null();
            		}
            		else {
HXLINE( 237)			 ::lime::graphics::opengl::GLObject object11 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id11);
HXDLIN( 237)			object11->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id11,1,::hx::DynamicPtr(object11))) );
HXDLIN( 237)			prog6 = object11;
            		}
HXDLIN( 237)		 ::lime::graphics::opengl::GLObject prog7 = prog6;
HXDLIN( 237)		{
HXLINE( 237)			bool _hx_tmp59;
HXDLIN( 237)			if (::hx::IsNotNull( prog7 )) {
HXLINE( 237)				_hx_tmp59 = ::hx::IsNotNull( vert7 );
            			}
            			else {
HXLINE( 237)				_hx_tmp59 = false;
            			}
HXDLIN( 237)			if (_hx_tmp59) {
HXLINE( 237)				if (::hx::IsNull( prog7->refs )) {
HXLINE( 237)					prog7->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,vert7);
            				}
            				else {
HXLINE( 237)					if ((prog7->refs->indexOf(vert7,null()) == -1)) {
HXLINE( 237)						prog7->refs->push(vert7);
            					}
            				}
            			}
HXDLIN( 237)			int _hx_tmp60;
HXDLIN( 237)			if (::hx::IsNull( prog7 )) {
HXLINE( 237)				_hx_tmp60 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp60 = prog7->id;
            			}
HXDLIN( 237)			int _hx_tmp61;
HXDLIN( 237)			if (::hx::IsNull( vert7 )) {
HXLINE( 237)				_hx_tmp61 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp61 = vert7->id;
            			}
HXDLIN( 237)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp60,_hx_tmp61);
            		}
HXDLIN( 237)		{
HXLINE( 237)			bool _hx_tmp62;
HXDLIN( 237)			if (::hx::IsNotNull( prog7 )) {
HXLINE( 237)				_hx_tmp62 = ::hx::IsNotNull( frag7 );
            			}
            			else {
HXLINE( 237)				_hx_tmp62 = false;
            			}
HXDLIN( 237)			if (_hx_tmp62) {
HXLINE( 237)				if (::hx::IsNull( prog7->refs )) {
HXLINE( 237)					prog7->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,frag7);
            				}
            				else {
HXLINE( 237)					if ((prog7->refs->indexOf(frag7,null()) == -1)) {
HXLINE( 237)						prog7->refs->push(frag7);
            					}
            				}
            			}
HXDLIN( 237)			int _hx_tmp63;
HXDLIN( 237)			if (::hx::IsNull( prog7 )) {
HXLINE( 237)				_hx_tmp63 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp63 = prog7->id;
            			}
HXDLIN( 237)			int _hx_tmp64;
HXDLIN( 237)			if (::hx::IsNull( frag7 )) {
HXLINE( 237)				_hx_tmp64 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp64 = frag7->id;
            			}
HXDLIN( 237)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp63,_hx_tmp64);
            		}
HXDLIN( 237)		{
HXLINE( 237)			int _hx_tmp65;
HXDLIN( 237)			if (::hx::IsNull( prog7 )) {
HXLINE( 237)				_hx_tmp65 = 0;
            			}
            			else {
HXLINE( 237)				_hx_tmp65 = prog7->id;
            			}
HXDLIN( 237)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_link_program(_hx_tmp65);
            		}
HXDLIN( 237)		int _hx_tmp66;
HXDLIN( 237)		if (::hx::IsNull( prog7 )) {
HXLINE( 237)			_hx_tmp66 = 0;
            		}
            		else {
HXLINE( 237)			_hx_tmp66 = prog7->id;
            		}
HXDLIN( 237)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_programi(_hx_tmp66,35714) == 0)) {
HXLINE( 237)			int result11;
HXDLIN( 237)			if (::hx::IsNull( prog7 )) {
HXLINE( 237)				result11 = 0;
            			}
            			else {
HXLINE( 237)				result11 = prog7->id;
            			}
HXDLIN( 237)			::String _hx_tmp67 = ((HX_("Unable to initialize the shader program",f0,86,8b,39) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_program_info_log(result11)) )) ));
HXDLIN( 237)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp67,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),293,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 237)		this->highGlowProgram = prog7;
HXLINE( 238)		::String vertSrc4 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/base.vert",81,47,dc,af));
HXDLIN( 238)		::String fragSrc4 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/baseVHighGlow.frag",d9,30,8d,5c));
HXDLIN( 238)		int id12 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35633);
HXDLIN( 238)		 ::lime::graphics::opengl::GLObject vert8;
HXDLIN( 238)		if ((id12 == 0)) {
HXLINE( 238)			vert8 = null();
            		}
            		else {
HXLINE( 238)			 ::lime::graphics::opengl::GLObject object12 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id12);
HXDLIN( 238)			object12->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id12,2,::hx::DynamicPtr(object12))) );
HXDLIN( 238)			vert8 = object12;
            		}
HXDLIN( 238)		 ::lime::graphics::opengl::GLObject vert9 = vert8;
HXDLIN( 238)		{
HXLINE( 238)			int _hx_tmp68;
HXDLIN( 238)			if (::hx::IsNull( vert9 )) {
HXLINE( 238)				_hx_tmp68 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp68 = vert9->id;
            			}
HXDLIN( 238)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp68,vertSrc4);
            		}
HXDLIN( 238)		{
HXLINE( 238)			int _hx_tmp69;
HXDLIN( 238)			if (::hx::IsNull( vert9 )) {
HXLINE( 238)				_hx_tmp69 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp69 = vert9->id;
            			}
HXDLIN( 238)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp69);
            		}
HXDLIN( 238)		int _hx_tmp70;
HXDLIN( 238)		if (::hx::IsNull( vert9 )) {
HXLINE( 238)			_hx_tmp70 = 0;
            		}
            		else {
HXLINE( 238)			_hx_tmp70 = vert9->id;
            		}
HXDLIN( 238)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp70,35713) == 0)) {
HXLINE( 238)			int result12;
HXDLIN( 238)			if (::hx::IsNull( vert9 )) {
HXLINE( 238)				result12 = 0;
            			}
            			else {
HXLINE( 238)				result12 = vert9->id;
            			}
HXDLIN( 238)			::String _hx_tmp71 = ((((HX_("Error compiling vertex shader:",e1,48,ce,b6) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result12)) )) )) + HX_("\n",0a,00,00,00)) + vertSrc4);
HXDLIN( 238)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp71,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),278,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 238)		int id13 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35632);
HXDLIN( 238)		 ::lime::graphics::opengl::GLObject frag8;
HXDLIN( 238)		if ((id13 == 0)) {
HXLINE( 238)			frag8 = null();
            		}
            		else {
HXLINE( 238)			 ::lime::graphics::opengl::GLObject object13 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id13);
HXDLIN( 238)			object13->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id13,2,::hx::DynamicPtr(object13))) );
HXDLIN( 238)			frag8 = object13;
            		}
HXDLIN( 238)		 ::lime::graphics::opengl::GLObject frag9 = frag8;
HXDLIN( 238)		{
HXLINE( 238)			int _hx_tmp72;
HXDLIN( 238)			if (::hx::IsNull( frag9 )) {
HXLINE( 238)				_hx_tmp72 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp72 = frag9->id;
            			}
HXDLIN( 238)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp72,fragSrc4);
            		}
HXDLIN( 238)		{
HXLINE( 238)			int _hx_tmp73;
HXDLIN( 238)			if (::hx::IsNull( frag9 )) {
HXLINE( 238)				_hx_tmp73 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp73 = frag9->id;
            			}
HXDLIN( 238)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp73);
            		}
HXDLIN( 238)		int _hx_tmp74;
HXDLIN( 238)		if (::hx::IsNull( frag9 )) {
HXLINE( 238)			_hx_tmp74 = 0;
            		}
            		else {
HXLINE( 238)			_hx_tmp74 = frag9->id;
            		}
HXDLIN( 238)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp74,35713) == 0)) {
HXLINE( 238)			int result13;
HXDLIN( 238)			if (::hx::IsNull( frag9 )) {
HXLINE( 238)				result13 = 0;
            			}
            			else {
HXLINE( 238)				result13 = frag9->id;
            			}
HXDLIN( 238)			::String _hx_tmp75 = ((((HX_("Error compiling fragment shader:",4d,73,37,63) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result13)) )) )) + HX_("\n",0a,00,00,00)) + fragSrc4);
HXDLIN( 238)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp75,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),285,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 238)		int id14 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_program();
HXDLIN( 238)		 ::lime::graphics::opengl::GLObject prog8;
HXDLIN( 238)		if ((id14 == 0)) {
HXLINE( 238)			prog8 = null();
            		}
            		else {
HXLINE( 238)			 ::lime::graphics::opengl::GLObject object14 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id14);
HXDLIN( 238)			object14->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id14,1,::hx::DynamicPtr(object14))) );
HXDLIN( 238)			prog8 = object14;
            		}
HXDLIN( 238)		 ::lime::graphics::opengl::GLObject prog9 = prog8;
HXDLIN( 238)		{
HXLINE( 238)			bool _hx_tmp76;
HXDLIN( 238)			if (::hx::IsNotNull( prog9 )) {
HXLINE( 238)				_hx_tmp76 = ::hx::IsNotNull( vert9 );
            			}
            			else {
HXLINE( 238)				_hx_tmp76 = false;
            			}
HXDLIN( 238)			if (_hx_tmp76) {
HXLINE( 238)				if (::hx::IsNull( prog9->refs )) {
HXLINE( 238)					prog9->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,vert9);
            				}
            				else {
HXLINE( 238)					if ((prog9->refs->indexOf(vert9,null()) == -1)) {
HXLINE( 238)						prog9->refs->push(vert9);
            					}
            				}
            			}
HXDLIN( 238)			int _hx_tmp77;
HXDLIN( 238)			if (::hx::IsNull( prog9 )) {
HXLINE( 238)				_hx_tmp77 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp77 = prog9->id;
            			}
HXDLIN( 238)			int _hx_tmp78;
HXDLIN( 238)			if (::hx::IsNull( vert9 )) {
HXLINE( 238)				_hx_tmp78 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp78 = vert9->id;
            			}
HXDLIN( 238)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp77,_hx_tmp78);
            		}
HXDLIN( 238)		{
HXLINE( 238)			bool _hx_tmp79;
HXDLIN( 238)			if (::hx::IsNotNull( prog9 )) {
HXLINE( 238)				_hx_tmp79 = ::hx::IsNotNull( frag9 );
            			}
            			else {
HXLINE( 238)				_hx_tmp79 = false;
            			}
HXDLIN( 238)			if (_hx_tmp79) {
HXLINE( 238)				if (::hx::IsNull( prog9->refs )) {
HXLINE( 238)					prog9->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,frag9);
            				}
            				else {
HXLINE( 238)					if ((prog9->refs->indexOf(frag9,null()) == -1)) {
HXLINE( 238)						prog9->refs->push(frag9);
            					}
            				}
            			}
HXDLIN( 238)			int _hx_tmp80;
HXDLIN( 238)			if (::hx::IsNull( prog9 )) {
HXLINE( 238)				_hx_tmp80 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp80 = prog9->id;
            			}
HXDLIN( 238)			int _hx_tmp81;
HXDLIN( 238)			if (::hx::IsNull( frag9 )) {
HXLINE( 238)				_hx_tmp81 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp81 = frag9->id;
            			}
HXDLIN( 238)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp80,_hx_tmp81);
            		}
HXDLIN( 238)		{
HXLINE( 238)			int _hx_tmp82;
HXDLIN( 238)			if (::hx::IsNull( prog9 )) {
HXLINE( 238)				_hx_tmp82 = 0;
            			}
            			else {
HXLINE( 238)				_hx_tmp82 = prog9->id;
            			}
HXDLIN( 238)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_link_program(_hx_tmp82);
            		}
HXDLIN( 238)		int _hx_tmp83;
HXDLIN( 238)		if (::hx::IsNull( prog9 )) {
HXLINE( 238)			_hx_tmp83 = 0;
            		}
            		else {
HXLINE( 238)			_hx_tmp83 = prog9->id;
            		}
HXDLIN( 238)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_programi(_hx_tmp83,35714) == 0)) {
HXLINE( 238)			int result14;
HXDLIN( 238)			if (::hx::IsNull( prog9 )) {
HXLINE( 238)				result14 = 0;
            			}
            			else {
HXLINE( 238)				result14 = prog9->id;
            			}
HXDLIN( 238)			::String _hx_tmp84 = ((HX_("Unable to initialize the shader program",f0,86,8b,39) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_program_info_log(result14)) )) ));
HXDLIN( 238)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp84,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),293,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 238)		this->veryHighGlowProgram = prog9;
HXLINE( 239)		::String vertSrc5 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/baseSingle.vert",59,31,e6,16));
HXDLIN( 239)		::String fragSrc5 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/baseSingle.frag",da,95,5c,0c));
HXDLIN( 239)		int id15 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35633);
HXDLIN( 239)		 ::lime::graphics::opengl::GLObject vert10;
HXDLIN( 239)		if ((id15 == 0)) {
HXLINE( 239)			vert10 = null();
            		}
            		else {
HXLINE( 239)			 ::lime::graphics::opengl::GLObject object15 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id15);
HXDLIN( 239)			object15->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id15,2,::hx::DynamicPtr(object15))) );
HXDLIN( 239)			vert10 = object15;
            		}
HXDLIN( 239)		 ::lime::graphics::opengl::GLObject vert11 = vert10;
HXDLIN( 239)		{
HXLINE( 239)			int _hx_tmp85;
HXDLIN( 239)			if (::hx::IsNull( vert11 )) {
HXLINE( 239)				_hx_tmp85 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp85 = vert11->id;
            			}
HXDLIN( 239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp85,vertSrc5);
            		}
HXDLIN( 239)		{
HXLINE( 239)			int _hx_tmp86;
HXDLIN( 239)			if (::hx::IsNull( vert11 )) {
HXLINE( 239)				_hx_tmp86 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp86 = vert11->id;
            			}
HXDLIN( 239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp86);
            		}
HXDLIN( 239)		int _hx_tmp87;
HXDLIN( 239)		if (::hx::IsNull( vert11 )) {
HXLINE( 239)			_hx_tmp87 = 0;
            		}
            		else {
HXLINE( 239)			_hx_tmp87 = vert11->id;
            		}
HXDLIN( 239)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp87,35713) == 0)) {
HXLINE( 239)			int result15;
HXDLIN( 239)			if (::hx::IsNull( vert11 )) {
HXLINE( 239)				result15 = 0;
            			}
            			else {
HXLINE( 239)				result15 = vert11->id;
            			}
HXDLIN( 239)			::String _hx_tmp88 = ((((HX_("Error compiling vertex shader:",e1,48,ce,b6) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result15)) )) )) + HX_("\n",0a,00,00,00)) + vertSrc5);
HXDLIN( 239)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp88,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),278,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 239)		int id16 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35632);
HXDLIN( 239)		 ::lime::graphics::opengl::GLObject frag10;
HXDLIN( 239)		if ((id16 == 0)) {
HXLINE( 239)			frag10 = null();
            		}
            		else {
HXLINE( 239)			 ::lime::graphics::opengl::GLObject object16 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id16);
HXDLIN( 239)			object16->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id16,2,::hx::DynamicPtr(object16))) );
HXDLIN( 239)			frag10 = object16;
            		}
HXDLIN( 239)		 ::lime::graphics::opengl::GLObject frag11 = frag10;
HXDLIN( 239)		{
HXLINE( 239)			int _hx_tmp89;
HXDLIN( 239)			if (::hx::IsNull( frag11 )) {
HXLINE( 239)				_hx_tmp89 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp89 = frag11->id;
            			}
HXDLIN( 239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp89,fragSrc5);
            		}
HXDLIN( 239)		{
HXLINE( 239)			int _hx_tmp90;
HXDLIN( 239)			if (::hx::IsNull( frag11 )) {
HXLINE( 239)				_hx_tmp90 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp90 = frag11->id;
            			}
HXDLIN( 239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp90);
            		}
HXDLIN( 239)		int _hx_tmp91;
HXDLIN( 239)		if (::hx::IsNull( frag11 )) {
HXLINE( 239)			_hx_tmp91 = 0;
            		}
            		else {
HXLINE( 239)			_hx_tmp91 = frag11->id;
            		}
HXDLIN( 239)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp91,35713) == 0)) {
HXLINE( 239)			int result16;
HXDLIN( 239)			if (::hx::IsNull( frag11 )) {
HXLINE( 239)				result16 = 0;
            			}
            			else {
HXLINE( 239)				result16 = frag11->id;
            			}
HXDLIN( 239)			::String _hx_tmp92 = ((((HX_("Error compiling fragment shader:",4d,73,37,63) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result16)) )) )) + HX_("\n",0a,00,00,00)) + fragSrc5);
HXDLIN( 239)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp92,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),285,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 239)		int id17 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_program();
HXDLIN( 239)		 ::lime::graphics::opengl::GLObject prog10;
HXDLIN( 239)		if ((id17 == 0)) {
HXLINE( 239)			prog10 = null();
            		}
            		else {
HXLINE( 239)			 ::lime::graphics::opengl::GLObject object17 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id17);
HXDLIN( 239)			object17->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id17,1,::hx::DynamicPtr(object17))) );
HXDLIN( 239)			prog10 = object17;
            		}
HXDLIN( 239)		 ::lime::graphics::opengl::GLObject prog11 = prog10;
HXDLIN( 239)		{
HXLINE( 239)			bool _hx_tmp93;
HXDLIN( 239)			if (::hx::IsNotNull( prog11 )) {
HXLINE( 239)				_hx_tmp93 = ::hx::IsNotNull( vert11 );
            			}
            			else {
HXLINE( 239)				_hx_tmp93 = false;
            			}
HXDLIN( 239)			if (_hx_tmp93) {
HXLINE( 239)				if (::hx::IsNull( prog11->refs )) {
HXLINE( 239)					prog11->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,vert11);
            				}
            				else {
HXLINE( 239)					if ((prog11->refs->indexOf(vert11,null()) == -1)) {
HXLINE( 239)						prog11->refs->push(vert11);
            					}
            				}
            			}
HXDLIN( 239)			int _hx_tmp94;
HXDLIN( 239)			if (::hx::IsNull( prog11 )) {
HXLINE( 239)				_hx_tmp94 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp94 = prog11->id;
            			}
HXDLIN( 239)			int _hx_tmp95;
HXDLIN( 239)			if (::hx::IsNull( vert11 )) {
HXLINE( 239)				_hx_tmp95 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp95 = vert11->id;
            			}
HXDLIN( 239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp94,_hx_tmp95);
            		}
HXDLIN( 239)		{
HXLINE( 239)			bool _hx_tmp96;
HXDLIN( 239)			if (::hx::IsNotNull( prog11 )) {
HXLINE( 239)				_hx_tmp96 = ::hx::IsNotNull( frag11 );
            			}
            			else {
HXLINE( 239)				_hx_tmp96 = false;
            			}
HXDLIN( 239)			if (_hx_tmp96) {
HXLINE( 239)				if (::hx::IsNull( prog11->refs )) {
HXLINE( 239)					prog11->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,frag11);
            				}
            				else {
HXLINE( 239)					if ((prog11->refs->indexOf(frag11,null()) == -1)) {
HXLINE( 239)						prog11->refs->push(frag11);
            					}
            				}
            			}
HXDLIN( 239)			int _hx_tmp97;
HXDLIN( 239)			if (::hx::IsNull( prog11 )) {
HXLINE( 239)				_hx_tmp97 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp97 = prog11->id;
            			}
HXDLIN( 239)			int _hx_tmp98;
HXDLIN( 239)			if (::hx::IsNull( frag11 )) {
HXLINE( 239)				_hx_tmp98 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp98 = frag11->id;
            			}
HXDLIN( 239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp97,_hx_tmp98);
            		}
HXDLIN( 239)		{
HXLINE( 239)			int _hx_tmp99;
HXDLIN( 239)			if (::hx::IsNull( prog11 )) {
HXLINE( 239)				_hx_tmp99 = 0;
            			}
            			else {
HXLINE( 239)				_hx_tmp99 = prog11->id;
            			}
HXDLIN( 239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_link_program(_hx_tmp99);
            		}
HXDLIN( 239)		int _hx_tmp100;
HXDLIN( 239)		if (::hx::IsNull( prog11 )) {
HXLINE( 239)			_hx_tmp100 = 0;
            		}
            		else {
HXLINE( 239)			_hx_tmp100 = prog11->id;
            		}
HXDLIN( 239)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_programi(_hx_tmp100,35714) == 0)) {
HXLINE( 239)			int result17;
HXDLIN( 239)			if (::hx::IsNull( prog11 )) {
HXLINE( 239)				result17 = 0;
            			}
            			else {
HXLINE( 239)				result17 = prog11->id;
            			}
HXDLIN( 239)			::String _hx_tmp101 = ((HX_("Unable to initialize the shader program",f0,86,8b,39) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_program_info_log(result17)) )) ));
HXDLIN( 239)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp101,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),293,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 239)		this->singleProgram = prog11;
HXLINE( 240)		::String vertSrc6 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/ground.vert",0b,9c,4a,b0));
HXDLIN( 240)		::String fragSrc6 = ::openfl::utils::Assets_obj::getText(HX_("assets/shaders/ground.frag",8c,00,c1,a5));
HXDLIN( 240)		int id18 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35633);
HXDLIN( 240)		 ::lime::graphics::opengl::GLObject vert12;
HXDLIN( 240)		if ((id18 == 0)) {
HXLINE( 240)			vert12 = null();
            		}
            		else {
HXLINE( 240)			 ::lime::graphics::opengl::GLObject object18 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id18);
HXDLIN( 240)			object18->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id18,2,::hx::DynamicPtr(object18))) );
HXDLIN( 240)			vert12 = object18;
            		}
HXDLIN( 240)		 ::lime::graphics::opengl::GLObject vert13 = vert12;
HXDLIN( 240)		{
HXLINE( 240)			int _hx_tmp102;
HXDLIN( 240)			if (::hx::IsNull( vert13 )) {
HXLINE( 240)				_hx_tmp102 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp102 = vert13->id;
            			}
HXDLIN( 240)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp102,vertSrc6);
            		}
HXDLIN( 240)		{
HXLINE( 240)			int _hx_tmp103;
HXDLIN( 240)			if (::hx::IsNull( vert13 )) {
HXLINE( 240)				_hx_tmp103 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp103 = vert13->id;
            			}
HXDLIN( 240)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp103);
            		}
HXDLIN( 240)		int _hx_tmp104;
HXDLIN( 240)		if (::hx::IsNull( vert13 )) {
HXLINE( 240)			_hx_tmp104 = 0;
            		}
            		else {
HXLINE( 240)			_hx_tmp104 = vert13->id;
            		}
HXDLIN( 240)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp104,35713) == 0)) {
HXLINE( 240)			int result18;
HXDLIN( 240)			if (::hx::IsNull( vert13 )) {
HXLINE( 240)				result18 = 0;
            			}
            			else {
HXLINE( 240)				result18 = vert13->id;
            			}
HXDLIN( 240)			::String _hx_tmp105 = ((((HX_("Error compiling vertex shader:",e1,48,ce,b6) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result18)) )) )) + HX_("\n",0a,00,00,00)) + vertSrc6);
HXDLIN( 240)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp105,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),278,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 240)		int id19 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_shader(35632);
HXDLIN( 240)		 ::lime::graphics::opengl::GLObject frag12;
HXDLIN( 240)		if ((id19 == 0)) {
HXLINE( 240)			frag12 = null();
            		}
            		else {
HXLINE( 240)			 ::lime::graphics::opengl::GLObject object19 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id19);
HXDLIN( 240)			object19->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id19,2,::hx::DynamicPtr(object19))) );
HXDLIN( 240)			frag12 = object19;
            		}
HXDLIN( 240)		 ::lime::graphics::opengl::GLObject frag13 = frag12;
HXDLIN( 240)		{
HXLINE( 240)			int _hx_tmp106;
HXDLIN( 240)			if (::hx::IsNull( frag13 )) {
HXLINE( 240)				_hx_tmp106 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp106 = frag13->id;
            			}
HXDLIN( 240)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_shader_source(_hx_tmp106,fragSrc6);
            		}
HXDLIN( 240)		{
HXLINE( 240)			int _hx_tmp107;
HXDLIN( 240)			if (::hx::IsNull( frag13 )) {
HXLINE( 240)				_hx_tmp107 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp107 = frag13->id;
            			}
HXDLIN( 240)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_compile_shader(_hx_tmp107);
            		}
HXDLIN( 240)		int _hx_tmp108;
HXDLIN( 240)		if (::hx::IsNull( frag13 )) {
HXLINE( 240)			_hx_tmp108 = 0;
            		}
            		else {
HXLINE( 240)			_hx_tmp108 = frag13->id;
            		}
HXDLIN( 240)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shaderi(_hx_tmp108,35713) == 0)) {
HXLINE( 240)			int result19;
HXDLIN( 240)			if (::hx::IsNull( frag13 )) {
HXLINE( 240)				result19 = 0;
            			}
            			else {
HXLINE( 240)				result19 = frag13->id;
            			}
HXDLIN( 240)			::String _hx_tmp109 = ((((HX_("Error compiling fragment shader:",4d,73,37,63) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_shader_info_log(result19)) )) )) + HX_("\n",0a,00,00,00)) + fragSrc6);
HXDLIN( 240)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp109,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),285,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 240)		int id20 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_program();
HXDLIN( 240)		 ::lime::graphics::opengl::GLObject prog12;
HXDLIN( 240)		if ((id20 == 0)) {
HXLINE( 240)			prog12 = null();
            		}
            		else {
HXLINE( 240)			 ::lime::graphics::opengl::GLObject object20 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id20);
HXDLIN( 240)			object20->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id20,1,::hx::DynamicPtr(object20))) );
HXDLIN( 240)			prog12 = object20;
            		}
HXDLIN( 240)		 ::lime::graphics::opengl::GLObject prog13 = prog12;
HXDLIN( 240)		{
HXLINE( 240)			bool _hx_tmp110;
HXDLIN( 240)			if (::hx::IsNotNull( prog13 )) {
HXLINE( 240)				_hx_tmp110 = ::hx::IsNotNull( vert13 );
            			}
            			else {
HXLINE( 240)				_hx_tmp110 = false;
            			}
HXDLIN( 240)			if (_hx_tmp110) {
HXLINE( 240)				if (::hx::IsNull( prog13->refs )) {
HXLINE( 240)					prog13->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,vert13);
            				}
            				else {
HXLINE( 240)					if ((prog13->refs->indexOf(vert13,null()) == -1)) {
HXLINE( 240)						prog13->refs->push(vert13);
            					}
            				}
            			}
HXDLIN( 240)			int _hx_tmp111;
HXDLIN( 240)			if (::hx::IsNull( prog13 )) {
HXLINE( 240)				_hx_tmp111 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp111 = prog13->id;
            			}
HXDLIN( 240)			int _hx_tmp112;
HXDLIN( 240)			if (::hx::IsNull( vert13 )) {
HXLINE( 240)				_hx_tmp112 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp112 = vert13->id;
            			}
HXDLIN( 240)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp111,_hx_tmp112);
            		}
HXDLIN( 240)		{
HXLINE( 240)			bool _hx_tmp113;
HXDLIN( 240)			if (::hx::IsNotNull( prog13 )) {
HXLINE( 240)				_hx_tmp113 = ::hx::IsNotNull( frag13 );
            			}
            			else {
HXLINE( 240)				_hx_tmp113 = false;
            			}
HXDLIN( 240)			if (_hx_tmp113) {
HXLINE( 240)				if (::hx::IsNull( prog13->refs )) {
HXLINE( 240)					prog13->refs = ::Array_obj< ::Dynamic>::__new(1)->init(0,frag13);
            				}
            				else {
HXLINE( 240)					if ((prog13->refs->indexOf(frag13,null()) == -1)) {
HXLINE( 240)						prog13->refs->push(frag13);
            					}
            				}
            			}
HXDLIN( 240)			int _hx_tmp114;
HXDLIN( 240)			if (::hx::IsNull( prog13 )) {
HXLINE( 240)				_hx_tmp114 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp114 = prog13->id;
            			}
HXDLIN( 240)			int _hx_tmp115;
HXDLIN( 240)			if (::hx::IsNull( frag13 )) {
HXLINE( 240)				_hx_tmp115 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp115 = frag13->id;
            			}
HXDLIN( 240)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_attach_shader(_hx_tmp114,_hx_tmp115);
            		}
HXDLIN( 240)		{
HXLINE( 240)			int _hx_tmp116;
HXDLIN( 240)			if (::hx::IsNull( prog13 )) {
HXLINE( 240)				_hx_tmp116 = 0;
            			}
            			else {
HXLINE( 240)				_hx_tmp116 = prog13->id;
            			}
HXDLIN( 240)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_link_program(_hx_tmp116);
            		}
HXDLIN( 240)		int _hx_tmp117;
HXDLIN( 240)		if (::hx::IsNull( prog13 )) {
HXLINE( 240)			_hx_tmp117 = 0;
            		}
            		else {
HXLINE( 240)			_hx_tmp117 = prog13->id;
            		}
HXDLIN( 240)		if ((::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_programi(_hx_tmp117,35714) == 0)) {
HXLINE( 240)			int result20;
HXDLIN( 240)			if (::hx::IsNull( prog13 )) {
HXLINE( 240)				result20 = 0;
            			}
            			else {
HXLINE( 240)				result20 = prog13->id;
            			}
HXDLIN( 240)			::String _hx_tmp118 = ((HX_("Unable to initialize the shader program",f0,86,8b,39) + HX_("\n",0a,00,00,00)) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_get_program_info_log(result20)) )) ));
HXDLIN( 240)			HX_STACK_DO_THROW( ::haxe::exceptions::ArgumentException_obj::__alloc( HX_CTX ,_hx_tmp118,null(),null(),::hx::SourceInfo(HX_("src/util/Utils.hx",8f,a4,28,8f),293,HX_("util.RenderUtils",6f,74,7b,fc),HX_("compileShaders",7b,68,70,81))));
            		}
HXDLIN( 240)		this->groundProgram = prog13;
HXLINE( 242)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_18c51baa_5,16);
HXDLIN( 242)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 242)		if (::hx::IsNotNull( array )) {
HXLINE( 242)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 242)			_this->byteOffset = 0;
HXDLIN( 242)			_this->length = array->get_length();
HXDLIN( 242)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 242)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 242)			_this->copyFromArray(array,null());
HXDLIN( 242)			this1 = _this;
            		}
            		else {
HXLINE( 242)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 242)		 ::lime::utils::ArrayBufferView data = this1;
HXDLIN( 242)		int id21 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_buffer();
HXDLIN( 242)		 ::lime::graphics::opengl::GLObject vbo;
HXDLIN( 242)		if ((id21 == 0)) {
HXLINE( 242)			vbo = null();
            		}
            		else {
HXLINE( 242)			 ::lime::graphics::opengl::GLObject object21 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id21);
HXDLIN( 242)			object21->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id21,3,::hx::DynamicPtr(object21))) );
HXDLIN( 242)			vbo = object21;
            		}
HXDLIN( 242)		 ::lime::graphics::opengl::GLObject vbo1 = vbo;
HXDLIN( 242)		{
HXLINE( 242)			{
HXLINE( 242)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this1 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 242)				if ((34962 == _this1->ARRAY_BUFFER)) {
HXLINE( 242)					_this1->_hx___arrayBufferBinding = vbo1;
            				}
HXDLIN( 242)				if ((34962 == _this1->ELEMENT_ARRAY_BUFFER)) {
HXLINE( 242)					_this1->_hx___elementBufferBinding = vbo1;
            				}
HXDLIN( 242)				int _hx_tmp119;
HXDLIN( 242)				if (::hx::IsNull( vbo1 )) {
HXLINE( 242)					_hx_tmp119 = 0;
            				}
            				else {
HXLINE( 242)					_hx_tmp119 = vbo1->id;
            				}
HXDLIN( 242)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34962,_hx_tmp119);
            			}
HXDLIN( 242)			{
HXLINE( 242)				int size = data->byteLength;
HXDLIN( 242)				Float srcData = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(data);
HXDLIN( 242)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34962,size,srcData,35044);
            			}
            		}
HXDLIN( 242)		this->singleVBO = vbo1;
HXLINE( 248)		::cpp::VirtualArray array1 = ::Array_obj< int >::fromData( _hx_array_data_18c51baa_6,6);
HXDLIN( 248)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 248)		if (::hx::IsNotNull( array1 )) {
HXLINE( 248)			 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 248)			_this2->byteOffset = 0;
HXDLIN( 248)			_this2->length = array1->get_length();
HXDLIN( 248)			_this2->byteLength = (_this2->length * _this2->bytesPerElement);
HXDLIN( 248)			_this2->buffer = ::haxe::io::Bytes_obj::alloc(_this2->byteLength);
HXDLIN( 248)			_this2->copyFromArray(array1,null());
HXDLIN( 248)			this2 = _this2;
            		}
            		else {
HXLINE( 248)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            		}
HXDLIN( 248)		 ::lime::utils::ArrayBufferView data1 = this2;
HXDLIN( 248)		int id22 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_buffer();
HXDLIN( 248)		 ::lime::graphics::opengl::GLObject ibo;
HXDLIN( 248)		if ((id22 == 0)) {
HXLINE( 248)			ibo = null();
            		}
            		else {
HXLINE( 248)			 ::lime::graphics::opengl::GLObject object22 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id22);
HXDLIN( 248)			object22->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id22,3,::hx::DynamicPtr(object22))) );
HXDLIN( 248)			ibo = object22;
            		}
HXDLIN( 248)		 ::lime::graphics::opengl::GLObject ibo1 = ibo;
HXDLIN( 248)		{
HXLINE( 248)			{
HXLINE( 248)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this3 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 248)				if ((34963 == _this3->ARRAY_BUFFER)) {
HXLINE( 248)					_this3->_hx___arrayBufferBinding = ibo1;
            				}
HXDLIN( 248)				if ((34963 == _this3->ELEMENT_ARRAY_BUFFER)) {
HXLINE( 248)					_this3->_hx___elementBufferBinding = ibo1;
            				}
HXDLIN( 248)				int _hx_tmp120;
HXDLIN( 248)				if (::hx::IsNull( ibo1 )) {
HXLINE( 248)					_hx_tmp120 = 0;
            				}
            				else {
HXLINE( 248)					_hx_tmp120 = ibo1->id;
            				}
HXDLIN( 248)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34963,_hx_tmp120);
            			}
HXDLIN( 248)			{
HXLINE( 248)				int size1 = data1->byteLength;
HXDLIN( 248)				Float srcData1 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(data1);
HXDLIN( 248)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34963,size1,srcData1,35044);
            			}
            		}
HXDLIN( 248)		this->singleIBO = ibo1;
HXLINE( 250)		int id23 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_vertex_array();
HXDLIN( 250)		 ::lime::graphics::opengl::GLObject _hx_tmp121;
HXDLIN( 250)		if ((id23 == 0)) {
HXLINE( 250)			_hx_tmp121 = null();
            		}
            		else {
HXLINE( 250)			 ::lime::graphics::opengl::GLObject object23 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id23);
HXDLIN( 250)			object23->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id23,7,::hx::DynamicPtr(object23))) );
HXDLIN( 250)			_hx_tmp121 = object23;
            		}
HXDLIN( 250)		this->groundVAO = _hx_tmp121;
HXLINE( 251)		int id24 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_buffer();
HXDLIN( 251)		 ::lime::graphics::opengl::GLObject _hx_tmp122;
HXDLIN( 251)		if ((id24 == 0)) {
HXLINE( 251)			_hx_tmp122 = null();
            		}
            		else {
HXLINE( 251)			 ::lime::graphics::opengl::GLObject object24 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id24);
HXDLIN( 251)			object24->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id24,3,::hx::DynamicPtr(object24))) );
HXDLIN( 251)			_hx_tmp122 = object24;
            		}
HXDLIN( 251)		this->groundIBO = _hx_tmp122;
HXLINE( 252)		int id25 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_buffer();
HXDLIN( 252)		 ::lime::graphics::opengl::GLObject _hx_tmp123;
HXDLIN( 252)		if ((id25 == 0)) {
HXLINE( 252)			_hx_tmp123 = null();
            		}
            		else {
HXLINE( 252)			 ::lime::graphics::opengl::GLObject object25 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id25);
HXDLIN( 252)			object25->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id25,3,::hx::DynamicPtr(object25))) );
HXDLIN( 252)			_hx_tmp123 = object25;
            		}
HXDLIN( 252)		this->groundVBO = _hx_tmp123;
HXLINE( 254)		{
HXLINE( 254)			 ::lime::graphics::opengl::GLObject buffer = this->groundVBO;
HXDLIN( 254)			{
HXLINE( 254)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this4 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 254)				if ((34962 == _this4->ARRAY_BUFFER)) {
HXLINE( 254)					_this4->_hx___arrayBufferBinding = buffer;
            				}
HXDLIN( 254)				if ((34962 == _this4->ELEMENT_ARRAY_BUFFER)) {
HXLINE( 254)					_this4->_hx___elementBufferBinding = buffer;
            				}
HXDLIN( 254)				int _hx_tmp124;
HXDLIN( 254)				if (::hx::IsNull( buffer )) {
HXLINE( 254)					_hx_tmp124 = 0;
            				}
            				else {
HXLINE( 254)					_hx_tmp124 = buffer->id;
            				}
HXDLIN( 254)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34962,_hx_tmp124);
            			}
            		}
HXLINE( 255)		{
HXLINE( 255)			::cpp::VirtualArray array2 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 255)			 ::lime::utils::ArrayBufferView this3;
HXDLIN( 255)			if (::hx::IsNotNull( array2 )) {
HXLINE( 255)				 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 255)				_this5->byteOffset = 0;
HXDLIN( 255)				_this5->length = array2->get_length();
HXDLIN( 255)				_this5->byteLength = (_this5->length * _this5->bytesPerElement);
HXDLIN( 255)				_this5->buffer = ::haxe::io::Bytes_obj::alloc(_this5->byteLength);
HXDLIN( 255)				_this5->copyFromArray(array2,null());
HXDLIN( 255)				this3 = _this5;
            			}
            			else {
HXLINE( 255)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 255)			Float srcData2 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this3);
HXDLIN( 255)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34962,0,srcData2,35048);
            		}
HXLINE( 256)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(0);
HXLINE( 257)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(0,4,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
HXLINE( 258)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(1);
HXLINE( 259)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(1,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(16));
HXLINE( 260)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(2);
HXLINE( 261)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(2,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(24));
HXLINE( 262)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(3);
HXLINE( 263)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(3,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(32));
HXLINE( 264)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(4);
HXLINE( 265)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(4,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(40));
HXLINE( 266)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(5);
HXLINE( 267)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(5,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(48));
HXLINE( 268)		{
HXLINE( 268)			 ::lime::graphics::opengl::GLObject buffer1 = this->groundIBO;
HXDLIN( 268)			{
HXLINE( 268)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this6 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 268)				if ((34963 == _this6->ARRAY_BUFFER)) {
HXLINE( 268)					_this6->_hx___arrayBufferBinding = buffer1;
            				}
HXDLIN( 268)				if ((34963 == _this6->ELEMENT_ARRAY_BUFFER)) {
HXLINE( 268)					_this6->_hx___elementBufferBinding = buffer1;
            				}
HXDLIN( 268)				int _hx_tmp125;
HXDLIN( 268)				if (::hx::IsNull( buffer1 )) {
HXLINE( 268)					_hx_tmp125 = 0;
            				}
            				else {
HXLINE( 268)					_hx_tmp125 = buffer1->id;
            				}
HXDLIN( 268)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34963,_hx_tmp125);
            			}
            		}
HXLINE( 269)		{
HXLINE( 269)			::cpp::VirtualArray array3 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 269)			 ::lime::utils::ArrayBufferView this4;
HXDLIN( 269)			if (::hx::IsNotNull( array3 )) {
HXLINE( 269)				 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 269)				_this7->byteOffset = 0;
HXDLIN( 269)				_this7->length = array3->get_length();
HXDLIN( 269)				_this7->byteLength = (_this7->length * _this7->bytesPerElement);
HXDLIN( 269)				_this7->buffer = ::haxe::io::Bytes_obj::alloc(_this7->byteLength);
HXDLIN( 269)				_this7->copyFromArray(array3,null());
HXDLIN( 269)				this4 = _this7;
            			}
            			else {
HXLINE( 269)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            			}
HXDLIN( 269)			Float srcData3 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this4);
HXDLIN( 269)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34963,0,srcData3,35048);
            		}
HXLINE( 271)		int id26 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_vertex_array();
HXDLIN( 271)		 ::lime::graphics::opengl::GLObject _hx_tmp126;
HXDLIN( 271)		if ((id26 == 0)) {
HXLINE( 271)			_hx_tmp126 = null();
            		}
            		else {
HXLINE( 271)			 ::lime::graphics::opengl::GLObject object26 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id26);
HXDLIN( 271)			object26->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id26,7,::hx::DynamicPtr(object26))) );
HXDLIN( 271)			_hx_tmp126 = object26;
            		}
HXDLIN( 271)		this->objVAO = _hx_tmp126;
HXLINE( 272)		int id27 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_buffer();
HXDLIN( 272)		 ::lime::graphics::opengl::GLObject _hx_tmp127;
HXDLIN( 272)		if ((id27 == 0)) {
HXLINE( 272)			_hx_tmp127 = null();
            		}
            		else {
HXLINE( 272)			 ::lime::graphics::opengl::GLObject object27 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id27);
HXDLIN( 272)			object27->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id27,3,::hx::DynamicPtr(object27))) );
HXDLIN( 272)			_hx_tmp127 = object27;
            		}
HXDLIN( 272)		this->objIBO = _hx_tmp127;
HXLINE( 273)		int id28 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_create_buffer();
HXDLIN( 273)		 ::lime::graphics::opengl::GLObject _hx_tmp128;
HXDLIN( 273)		if ((id28 == 0)) {
HXLINE( 273)			_hx_tmp128 = null();
            		}
            		else {
HXLINE( 273)			 ::lime::graphics::opengl::GLObject object28 =  ::lime::graphics::opengl::GLObject_obj::__alloc( HX_CTX ,id28);
HXDLIN( 273)			object28->ptr = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_object_register(id28,3,::hx::DynamicPtr(object28))) );
HXDLIN( 273)			_hx_tmp128 = object28;
            		}
HXDLIN( 273)		this->objVBO = _hx_tmp128;
HXLINE( 275)		{
HXLINE( 275)			 ::lime::graphics::opengl::GLObject buffer2 = this->objVBO;
HXDLIN( 275)			{
HXLINE( 275)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this8 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 275)				if ((34962 == _this8->ARRAY_BUFFER)) {
HXLINE( 275)					_this8->_hx___arrayBufferBinding = buffer2;
            				}
HXDLIN( 275)				if ((34962 == _this8->ELEMENT_ARRAY_BUFFER)) {
HXLINE( 275)					_this8->_hx___elementBufferBinding = buffer2;
            				}
HXDLIN( 275)				int _hx_tmp129;
HXDLIN( 275)				if (::hx::IsNull( buffer2 )) {
HXLINE( 275)					_hx_tmp129 = 0;
            				}
            				else {
HXLINE( 275)					_hx_tmp129 = buffer2->id;
            				}
HXDLIN( 275)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34962,_hx_tmp129);
            			}
            		}
HXLINE( 276)		{
HXLINE( 276)			::cpp::VirtualArray array4 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 276)			 ::lime::utils::ArrayBufferView this5;
HXDLIN( 276)			if (::hx::IsNotNull( array4 )) {
HXLINE( 276)				 ::lime::utils::ArrayBufferView _this9 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 276)				_this9->byteOffset = 0;
HXDLIN( 276)				_this9->length = array4->get_length();
HXDLIN( 276)				_this9->byteLength = (_this9->length * _this9->bytesPerElement);
HXDLIN( 276)				_this9->buffer = ::haxe::io::Bytes_obj::alloc(_this9->byteLength);
HXDLIN( 276)				_this9->copyFromArray(array4,null());
HXDLIN( 276)				this5 = _this9;
            			}
            			else {
HXLINE( 276)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 276)			Float srcData4 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this5);
HXDLIN( 276)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34962,0,srcData4,35048);
            		}
HXLINE( 277)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(0);
HXLINE( 278)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(0,4,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
HXLINE( 279)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(1);
HXLINE( 280)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(1,2,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(16));
HXLINE( 281)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(2);
HXLINE( 282)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(2,2,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(24));
HXLINE( 283)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(3);
HXLINE( 284)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(3,1,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(32));
HXLINE( 285)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(4);
HXLINE( 286)		::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(4,1,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(36));
HXLINE( 287)		{
HXLINE( 287)			 ::lime::graphics::opengl::GLObject buffer3 = this->objIBO;
HXDLIN( 287)			{
HXLINE( 287)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this10 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN( 287)				if ((34963 == _this10->ARRAY_BUFFER)) {
HXLINE( 287)					_this10->_hx___arrayBufferBinding = buffer3;
            				}
HXDLIN( 287)				if ((34963 == _this10->ELEMENT_ARRAY_BUFFER)) {
HXLINE( 287)					_this10->_hx___elementBufferBinding = buffer3;
            				}
HXDLIN( 287)				int _hx_tmp130;
HXDLIN( 287)				if (::hx::IsNull( buffer3 )) {
HXLINE( 287)					_hx_tmp130 = 0;
            				}
            				else {
HXLINE( 287)					_hx_tmp130 = buffer3->id;
            				}
HXDLIN( 287)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34963,_hx_tmp130);
            			}
            		}
HXLINE( 288)		{
HXLINE( 288)			::cpp::VirtualArray array5 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 288)			 ::lime::utils::ArrayBufferView this6;
HXDLIN( 288)			if (::hx::IsNotNull( array5 )) {
HXLINE( 288)				 ::lime::utils::ArrayBufferView _this11 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 288)				_this11->byteOffset = 0;
HXDLIN( 288)				_this11->length = array5->get_length();
HXDLIN( 288)				_this11->byteLength = (_this11->length * _this11->bytesPerElement);
HXDLIN( 288)				_this11->buffer = ::haxe::io::Bytes_obj::alloc(_this11->byteLength);
HXDLIN( 288)				_this11->copyFromArray(array5,null());
HXDLIN( 288)				this6 = _this11;
            			}
            			else {
HXLINE( 288)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            			}
HXDLIN( 288)			Float srcData5 = ::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this6);
HXDLIN( 288)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34963,0,srcData5,35048);
            		}
HXLINE( 290)		this->c3d = ::Main_obj::primaryStage3D->context3D;
HXLINE( 291)		this->c3d->configureBackBuffer(::Main_obj::stageWidth,::Main_obj::stageHeight,0,true,null(),null());
HXLINE( 293)		this->lastWidth = ( (short)(::Main_obj::stageWidth) );
HXLINE( 294)		this->lastHeight = ( (short)(::Main_obj::stageHeight) );
HXLINE( 295)		::util::RenderUtils_obj::clipSpaceScaleX = ( (float)((( (Float)(2) ) / ( (Float)(::Main_obj::stageWidth) ))) );
HXLINE( 296)		::util::RenderUtils_obj::clipSpaceScaleY = ( (float)((( (Float)(2) ) / ( (Float)(::Main_obj::stageHeight) ))) );
            	}


void Map_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_299_dispose)
HXLINE( 300)		this->squares = null();
HXLINE( 302)		if (::hx::IsNotNull( this->gameObjects )) {
HXLINE( 303)			int _g = 0;
HXDLIN( 303)			::Array< ::Dynamic> _g1 = this->gameObjects;
HXDLIN( 303)			while((_g < _g1->length)){
HXLINE( 303)				 ::objects::GameObject obj = _g1->__get(_g).StaticCast<  ::objects::GameObject >();
HXDLIN( 303)				_g = (_g + 1);
HXLINE( 304)				obj->dispose();
            			}
            		}
HXLINE( 305)		this->gameObjects = null();
HXLINE( 307)		this->player = null();
HXLINE( 308)		this->quest = null();
HXLINE( 309)		::engine::TextureFactory_obj::disposeTextures();
            	}


void Map_obj::update(int time,short dt){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_312_update)
HXLINE( 313)		int i = 0;
HXLINE( 314)		::Array< ::Dynamic> goRemove = ::Array_obj< ::Dynamic>::__new();
HXLINE( 315)		while((i < this->gameObjectsLen)){
HXLINE( 316)			 ::objects::GameObject go = this->gameObjects->__unsafe_get(i).StaticCast<  ::objects::GameObject >();
HXLINE( 317)			if (!(go->update(time,dt))) {
HXLINE( 318)				goRemove->push(go);
            			}
HXLINE( 319)			i = (i + 1);
            		}
HXLINE( 322)		i = 0;
HXLINE( 324)		while((i < goRemove->length)){
HXLINE( 325)			 ::objects::GameObject go1 = goRemove->__get(i).StaticCast<  ::objects::GameObject >();
HXLINE( 326)			go1->removeFromMap();
HXLINE( 327)			this->gameObjects->remove(go1);
HXLINE( 328)			this->gameObjectsLen--;
HXLINE( 329)			i = (i + 1);
            		}
            	}


void Map_obj::setGroundTile(unsigned short x,unsigned short y,unsigned short tileType){
            	HX_GC_STACKFRAME(&_hx_pos_680c17cc7afbb141_403_setGroundTile)
HXLINE( 404)		bool _hx_tmp;
HXDLIN( 404)		bool _hx_tmp1;
HXDLIN( 404)		bool _hx_tmp2;
HXDLIN( 404)		if (!((x < 0))) {
HXLINE( 404)			_hx_tmp2 = (x >= this->mapWidth);
            		}
            		else {
HXLINE( 404)			_hx_tmp2 = true;
            		}
HXDLIN( 404)		if (!(_hx_tmp2)) {
HXLINE( 404)			_hx_tmp1 = (y < 0);
            		}
            		else {
HXLINE( 404)			_hx_tmp1 = true;
            		}
HXDLIN( 404)		if (!(_hx_tmp1)) {
HXLINE( 404)			_hx_tmp = (y >= this->mapHeight);
            		}
            		else {
HXLINE( 404)			_hx_tmp = true;
            		}
HXDLIN( 404)		if (_hx_tmp) {
HXLINE( 405)			return;
            		}
HXLINE( 407)		int idx = ( (int)((x + (y * this->mapWidth))) );
HXLINE( 408)		 ::map::Square square = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,idx)) );
HXLINE( 409)		if (::hx::IsNull( square )) {
HXLINE( 410)			square =  ::map::Square_obj::__alloc( HX_CTX ,( (float)((x + ((Float)0.5))) ),( (float)((y + ((Float)0.5))) ));
HXLINE( 411)			this->squares->__unsafe_set(idx,square);
            		}
HXLINE( 414)		square->tileType = ( (int)(tileType) );
HXLINE( 415)		square->props = ( ( ::map::GroundProperties)(::map::GroundLibrary_obj::propsLibrary->get(tileType)) );
HXLINE( 416)		 ::objects::TextureData texData = ( ( ::objects::TextureData)(::map::GroundLibrary_obj::typeToTextureData->get(tileType)) )->getTextureData(null());
HXLINE( 417)		square->baseU = texData->uValue;
HXLINE( 418)		square->baseV = texData->vValue;
HXLINE( 419)		 ::objects::animation::AnimationsData animationsData = ( ( ::objects::animation::AnimationsData)(::map::GroundLibrary_obj::typeToAnimationsData->get(tileType)) );
HXLINE( 420)		if (::hx::IsNotNull( animationsData )) {
HXLINE( 421)			square->animations =  ::objects::animation::Animations_obj::__alloc( HX_CTX ,animationsData);
            		}
HXLINE( 422)		float _hx_tmp3;
HXDLIN( 422)		bool _hx_tmp4;
HXDLIN( 422)		if (::hx::IsNotNull( square->props )) {
HXLINE( 422)			_hx_tmp4 = square->props->sink;
            		}
            		else {
HXLINE( 422)			_hx_tmp4 = false;
            		}
HXDLIN( 422)		if (_hx_tmp4) {
HXLINE( 422)			_hx_tmp3 = ( (float)(((Float)0.6)) );
            		}
            		else {
HXLINE( 422)			_hx_tmp3 = ( (float)(0) );
            		}
HXDLIN( 422)		square->sink = _hx_tmp3;
HXLINE( 424)		{
HXLINE( 424)			unsigned short x1 = (x - ( (unsigned short)(1) ));
HXDLIN( 424)			bool _hx_tmp5;
HXDLIN( 424)			bool _hx_tmp6;
HXDLIN( 424)			bool _hx_tmp7;
HXDLIN( 424)			if (!((x1 < 0))) {
HXLINE( 424)				_hx_tmp7 = (x1 >= this->mapWidth);
            			}
            			else {
HXLINE( 424)				_hx_tmp7 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp7)) {
HXLINE( 424)				_hx_tmp6 = (y < 0);
            			}
            			else {
HXLINE( 424)				_hx_tmp6 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp6)) {
HXLINE( 424)				_hx_tmp5 = (y >= this->mapHeight);
            			}
            			else {
HXLINE( 424)				_hx_tmp5 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp5)) {
HXLINE( 424)				 ::map::Square leftSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)(((x - ( (unsigned short)(1) )) + (y * this->mapWidth))) ))) );
HXDLIN( 424)				if (::hx::IsNotNull( leftSq )) {
HXLINE( 424)					if ((leftSq->props->blendPriority > square->props->blendPriority)) {
HXLINE( 424)						square->leftBlendU = leftSq->baseU;
HXDLIN( 424)						square->leftBlendV = leftSq->baseV;
            					}
            					else {
HXLINE( 424)						if ((leftSq->props->blendPriority < square->props->blendPriority)) {
HXLINE( 424)							leftSq->rightBlendU = square->baseU;
HXDLIN( 424)							leftSq->rightBlendV = square->baseV;
            						}
            						else {
HXLINE( 424)							square->leftBlendU = (square->leftBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN( 424)							leftSq->rightBlendU = (leftSq->rightBlendV = ( (float)(((Float)-1.0)) ));
            						}
            					}
            				}
            			}
HXDLIN( 424)			unsigned short y1 = (y - ( (unsigned short)(1) ));
HXDLIN( 424)			bool _hx_tmp8;
HXDLIN( 424)			bool _hx_tmp9;
HXDLIN( 424)			bool _hx_tmp10;
HXDLIN( 424)			if (!((x < 0))) {
HXLINE( 424)				_hx_tmp10 = (x >= this->mapWidth);
            			}
            			else {
HXLINE( 424)				_hx_tmp10 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp10)) {
HXLINE( 424)				_hx_tmp9 = (y1 < 0);
            			}
            			else {
HXLINE( 424)				_hx_tmp9 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp9)) {
HXLINE( 424)				_hx_tmp8 = (y1 >= this->mapHeight);
            			}
            			else {
HXLINE( 424)				_hx_tmp8 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp8)) {
HXLINE( 424)				 ::map::Square topSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((x + ((y - ( (unsigned short)(1) )) * this->mapWidth))) ))) );
HXDLIN( 424)				if (::hx::IsNotNull( topSq )) {
HXLINE( 424)					if ((topSq->props->blendPriority > square->props->blendPriority)) {
HXLINE( 424)						square->topBlendU = topSq->baseU;
HXDLIN( 424)						square->topBlendV = topSq->baseV;
            					}
            					else {
HXLINE( 424)						if ((topSq->props->blendPriority < square->props->blendPriority)) {
HXLINE( 424)							topSq->bottomBlendU = square->baseU;
HXDLIN( 424)							topSq->bottomBlendV = square->baseV;
            						}
            						else {
HXLINE( 424)							square->topBlendU = (square->topBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN( 424)							topSq->bottomBlendU = (topSq->bottomBlendV = ( (float)(((Float)-1.0)) ));
            						}
            					}
            				}
            			}
HXDLIN( 424)			unsigned short x2 = (x + 1);
HXDLIN( 424)			bool _hx_tmp11;
HXDLIN( 424)			bool _hx_tmp12;
HXDLIN( 424)			bool _hx_tmp13;
HXDLIN( 424)			if (!((x2 < 0))) {
HXLINE( 424)				_hx_tmp13 = (x2 >= this->mapWidth);
            			}
            			else {
HXLINE( 424)				_hx_tmp13 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp13)) {
HXLINE( 424)				_hx_tmp12 = (y < 0);
            			}
            			else {
HXLINE( 424)				_hx_tmp12 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp12)) {
HXLINE( 424)				_hx_tmp11 = (y >= this->mapHeight);
            			}
            			else {
HXLINE( 424)				_hx_tmp11 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp11)) {
HXLINE( 424)				 ::map::Square rightSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)(((x + 1) + (y * this->mapWidth))) ))) );
HXDLIN( 424)				if (::hx::IsNotNull( rightSq )) {
HXLINE( 424)					if ((rightSq->props->blendPriority > square->props->blendPriority)) {
HXLINE( 424)						square->rightBlendU = rightSq->baseU;
HXDLIN( 424)						square->rightBlendV = rightSq->baseV;
            					}
            					else {
HXLINE( 424)						if ((rightSq->props->blendPriority < square->props->blendPriority)) {
HXLINE( 424)							rightSq->leftBlendU = square->baseU;
HXDLIN( 424)							rightSq->leftBlendV = square->baseV;
            						}
            						else {
HXLINE( 424)							square->rightBlendU = (square->rightBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN( 424)							rightSq->leftBlendU = (rightSq->leftBlendV = ( (float)(((Float)-1.0)) ));
            						}
            					}
            				}
            			}
HXDLIN( 424)			unsigned short y2 = (y + 1);
HXDLIN( 424)			bool _hx_tmp14;
HXDLIN( 424)			bool _hx_tmp15;
HXDLIN( 424)			bool _hx_tmp16;
HXDLIN( 424)			if (!((x < 0))) {
HXLINE( 424)				_hx_tmp16 = (x >= this->mapWidth);
            			}
            			else {
HXLINE( 424)				_hx_tmp16 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp16)) {
HXLINE( 424)				_hx_tmp15 = (y2 < 0);
            			}
            			else {
HXLINE( 424)				_hx_tmp15 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp15)) {
HXLINE( 424)				_hx_tmp14 = (y2 >= this->mapHeight);
            			}
            			else {
HXLINE( 424)				_hx_tmp14 = true;
            			}
HXDLIN( 424)			if (!(_hx_tmp14)) {
HXLINE( 424)				 ::map::Square bottomSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((x + ((y + 1) * this->mapWidth))) ))) );
HXDLIN( 424)				if (::hx::IsNotNull( bottomSq )) {
HXLINE( 424)					if ((bottomSq->props->blendPriority > square->props->blendPriority)) {
HXLINE( 424)						square->bottomBlendU = bottomSq->baseU;
HXDLIN( 424)						square->bottomBlendV = bottomSq->baseV;
            					}
            					else {
HXLINE( 424)						if ((bottomSq->props->blendPriority < square->props->blendPriority)) {
HXLINE( 424)							bottomSq->topBlendU = square->baseU;
HXDLIN( 424)							bottomSq->topBlendV = square->baseV;
            						}
            						else {
HXLINE( 424)							square->bottomBlendU = (square->bottomBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN( 424)							bottomSq->topBlendU = (bottomSq->topBlendV = ( (float)(((Float)-1.0)) ));
            						}
            					}
            				}
            			}
            		}
            	}


void Map_obj::addGameObject( ::objects::GameObject go,float posX,float posY){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_427_addGameObject)
HXLINE( 428)		go->mapX = posX;
HXLINE( 429)		go->mapY = posY;
HXLINE( 431)		if (!(go->addTo(::hx::ObjectPtr<OBJ_>(this),go->mapX,go->mapY))) {
HXLINE( 432)			return;
            		}
HXLINE( 434)		this->gameObjects->push(go);
HXLINE( 435)		this->gameObjectsLen++;
            	}


void Map_obj::removeObj(int objectId){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_438_removeObj)
HXLINE( 439)		int i = 0;
HXLINE( 440)		while((i < this->gameObjectsLen)){
HXLINE( 441)			 ::objects::GameObject go = this->gameObjects->__unsafe_get(i).StaticCast<  ::objects::GameObject >();
HXLINE( 442)			if ((go->objectId == objectId)) {
HXLINE( 443)				go->removeFromMap();
HXLINE( 444)				this->gameObjects->removeRange(i,1);
HXLINE( 445)				this->gameObjectsLen--;
HXLINE( 446)				return;
            			}
HXLINE( 448)			i = (i + 1);
            		}
            	}


 ::objects::GameObject Map_obj::getGameObject(int objectId){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_452_getGameObject)
HXLINE( 453)		int i = 0;
HXLINE( 454)		while((i < this->gameObjectsLen)){
HXLINE( 455)			 ::objects::GameObject go = this->gameObjects->__unsafe_get(i).StaticCast<  ::objects::GameObject >();
HXLINE( 456)			if ((go->objectId == objectId)) {
HXLINE( 457)				return go;
            			}
HXLINE( 458)			i = (i + 1);
            		}
HXLINE( 461)		return null();
            	}


void Map_obj::removeGameObject(int objectId){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_464_removeGameObject)
HXLINE( 465)		int i = 0;
HXLINE( 466)		while((i < this->gameObjectsLen)){
HXLINE( 467)			 ::objects::GameObject go = this->gameObjects->__unsafe_get(i).StaticCast<  ::objects::GameObject >();
HXLINE( 468)			if ((go->objectId == objectId)) {
HXLINE( 469)				go->removeFromMap();
HXLINE( 470)				this->gameObjects->removeRange(i,1);
HXLINE( 471)				this->gameObjectsLen--;
HXLINE( 472)				return;
            			}
HXLINE( 474)			i = (i + 1);
            		}
            	}


 ::map::Square Map_obj::lookupSquare(unsigned short x,unsigned short y){
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_479_lookupSquare)
HXDLIN( 479)		bool _hx_tmp;
HXDLIN( 479)		bool _hx_tmp1;
HXDLIN( 479)		bool _hx_tmp2;
HXDLIN( 479)		bool _hx_tmp3;
HXDLIN( 479)		if (!((x < 0))) {
HXDLIN( 479)			_hx_tmp3 = (x >= this->mapWidth);
            		}
            		else {
HXDLIN( 479)			_hx_tmp3 = true;
            		}
HXDLIN( 479)		if (!(_hx_tmp3)) {
HXDLIN( 479)			_hx_tmp2 = (y < 0);
            		}
            		else {
HXDLIN( 479)			_hx_tmp2 = true;
            		}
HXDLIN( 479)		if (!(_hx_tmp2)) {
HXDLIN( 479)			_hx_tmp1 = (y >= this->mapHeight);
            		}
            		else {
HXDLIN( 479)			_hx_tmp1 = true;
            		}
HXDLIN( 479)		if (!(_hx_tmp1)) {
HXLINE( 483)			if (::hx::IsNotNull( this->player )) {
HXLINE( 484)				if (!((this->player->mapX < 0))) {
HXDLIN( 479)					_hx_tmp = (this->player->mapY < 0);
            				}
            				else {
HXDLIN( 479)					_hx_tmp = true;
            				}
            			}
            			else {
HXDLIN( 479)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 479)			_hx_tmp = true;
            		}
HXDLIN( 479)		if (_hx_tmp) {
HXLINE( 484)			return null();
            		}
            		else {
HXLINE( 484)			return ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((x + (y * this->mapWidth))) ))) );
            		}
HXLINE( 479)		return null();
            	}


void Map_obj::draw(int time){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::objects::GameObject a, ::objects::GameObject b){
            			HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_2234_draw)
HXLINE(2234)			return ::Std_obj::_hx_int(( (Float)((a->screenYNoZ - b->screenYNoZ)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_680c17cc7afbb141_2117_draw)
HXLINE(2118)		float camX = ::map::Camera_obj::mapX;
HXDLIN(2118)		float camY = ::map::Camera_obj::mapY;
HXLINE(2119)		bool _hx_tmp;
HXDLIN(2119)		bool _hx_tmp1;
HXDLIN(2119)		if (((time - this->lastTileUpdate) > 100)) {
HXLINE(2119)			_hx_tmp1 = (camX >= 0);
            		}
            		else {
HXLINE(2119)			_hx_tmp1 = false;
            		}
HXDLIN(2119)		if (_hx_tmp1) {
HXLINE(2119)			_hx_tmp = (camY >= 0);
            		}
            		else {
HXLINE(2119)			_hx_tmp = false;
            		}
HXDLIN(2119)		if (_hx_tmp) {
HXLINE(2120)			int xMin = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)((camX - ::map::Camera_obj::maxDist)) )));
HXDLIN(2120)			int xMax = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->mapWidth) ),( (Float)((camX + ::map::Camera_obj::maxDist)) )));
HXLINE(2122)			int yMin = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)((camY - ::map::Camera_obj::maxDist)) )));
HXDLIN(2122)			int yMax = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->mapHeight) ),( (Float)((camY + ::map::Camera_obj::maxDist)) )));
HXLINE(2125)			unsigned short visIdx = ( (unsigned short)(0) );
HXLINE(2126)			{
HXLINE(2126)				int _g = xMin;
HXDLIN(2126)				int _g1 = xMax;
HXDLIN(2126)				while((_g < _g1)){
HXLINE(2126)					_g = (_g + 1);
HXDLIN(2126)					int x = (_g - 1);
HXLINE(2127)					{
HXLINE(2127)						int _g2 = yMin;
HXDLIN(2127)						int _g3 = yMax;
HXDLIN(2127)						while((_g2 < _g3)){
HXLINE(2127)							_g2 = (_g2 + 1);
HXDLIN(2127)							int y = (_g2 - 1);
HXLINE(2128)							float dx = ( (float)((( (Float)((camX - ( (float)(x) ))) ) - ((Float)0.5))) );
HXLINE(2129)							float dy = ( (float)((( (Float)((camY - ( (float)(y) ))) ) - ((Float)0.5))) );
HXLINE(2130)							if ((((dx * dx) + (dy * dy)) > ::map::Camera_obj::maxDistSq)) {
HXLINE(2131)								continue;
            							}
HXLINE(2133)							 ::map::Square square = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((x + (( (unsigned short)(y) ) * this->mapWidth))) ))) );
HXLINE(2134)							if (::hx::IsNull( square )) {
HXLINE(2135)								continue;
            							}
HXLINE(2137)							{
HXLINE(2137)								visIdx = (visIdx + 1);
HXDLIN(2137)								this->visSquares->__unsafe_set(( (int)((visIdx - ( (unsigned short)(1) ))) ),square);
            							}
HXLINE(2142)							square->lastVisible = (time + 100);
            						}
            					}
            				}
            			}
HXLINE(2145)			this->visSquareLen = visIdx;
HXLINE(2146)			this->lastTileUpdate = time;
            		}
HXLINE(2149)		if (((time - this->lastBufferUpdate) > 500)) {
HXLINE(2150)			bool _hx_tmp2;
HXDLIN(2150)			if ((::Main_obj::stageWidth == this->lastWidth)) {
HXLINE(2150)				_hx_tmp2 = (::Main_obj::stageHeight != this->lastHeight);
            			}
            			else {
HXLINE(2150)				_hx_tmp2 = true;
            			}
HXDLIN(2150)			if (_hx_tmp2) {
HXLINE(2151)				this->c3d->configureBackBuffer(::Main_obj::stageWidth,::Main_obj::stageHeight,0,false,null(),null());
HXLINE(2153)				this->lastWidth = ( (short)(::Main_obj::stageWidth) );
HXLINE(2154)				this->lastHeight = ( (short)(::Main_obj::stageHeight) );
HXLINE(2155)				::util::RenderUtils_obj::clipSpaceScaleX = ( (float)((( (Float)(2) ) / ( (Float)(::Main_obj::stageWidth) ))) );
HXLINE(2156)				::util::RenderUtils_obj::clipSpaceScaleY = ( (float)((( (Float)(2) ) / ( (Float)(::Main_obj::stageHeight) ))) );
            			}
HXLINE(2159)			this->lastBufferUpdate = time;
            		}
HXLINE(2162)		this->c3d->clear(null(),null(),null(),null(),null(),null(),null());
HXLINE(2163)		this->rdSingle->resize(0);
HXLINE(2166)		{
HXLINE(2166)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2166)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(2929);
            		}
HXLINE(2167)		{
HXLINE(2167)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this1 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2167)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(3089);
            		}
HXLINE(2168)		{
HXLINE(2168)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this2 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2168)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_disable(2960);
            		}
HXLINE(2170)		{
HXLINE(2170)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this3 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2170)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_active_texture(33984);
            		}
HXLINE(2171)		{
HXLINE(2171)			 ::lime::graphics::opengl::GLObject texture = ::Main_obj::atlas->texture;
HXDLIN(2171)			{
HXLINE(2171)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this4 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2171)				if ((3553 == _this4->TEXTURE_2D)) {
HXLINE(2171)					_this4->_hx___texture2DBinding = texture;
            				}
HXDLIN(2171)				if ((3553 == _this4->TEXTURE_CUBE_MAP)) {
HXLINE(2171)					_this4->_hx___textureCubeMapBinding = texture;
            				}
HXDLIN(2171)				int _hx_tmp3;
HXDLIN(2171)				if (::hx::IsNull( texture )) {
HXLINE(2171)					_hx_tmp3 = 0;
            				}
            				else {
HXLINE(2171)					_hx_tmp3 = texture->id;
            				}
HXDLIN(2171)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_texture(3553,_hx_tmp3);
            			}
            		}
HXLINE(2174)		int vSize = ::Std_obj::_hx_int(::Math_obj::max(( (Float)((this->visSquareLen * ( (unsigned short)(56) ))) ),( (Float)((this->gameObjectsLen * 40)) )));
HXLINE(2175)		int iSize = ::Std_obj::_hx_int(::Math_obj::max(( (Float)((this->visSquareLen * ( (unsigned short)(6) ))) ),( (Float)((this->gameObjectsLen * 6)) )));
HXLINE(2176)		float _f32Arr_[vSize];
HXLINE(2177)		int _i32Arr_[iSize];
HXLINE(2179)		this->i = (this->vIdx = (this->iIdx = 0));
HXLINE(2180)		{
HXLINE(2180)			float xScaledCos = ::map::Camera_obj::xScaledCos;
HXDLIN(2180)			float yScaledCos = ::map::Camera_obj::yScaledCos;
HXDLIN(2180)			float xScaledSin = ::map::Camera_obj::xScaledSin;
HXDLIN(2180)			float yScaledSin = ::map::Camera_obj::yScaledSin;
HXDLIN(2180)			while((this->i < this->visSquareLen)){
HXLINE(2180)				 ::map::Square square1 = ( ( ::map::Square)(_hx_array_unsafe_get(this->visSquares,this->i)) );
HXDLIN(2180)				if (::hx::IsNotNull( square1->animations )) {
HXLINE(2180)					 ::util::Rect rect = square1->animations->getTexture(time);
HXDLIN(2180)					if (::hx::IsNotNull( rect )) {
HXLINE(2180)						square1->baseU = ( (float)(((rect->x + 2) / ( (Float)(1024) ))) );
HXDLIN(2180)						square1->baseV = ( (float)(((rect->y + 2) / ( (Float)(1024) ))) );
HXDLIN(2180)						{
HXLINE(2180)							unsigned short x1 = square1->x;
HXDLIN(2180)							unsigned short y1 = square1->y;
HXDLIN(2180)							unsigned short x2 = (x1 - ( (unsigned short)(1) ));
HXDLIN(2180)							bool _hx_tmp4;
HXDLIN(2180)							bool _hx_tmp5;
HXDLIN(2180)							bool _hx_tmp6;
HXDLIN(2180)							if (!((x2 < 0))) {
HXLINE(2180)								_hx_tmp6 = (x2 >= this->mapWidth);
            							}
            							else {
HXLINE(2180)								_hx_tmp6 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp6)) {
HXLINE(2180)								_hx_tmp5 = (y1 < 0);
            							}
            							else {
HXLINE(2180)								_hx_tmp5 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp5)) {
HXLINE(2180)								_hx_tmp4 = (y1 >= this->mapHeight);
            							}
            							else {
HXLINE(2180)								_hx_tmp4 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp4)) {
HXLINE(2180)								 ::map::Square leftSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)(((x1 - ( (unsigned short)(1) )) + (y1 * this->mapWidth))) ))) );
HXDLIN(2180)								if (::hx::IsNotNull( leftSq )) {
HXLINE(2180)									if ((leftSq->props->blendPriority > square1->props->blendPriority)) {
HXLINE(2180)										square1->leftBlendU = leftSq->baseU;
HXDLIN(2180)										square1->leftBlendV = leftSq->baseV;
            									}
            									else {
HXLINE(2180)										if ((leftSq->props->blendPriority < square1->props->blendPriority)) {
HXLINE(2180)											leftSq->rightBlendU = square1->baseU;
HXDLIN(2180)											leftSq->rightBlendV = square1->baseV;
            										}
            										else {
HXLINE(2180)											square1->leftBlendU = (square1->leftBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN(2180)											leftSq->rightBlendU = (leftSq->rightBlendV = ( (float)(((Float)-1.0)) ));
            										}
            									}
            								}
            							}
HXDLIN(2180)							unsigned short y2 = (y1 - ( (unsigned short)(1) ));
HXDLIN(2180)							bool _hx_tmp7;
HXDLIN(2180)							bool _hx_tmp8;
HXDLIN(2180)							bool _hx_tmp9;
HXDLIN(2180)							if (!((x1 < 0))) {
HXLINE(2180)								_hx_tmp9 = (x1 >= this->mapWidth);
            							}
            							else {
HXLINE(2180)								_hx_tmp9 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp9)) {
HXLINE(2180)								_hx_tmp8 = (y2 < 0);
            							}
            							else {
HXLINE(2180)								_hx_tmp8 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp8)) {
HXLINE(2180)								_hx_tmp7 = (y2 >= this->mapHeight);
            							}
            							else {
HXLINE(2180)								_hx_tmp7 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp7)) {
HXLINE(2180)								 ::map::Square topSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((x1 + ((y1 - ( (unsigned short)(1) )) * this->mapWidth))) ))) );
HXDLIN(2180)								if (::hx::IsNotNull( topSq )) {
HXLINE(2180)									if ((topSq->props->blendPriority > square1->props->blendPriority)) {
HXLINE(2180)										square1->topBlendU = topSq->baseU;
HXDLIN(2180)										square1->topBlendV = topSq->baseV;
            									}
            									else {
HXLINE(2180)										if ((topSq->props->blendPriority < square1->props->blendPriority)) {
HXLINE(2180)											topSq->bottomBlendU = square1->baseU;
HXDLIN(2180)											topSq->bottomBlendV = square1->baseV;
            										}
            										else {
HXLINE(2180)											square1->topBlendU = (square1->topBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN(2180)											topSq->bottomBlendU = (topSq->bottomBlendV = ( (float)(((Float)-1.0)) ));
            										}
            									}
            								}
            							}
HXDLIN(2180)							unsigned short x3 = (x1 + 1);
HXDLIN(2180)							bool _hx_tmp10;
HXDLIN(2180)							bool _hx_tmp11;
HXDLIN(2180)							bool _hx_tmp12;
HXDLIN(2180)							if (!((x3 < 0))) {
HXLINE(2180)								_hx_tmp12 = (x3 >= this->mapWidth);
            							}
            							else {
HXLINE(2180)								_hx_tmp12 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp12)) {
HXLINE(2180)								_hx_tmp11 = (y1 < 0);
            							}
            							else {
HXLINE(2180)								_hx_tmp11 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp11)) {
HXLINE(2180)								_hx_tmp10 = (y1 >= this->mapHeight);
            							}
            							else {
HXLINE(2180)								_hx_tmp10 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp10)) {
HXLINE(2180)								 ::map::Square rightSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)(((x1 + 1) + (y1 * this->mapWidth))) ))) );
HXDLIN(2180)								if (::hx::IsNotNull( rightSq )) {
HXLINE(2180)									if ((rightSq->props->blendPriority > square1->props->blendPriority)) {
HXLINE(2180)										square1->rightBlendU = rightSq->baseU;
HXDLIN(2180)										square1->rightBlendV = rightSq->baseV;
            									}
            									else {
HXLINE(2180)										if ((rightSq->props->blendPriority < square1->props->blendPriority)) {
HXLINE(2180)											rightSq->leftBlendU = square1->baseU;
HXDLIN(2180)											rightSq->leftBlendV = square1->baseV;
            										}
            										else {
HXLINE(2180)											square1->rightBlendU = (square1->rightBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN(2180)											rightSq->leftBlendU = (rightSq->leftBlendV = ( (float)(((Float)-1.0)) ));
            										}
            									}
            								}
            							}
HXDLIN(2180)							unsigned short y3 = (y1 + 1);
HXDLIN(2180)							bool _hx_tmp13;
HXDLIN(2180)							bool _hx_tmp14;
HXDLIN(2180)							bool _hx_tmp15;
HXDLIN(2180)							if (!((x1 < 0))) {
HXLINE(2180)								_hx_tmp15 = (x1 >= this->mapWidth);
            							}
            							else {
HXLINE(2180)								_hx_tmp15 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp15)) {
HXLINE(2180)								_hx_tmp14 = (y3 < 0);
            							}
            							else {
HXLINE(2180)								_hx_tmp14 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp14)) {
HXLINE(2180)								_hx_tmp13 = (y3 >= this->mapHeight);
            							}
            							else {
HXLINE(2180)								_hx_tmp13 = true;
            							}
HXDLIN(2180)							if (!(_hx_tmp13)) {
HXLINE(2180)								 ::map::Square bottomSq = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((x1 + ((y1 + 1) * this->mapWidth))) ))) );
HXDLIN(2180)								if (::hx::IsNotNull( bottomSq )) {
HXLINE(2180)									if ((bottomSq->props->blendPriority > square1->props->blendPriority)) {
HXLINE(2180)										square1->bottomBlendU = bottomSq->baseU;
HXDLIN(2180)										square1->bottomBlendV = bottomSq->baseV;
            									}
            									else {
HXLINE(2180)										if ((bottomSq->props->blendPriority < square1->props->blendPriority)) {
HXLINE(2180)											bottomSq->topBlendU = square1->baseU;
HXDLIN(2180)											bottomSq->topBlendV = square1->baseV;
            										}
            										else {
HXLINE(2180)											square1->bottomBlendU = (square1->bottomBlendV = ( (float)(((Float)-1.0)) ));
HXDLIN(2180)											bottomSq->topBlendU = (bottomSq->topBlendV = ( (float)(((Float)-1.0)) ));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(2180)				square1->clipX = ((((square1->middleX * ::map::Camera_obj::cos) + (square1->middleY * ::map::Camera_obj::sin)) + ::map::Camera_obj::csX) * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2180)				square1->clipY = ((((square1->middleX * -(::map::Camera_obj::sin)) + (square1->middleY * ::map::Camera_obj::cos)) + ::map::Camera_obj::csY) * ::util::RenderUtils_obj::clipSpaceScaleY);
HXDLIN(2180)				{
HXLINE(2180)					int index = this->vIdx;
HXDLIN(2180)					float value = ((-(xScaledCos) - xScaledSin) + square1->clipX);
HXDLIN(2180)					_f32Arr_[index] = value;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index1 = (this->vIdx + 1);
HXDLIN(2180)					float value1 = ((yScaledSin - yScaledCos) + square1->clipY);
HXDLIN(2180)					_f32Arr_[index1] = value1;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index2 = (this->vIdx + 2);
HXDLIN(2180)					_f32Arr_[index2] = 0;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index3 = (this->vIdx + 3);
HXDLIN(2180)					_f32Arr_[index3] = 0;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index4 = (this->vIdx + 4);
HXDLIN(2180)					float value2 = square1->leftBlendU;
HXDLIN(2180)					_f32Arr_[index4] = value2;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index5 = (this->vIdx + 5);
HXDLIN(2180)					float value3 = square1->leftBlendV;
HXDLIN(2180)					_f32Arr_[index5] = value3;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index6 = (this->vIdx + 6);
HXDLIN(2180)					float value4 = square1->topBlendU;
HXDLIN(2180)					_f32Arr_[index6] = value4;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index7 = (this->vIdx + 7);
HXDLIN(2180)					float value5 = square1->topBlendV;
HXDLIN(2180)					_f32Arr_[index7] = value5;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index8 = (this->vIdx + 8);
HXDLIN(2180)					float value6 = square1->rightBlendU;
HXDLIN(2180)					_f32Arr_[index8] = value6;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index9 = (this->vIdx + 9);
HXDLIN(2180)					float value7 = square1->rightBlendV;
HXDLIN(2180)					_f32Arr_[index9] = value7;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index10 = (this->vIdx + 10);
HXDLIN(2180)					float value8 = square1->bottomBlendU;
HXDLIN(2180)					_f32Arr_[index10] = value8;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index11 = (this->vIdx + 11);
HXDLIN(2180)					float value9 = square1->bottomBlendV;
HXDLIN(2180)					_f32Arr_[index11] = value9;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index12 = (this->vIdx + 12);
HXDLIN(2180)					float value10 = square1->baseU;
HXDLIN(2180)					_f32Arr_[index12] = value10;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index13 = (this->vIdx + 13);
HXDLIN(2180)					float value11 = square1->baseV;
HXDLIN(2180)					_f32Arr_[index13] = value11;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index14 = (this->vIdx + 14);
HXDLIN(2180)					float value12 = ((xScaledCos - xScaledSin) + square1->clipX);
HXDLIN(2180)					_f32Arr_[index14] = value12;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index15 = (this->vIdx + 15);
HXDLIN(2180)					float value13 = ((-(yScaledSin) - yScaledCos) + square1->clipY);
HXDLIN(2180)					_f32Arr_[index15] = value13;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index16 = (this->vIdx + 16);
HXDLIN(2180)					_f32Arr_[index16] = ((Float)0.0078125);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index17 = (this->vIdx + 17);
HXDLIN(2180)					_f32Arr_[index17] = 0;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index18 = (this->vIdx + 18);
HXDLIN(2180)					float value14 = square1->leftBlendU;
HXDLIN(2180)					_f32Arr_[index18] = value14;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index19 = (this->vIdx + 19);
HXDLIN(2180)					float value15 = square1->leftBlendV;
HXDLIN(2180)					_f32Arr_[index19] = value15;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index20 = (this->vIdx + 20);
HXDLIN(2180)					float value16 = square1->topBlendU;
HXDLIN(2180)					_f32Arr_[index20] = value16;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index21 = (this->vIdx + 21);
HXDLIN(2180)					float value17 = square1->topBlendV;
HXDLIN(2180)					_f32Arr_[index21] = value17;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index22 = (this->vIdx + 22);
HXDLIN(2180)					float value18 = square1->rightBlendU;
HXDLIN(2180)					_f32Arr_[index22] = value18;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index23 = (this->vIdx + 23);
HXDLIN(2180)					float value19 = square1->rightBlendV;
HXDLIN(2180)					_f32Arr_[index23] = value19;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index24 = (this->vIdx + 24);
HXDLIN(2180)					float value20 = square1->bottomBlendU;
HXDLIN(2180)					_f32Arr_[index24] = value20;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index25 = (this->vIdx + 25);
HXDLIN(2180)					float value21 = square1->bottomBlendV;
HXDLIN(2180)					_f32Arr_[index25] = value21;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index26 = (this->vIdx + 26);
HXDLIN(2180)					float value22 = square1->baseU;
HXDLIN(2180)					_f32Arr_[index26] = value22;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index27 = (this->vIdx + 27);
HXDLIN(2180)					float value23 = square1->baseV;
HXDLIN(2180)					_f32Arr_[index27] = value23;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index28 = (this->vIdx + 28);
HXDLIN(2180)					float value24 = ((-(xScaledCos) + xScaledSin) + square1->clipX);
HXDLIN(2180)					_f32Arr_[index28] = value24;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index29 = (this->vIdx + 29);
HXDLIN(2180)					float value25 = ((yScaledSin + yScaledCos) + square1->clipY);
HXDLIN(2180)					_f32Arr_[index29] = value25;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index30 = (this->vIdx + 30);
HXDLIN(2180)					_f32Arr_[index30] = 0;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index31 = (this->vIdx + 31);
HXDLIN(2180)					_f32Arr_[index31] = ((Float)0.0078125);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index32 = (this->vIdx + 32);
HXDLIN(2180)					float value26 = square1->leftBlendU;
HXDLIN(2180)					_f32Arr_[index32] = value26;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index33 = (this->vIdx + 33);
HXDLIN(2180)					float value27 = square1->leftBlendV;
HXDLIN(2180)					_f32Arr_[index33] = value27;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index34 = (this->vIdx + 34);
HXDLIN(2180)					float value28 = square1->topBlendU;
HXDLIN(2180)					_f32Arr_[index34] = value28;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index35 = (this->vIdx + 35);
HXDLIN(2180)					float value29 = square1->topBlendV;
HXDLIN(2180)					_f32Arr_[index35] = value29;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index36 = (this->vIdx + 36);
HXDLIN(2180)					float value30 = square1->rightBlendU;
HXDLIN(2180)					_f32Arr_[index36] = value30;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index37 = (this->vIdx + 37);
HXDLIN(2180)					float value31 = square1->rightBlendV;
HXDLIN(2180)					_f32Arr_[index37] = value31;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index38 = (this->vIdx + 38);
HXDLIN(2180)					float value32 = square1->bottomBlendU;
HXDLIN(2180)					_f32Arr_[index38] = value32;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index39 = (this->vIdx + 39);
HXDLIN(2180)					float value33 = square1->bottomBlendV;
HXDLIN(2180)					_f32Arr_[index39] = value33;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index40 = (this->vIdx + 40);
HXDLIN(2180)					float value34 = square1->baseU;
HXDLIN(2180)					_f32Arr_[index40] = value34;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index41 = (this->vIdx + 41);
HXDLIN(2180)					float value35 = square1->baseV;
HXDLIN(2180)					_f32Arr_[index41] = value35;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index42 = (this->vIdx + 42);
HXDLIN(2180)					float value36 = ((xScaledCos + xScaledSin) + square1->clipX);
HXDLIN(2180)					_f32Arr_[index42] = value36;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index43 = (this->vIdx + 43);
HXDLIN(2180)					float value37 = ((-(yScaledSin) + yScaledCos) + square1->clipY);
HXDLIN(2180)					_f32Arr_[index43] = value37;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index44 = (this->vIdx + 44);
HXDLIN(2180)					_f32Arr_[index44] = ((Float)0.0078125);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index45 = (this->vIdx + 45);
HXDLIN(2180)					_f32Arr_[index45] = ((Float)0.0078125);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index46 = (this->vIdx + 46);
HXDLIN(2180)					float value38 = square1->leftBlendU;
HXDLIN(2180)					_f32Arr_[index46] = value38;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index47 = (this->vIdx + 47);
HXDLIN(2180)					float value39 = square1->leftBlendV;
HXDLIN(2180)					_f32Arr_[index47] = value39;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index48 = (this->vIdx + 48);
HXDLIN(2180)					float value40 = square1->topBlendU;
HXDLIN(2180)					_f32Arr_[index48] = value40;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index49 = (this->vIdx + 49);
HXDLIN(2180)					float value41 = square1->topBlendV;
HXDLIN(2180)					_f32Arr_[index49] = value41;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index50 = (this->vIdx + 50);
HXDLIN(2180)					float value42 = square1->rightBlendU;
HXDLIN(2180)					_f32Arr_[index50] = value42;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index51 = (this->vIdx + 51);
HXDLIN(2180)					float value43 = square1->rightBlendV;
HXDLIN(2180)					_f32Arr_[index51] = value43;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index52 = (this->vIdx + 52);
HXDLIN(2180)					float value44 = square1->bottomBlendU;
HXDLIN(2180)					_f32Arr_[index52] = value44;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index53 = (this->vIdx + 53);
HXDLIN(2180)					float value45 = square1->bottomBlendV;
HXDLIN(2180)					_f32Arr_[index53] = value45;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index54 = (this->vIdx + 54);
HXDLIN(2180)					float value46 = square1->baseU;
HXDLIN(2180)					_f32Arr_[index54] = value46;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index55 = (this->vIdx + 55);
HXDLIN(2180)					float value47 = square1->baseV;
HXDLIN(2180)					_f32Arr_[index55] = value47;
            				}
HXDLIN(2180)				 ::map::Map _hx_tmp16 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2180)				_hx_tmp16->vIdx = (_hx_tmp16->vIdx + 56);
HXDLIN(2180)				unsigned int i4 = ( (unsigned int)((this->i * 4)) );
HXDLIN(2180)				{
HXLINE(2180)					int index56 = this->iIdx;
HXDLIN(2180)					_i32Arr_[index56] = i4;
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index57 = (this->iIdx + 1);
HXDLIN(2180)					_i32Arr_[index57] = (1 + i4);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index58 = (this->iIdx + 2);
HXDLIN(2180)					_i32Arr_[index58] = (2 + i4);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index59 = (this->iIdx + 3);
HXDLIN(2180)					_i32Arr_[index59] = (2 + i4);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index60 = (this->iIdx + 4);
HXDLIN(2180)					_i32Arr_[index60] = (1 + i4);
            				}
HXDLIN(2180)				{
HXLINE(2180)					int index61 = (this->iIdx + 5);
HXDLIN(2180)					_i32Arr_[index61] = (3 + i4);
            				}
HXDLIN(2180)				 ::map::Map _hx_tmp17 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2180)				_hx_tmp17->iIdx = (_hx_tmp17->iIdx + 6);
HXDLIN(2180)				this->i++;
            			}
            		}
HXLINE(2182)		{
HXLINE(2182)			 ::lime::graphics::opengl::GLObject program = this->groundProgram;
HXDLIN(2182)			{
HXLINE(2182)				::lime::graphics::opengl::GL_obj::context->_hx___currentProgram = program;
HXDLIN(2182)				int _hx_tmp18;
HXDLIN(2182)				if (::hx::IsNull( program )) {
HXLINE(2182)					_hx_tmp18 = 0;
            				}
            				else {
HXLINE(2182)					_hx_tmp18 = program->id;
            				}
HXDLIN(2182)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_use_program(_hx_tmp18);
            			}
            		}
HXLINE(2183)		{
HXLINE(2183)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this5 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2183)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform2f(0,( (float)(( (Float)(::map::Map_obj::leftMaskU) )) ),( (float)(( (Float)(::map::Map_obj::leftMaskV) )) ));
            		}
HXLINE(2184)		{
HXLINE(2184)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this6 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2184)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform2f(1,( (float)(( (Float)(::map::Map_obj::topMaskU) )) ),( (float)(( (Float)(::map::Map_obj::topMaskV) )) ));
            		}
HXLINE(2185)		{
HXLINE(2185)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this7 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2185)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform2f(2,( (float)(( (Float)(::map::Map_obj::rightMaskU) )) ),( (float)(( (Float)(::map::Map_obj::rightMaskV) )) ));
            		}
HXLINE(2186)		{
HXLINE(2186)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this8 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2186)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform2f(3,( (float)(( (Float)(::map::Map_obj::bottomMaskU) )) ),( (float)(( (Float)(::map::Map_obj::bottomMaskV) )) ));
            		}
HXLINE(2187)		{
HXLINE(2187)			 ::lime::graphics::opengl::GLObject vertexArray = this->groundVAO;
HXDLIN(2187)			{
HXLINE(2187)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this9 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2187)				int _hx_tmp19;
HXDLIN(2187)				if (::hx::IsNull( vertexArray )) {
HXLINE(2187)					_hx_tmp19 = 0;
            				}
            				else {
HXLINE(2187)					_hx_tmp19 = vertexArray->id;
            				}
HXDLIN(2187)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_vertex_array(_hx_tmp19);
            			}
            		}
HXLINE(2189)		{
HXLINE(2189)			 ::lime::graphics::opengl::GLObject buffer = this->groundVBO;
HXDLIN(2189)			{
HXLINE(2189)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this10 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2189)				if ((34962 == _this10->ARRAY_BUFFER)) {
HXLINE(2189)					_this10->_hx___arrayBufferBinding = buffer;
            				}
HXDLIN(2189)				if ((34962 == _this10->ELEMENT_ARRAY_BUFFER)) {
HXLINE(2189)					_this10->_hx___elementBufferBinding = buffer;
            				}
HXDLIN(2189)				int _hx_tmp20;
HXDLIN(2189)				if (::hx::IsNull( buffer )) {
HXLINE(2189)					_hx_tmp20 = 0;
            				}
            				else {
HXLINE(2189)					_hx_tmp20 = buffer->id;
            				}
HXDLIN(2189)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34962,_hx_tmp20);
            			}
            		}
HXLINE(2191)		if ((this->vIdx > this->groundVBOLen)) {
HXLINE(2192)			{
HXLINE(2192)				int size = (this->vIdx * 4);
HXDLIN(2192)				Float srcData = (uintptr_t)_f32Arr_;
HXDLIN(2192)				{
HXLINE(2192)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this11 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2192)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34962,size,srcData,35048);
            				}
            			}
HXLINE(2193)			this->groundVBOLen = this->vIdx;
            		}
            		else {
HXLINE(2195)			int size1 = (this->vIdx * 4);
HXDLIN(2195)			Float srcData1 = (uintptr_t)_f32Arr_;
HXDLIN(2195)			{
HXLINE(2195)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this12 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2195)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_sub_data(34962,0,size1,srcData1);
            			}
            		}
HXLINE(2197)		{
HXLINE(2197)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this13 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2197)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(0);
            		}
HXLINE(2198)		{
HXLINE(2198)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this14 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2198)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(0,4,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            		}
HXLINE(2199)		{
HXLINE(2199)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this15 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2199)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(1);
            		}
HXLINE(2200)		{
HXLINE(2200)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this16 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2200)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(1,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(16));
            		}
HXLINE(2201)		{
HXLINE(2201)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this17 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2201)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(2);
            		}
HXLINE(2202)		{
HXLINE(2202)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this18 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2202)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(2,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(24));
            		}
HXLINE(2203)		{
HXLINE(2203)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this19 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2203)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(3);
            		}
HXLINE(2204)		{
HXLINE(2204)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this20 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2204)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(3,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(32));
            		}
HXLINE(2205)		{
HXLINE(2205)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this21 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2205)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(4);
            		}
HXLINE(2206)		{
HXLINE(2206)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this22 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2206)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(4,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(40));
            		}
HXLINE(2207)		{
HXLINE(2207)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this23 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2207)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(5);
            		}
HXLINE(2208)		{
HXLINE(2208)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this24 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2208)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(5,2,5126,false,56,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(48));
            		}
HXLINE(2210)		{
HXLINE(2210)			 ::lime::graphics::opengl::GLObject buffer1 = this->groundIBO;
HXDLIN(2210)			{
HXLINE(2210)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this25 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2210)				if ((34963 == _this25->ARRAY_BUFFER)) {
HXLINE(2210)					_this25->_hx___arrayBufferBinding = buffer1;
            				}
HXDLIN(2210)				if ((34963 == _this25->ELEMENT_ARRAY_BUFFER)) {
HXLINE(2210)					_this25->_hx___elementBufferBinding = buffer1;
            				}
HXDLIN(2210)				int _hx_tmp21;
HXDLIN(2210)				if (::hx::IsNull( buffer1 )) {
HXLINE(2210)					_hx_tmp21 = 0;
            				}
            				else {
HXLINE(2210)					_hx_tmp21 = buffer1->id;
            				}
HXDLIN(2210)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34963,_hx_tmp21);
            			}
            		}
HXLINE(2211)		if ((this->iIdx > this->groundIBOLen)) {
HXLINE(2212)			{
HXLINE(2212)				int size2 = (this->iIdx * 4);
HXDLIN(2212)				Float srcData2 = (uintptr_t)_i32Arr_;
HXDLIN(2212)				{
HXLINE(2212)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this26 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2212)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34963,size2,srcData2,35048);
            				}
            			}
HXLINE(2213)			this->groundIBOLen = this->iIdx;
            		}
            		else {
HXLINE(2215)			int size3 = (this->iIdx * 4);
HXDLIN(2215)			Float srcData3 = (uintptr_t)_i32Arr_;
HXDLIN(2215)			{
HXLINE(2215)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this27 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2215)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_sub_data(34963,0,size3,srcData3);
            			}
            		}
HXLINE(2216)		{
HXLINE(2216)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this28 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2216)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_draw_elements(4,this->iIdx,5125,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            		}
HXLINE(2218)		if ((this->gameObjectsLen == 0)) {
HXLINE(2219)			this->c3d->present();
HXLINE(2220)			return;
            		}
HXLINE(2223)		this->i = (this->vIdx = (this->iIdx = 0));
HXLINE(2225)		int i = 0;
HXLINE(2226)		while((i < this->gameObjectsLen)){
HXLINE(2227)			 ::objects::GameObject obj = this->gameObjects->__unsafe_get(i).StaticCast<  ::objects::GameObject >();
HXLINE(2228)			obj->screenYNoZ = (((obj->mapX * -(::map::Camera_obj::sin)) + (obj->mapY * ::map::Camera_obj::cos)) + ::map::Camera_obj::csY);
HXLINE(2229)			i = (i + 1);
            		}
HXLINE(2232)		i = 0;
HXLINE(2234)		this->gameObjects->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(2236)		while((i < this->gameObjectsLen)){
HXLINE(2237)			 ::objects::GameObject obj1 = this->gameObjects->__unsafe_get(i).StaticCast<  ::objects::GameObject >();
HXLINE(2238)			 ::map::Square tmp = obj1->curSquare;
HXDLIN(2238)			 ::Dynamic _hx_tmp22;
HXDLIN(2238)			if (::hx::IsNotNull( tmp )) {
HXLINE(2238)				_hx_tmp22 = tmp->lastVisible;
            			}
            			else {
HXLINE(2238)				_hx_tmp22 = null();
            			}
HXDLIN(2238)			if (::hx::IsGreaterEq( _hx_tmp22,time )) {
HXLINE(2239)				::String _hx_switch_0 = obj1->objClass;
            				if (  (_hx_switch_0==HX_("Player",81,5f,4d,6c)) ){
HXLINE(2243)					 ::objects::Player player = ::hx::TCast<  ::objects::Player >::cast(obj1);
HXDLIN(2243)					float screenX = (player->screenX = (((player->mapX * ::map::Camera_obj::cos) + (player->mapY * ::map::Camera_obj::sin)) + ::map::Camera_obj::csX));
HXDLIN(2243)					Float screenY = (player->screenYNoZ + (( (Float)(player->mapZ) ) * ( (Float)(-(( (signed char)(88) ))) )));
HXDLIN(2243)					float texW = (player->width * ( (float)(1024) ));
HXDLIN(2243)					float texH = (player->height * ( (float)(1024) ));
HXDLIN(2243)					int action = 0;
HXDLIN(2243)					float p = ( (float)(((Float)0.0)) );
HXDLIN(2243)					 ::util::Rect rect1 = null();
HXDLIN(2243)					if (::hx::IsNotNull( player->animatedChar )) {
HXLINE(2243)						if ((time < (player->attackStart + 300))) {
HXLINE(2243)							if (!(player->props->dontFaceAttacks)) {
HXLINE(2243)								player->facing = player->attackAngle;
            							}
HXDLIN(2243)							p = ( (float)((( (Float)(::hx::Mod((time - player->attackStart),300)) ) / ( (Float)(300) ))) );
HXDLIN(2243)							action = 2;
            						}
            						else {
HXLINE(2243)							bool _hx_tmp23;
HXDLIN(2243)							if ((player->moveVec->x == 0)) {
HXLINE(2243)								_hx_tmp23 = (player->moveVec->y != 0);
            							}
            							else {
HXLINE(2243)								_hx_tmp23 = true;
            							}
HXDLIN(2243)							if (_hx_tmp23) {
HXLINE(2243)								int walkPer = ::Std_obj::_hx_int((((Float)0.5) / player->moveVec->get_length()));
HXDLIN(2243)								walkPer = (walkPer + (400 - ::hx::Mod(walkPer,400)));
HXDLIN(2243)								bool _hx_tmp24;
HXDLIN(2243)								bool _hx_tmp25;
HXDLIN(2243)								bool _hx_tmp26;
HXDLIN(2243)								if (!((player->moveVec->x > ( (float)(((Float)0.00001)) )))) {
HXLINE(2243)									_hx_tmp26 = (player->moveVec->x < -(( (float)(((Float)0.00001)) )));
            								}
            								else {
HXLINE(2243)									_hx_tmp26 = true;
            								}
HXDLIN(2243)								if (!(_hx_tmp26)) {
HXLINE(2243)									_hx_tmp25 = (player->moveVec->y > ( (float)(((Float)0.00001)) ));
            								}
            								else {
HXLINE(2243)									_hx_tmp25 = true;
            								}
HXDLIN(2243)								if (!(_hx_tmp25)) {
HXLINE(2243)									_hx_tmp24 = (player->moveVec->y < -(( (float)(((Float)0.00001)) )));
            								}
            								else {
HXLINE(2243)									_hx_tmp24 = true;
            								}
HXDLIN(2243)								if (_hx_tmp24) {
HXLINE(2243)									player->facing = ( (float)(::Math_obj::atan2(player->moveVec->y,player->moveVec->x)) );
HXDLIN(2243)									action = 1;
            								}
            								else {
HXLINE(2243)									action = 0;
            								}
HXDLIN(2243)								p = ( (float)((( (Float)(::hx::Mod(time,walkPer)) ) / ( (Float)(walkPer) ))) );
            							}
            						}
HXDLIN(2243)						rect1 = player->animatedChar->rectFromFacing(player->facing,action,p);
            					}
            					else {
HXLINE(2243)						if (::hx::IsNotNull( player->animations )) {
HXLINE(2243)							rect1 = player->animations->getTexture(time);
            						}
            					}
HXDLIN(2243)					if (::hx::IsNotNull( rect1 )) {
HXLINE(2243)						player->uValue = ( (float)((rect1->x / ( (Float)(1024) ))) );
HXDLIN(2243)						player->vValue = ( (float)((rect1->y / ( (Float)(1024) ))) );
HXDLIN(2243)						texW = ( (float)(rect1->width) );
HXDLIN(2243)						player->width = ( (float)((( (Float)(texW) ) / ( (Float)(1024) ))) );
HXDLIN(2243)						texH = ( (float)(rect1->height) );
HXDLIN(2243)						player->height = ( (float)((( (Float)(texH) ) / ( (Float)(1024) ))) );
            					}
HXDLIN(2243)					float sink = ( (float)(((Float)1.0)) );
HXDLIN(2243)					bool _hx_tmp27;
HXDLIN(2243)					if (::hx::IsNotNull( player->curSquare )) {
HXLINE(2243)						bool _hx_tmp28;
HXDLIN(2243)						if (!(player->flying)) {
HXLINE(2243)							if (::hx::IsNotNull( player->curSquare->obj )) {
HXLINE(2243)								_hx_tmp28 = player->curSquare->obj->props->protectFromSink;
            							}
            							else {
HXLINE(2243)								_hx_tmp28 = false;
            							}
            						}
            						else {
HXLINE(2243)							_hx_tmp28 = true;
            						}
HXDLIN(2243)						_hx_tmp27 = !(_hx_tmp28);
            					}
            					else {
HXLINE(2243)						_hx_tmp27 = false;
            					}
HXDLIN(2243)					if (_hx_tmp27) {
HXLINE(2243)						sink = (sink + (player->curSquare->sink + player->sinkLevel));
            					}
HXDLIN(2243)					float flashStrength = ( (float)(((Float)0.0)) );
HXDLIN(2243)					if ((player->flashPeriodMs > 0)) {
HXLINE(2243)						bool _hx_tmp29;
HXDLIN(2243)						if ((player->flashRepeats != -1)) {
HXLINE(2243)							_hx_tmp29 = (time > (player->flashStartTime + (player->flashPeriodMs * player->flashRepeats)));
            						}
            						else {
HXLINE(2243)							_hx_tmp29 = false;
            						}
HXDLIN(2243)						if (_hx_tmp29) {
HXLINE(2243)							player->flashRepeats = (player->flashStartTime = (player->flashPeriodMs = (player->flashColor = ( (float)(0) ))));
            						}
            						else {
HXLINE(2243)							flashStrength = ( (float)((( (Float)(::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((( (Float)(( (float)(((::hx::Mod((( (Float)(time) ) - ( (Float)(player->flashStartTime) )),player->flashPeriodMs) / ( (Float)(player->flashPeriodMs) )) * ( (Float)(( (float)(((Float)3.141592653589793)) )) ))) )) ) * (( (Float)(65536) ) / ( (Float)((( (float)(((Float)3.141592653589793)) ) * ( (float)(2) ))) )))) & 65535)]) ) * ((Float)0.5))) );
            						}
            					}
HXDLIN(2243)					float size4 = (( (float)(((Float)5.5)) ) * player->size);
HXDLIN(2243)					Float w = (( (Float)(((size4 * texW) * ::util::RenderUtils_obj::clipSpaceScaleX)) ) * ((Float)0.5));
HXDLIN(2243)					float hBase = (player->hBase = (size4 * texH));
HXDLIN(2243)					Float h = ((( (Float)((hBase * ::util::RenderUtils_obj::clipSpaceScaleY)) ) * ((Float)0.5)) / ( (Float)(sink) ));
HXDLIN(2243)					Float yBase = ((screenY - ((( (Float)(hBase) ) / ( (Float)(2) )) - ( (Float)((size4 * ( (float)(2) ))) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2243)					float xOffset = ( (float)(((Float)0.0)) );
HXDLIN(2243)					bool _hx_tmp30;
HXDLIN(2243)					if ((action == 2)) {
HXLINE(2243)						_hx_tmp30 = (p >= ((Float)0.5));
            					}
            					else {
HXLINE(2243)						_hx_tmp30 = false;
            					}
HXDLIN(2243)					if (_hx_tmp30) {
HXLINE(2243)						int dir = player->animatedChar->facingToDir(player->facing);
HXDLIN(2243)						if ((dir == 1)) {
HXLINE(2243)							xOffset = -((texW + size4));
            						}
            						else {
HXLINE(2243)							xOffset = (texW + size4);
            						}
            					}
HXDLIN(2243)					float xBase;
HXDLIN(2243)					if ((action == 2)) {
HXLINE(2243)						xBase = xOffset;
            					}
            					else {
HXLINE(2243)						xBase = ( (float)(0) );
            					}
HXDLIN(2243)					float xBase1 = ((screenX + xBase) * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2243)					float texelW = ( (float)((((Float)0.001953125) / ( (Float)(size4) ))) );
HXDLIN(2243)					float texelH = ( (float)((((Float)0.001953125) / ( (Float)(size4) ))) );
HXDLIN(2243)					{
HXLINE(2243)						int index62 = this->vIdx;
HXDLIN(2243)						_f32Arr_[index62] = (-(w) + xBase1);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index63 = (this->vIdx + 1);
HXDLIN(2243)						_f32Arr_[index63] = (-(h) + yBase);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index64 = (this->vIdx + 2);
HXDLIN(2243)						float value48 = player->uValue;
HXDLIN(2243)						_f32Arr_[index64] = value48;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index65 = (this->vIdx + 3);
HXDLIN(2243)						float value49 = player->vValue;
HXDLIN(2243)						_f32Arr_[index65] = value49;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index66 = (this->vIdx + 4);
HXDLIN(2243)						_f32Arr_[index66] = texelW;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index67 = (this->vIdx + 5);
HXDLIN(2243)						_f32Arr_[index67] = texelH;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index68 = (this->vIdx + 6);
HXDLIN(2243)						float value50 = player->glowColor;
HXDLIN(2243)						_f32Arr_[index68] = value50;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index69 = (this->vIdx + 7);
HXDLIN(2243)						float value51 = player->flashColor;
HXDLIN(2243)						_f32Arr_[index69] = value51;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index70 = (this->vIdx + 8);
HXDLIN(2243)						_f32Arr_[index70] = flashStrength;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index71 = (this->vIdx + 9);
HXDLIN(2243)						_f32Arr_[index71] = -1;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index72 = (this->vIdx + 10);
HXDLIN(2243)						_f32Arr_[index72] = (w + xBase1);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index73 = (this->vIdx + 11);
HXDLIN(2243)						_f32Arr_[index73] = (-(h) + yBase);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index74 = (this->vIdx + 12);
HXDLIN(2243)						float value52 = (player->uValue + player->width);
HXDLIN(2243)						_f32Arr_[index74] = value52;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index75 = (this->vIdx + 13);
HXDLIN(2243)						float value53 = player->vValue;
HXDLIN(2243)						_f32Arr_[index75] = value53;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index76 = (this->vIdx + 14);
HXDLIN(2243)						_f32Arr_[index76] = texelW;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index77 = (this->vIdx + 15);
HXDLIN(2243)						_f32Arr_[index77] = texelH;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index78 = (this->vIdx + 16);
HXDLIN(2243)						float value54 = player->glowColor;
HXDLIN(2243)						_f32Arr_[index78] = value54;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index79 = (this->vIdx + 17);
HXDLIN(2243)						float value55 = player->flashColor;
HXDLIN(2243)						_f32Arr_[index79] = value55;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index80 = (this->vIdx + 18);
HXDLIN(2243)						_f32Arr_[index80] = flashStrength;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index81 = (this->vIdx + 19);
HXDLIN(2243)						_f32Arr_[index81] = -1;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index82 = (this->vIdx + 20);
HXDLIN(2243)						_f32Arr_[index82] = (-(w) + xBase1);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index83 = (this->vIdx + 21);
HXDLIN(2243)						_f32Arr_[index83] = (h + yBase);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index84 = (this->vIdx + 22);
HXDLIN(2243)						float value56 = player->uValue;
HXDLIN(2243)						_f32Arr_[index84] = value56;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index85 = (this->vIdx + 23);
HXDLIN(2243)						float value57 = ( (float)((player->vValue + (( (Float)(player->height) ) / ( (Float)(sink) )))) );
HXDLIN(2243)						_f32Arr_[index85] = value57;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index86 = (this->vIdx + 24);
HXDLIN(2243)						_f32Arr_[index86] = texelW;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index87 = (this->vIdx + 25);
HXDLIN(2243)						_f32Arr_[index87] = texelH;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index88 = (this->vIdx + 26);
HXDLIN(2243)						float value58 = player->glowColor;
HXDLIN(2243)						_f32Arr_[index88] = value58;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index89 = (this->vIdx + 27);
HXDLIN(2243)						float value59 = player->flashColor;
HXDLIN(2243)						_f32Arr_[index89] = value59;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index90 = (this->vIdx + 28);
HXDLIN(2243)						_f32Arr_[index90] = flashStrength;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index91 = (this->vIdx + 29);
HXDLIN(2243)						_f32Arr_[index91] = -1;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index92 = (this->vIdx + 30);
HXDLIN(2243)						_f32Arr_[index92] = (w + xBase1);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index93 = (this->vIdx + 31);
HXDLIN(2243)						_f32Arr_[index93] = (h + yBase);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index94 = (this->vIdx + 32);
HXDLIN(2243)						float value60 = (player->uValue + player->width);
HXDLIN(2243)						_f32Arr_[index94] = value60;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index95 = (this->vIdx + 33);
HXDLIN(2243)						float value61 = ( (float)((player->vValue + (( (Float)(player->height) ) / ( (Float)(sink) )))) );
HXDLIN(2243)						_f32Arr_[index95] = value61;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index96 = (this->vIdx + 34);
HXDLIN(2243)						_f32Arr_[index96] = texelW;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index97 = (this->vIdx + 35);
HXDLIN(2243)						_f32Arr_[index97] = texelH;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index98 = (this->vIdx + 36);
HXDLIN(2243)						float value62 = player->glowColor;
HXDLIN(2243)						_f32Arr_[index98] = value62;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index99 = (this->vIdx + 37);
HXDLIN(2243)						float value63 = player->flashColor;
HXDLIN(2243)						_f32Arr_[index99] = value63;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index100 = (this->vIdx + 38);
HXDLIN(2243)						_f32Arr_[index100] = flashStrength;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index101 = (this->vIdx + 39);
HXDLIN(2243)						_f32Arr_[index101] = -1;
            					}
HXDLIN(2243)					 ::map::Map _hx_tmp31 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)					_hx_tmp31->vIdx = (_hx_tmp31->vIdx + 40);
HXDLIN(2243)					int i41 = (this->i * 4);
HXDLIN(2243)					{
HXLINE(2243)						int index102 = this->iIdx;
HXDLIN(2243)						_i32Arr_[index102] = i41;
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index103 = (this->iIdx + 1);
HXDLIN(2243)						_i32Arr_[index103] = (1 + i41);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index104 = (this->iIdx + 2);
HXDLIN(2243)						_i32Arr_[index104] = (2 + i41);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index105 = (this->iIdx + 3);
HXDLIN(2243)						_i32Arr_[index105] = (2 + i41);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index106 = (this->iIdx + 4);
HXDLIN(2243)						_i32Arr_[index106] = (1 + i41);
            					}
HXDLIN(2243)					{
HXLINE(2243)						int index107 = (this->iIdx + 5);
HXDLIN(2243)						_i32Arr_[index107] = (3 + i41);
            					}
HXDLIN(2243)					 ::map::Map _hx_tmp32 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)					_hx_tmp32->iIdx = (_hx_tmp32->iIdx + 6);
HXDLIN(2243)					this->i++;
HXDLIN(2243)					int yPos;
HXDLIN(2243)					if ((sink != 0)) {
HXLINE(2243)						yPos = 5;
            					}
            					else {
HXLINE(2243)						yPos = 0;
            					}
HXDLIN(2243)					int yPos1 = (15 + yPos);
HXDLIN(2243)					bool _hx_tmp33;
HXDLIN(2243)					if (::hx::IsNotNull( player->props )) {
HXLINE(2243)						_hx_tmp33 = !(player->props->noMiniMap);
            					}
            					else {
HXLINE(2243)						_hx_tmp33 = true;
            					}
HXDLIN(2243)					if (_hx_tmp33) {
HXLINE(2243)						xBase1 = (screenX * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2243)						if ((player->hp > player->maxHP)) {
HXLINE(2243)							player->maxHP = player->hp;
            						}
HXDLIN(2243)						if ((player->mp > player->maxMP)) {
HXLINE(2243)							player->maxMP = player->mp;
            						}
HXDLIN(2243)						float scaledEmptyBarW = ( (float)((( (Float)(::map::Map_obj::emptyBarW) ) / ( (Float)(1024) ))) );
HXDLIN(2243)						float scaledEmptyBarH = ( (float)((( (Float)(::map::Map_obj::emptyBarH) ) / ( (Float)(1024) ))) );
HXDLIN(2243)						bool _hx_tmp34;
HXDLIN(2243)						if ((player->hp >= 0)) {
HXLINE(2243)							_hx_tmp34 = (player->hp < player->maxHP);
            						}
            						else {
HXLINE(2243)							_hx_tmp34 = false;
            						}
HXDLIN(2243)						if (_hx_tmp34) {
HXLINE(2243)							float scaledBarW = ( (float)((( (Float)(::map::Map_obj::hpBarW) ) / ( (Float)(1024) ))) );
HXDLIN(2243)							float scaledBarH = ( (float)((( (Float)(::map::Map_obj::hpBarH) ) / ( (Float)(1024) ))) );
HXDLIN(2243)							float barThreshU = (::map::Map_obj::hpBarU + scaledBarW);
HXDLIN(2243)							barThreshU = (barThreshU * ( (float)((((( (Float)(player->hp) ) / ( (Float)(player->maxHP) )) * ((Float)0.83333333333333337)) + ((( (Float)(player->hp) ) / ( (Float)(player->maxHP) )) * ((Float)0.0833333333333333287)))) ));
HXDLIN(2243)							w = ( (Float)((::map::Map_obj::hpBarW * ::util::RenderUtils_obj::clipSpaceScaleX)) );
HXDLIN(2243)							h = ( (Float)((::map::Map_obj::hpBarH * ::util::RenderUtils_obj::clipSpaceScaleY)) );
HXDLIN(2243)							yBase = (((screenY + yPos1) - ((( (Float)(::map::Map_obj::hpBarH) ) / ( (Float)(2) )) - ( (Float)(2) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2243)							texelW = ( (float)(((Float)0.00048828125)) );
HXDLIN(2243)							texelH = ( (float)(((Float)0.00048828125)) );
HXDLIN(2243)							{
HXLINE(2243)								int index108 = this->vIdx;
HXDLIN(2243)								_f32Arr_[index108] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index109 = (this->vIdx + 1);
HXDLIN(2243)								_f32Arr_[index109] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index110 = (this->vIdx + 2);
HXDLIN(2243)								float value64 = ::map::Map_obj::emptyBarU;
HXDLIN(2243)								_f32Arr_[index110] = value64;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index111 = (this->vIdx + 3);
HXDLIN(2243)								float value65 = ::map::Map_obj::emptyBarV;
HXDLIN(2243)								_f32Arr_[index111] = value65;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index112 = (this->vIdx + 4);
HXDLIN(2243)								_f32Arr_[index112] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index113 = (this->vIdx + 5);
HXDLIN(2243)								_f32Arr_[index113] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index114 = (this->vIdx + 6);
HXDLIN(2243)								_f32Arr_[index114] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index115 = (this->vIdx + 7);
HXDLIN(2243)								_f32Arr_[index115] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index116 = (this->vIdx + 8);
HXDLIN(2243)								_f32Arr_[index116] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index117 = (this->vIdx + 9);
HXDLIN(2243)								_f32Arr_[index117] = -1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index118 = (this->vIdx + 10);
HXDLIN(2243)								_f32Arr_[index118] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index119 = (this->vIdx + 11);
HXDLIN(2243)								_f32Arr_[index119] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index120 = (this->vIdx + 12);
HXDLIN(2243)								float value66 = (::map::Map_obj::emptyBarU + scaledEmptyBarW);
HXDLIN(2243)								_f32Arr_[index120] = value66;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index121 = (this->vIdx + 13);
HXDLIN(2243)								float value67 = ::map::Map_obj::emptyBarV;
HXDLIN(2243)								_f32Arr_[index121] = value67;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index122 = (this->vIdx + 14);
HXDLIN(2243)								_f32Arr_[index122] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index123 = (this->vIdx + 15);
HXDLIN(2243)								_f32Arr_[index123] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index124 = (this->vIdx + 16);
HXDLIN(2243)								_f32Arr_[index124] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index125 = (this->vIdx + 17);
HXDLIN(2243)								_f32Arr_[index125] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index126 = (this->vIdx + 18);
HXDLIN(2243)								_f32Arr_[index126] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index127 = (this->vIdx + 19);
HXDLIN(2243)								_f32Arr_[index127] = -1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index128 = (this->vIdx + 20);
HXDLIN(2243)								_f32Arr_[index128] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index129 = (this->vIdx + 21);
HXDLIN(2243)								_f32Arr_[index129] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index130 = (this->vIdx + 22);
HXDLIN(2243)								float value68 = ::map::Map_obj::emptyBarU;
HXDLIN(2243)								_f32Arr_[index130] = value68;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index131 = (this->vIdx + 23);
HXDLIN(2243)								float value69 = (::map::Map_obj::emptyBarV + scaledEmptyBarH);
HXDLIN(2243)								_f32Arr_[index131] = value69;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index132 = (this->vIdx + 24);
HXDLIN(2243)								_f32Arr_[index132] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index133 = (this->vIdx + 25);
HXDLIN(2243)								_f32Arr_[index133] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index134 = (this->vIdx + 26);
HXDLIN(2243)								_f32Arr_[index134] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index135 = (this->vIdx + 27);
HXDLIN(2243)								_f32Arr_[index135] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index136 = (this->vIdx + 28);
HXDLIN(2243)								_f32Arr_[index136] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index137 = (this->vIdx + 29);
HXDLIN(2243)								_f32Arr_[index137] = -1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index138 = (this->vIdx + 30);
HXDLIN(2243)								_f32Arr_[index138] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index139 = (this->vIdx + 31);
HXDLIN(2243)								_f32Arr_[index139] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index140 = (this->vIdx + 32);
HXDLIN(2243)								float value70 = (::map::Map_obj::emptyBarU + scaledEmptyBarW);
HXDLIN(2243)								_f32Arr_[index140] = value70;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index141 = (this->vIdx + 33);
HXDLIN(2243)								float value71 = (::map::Map_obj::emptyBarV + scaledEmptyBarH);
HXDLIN(2243)								_f32Arr_[index141] = value71;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index142 = (this->vIdx + 34);
HXDLIN(2243)								_f32Arr_[index142] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index143 = (this->vIdx + 35);
HXDLIN(2243)								_f32Arr_[index143] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index144 = (this->vIdx + 36);
HXDLIN(2243)								_f32Arr_[index144] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index145 = (this->vIdx + 37);
HXDLIN(2243)								_f32Arr_[index145] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index146 = (this->vIdx + 38);
HXDLIN(2243)								_f32Arr_[index146] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index147 = (this->vIdx + 39);
HXDLIN(2243)								_f32Arr_[index147] = -1;
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp35 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp35->vIdx = (_hx_tmp35->vIdx + 40);
HXDLIN(2243)							int i42 = (this->i * 4);
HXDLIN(2243)							{
HXLINE(2243)								int index148 = this->iIdx;
HXDLIN(2243)								_i32Arr_[index148] = i42;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index149 = (this->iIdx + 1);
HXDLIN(2243)								_i32Arr_[index149] = (1 + i42);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index150 = (this->iIdx + 2);
HXDLIN(2243)								_i32Arr_[index150] = (2 + i42);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index151 = (this->iIdx + 3);
HXDLIN(2243)								_i32Arr_[index151] = (2 + i42);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index152 = (this->iIdx + 4);
HXDLIN(2243)								_i32Arr_[index152] = (1 + i42);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index153 = (this->iIdx + 5);
HXDLIN(2243)								_i32Arr_[index153] = (3 + i42);
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp36 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp36->iIdx = (_hx_tmp36->iIdx + 6);
HXDLIN(2243)							this->i++;
HXDLIN(2243)							{
HXLINE(2243)								int index154 = this->vIdx;
HXDLIN(2243)								_f32Arr_[index154] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index155 = (this->vIdx + 1);
HXDLIN(2243)								_f32Arr_[index155] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index156 = (this->vIdx + 2);
HXDLIN(2243)								float value72 = ::map::Map_obj::hpBarU;
HXDLIN(2243)								_f32Arr_[index156] = value72;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index157 = (this->vIdx + 3);
HXDLIN(2243)								float value73 = ::map::Map_obj::hpBarV;
HXDLIN(2243)								_f32Arr_[index157] = value73;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index158 = (this->vIdx + 4);
HXDLIN(2243)								_f32Arr_[index158] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index159 = (this->vIdx + 5);
HXDLIN(2243)								_f32Arr_[index159] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index160 = (this->vIdx + 6);
HXDLIN(2243)								_f32Arr_[index160] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index161 = (this->vIdx + 7);
HXDLIN(2243)								_f32Arr_[index161] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index162 = (this->vIdx + 8);
HXDLIN(2243)								_f32Arr_[index162] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index163 = (this->vIdx + 9);
HXDLIN(2243)								_f32Arr_[index163] = barThreshU;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index164 = (this->vIdx + 10);
HXDLIN(2243)								_f32Arr_[index164] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index165 = (this->vIdx + 11);
HXDLIN(2243)								_f32Arr_[index165] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index166 = (this->vIdx + 12);
HXDLIN(2243)								float value74 = (::map::Map_obj::hpBarU + scaledBarW);
HXDLIN(2243)								_f32Arr_[index166] = value74;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index167 = (this->vIdx + 13);
HXDLIN(2243)								float value75 = ::map::Map_obj::hpBarV;
HXDLIN(2243)								_f32Arr_[index167] = value75;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index168 = (this->vIdx + 14);
HXDLIN(2243)								_f32Arr_[index168] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index169 = (this->vIdx + 15);
HXDLIN(2243)								_f32Arr_[index169] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index170 = (this->vIdx + 16);
HXDLIN(2243)								_f32Arr_[index170] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index171 = (this->vIdx + 17);
HXDLIN(2243)								_f32Arr_[index171] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index172 = (this->vIdx + 18);
HXDLIN(2243)								_f32Arr_[index172] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index173 = (this->vIdx + 19);
HXDLIN(2243)								_f32Arr_[index173] = barThreshU;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index174 = (this->vIdx + 20);
HXDLIN(2243)								_f32Arr_[index174] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index175 = (this->vIdx + 21);
HXDLIN(2243)								_f32Arr_[index175] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index176 = (this->vIdx + 22);
HXDLIN(2243)								float value76 = ::map::Map_obj::hpBarU;
HXDLIN(2243)								_f32Arr_[index176] = value76;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index177 = (this->vIdx + 23);
HXDLIN(2243)								float value77 = (::map::Map_obj::hpBarV + scaledBarH);
HXDLIN(2243)								_f32Arr_[index177] = value77;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index178 = (this->vIdx + 24);
HXDLIN(2243)								_f32Arr_[index178] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index179 = (this->vIdx + 25);
HXDLIN(2243)								_f32Arr_[index179] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index180 = (this->vIdx + 26);
HXDLIN(2243)								_f32Arr_[index180] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index181 = (this->vIdx + 27);
HXDLIN(2243)								_f32Arr_[index181] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index182 = (this->vIdx + 28);
HXDLIN(2243)								_f32Arr_[index182] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index183 = (this->vIdx + 29);
HXDLIN(2243)								_f32Arr_[index183] = barThreshU;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index184 = (this->vIdx + 30);
HXDLIN(2243)								_f32Arr_[index184] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index185 = (this->vIdx + 31);
HXDLIN(2243)								_f32Arr_[index185] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index186 = (this->vIdx + 32);
HXDLIN(2243)								float value78 = (::map::Map_obj::hpBarU + scaledBarW);
HXDLIN(2243)								_f32Arr_[index186] = value78;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index187 = (this->vIdx + 33);
HXDLIN(2243)								float value79 = (::map::Map_obj::hpBarV + scaledBarH);
HXDLIN(2243)								_f32Arr_[index187] = value79;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index188 = (this->vIdx + 34);
HXDLIN(2243)								_f32Arr_[index188] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index189 = (this->vIdx + 35);
HXDLIN(2243)								_f32Arr_[index189] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index190 = (this->vIdx + 36);
HXDLIN(2243)								_f32Arr_[index190] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index191 = (this->vIdx + 37);
HXDLIN(2243)								_f32Arr_[index191] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index192 = (this->vIdx + 38);
HXDLIN(2243)								_f32Arr_[index192] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index193 = (this->vIdx + 39);
HXDLIN(2243)								_f32Arr_[index193] = barThreshU;
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp37 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp37->vIdx = (_hx_tmp37->vIdx + 40);
HXDLIN(2243)							int i43 = (this->i * 4);
HXDLIN(2243)							{
HXLINE(2243)								int index194 = this->iIdx;
HXDLIN(2243)								_i32Arr_[index194] = i43;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index195 = (this->iIdx + 1);
HXDLIN(2243)								_i32Arr_[index195] = (1 + i43);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index196 = (this->iIdx + 2);
HXDLIN(2243)								_i32Arr_[index196] = (2 + i43);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index197 = (this->iIdx + 3);
HXDLIN(2243)								_i32Arr_[index197] = (2 + i43);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index198 = (this->iIdx + 4);
HXDLIN(2243)								_i32Arr_[index198] = (1 + i43);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index199 = (this->iIdx + 5);
HXDLIN(2243)								_i32Arr_[index199] = (3 + i43);
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp38 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp38->iIdx = (_hx_tmp38->iIdx + 6);
HXDLIN(2243)							this->i++;
HXDLIN(2243)							yPos1 = (yPos1 + 20);
            						}
HXDLIN(2243)						bool _hx_tmp39;
HXDLIN(2243)						if ((player->mp >= 0)) {
HXLINE(2243)							_hx_tmp39 = (player->mp < player->maxMP);
            						}
            						else {
HXLINE(2243)							_hx_tmp39 = false;
            						}
HXDLIN(2243)						if (_hx_tmp39) {
HXLINE(2243)							float scaledBarW1 = ( (float)((( (Float)(::map::Map_obj::mpBarW) ) / ( (Float)(1024) ))) );
HXDLIN(2243)							float scaledBarH1 = ( (float)((( (Float)(::map::Map_obj::mpBarH) ) / ( (Float)(1024) ))) );
HXDLIN(2243)							float barThreshU1 = (::map::Map_obj::mpBarU + scaledBarW1);
HXDLIN(2243)							barThreshU1 = (barThreshU1 * ( (float)((((( (Float)(player->mp) ) / ( (Float)(player->maxMP) )) * ((Float)0.83333333333333337)) + ((( (Float)(player->mp) ) / ( (Float)(player->maxMP) )) * ((Float)0.0833333333333333287)))) ));
HXDLIN(2243)							w = ( (Float)((::map::Map_obj::mpBarW * ::util::RenderUtils_obj::clipSpaceScaleX)) );
HXDLIN(2243)							h = ( (Float)((::map::Map_obj::mpBarH * ::util::RenderUtils_obj::clipSpaceScaleY)) );
HXDLIN(2243)							yBase = (((screenY + yPos1) - ((( (Float)(::map::Map_obj::mpBarH) ) / ( (Float)(2) )) - ( (Float)(2) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2243)							texelW = ( (float)(((Float)0.00048828125)) );
HXDLIN(2243)							texelH = ( (float)(((Float)0.00048828125)) );
HXDLIN(2243)							{
HXLINE(2243)								int index200 = this->vIdx;
HXDLIN(2243)								_f32Arr_[index200] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index201 = (this->vIdx + 1);
HXDLIN(2243)								_f32Arr_[index201] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index202 = (this->vIdx + 2);
HXDLIN(2243)								float value80 = ::map::Map_obj::emptyBarU;
HXDLIN(2243)								_f32Arr_[index202] = value80;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index203 = (this->vIdx + 3);
HXDLIN(2243)								float value81 = ::map::Map_obj::emptyBarV;
HXDLIN(2243)								_f32Arr_[index203] = value81;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index204 = (this->vIdx + 4);
HXDLIN(2243)								_f32Arr_[index204] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index205 = (this->vIdx + 5);
HXDLIN(2243)								_f32Arr_[index205] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index206 = (this->vIdx + 6);
HXDLIN(2243)								_f32Arr_[index206] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index207 = (this->vIdx + 7);
HXDLIN(2243)								_f32Arr_[index207] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index208 = (this->vIdx + 8);
HXDLIN(2243)								_f32Arr_[index208] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index209 = (this->vIdx + 9);
HXDLIN(2243)								_f32Arr_[index209] = -1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index210 = (this->vIdx + 10);
HXDLIN(2243)								_f32Arr_[index210] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index211 = (this->vIdx + 11);
HXDLIN(2243)								_f32Arr_[index211] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index212 = (this->vIdx + 12);
HXDLIN(2243)								float value82 = (::map::Map_obj::emptyBarU + scaledEmptyBarW);
HXDLIN(2243)								_f32Arr_[index212] = value82;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index213 = (this->vIdx + 13);
HXDLIN(2243)								float value83 = ::map::Map_obj::emptyBarV;
HXDLIN(2243)								_f32Arr_[index213] = value83;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index214 = (this->vIdx + 14);
HXDLIN(2243)								_f32Arr_[index214] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index215 = (this->vIdx + 15);
HXDLIN(2243)								_f32Arr_[index215] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index216 = (this->vIdx + 16);
HXDLIN(2243)								_f32Arr_[index216] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index217 = (this->vIdx + 17);
HXDLIN(2243)								_f32Arr_[index217] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index218 = (this->vIdx + 18);
HXDLIN(2243)								_f32Arr_[index218] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index219 = (this->vIdx + 19);
HXDLIN(2243)								_f32Arr_[index219] = -1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index220 = (this->vIdx + 20);
HXDLIN(2243)								_f32Arr_[index220] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index221 = (this->vIdx + 21);
HXDLIN(2243)								_f32Arr_[index221] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index222 = (this->vIdx + 22);
HXDLIN(2243)								float value84 = ::map::Map_obj::emptyBarU;
HXDLIN(2243)								_f32Arr_[index222] = value84;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index223 = (this->vIdx + 23);
HXDLIN(2243)								float value85 = (::map::Map_obj::emptyBarV + scaledEmptyBarH);
HXDLIN(2243)								_f32Arr_[index223] = value85;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index224 = (this->vIdx + 24);
HXDLIN(2243)								_f32Arr_[index224] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index225 = (this->vIdx + 25);
HXDLIN(2243)								_f32Arr_[index225] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index226 = (this->vIdx + 26);
HXDLIN(2243)								_f32Arr_[index226] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index227 = (this->vIdx + 27);
HXDLIN(2243)								_f32Arr_[index227] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index228 = (this->vIdx + 28);
HXDLIN(2243)								_f32Arr_[index228] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index229 = (this->vIdx + 29);
HXDLIN(2243)								_f32Arr_[index229] = -1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index230 = (this->vIdx + 30);
HXDLIN(2243)								_f32Arr_[index230] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index231 = (this->vIdx + 31);
HXDLIN(2243)								_f32Arr_[index231] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index232 = (this->vIdx + 32);
HXDLIN(2243)								float value86 = (::map::Map_obj::emptyBarU + scaledEmptyBarW);
HXDLIN(2243)								_f32Arr_[index232] = value86;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index233 = (this->vIdx + 33);
HXDLIN(2243)								float value87 = (::map::Map_obj::emptyBarV + scaledEmptyBarH);
HXDLIN(2243)								_f32Arr_[index233] = value87;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index234 = (this->vIdx + 34);
HXDLIN(2243)								_f32Arr_[index234] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index235 = (this->vIdx + 35);
HXDLIN(2243)								_f32Arr_[index235] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index236 = (this->vIdx + 36);
HXDLIN(2243)								_f32Arr_[index236] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index237 = (this->vIdx + 37);
HXDLIN(2243)								_f32Arr_[index237] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index238 = (this->vIdx + 38);
HXDLIN(2243)								_f32Arr_[index238] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index239 = (this->vIdx + 39);
HXDLIN(2243)								_f32Arr_[index239] = -1;
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp40 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp40->vIdx = (_hx_tmp40->vIdx + 40);
HXDLIN(2243)							int i44 = (this->i * 4);
HXDLIN(2243)							{
HXLINE(2243)								int index240 = this->iIdx;
HXDLIN(2243)								_i32Arr_[index240] = i44;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index241 = (this->iIdx + 1);
HXDLIN(2243)								_i32Arr_[index241] = (1 + i44);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index242 = (this->iIdx + 2);
HXDLIN(2243)								_i32Arr_[index242] = (2 + i44);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index243 = (this->iIdx + 3);
HXDLIN(2243)								_i32Arr_[index243] = (2 + i44);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index244 = (this->iIdx + 4);
HXDLIN(2243)								_i32Arr_[index244] = (1 + i44);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index245 = (this->iIdx + 5);
HXDLIN(2243)								_i32Arr_[index245] = (3 + i44);
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp41 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp41->iIdx = (_hx_tmp41->iIdx + 6);
HXDLIN(2243)							this->i++;
HXDLIN(2243)							{
HXLINE(2243)								int index246 = this->vIdx;
HXDLIN(2243)								_f32Arr_[index246] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index247 = (this->vIdx + 1);
HXDLIN(2243)								_f32Arr_[index247] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index248 = (this->vIdx + 2);
HXDLIN(2243)								float value88 = ::map::Map_obj::mpBarU;
HXDLIN(2243)								_f32Arr_[index248] = value88;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index249 = (this->vIdx + 3);
HXDLIN(2243)								float value89 = ::map::Map_obj::mpBarV;
HXDLIN(2243)								_f32Arr_[index249] = value89;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index250 = (this->vIdx + 4);
HXDLIN(2243)								_f32Arr_[index250] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index251 = (this->vIdx + 5);
HXDLIN(2243)								_f32Arr_[index251] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index252 = (this->vIdx + 6);
HXDLIN(2243)								_f32Arr_[index252] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index253 = (this->vIdx + 7);
HXDLIN(2243)								_f32Arr_[index253] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index254 = (this->vIdx + 8);
HXDLIN(2243)								_f32Arr_[index254] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index255 = (this->vIdx + 9);
HXDLIN(2243)								_f32Arr_[index255] = barThreshU1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index256 = (this->vIdx + 10);
HXDLIN(2243)								_f32Arr_[index256] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index257 = (this->vIdx + 11);
HXDLIN(2243)								_f32Arr_[index257] = (-(h) + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index258 = (this->vIdx + 12);
HXDLIN(2243)								float value90 = (::map::Map_obj::mpBarU + scaledBarW1);
HXDLIN(2243)								_f32Arr_[index258] = value90;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index259 = (this->vIdx + 13);
HXDLIN(2243)								float value91 = ::map::Map_obj::mpBarV;
HXDLIN(2243)								_f32Arr_[index259] = value91;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index260 = (this->vIdx + 14);
HXDLIN(2243)								_f32Arr_[index260] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index261 = (this->vIdx + 15);
HXDLIN(2243)								_f32Arr_[index261] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index262 = (this->vIdx + 16);
HXDLIN(2243)								_f32Arr_[index262] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index263 = (this->vIdx + 17);
HXDLIN(2243)								_f32Arr_[index263] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index264 = (this->vIdx + 18);
HXDLIN(2243)								_f32Arr_[index264] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index265 = (this->vIdx + 19);
HXDLIN(2243)								_f32Arr_[index265] = barThreshU1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index266 = (this->vIdx + 20);
HXDLIN(2243)								_f32Arr_[index266] = (-(w) + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index267 = (this->vIdx + 21);
HXDLIN(2243)								_f32Arr_[index267] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index268 = (this->vIdx + 22);
HXDLIN(2243)								float value92 = ::map::Map_obj::mpBarU;
HXDLIN(2243)								_f32Arr_[index268] = value92;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index269 = (this->vIdx + 23);
HXDLIN(2243)								float value93 = (::map::Map_obj::mpBarV + scaledBarH1);
HXDLIN(2243)								_f32Arr_[index269] = value93;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index270 = (this->vIdx + 24);
HXDLIN(2243)								_f32Arr_[index270] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index271 = (this->vIdx + 25);
HXDLIN(2243)								_f32Arr_[index271] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index272 = (this->vIdx + 26);
HXDLIN(2243)								_f32Arr_[index272] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index273 = (this->vIdx + 27);
HXDLIN(2243)								_f32Arr_[index273] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index274 = (this->vIdx + 28);
HXDLIN(2243)								_f32Arr_[index274] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index275 = (this->vIdx + 29);
HXDLIN(2243)								_f32Arr_[index275] = barThreshU1;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index276 = (this->vIdx + 30);
HXDLIN(2243)								_f32Arr_[index276] = (w + xBase1);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index277 = (this->vIdx + 31);
HXDLIN(2243)								_f32Arr_[index277] = (h + yBase);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index278 = (this->vIdx + 32);
HXDLIN(2243)								float value94 = (::map::Map_obj::mpBarU + scaledBarW1);
HXDLIN(2243)								_f32Arr_[index278] = value94;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index279 = (this->vIdx + 33);
HXDLIN(2243)								float value95 = (::map::Map_obj::mpBarV + scaledBarH1);
HXDLIN(2243)								_f32Arr_[index279] = value95;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index280 = (this->vIdx + 34);
HXDLIN(2243)								_f32Arr_[index280] = texelW;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index281 = (this->vIdx + 35);
HXDLIN(2243)								_f32Arr_[index281] = texelH;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index282 = (this->vIdx + 36);
HXDLIN(2243)								_f32Arr_[index282] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index283 = (this->vIdx + 37);
HXDLIN(2243)								_f32Arr_[index283] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index284 = (this->vIdx + 38);
HXDLIN(2243)								_f32Arr_[index284] = 0;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index285 = (this->vIdx + 39);
HXDLIN(2243)								_f32Arr_[index285] = barThreshU1;
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp42 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp42->vIdx = (_hx_tmp42->vIdx + 40);
HXDLIN(2243)							int i45 = (this->i * 4);
HXDLIN(2243)							{
HXLINE(2243)								int index286 = this->iIdx;
HXDLIN(2243)								_i32Arr_[index286] = i45;
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index287 = (this->iIdx + 1);
HXDLIN(2243)								_i32Arr_[index287] = (1 + i45);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index288 = (this->iIdx + 2);
HXDLIN(2243)								_i32Arr_[index288] = (2 + i45);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index289 = (this->iIdx + 3);
HXDLIN(2243)								_i32Arr_[index289] = (2 + i45);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index290 = (this->iIdx + 4);
HXDLIN(2243)								_i32Arr_[index290] = (1 + i45);
            							}
HXDLIN(2243)							{
HXLINE(2243)								int index291 = (this->iIdx + 5);
HXDLIN(2243)								_i32Arr_[index291] = (3 + i45);
            							}
HXDLIN(2243)							 ::map::Map _hx_tmp43 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)							_hx_tmp43->iIdx = (_hx_tmp43->iIdx + 6);
HXDLIN(2243)							this->i++;
HXDLIN(2243)							yPos1 = (yPos1 + 20);
            						}
            					}
HXDLIN(2243)					if ((player->condition > 0)) {
HXLINE(2243)						int len = 0;
HXDLIN(2243)						{
HXLINE(2243)							int _g4 = 0;
HXDLIN(2243)							while((_g4 < 32)){
HXLINE(2243)								_g4 = (_g4 + 1);
HXDLIN(2243)								int i1 = (_g4 - 1);
HXDLIN(2243)								if (((player->condition & (1 << i1)) != 0)) {
HXLINE(2243)									len = (len + 1);
            								}
            							}
            						}
HXDLIN(2243)						len = (len >> 1);
HXDLIN(2243)						int idx = 0;
HXDLIN(2243)						{
HXLINE(2243)							int _g5 = 0;
HXDLIN(2243)							while((_g5 < 32)){
HXLINE(2243)								_g5 = (_g5 + 1);
HXDLIN(2243)								int i2 = (_g5 - 1);
HXDLIN(2243)								if (((player->condition & (1 << i2)) != 0)) {
HXLINE(2243)									 ::util::Rect rect2 = ::util::ConditionEffect_obj::effectRects->__get(i2).StaticCast<  ::util::Rect >();
HXDLIN(2243)									if (::hx::IsNull( rect2 )) {
HXLINE(2243)										continue;
            									}
HXDLIN(2243)									float scaledW = ( (float)((rect2->width / ( (Float)(1024) ))) );
HXDLIN(2243)									float scaledH = ( (float)((rect2->height / ( (Float)(1024) ))) );
HXDLIN(2243)									float scaledU = ( (float)((rect2->x / ( (Float)(1024) ))) );
HXDLIN(2243)									float scaledV = ( (float)((rect2->y / ( (Float)(1024) ))) );
HXDLIN(2243)									w = ((rect2->width * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleX) )) * ((Float)0.5));
HXDLIN(2243)									h = ((rect2->height * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) )) * ((Float)0.5));
HXDLIN(2243)									xBase1 = ( (float)((((( (Float)(screenX) ) - (rect2->width * ( (Float)(len) ))) + (( (Float)(idx) ) * rect2->width)) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleX) ))) );
HXDLIN(2243)									yBase = ((((screenY + yPos1) + 5) - ((rect2->height / ( (Float)(2) )) - ( (Float)(2) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2243)									texelW = ( (float)(((Float)0.0009765625)) );
HXDLIN(2243)									texelH = ( (float)(((Float)0.0009765625)) );
HXDLIN(2243)									{
HXLINE(2243)										int index292 = this->vIdx;
HXDLIN(2243)										_f32Arr_[index292] = (-(w) + xBase1);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index293 = (this->vIdx + 1);
HXDLIN(2243)										_f32Arr_[index293] = (-(h) + yBase);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index294 = (this->vIdx + 2);
HXDLIN(2243)										_f32Arr_[index294] = scaledU;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index295 = (this->vIdx + 3);
HXDLIN(2243)										_f32Arr_[index295] = scaledV;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index296 = (this->vIdx + 4);
HXDLIN(2243)										_f32Arr_[index296] = texelW;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index297 = (this->vIdx + 5);
HXDLIN(2243)										_f32Arr_[index297] = texelH;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index298 = (this->vIdx + 6);
HXDLIN(2243)										_f32Arr_[index298] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index299 = (this->vIdx + 7);
HXDLIN(2243)										_f32Arr_[index299] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index300 = (this->vIdx + 8);
HXDLIN(2243)										_f32Arr_[index300] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index301 = (this->vIdx + 9);
HXDLIN(2243)										_f32Arr_[index301] = -1;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index302 = (this->vIdx + 10);
HXDLIN(2243)										_f32Arr_[index302] = (w + xBase1);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index303 = (this->vIdx + 11);
HXDLIN(2243)										_f32Arr_[index303] = (-(h) + yBase);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index304 = (this->vIdx + 12);
HXDLIN(2243)										_f32Arr_[index304] = (scaledU + scaledW);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index305 = (this->vIdx + 13);
HXDLIN(2243)										_f32Arr_[index305] = scaledV;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index306 = (this->vIdx + 14);
HXDLIN(2243)										_f32Arr_[index306] = texelW;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index307 = (this->vIdx + 15);
HXDLIN(2243)										_f32Arr_[index307] = texelH;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index308 = (this->vIdx + 16);
HXDLIN(2243)										_f32Arr_[index308] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index309 = (this->vIdx + 17);
HXDLIN(2243)										_f32Arr_[index309] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index310 = (this->vIdx + 18);
HXDLIN(2243)										_f32Arr_[index310] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index311 = (this->vIdx + 19);
HXDLIN(2243)										_f32Arr_[index311] = -1;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index312 = (this->vIdx + 20);
HXDLIN(2243)										_f32Arr_[index312] = (-(w) + xBase1);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index313 = (this->vIdx + 21);
HXDLIN(2243)										_f32Arr_[index313] = (h + yBase);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index314 = (this->vIdx + 22);
HXDLIN(2243)										_f32Arr_[index314] = scaledU;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index315 = (this->vIdx + 23);
HXDLIN(2243)										_f32Arr_[index315] = (scaledV + scaledH);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index316 = (this->vIdx + 24);
HXDLIN(2243)										_f32Arr_[index316] = texelW;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index317 = (this->vIdx + 25);
HXDLIN(2243)										_f32Arr_[index317] = texelH;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index318 = (this->vIdx + 26);
HXDLIN(2243)										_f32Arr_[index318] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index319 = (this->vIdx + 27);
HXDLIN(2243)										_f32Arr_[index319] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index320 = (this->vIdx + 28);
HXDLIN(2243)										_f32Arr_[index320] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index321 = (this->vIdx + 29);
HXDLIN(2243)										_f32Arr_[index321] = -1;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index322 = (this->vIdx + 30);
HXDLIN(2243)										_f32Arr_[index322] = (w + xBase1);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index323 = (this->vIdx + 31);
HXDLIN(2243)										_f32Arr_[index323] = (h + yBase);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index324 = (this->vIdx + 32);
HXDLIN(2243)										_f32Arr_[index324] = (scaledU + scaledW);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index325 = (this->vIdx + 33);
HXDLIN(2243)										_f32Arr_[index325] = (scaledV + scaledH);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index326 = (this->vIdx + 34);
HXDLIN(2243)										_f32Arr_[index326] = texelW;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index327 = (this->vIdx + 35);
HXDLIN(2243)										_f32Arr_[index327] = texelH;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index328 = (this->vIdx + 36);
HXDLIN(2243)										_f32Arr_[index328] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index329 = (this->vIdx + 37);
HXDLIN(2243)										_f32Arr_[index329] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index330 = (this->vIdx + 38);
HXDLIN(2243)										_f32Arr_[index330] = 0;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index331 = (this->vIdx + 39);
HXDLIN(2243)										_f32Arr_[index331] = -1;
            									}
HXDLIN(2243)									 ::map::Map _hx_tmp44 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)									_hx_tmp44->vIdx = (_hx_tmp44->vIdx + 40);
HXDLIN(2243)									int i46 = (this->i * 4);
HXDLIN(2243)									{
HXLINE(2243)										int index332 = this->iIdx;
HXDLIN(2243)										_i32Arr_[index332] = i46;
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index333 = (this->iIdx + 1);
HXDLIN(2243)										_i32Arr_[index333] = (1 + i46);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index334 = (this->iIdx + 2);
HXDLIN(2243)										_i32Arr_[index334] = (2 + i46);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index335 = (this->iIdx + 3);
HXDLIN(2243)										_i32Arr_[index335] = (2 + i46);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index336 = (this->iIdx + 4);
HXDLIN(2243)										_i32Arr_[index336] = (1 + i46);
            									}
HXDLIN(2243)									{
HXLINE(2243)										int index337 = (this->iIdx + 5);
HXDLIN(2243)										_i32Arr_[index337] = (3 + i46);
            									}
HXDLIN(2243)									 ::map::Map _hx_tmp45 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2243)									_hx_tmp45->iIdx = (_hx_tmp45->iIdx + 6);
HXDLIN(2243)									this->i++;
HXDLIN(2243)									idx = (idx + 1);
            								}
            							}
            						}
            					}
HXDLIN(2243)					bool _hx_tmp46;
HXDLIN(2243)					if (::hx::IsNotNull( player->name )) {
HXLINE(2243)						_hx_tmp46 = (player->name != HX_("",00,00,00,00));
            					}
            					else {
HXLINE(2243)						_hx_tmp46 = false;
            					}
HXDLIN(2243)					if (_hx_tmp46) {
HXLINE(2243)						if (::hx::IsNull( player->nameTex )) {
HXLINE(2243)							int _hx_tmp47;
HXDLIN(2243)							if (player->isFellowGuild) {
HXLINE(2243)								_hx_tmp47 = ( (int)(( (unsigned int)(10944349) )) );
            							}
            							else {
HXLINE(2243)								_hx_tmp47 = ( (int)(( (unsigned int)(16572160) )) );
            							}
HXDLIN(2243)							player->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,_hx_tmp47,null(),null(),null(),null());
HXDLIN(2243)							player->nameText->setBold(true);
HXDLIN(2243)							player->nameText->set_text(player->name);
HXDLIN(2243)							player->nameText->updateMetrics();
HXDLIN(2243)							player->nameTex =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((player->nameText->get_width() + 20)),64,true,0);
HXDLIN(2243)							player->nameTex->draw(player->nameText, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,12,0),null(),null(),null(),null());
HXDLIN(2243)							 ::openfl::display::BitmapData player1 = player->nameTex;
HXDLIN(2243)							 ::openfl::display::BitmapData player2 = player->nameTex;
HXDLIN(2243)							 ::openfl::geom::Rectangle player3 = player->nameTex->rect;
HXDLIN(2243)							 ::openfl::geom::Point _hx_tmp48 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXDLIN(2243)							player1->applyFilter(player2,player3,_hx_tmp48, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,3,3,2,1,null(),null()));
            						}
HXDLIN(2243)						 ::openfl::display::BitmapData bitmapData = player->nameTex;
HXDLIN(2243)						bool needsPad = true;
HXDLIN(2243)						 ::engine::GLTextureData textureData;
HXDLIN(2243)						if (::hx::IsNull( bitmapData )) {
HXLINE(2243)							textureData = null();
            						}
            						else {
HXLINE(2243)							if (::engine::TextureFactory_obj::textures->exists(bitmapData)) {
HXLINE(2243)								textureData = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData)) );
            							}
            							else {
HXLINE(2243)								if (::hx::IsNull( bitmapData->image )) {
HXLINE(2243)									textureData = null();
            								}
            								else {
HXLINE(2243)									int preW = bitmapData->width;
HXDLIN(2243)									int preH = bitmapData->height;
HXDLIN(2243)									int pad;
HXDLIN(2243)									if (needsPad) {
HXLINE(2243)										pad = 4;
            									}
            									else {
HXLINE(2243)										pad = 0;
            									}
HXDLIN(2243)									int value96 = (bitmapData->width + pad);
HXDLIN(2243)									value96 = (value96 - 1);
HXDLIN(2243)									value96 = (value96 | (value96 >> 1));
HXDLIN(2243)									value96 = (value96 | (value96 >> 2));
HXDLIN(2243)									value96 = (value96 | (value96 >> 4));
HXDLIN(2243)									value96 = (value96 | (value96 >> 8));
HXDLIN(2243)									value96 = (value96 | (value96 >> 16));
HXDLIN(2243)									value96 = (value96 + 1);
HXDLIN(2243)									int width = value96;
HXDLIN(2243)									int value97 = (bitmapData->height + pad);
HXDLIN(2243)									value97 = (value97 - 1);
HXDLIN(2243)									value97 = (value97 | (value97 >> 1));
HXDLIN(2243)									value97 = (value97 | (value97 >> 2));
HXDLIN(2243)									value97 = (value97 | (value97 >> 4));
HXDLIN(2243)									value97 = (value97 | (value97 >> 8));
HXDLIN(2243)									value97 = (value97 | (value97 >> 16));
HXDLIN(2243)									value97 = (value97 + 1);
HXDLIN(2243)									int height = value97;
HXDLIN(2243)									Float xOff = (( (Float)((width - preW)) ) / ( (Float)(2) ));
HXDLIN(2243)									Float yOff = (( (Float)((height - preH)) ) / ( (Float)(2) ));
HXDLIN(2243)									 ::openfl::display::BitmapData bitmapTexture =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
HXDLIN(2243)									 ::openfl::geom::Point textureData1;
HXDLIN(2243)									if (needsPad) {
HXLINE(2243)										Float textureData2;
HXDLIN(2243)										if ((xOff == 0)) {
HXLINE(2243)											textureData2 = ( (Float)(2) );
            										}
            										else {
HXLINE(2243)											textureData2 = xOff;
            										}
HXDLIN(2243)										Float textureData3;
HXDLIN(2243)										if ((yOff == 0)) {
HXLINE(2243)											textureData3 = ( (Float)(2) );
            										}
            										else {
HXLINE(2243)											textureData3 = yOff;
            										}
HXDLIN(2243)										textureData1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData2,textureData3);
            									}
            									else {
HXLINE(2243)										textureData1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            									}
HXDLIN(2243)									bitmapTexture->copyPixels(bitmapData,bitmapData->rect,textureData1,null(),null(),null());
HXDLIN(2243)									 ::engine::GLTextureData texture1 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width,height,bitmapTexture);
HXDLIN(2243)									texture1->xOffset = xOff;
HXDLIN(2243)									texture1->yOffset = yOff;
HXDLIN(2243)									if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2243)										::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2243)										::engine::TextureFactory_obj::count = 0;
            									}
HXDLIN(2243)									::engine::TextureFactory_obj::textures->set(bitmapData,texture1);
HXDLIN(2243)									::engine::TextureFactory_obj::count++;
HXDLIN(2243)									textureData = texture1;
            								}
            							}
            						}
HXDLIN(2243)						this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData->texture,(( (float)(textureData->width) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)(textureData->height) ) * ::util::RenderUtils_obj::clipSpaceScaleY),(screenX * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(((((screenY - ( (Float)(hBase) )) + 30) + (( (Float)(((sink - ( (float)(1) )) * hBase)) ) / ( (Float)(3) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),null()));
            					}
HXDLIN(2243)					goto _hx_goto_28;
            				}
            				if (  (_hx_switch_0==HX_("Projectile",09,8a,3c,bb)) ){
HXLINE(2245)					 ::objects::Projectile proj = ::hx::TCast<  ::objects::Projectile >::cast(obj1);
HXDLIN(2245)					float screenX1 = (((proj->mapX * ::map::Camera_obj::cos) + (proj->mapY * ::map::Camera_obj::sin)) + ::map::Camera_obj::csX);
HXDLIN(2245)					float screenY1 = (((proj->mapX * -(::map::Camera_obj::sin)) + (proj->mapY * ::map::Camera_obj::cos)) + ::map::Camera_obj::csY);
HXDLIN(2245)					float texW1 = (proj->width * ( (float)(1024) ));
HXDLIN(2245)					float texH1 = (proj->height * ( (float)(1024) ));
HXDLIN(2245)					float size5 = (( (float)(((Float)5.5)) ) * proj->size);
HXDLIN(2245)					float w1 = (size5 * texW1);
HXDLIN(2245)					float h1 = (size5 * texH1);
HXDLIN(2245)					Float yBase1 = ((( (Float)(screenY1) ) - ((( (Float)(h1) ) / ( (Float)(2) )) - ( (Float)((size5 * ( (float)(2) ))) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2245)					float xBase2 = (screenX1 * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2245)					Float texelW1 = (((Float)0.001953125) / ( (Float)(size5) ));
HXDLIN(2245)					Float texelH1 = (((Float)0.001953125) / ( (Float)(size5) ));
HXDLIN(2245)					Float rotation = proj->props->rotation;
HXDLIN(2245)					Float angle = proj->getDirectionAngle(time);
HXDLIN(2245)					Float angle1;
HXDLIN(2245)					if ((rotation == 0)) {
HXLINE(2245)						angle1 = ( (Float)(0) );
            					}
            					else {
HXLINE(2245)						angle1 = (( (Float)(time) ) / rotation);
            					}
HXDLIN(2245)					Float angle2 = (((angle + proj->props->angleCorrection) + angle1) - ( (Float)(::map::Camera_obj::angleRad) ));
HXDLIN(2245)					float cosAngle = ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((angle2 + (( (Float)(( (float)(((Float)3.141592653589793)) )) ) * ((Float)0.5))) * (( (Float)(65536) ) / ( (Float)((( (float)(((Float)3.141592653589793)) ) * ( (float)(2) ))) )))) & 65535)];
HXDLIN(2245)					float sinAngle = ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((angle2 * (( (Float)(65536) ) / ( (Float)((( (float)(((Float)3.141592653589793)) ) * ( (float)(2) ))) )))) & 65535)];
HXDLIN(2245)					Float xScaledCos1 = (( (Float)(((cosAngle * w1) * ::util::RenderUtils_obj::clipSpaceScaleX)) ) * ((Float)0.5));
HXDLIN(2245)					Float xScaledSin1 = (( (Float)(((sinAngle * h1) * ::util::RenderUtils_obj::clipSpaceScaleX)) ) * ((Float)0.5));
HXDLIN(2245)					Float yScaledCos1 = (( (Float)(((cosAngle * w1) * ::util::RenderUtils_obj::clipSpaceScaleY)) ) * ((Float)0.5));
HXDLIN(2245)					Float yScaledSinInv = (( (Float)(((-(sinAngle) * h1) * ::util::RenderUtils_obj::clipSpaceScaleY)) ) * ((Float)0.5));
HXDLIN(2245)					{
HXLINE(2245)						int index338 = this->vIdx;
HXDLIN(2245)						_f32Arr_[index338] = ((-(xScaledCos1) + xScaledSin1) + xBase2);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index339 = (this->vIdx + 1);
HXDLIN(2245)						_f32Arr_[index339] = ((yScaledSinInv + -(yScaledCos1)) + yBase1);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index340 = (this->vIdx + 2);
HXDLIN(2245)						float value98 = proj->uValue;
HXDLIN(2245)						_f32Arr_[index340] = value98;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index341 = (this->vIdx + 3);
HXDLIN(2245)						float value99 = proj->vValue;
HXDLIN(2245)						_f32Arr_[index341] = value99;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index342 = (this->vIdx + 4);
HXDLIN(2245)						_f32Arr_[index342] = texelW1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index343 = (this->vIdx + 5);
HXDLIN(2245)						_f32Arr_[index343] = texelH1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index344 = (this->vIdx + 6);
HXDLIN(2245)						_f32Arr_[index344] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index345 = (this->vIdx + 7);
HXDLIN(2245)						_f32Arr_[index345] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index346 = (this->vIdx + 8);
HXDLIN(2245)						_f32Arr_[index346] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index347 = (this->vIdx + 9);
HXDLIN(2245)						_f32Arr_[index347] = -1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index348 = (this->vIdx + 10);
HXDLIN(2245)						_f32Arr_[index348] = ((xScaledCos1 + xScaledSin1) + xBase2);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index349 = (this->vIdx + 11);
HXDLIN(2245)						_f32Arr_[index349] = (-((yScaledSinInv + yScaledCos1)) + yBase1);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index350 = (this->vIdx + 12);
HXDLIN(2245)						float value100 = (proj->uValue + proj->width);
HXDLIN(2245)						_f32Arr_[index350] = value100;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index351 = (this->vIdx + 13);
HXDLIN(2245)						float value101 = proj->vValue;
HXDLIN(2245)						_f32Arr_[index351] = value101;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index352 = (this->vIdx + 14);
HXDLIN(2245)						_f32Arr_[index352] = texelW1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index353 = (this->vIdx + 15);
HXDLIN(2245)						_f32Arr_[index353] = texelH1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index354 = (this->vIdx + 16);
HXDLIN(2245)						_f32Arr_[index354] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index355 = (this->vIdx + 17);
HXDLIN(2245)						_f32Arr_[index355] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index356 = (this->vIdx + 18);
HXDLIN(2245)						_f32Arr_[index356] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index357 = (this->vIdx + 19);
HXDLIN(2245)						_f32Arr_[index357] = -1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index358 = (this->vIdx + 20);
HXDLIN(2245)						_f32Arr_[index358] = (-((xScaledCos1 + xScaledSin1)) + xBase2);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index359 = (this->vIdx + 21);
HXDLIN(2245)						_f32Arr_[index359] = ((yScaledSinInv + yScaledCos1) + yBase1);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index360 = (this->vIdx + 22);
HXDLIN(2245)						float value102 = proj->uValue;
HXDLIN(2245)						_f32Arr_[index360] = value102;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index361 = (this->vIdx + 23);
HXDLIN(2245)						float value103 = (proj->vValue + proj->height);
HXDLIN(2245)						_f32Arr_[index361] = value103;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index362 = (this->vIdx + 24);
HXDLIN(2245)						_f32Arr_[index362] = texelW1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index363 = (this->vIdx + 25);
HXDLIN(2245)						_f32Arr_[index363] = texelH1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index364 = (this->vIdx + 26);
HXDLIN(2245)						_f32Arr_[index364] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index365 = (this->vIdx + 27);
HXDLIN(2245)						_f32Arr_[index365] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index366 = (this->vIdx + 28);
HXDLIN(2245)						_f32Arr_[index366] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index367 = (this->vIdx + 29);
HXDLIN(2245)						_f32Arr_[index367] = -1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index368 = (this->vIdx + 30);
HXDLIN(2245)						_f32Arr_[index368] = ((xScaledCos1 + -(xScaledSin1)) + xBase2);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index369 = (this->vIdx + 31);
HXDLIN(2245)						_f32Arr_[index369] = ((-(yScaledSinInv) + yScaledCos1) + yBase1);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index370 = (this->vIdx + 32);
HXDLIN(2245)						float value104 = (proj->uValue + proj->width);
HXDLIN(2245)						_f32Arr_[index370] = value104;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index371 = (this->vIdx + 33);
HXDLIN(2245)						float value105 = (proj->vValue + proj->height);
HXDLIN(2245)						_f32Arr_[index371] = value105;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index372 = (this->vIdx + 34);
HXDLIN(2245)						_f32Arr_[index372] = texelW1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index373 = (this->vIdx + 35);
HXDLIN(2245)						_f32Arr_[index373] = texelH1;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index374 = (this->vIdx + 36);
HXDLIN(2245)						_f32Arr_[index374] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index375 = (this->vIdx + 37);
HXDLIN(2245)						_f32Arr_[index375] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index376 = (this->vIdx + 38);
HXDLIN(2245)						_f32Arr_[index376] = 0;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index377 = (this->vIdx + 39);
HXDLIN(2245)						_f32Arr_[index377] = -1;
            					}
HXDLIN(2245)					 ::map::Map _hx_tmp49 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2245)					_hx_tmp49->vIdx = (_hx_tmp49->vIdx + 40);
HXDLIN(2245)					int i47 = (this->i * 4);
HXDLIN(2245)					{
HXLINE(2245)						int index378 = this->iIdx;
HXDLIN(2245)						_i32Arr_[index378] = i47;
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index379 = (this->iIdx + 1);
HXDLIN(2245)						_i32Arr_[index379] = (1 + i47);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index380 = (this->iIdx + 2);
HXDLIN(2245)						_i32Arr_[index380] = (2 + i47);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index381 = (this->iIdx + 3);
HXDLIN(2245)						_i32Arr_[index381] = (2 + i47);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index382 = (this->iIdx + 4);
HXDLIN(2245)						_i32Arr_[index382] = (1 + i47);
            					}
HXDLIN(2245)					{
HXLINE(2245)						int index383 = (this->iIdx + 5);
HXDLIN(2245)						_i32Arr_[index383] = (3 + i47);
            					}
HXDLIN(2245)					 ::map::Map _hx_tmp50 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2245)					_hx_tmp50->iIdx = (_hx_tmp50->iIdx + 6);
HXDLIN(2245)					this->i++;
HXDLIN(2245)					goto _hx_goto_28;
            				}
            				if (  (_hx_switch_0==HX_("Wall",2a,89,cb,39)) ){
HXLINE(2241)					float texW2 = (obj1->width * ( (float)(1024) ));
HXDLIN(2241)					float texH2 = (obj1->height * ( (float)(1024) ));
HXDLIN(2241)					if (::hx::IsNotNull( obj1->animations )) {
HXLINE(2241)						 ::util::Rect rect3 = obj1->animations->getTexture(time);
HXDLIN(2241)						obj1->uValue = ( (float)((rect3->x / ( (Float)(1024) ))) );
HXDLIN(2241)						obj1->vValue = ( (float)((rect3->y / ( (Float)(1024) ))) );
HXDLIN(2241)						texW2 = ( (float)(rect3->width) );
HXDLIN(2241)						obj1->width = ( (float)((( (Float)(texW2) ) / ( (Float)(1024) ))) );
HXDLIN(2241)						texH2 = ( (float)(rect3->height) );
HXDLIN(2241)						obj1->height = ( (float)((( (Float)(texH2) ) / ( (Float)(1024) ))) );
            					}
HXDLIN(2241)					Float size6 = ((Float)0.0078125);
HXDLIN(2241)					float objX = obj1->mapX;
HXDLIN(2241)					float objY = obj1->mapY;
HXDLIN(2241)					float xBaseTop = ((((objX * ::map::Camera_obj::cos) + (objY * ::map::Camera_obj::sin)) + ::map::Camera_obj::csX) * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2241)					Float yBaseTop = ((( (Float)((((objX * -(::map::Camera_obj::sin)) + (objY * ::map::Camera_obj::cos)) + ::map::Camera_obj::csY)) ) - ( (Float)(( (signed char)(88) )) )) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2241)					float xBase3 = ((((objX * ::map::Camera_obj::cos) + (objY * ::map::Camera_obj::sin)) + ::map::Camera_obj::csX) * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2241)					float yBase2 = ((((objX * -(::map::Camera_obj::sin)) + (objY * ::map::Camera_obj::cos)) + ::map::Camera_obj::csY) * ::util::RenderUtils_obj::clipSpaceScaleY);
HXDLIN(2241)					if (obj1->props->isEnemy) {
HXLINE(2241)						obj1->hBase = ( (float)((size6 * ( (Float)(( (float)(((Float)5.5)) )) ))) );
HXDLIN(2241)						obj1->screenX = xBaseTop;
HXDLIN(2241)						obj1->screenYNoZ = ( (float)(yBaseTop) );
            					}
HXDLIN(2241)					float xScaledCos2 = ::map::Camera_obj::xScaledCos;
HXDLIN(2241)					float yScaledCos2 = ::map::Camera_obj::yScaledCos;
HXDLIN(2241)					float xScaledSin2 = ::map::Camera_obj::xScaledSin;
HXDLIN(2241)					float yScaledSin1 = ::map::Camera_obj::yScaledSin;
HXDLIN(2241)					float boundAngle = ::util::MathUtil_obj::halfBound(::map::Camera_obj::angleRad);
HXDLIN(2241)					bool _hx_tmp51;
HXDLIN(2241)					bool _hx_tmp52;
HXDLIN(2241)					if ((boundAngle >= ( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(2) ))) ))) {
HXLINE(2241)						_hx_tmp52 = (boundAngle <= ( (float)(((Float)3.141592653589793)) ));
            					}
            					else {
HXLINE(2241)						_hx_tmp52 = false;
            					}
HXDLIN(2241)					if (!(_hx_tmp52)) {
HXLINE(2241)						if ((boundAngle >= -(( (float)(((Float)3.141592653589793)) )))) {
HXLINE(2241)							_hx_tmp51 = (boundAngle <= -(( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(2) ))) )));
            						}
            						else {
HXLINE(2241)							_hx_tmp51 = false;
            						}
            					}
            					else {
HXLINE(2241)						_hx_tmp51 = true;
            					}
HXDLIN(2241)					if (_hx_tmp51) {
HXLINE(2241)						 ::map::Square topSquare = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)(((( (unsigned short)((::Math_obj::floor(( (Float)(objY) )) - 1)) ) * this->mapWidth) + ::Math_obj::floor(( (Float)(objX) )))) ))) );
HXDLIN(2241)						bool _hx_tmp53;
HXDLIN(2241)						if (::hx::IsNotNull( topSquare )) {
HXLINE(2241)							if (::hx::IsNotNull( topSquare->obj )) {
HXLINE(2241)								_hx_tmp53 = (topSquare->obj->objClass != HX_("Wall",2a,89,cb,39));
            							}
            							else {
HXLINE(2241)								_hx_tmp53 = true;
            							}
            						}
            						else {
HXLINE(2241)							_hx_tmp53 = false;
            						}
HXDLIN(2241)						if (_hx_tmp53) {
HXLINE(2241)							{
HXLINE(2241)								int index384 = this->vIdx;
HXDLIN(2241)								_f32Arr_[index384] = (((-(xScaledCos2) + xScaledSin2) + xBaseTop) - (xScaledSin2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index385 = (this->vIdx + 1);
HXDLIN(2241)								_f32Arr_[index385] = (((yScaledSin1 + yScaledCos2) + yBaseTop) - ( (Float)((yScaledCos2 * ( (float)(2) ))) ));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index386 = (this->vIdx + 2);
HXDLIN(2241)								float value106 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index386] = value106;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index387 = (this->vIdx + 3);
HXDLIN(2241)								float value107 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index387] = value107;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index388 = (this->vIdx + 4);
HXDLIN(2241)								_f32Arr_[index388] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index389 = (this->vIdx + 5);
HXDLIN(2241)								_f32Arr_[index389] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index390 = (this->vIdx + 6);
HXDLIN(2241)								_f32Arr_[index390] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index391 = (this->vIdx + 7);
HXDLIN(2241)								_f32Arr_[index391] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index392 = (this->vIdx + 8);
HXDLIN(2241)								_f32Arr_[index392] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index393 = (this->vIdx + 9);
HXDLIN(2241)								_f32Arr_[index393] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index394 = (this->vIdx + 10);
HXDLIN(2241)								_f32Arr_[index394] = (((xScaledCos2 + xScaledSin2) + xBaseTop) - (xScaledSin2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index395 = (this->vIdx + 11);
HXDLIN(2241)								_f32Arr_[index395] = (((-(yScaledSin1) + yScaledCos2) + yBaseTop) - ( (Float)((yScaledCos2 * ( (float)(2) ))) ));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index396 = (this->vIdx + 12);
HXDLIN(2241)								float value108 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index396] = value108;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index397 = (this->vIdx + 13);
HXDLIN(2241)								float value109 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index397] = value109;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index398 = (this->vIdx + 14);
HXDLIN(2241)								_f32Arr_[index398] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index399 = (this->vIdx + 15);
HXDLIN(2241)								_f32Arr_[index399] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index400 = (this->vIdx + 16);
HXDLIN(2241)								_f32Arr_[index400] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index401 = (this->vIdx + 17);
HXDLIN(2241)								_f32Arr_[index401] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index402 = (this->vIdx + 18);
HXDLIN(2241)								_f32Arr_[index402] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index403 = (this->vIdx + 19);
HXDLIN(2241)								_f32Arr_[index403] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index404 = (this->vIdx + 20);
HXDLIN(2241)								_f32Arr_[index404] = (((-(xScaledCos2) + xScaledSin2) + xBase3) - (xScaledSin2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index405 = (this->vIdx + 21);
HXDLIN(2241)								_f32Arr_[index405] = (((yScaledSin1 + yScaledCos2) + yBase2) - (yScaledCos2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index406 = (this->vIdx + 22);
HXDLIN(2241)								float value110 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index406] = value110;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index407 = (this->vIdx + 23);
HXDLIN(2241)								float value111 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index407] = value111;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index408 = (this->vIdx + 24);
HXDLIN(2241)								_f32Arr_[index408] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index409 = (this->vIdx + 25);
HXDLIN(2241)								_f32Arr_[index409] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index410 = (this->vIdx + 26);
HXDLIN(2241)								_f32Arr_[index410] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index411 = (this->vIdx + 27);
HXDLIN(2241)								_f32Arr_[index411] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index412 = (this->vIdx + 28);
HXDLIN(2241)								_f32Arr_[index412] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index413 = (this->vIdx + 29);
HXDLIN(2241)								_f32Arr_[index413] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index414 = (this->vIdx + 30);
HXDLIN(2241)								_f32Arr_[index414] = (((xScaledCos2 + xScaledSin2) + xBase3) - (xScaledSin2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index415 = (this->vIdx + 31);
HXDLIN(2241)								_f32Arr_[index415] = (((-(yScaledSin1) + yScaledCos2) + yBase2) - (yScaledCos2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index416 = (this->vIdx + 32);
HXDLIN(2241)								float value112 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index416] = value112;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index417 = (this->vIdx + 33);
HXDLIN(2241)								float value113 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index417] = value113;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index418 = (this->vIdx + 34);
HXDLIN(2241)								_f32Arr_[index418] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index419 = (this->vIdx + 35);
HXDLIN(2241)								_f32Arr_[index419] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index420 = (this->vIdx + 36);
HXDLIN(2241)								_f32Arr_[index420] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index421 = (this->vIdx + 37);
HXDLIN(2241)								_f32Arr_[index421] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index422 = (this->vIdx + 38);
HXDLIN(2241)								_f32Arr_[index422] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index423 = (this->vIdx + 39);
HXDLIN(2241)								_f32Arr_[index423] = -1;
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp54 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp54->vIdx = (_hx_tmp54->vIdx + 40);
HXDLIN(2241)							int i48 = (this->i * 4);
HXDLIN(2241)							{
HXLINE(2241)								int index424 = this->iIdx;
HXDLIN(2241)								_i32Arr_[index424] = i48;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index425 = (this->iIdx + 1);
HXDLIN(2241)								_i32Arr_[index425] = (1 + i48);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index426 = (this->iIdx + 2);
HXDLIN(2241)								_i32Arr_[index426] = (2 + i48);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index427 = (this->iIdx + 3);
HXDLIN(2241)								_i32Arr_[index427] = (2 + i48);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index428 = (this->iIdx + 4);
HXDLIN(2241)								_i32Arr_[index428] = (1 + i48);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index429 = (this->iIdx + 5);
HXDLIN(2241)								_i32Arr_[index429] = (3 + i48);
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp55 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp55->iIdx = (_hx_tmp55->iIdx + 6);
HXDLIN(2241)							this->i++;
            						}
            					}
HXDLIN(2241)					bool _hx_tmp56;
HXDLIN(2241)					if ((boundAngle <= ( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(2) ))) ))) {
HXLINE(2241)						_hx_tmp56 = (boundAngle >= -(( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(2) ))) )));
            					}
            					else {
HXLINE(2241)						_hx_tmp56 = false;
            					}
HXDLIN(2241)					if (_hx_tmp56) {
HXLINE(2241)						 ::map::Square bottomSquare = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)(((( (unsigned short)((::Math_obj::floor(( (Float)(objY) )) + 1)) ) * this->mapWidth) + ::Math_obj::floor(( (Float)(objX) )))) ))) );
HXDLIN(2241)						bool _hx_tmp57;
HXDLIN(2241)						if (::hx::IsNotNull( bottomSquare )) {
HXLINE(2241)							if (::hx::IsNotNull( bottomSquare->obj )) {
HXLINE(2241)								_hx_tmp57 = (bottomSquare->obj->objClass != HX_("Wall",2a,89,cb,39));
            							}
            							else {
HXLINE(2241)								_hx_tmp57 = true;
            							}
            						}
            						else {
HXLINE(2241)							_hx_tmp57 = false;
            						}
HXDLIN(2241)						if (_hx_tmp57) {
HXLINE(2241)							{
HXLINE(2241)								int index430 = this->vIdx;
HXDLIN(2241)								_f32Arr_[index430] = ((-(xScaledCos2) + xScaledSin2) + xBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index431 = (this->vIdx + 1);
HXDLIN(2241)								_f32Arr_[index431] = ((yScaledSin1 + yScaledCos2) + yBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index432 = (this->vIdx + 2);
HXDLIN(2241)								float value114 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index432] = value114;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index433 = (this->vIdx + 3);
HXDLIN(2241)								float value115 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index433] = value115;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index434 = (this->vIdx + 4);
HXDLIN(2241)								_f32Arr_[index434] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index435 = (this->vIdx + 5);
HXDLIN(2241)								_f32Arr_[index435] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index436 = (this->vIdx + 6);
HXDLIN(2241)								_f32Arr_[index436] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index437 = (this->vIdx + 7);
HXDLIN(2241)								_f32Arr_[index437] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index438 = (this->vIdx + 8);
HXDLIN(2241)								_f32Arr_[index438] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index439 = (this->vIdx + 9);
HXDLIN(2241)								_f32Arr_[index439] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index440 = (this->vIdx + 10);
HXDLIN(2241)								_f32Arr_[index440] = ((xScaledCos2 + xScaledSin2) + xBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index441 = (this->vIdx + 11);
HXDLIN(2241)								_f32Arr_[index441] = ((-(yScaledSin1) + yScaledCos2) + yBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index442 = (this->vIdx + 12);
HXDLIN(2241)								float value116 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index442] = value116;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index443 = (this->vIdx + 13);
HXDLIN(2241)								float value117 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index443] = value117;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index444 = (this->vIdx + 14);
HXDLIN(2241)								_f32Arr_[index444] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index445 = (this->vIdx + 15);
HXDLIN(2241)								_f32Arr_[index445] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index446 = (this->vIdx + 16);
HXDLIN(2241)								_f32Arr_[index446] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index447 = (this->vIdx + 17);
HXDLIN(2241)								_f32Arr_[index447] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index448 = (this->vIdx + 18);
HXDLIN(2241)								_f32Arr_[index448] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index449 = (this->vIdx + 19);
HXDLIN(2241)								_f32Arr_[index449] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index450 = (this->vIdx + 20);
HXDLIN(2241)								_f32Arr_[index450] = ((-(xScaledCos2) + xScaledSin2) + xBase3);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index451 = (this->vIdx + 21);
HXDLIN(2241)								_f32Arr_[index451] = ((yScaledSin1 + yScaledCos2) + yBase2);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index452 = (this->vIdx + 22);
HXDLIN(2241)								float value118 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index452] = value118;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index453 = (this->vIdx + 23);
HXDLIN(2241)								float value119 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index453] = value119;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index454 = (this->vIdx + 24);
HXDLIN(2241)								_f32Arr_[index454] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index455 = (this->vIdx + 25);
HXDLIN(2241)								_f32Arr_[index455] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index456 = (this->vIdx + 26);
HXDLIN(2241)								_f32Arr_[index456] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index457 = (this->vIdx + 27);
HXDLIN(2241)								_f32Arr_[index457] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index458 = (this->vIdx + 28);
HXDLIN(2241)								_f32Arr_[index458] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index459 = (this->vIdx + 29);
HXDLIN(2241)								_f32Arr_[index459] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index460 = (this->vIdx + 30);
HXDLIN(2241)								_f32Arr_[index460] = ((xScaledCos2 + xScaledSin2) + xBase3);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index461 = (this->vIdx + 31);
HXDLIN(2241)								_f32Arr_[index461] = ((-(yScaledSin1) + yScaledCos2) + yBase2);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index462 = (this->vIdx + 32);
HXDLIN(2241)								float value120 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index462] = value120;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index463 = (this->vIdx + 33);
HXDLIN(2241)								float value121 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index463] = value121;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index464 = (this->vIdx + 34);
HXDLIN(2241)								_f32Arr_[index464] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index465 = (this->vIdx + 35);
HXDLIN(2241)								_f32Arr_[index465] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index466 = (this->vIdx + 36);
HXDLIN(2241)								_f32Arr_[index466] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index467 = (this->vIdx + 37);
HXDLIN(2241)								_f32Arr_[index467] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index468 = (this->vIdx + 38);
HXDLIN(2241)								_f32Arr_[index468] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index469 = (this->vIdx + 39);
HXDLIN(2241)								_f32Arr_[index469] = -1;
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp58 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp58->vIdx = (_hx_tmp58->vIdx + 40);
HXDLIN(2241)							int i49 = (this->i * 4);
HXDLIN(2241)							{
HXLINE(2241)								int index470 = this->iIdx;
HXDLIN(2241)								_i32Arr_[index470] = i49;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index471 = (this->iIdx + 1);
HXDLIN(2241)								_i32Arr_[index471] = (1 + i49);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index472 = (this->iIdx + 2);
HXDLIN(2241)								_i32Arr_[index472] = (2 + i49);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index473 = (this->iIdx + 3);
HXDLIN(2241)								_i32Arr_[index473] = (2 + i49);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index474 = (this->iIdx + 4);
HXDLIN(2241)								_i32Arr_[index474] = (1 + i49);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index475 = (this->iIdx + 5);
HXDLIN(2241)								_i32Arr_[index475] = (3 + i49);
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp59 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp59->iIdx = (_hx_tmp59->iIdx + 6);
HXDLIN(2241)							this->i++;
            						}
            					}
HXDLIN(2241)					bool _hx_tmp60;
HXDLIN(2241)					if ((boundAngle >= 0)) {
HXLINE(2241)						_hx_tmp60 = (boundAngle <= ( (float)(((Float)3.141592653589793)) ));
            					}
            					else {
HXLINE(2241)						_hx_tmp60 = false;
            					}
HXDLIN(2241)					if (_hx_tmp60) {
HXLINE(2241)						 ::map::Square leftSquare = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((((( (unsigned short)(::Math_obj::floor(( (Float)(objY) ))) ) * this->mapWidth) + ::Math_obj::floor(( (Float)(objX) ))) - ( (unsigned short)(1) ))) ))) );
HXDLIN(2241)						bool _hx_tmp61;
HXDLIN(2241)						if (::hx::IsNotNull( leftSquare )) {
HXLINE(2241)							if (::hx::IsNotNull( leftSquare->obj )) {
HXLINE(2241)								_hx_tmp61 = (leftSquare->obj->objClass != HX_("Wall",2a,89,cb,39));
            							}
            							else {
HXLINE(2241)								_hx_tmp61 = true;
            							}
            						}
            						else {
HXLINE(2241)							_hx_tmp61 = false;
            						}
HXDLIN(2241)						if (_hx_tmp61) {
HXLINE(2241)							{
HXLINE(2241)								int index476 = this->vIdx;
HXDLIN(2241)								_f32Arr_[index476] = ((-(xScaledCos2) - xScaledSin2) + xBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index477 = (this->vIdx + 1);
HXDLIN(2241)								_f32Arr_[index477] = ((yScaledSin1 - yScaledCos2) + yBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index478 = (this->vIdx + 2);
HXDLIN(2241)								float value122 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index478] = value122;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index479 = (this->vIdx + 3);
HXDLIN(2241)								float value123 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index479] = value123;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index480 = (this->vIdx + 4);
HXDLIN(2241)								_f32Arr_[index480] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index481 = (this->vIdx + 5);
HXDLIN(2241)								_f32Arr_[index481] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index482 = (this->vIdx + 6);
HXDLIN(2241)								_f32Arr_[index482] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index483 = (this->vIdx + 7);
HXDLIN(2241)								_f32Arr_[index483] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index484 = (this->vIdx + 8);
HXDLIN(2241)								_f32Arr_[index484] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index485 = (this->vIdx + 9);
HXDLIN(2241)								_f32Arr_[index485] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index486 = (this->vIdx + 10);
HXDLIN(2241)								_f32Arr_[index486] = ((-(xScaledCos2) + xScaledSin2) + xBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index487 = (this->vIdx + 11);
HXDLIN(2241)								_f32Arr_[index487] = ((yScaledSin1 + yScaledCos2) + yBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index488 = (this->vIdx + 12);
HXDLIN(2241)								float value124 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index488] = value124;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index489 = (this->vIdx + 13);
HXDLIN(2241)								float value125 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index489] = value125;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index490 = (this->vIdx + 14);
HXDLIN(2241)								_f32Arr_[index490] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index491 = (this->vIdx + 15);
HXDLIN(2241)								_f32Arr_[index491] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index492 = (this->vIdx + 16);
HXDLIN(2241)								_f32Arr_[index492] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index493 = (this->vIdx + 17);
HXDLIN(2241)								_f32Arr_[index493] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index494 = (this->vIdx + 18);
HXDLIN(2241)								_f32Arr_[index494] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index495 = (this->vIdx + 19);
HXDLIN(2241)								_f32Arr_[index495] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index496 = (this->vIdx + 20);
HXDLIN(2241)								_f32Arr_[index496] = (((-(xScaledCos2) + xScaledSin2) + xBase3) - (xScaledSin2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index497 = (this->vIdx + 21);
HXDLIN(2241)								_f32Arr_[index497] = (((yScaledSin1 + yScaledCos2) + yBase2) - (yScaledCos2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index498 = (this->vIdx + 22);
HXDLIN(2241)								float value126 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index498] = value126;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index499 = (this->vIdx + 23);
HXDLIN(2241)								float value127 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index499] = value127;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index500 = (this->vIdx + 24);
HXDLIN(2241)								_f32Arr_[index500] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index501 = (this->vIdx + 25);
HXDLIN(2241)								_f32Arr_[index501] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index502 = (this->vIdx + 26);
HXDLIN(2241)								_f32Arr_[index502] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index503 = (this->vIdx + 27);
HXDLIN(2241)								_f32Arr_[index503] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index504 = (this->vIdx + 28);
HXDLIN(2241)								_f32Arr_[index504] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index505 = (this->vIdx + 29);
HXDLIN(2241)								_f32Arr_[index505] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index506 = (this->vIdx + 30);
HXDLIN(2241)								_f32Arr_[index506] = ((-(xScaledCos2) + xScaledSin2) + xBase3);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index507 = (this->vIdx + 31);
HXDLIN(2241)								_f32Arr_[index507] = ((yScaledSin1 + yScaledCos2) + yBase2);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index508 = (this->vIdx + 32);
HXDLIN(2241)								float value128 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index508] = value128;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index509 = (this->vIdx + 33);
HXDLIN(2241)								float value129 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index509] = value129;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index510 = (this->vIdx + 34);
HXDLIN(2241)								_f32Arr_[index510] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index511 = (this->vIdx + 35);
HXDLIN(2241)								_f32Arr_[index511] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index512 = (this->vIdx + 36);
HXDLIN(2241)								_f32Arr_[index512] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index513 = (this->vIdx + 37);
HXDLIN(2241)								_f32Arr_[index513] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index514 = (this->vIdx + 38);
HXDLIN(2241)								_f32Arr_[index514] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index515 = (this->vIdx + 39);
HXDLIN(2241)								_f32Arr_[index515] = -1;
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp62 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp62->vIdx = (_hx_tmp62->vIdx + 40);
HXDLIN(2241)							int i410 = (this->i * 4);
HXDLIN(2241)							{
HXLINE(2241)								int index516 = this->iIdx;
HXDLIN(2241)								_i32Arr_[index516] = i410;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index517 = (this->iIdx + 1);
HXDLIN(2241)								_i32Arr_[index517] = (1 + i410);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index518 = (this->iIdx + 2);
HXDLIN(2241)								_i32Arr_[index518] = (2 + i410);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index519 = (this->iIdx + 3);
HXDLIN(2241)								_i32Arr_[index519] = (2 + i410);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index520 = (this->iIdx + 4);
HXDLIN(2241)								_i32Arr_[index520] = (1 + i410);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index521 = (this->iIdx + 5);
HXDLIN(2241)								_i32Arr_[index521] = (3 + i410);
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp63 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp63->iIdx = (_hx_tmp63->iIdx + 6);
HXDLIN(2241)							this->i++;
            						}
            					}
HXDLIN(2241)					bool _hx_tmp64;
HXDLIN(2241)					if ((boundAngle <= 0)) {
HXLINE(2241)						_hx_tmp64 = (boundAngle >= -(( (float)(((Float)3.141592653589793)) )));
            					}
            					else {
HXLINE(2241)						_hx_tmp64 = false;
            					}
HXDLIN(2241)					if (_hx_tmp64) {
HXLINE(2241)						 ::map::Square rightSquare = ( ( ::map::Square)(_hx_array_unsafe_get(this->squares,( (int)((((( (unsigned short)(::Math_obj::floor(( (Float)(objY) ))) ) * this->mapWidth) + ::Math_obj::floor(( (Float)(objX) ))) + 1)) ))) );
HXDLIN(2241)						bool _hx_tmp65;
HXDLIN(2241)						if (::hx::IsNotNull( rightSquare )) {
HXLINE(2241)							if (::hx::IsNotNull( rightSquare->obj )) {
HXLINE(2241)								_hx_tmp65 = (rightSquare->obj->objClass != HX_("Wall",2a,89,cb,39));
            							}
            							else {
HXLINE(2241)								_hx_tmp65 = true;
            							}
            						}
            						else {
HXLINE(2241)							_hx_tmp65 = false;
            						}
HXDLIN(2241)						if (_hx_tmp65) {
HXLINE(2241)							{
HXLINE(2241)								int index522 = this->vIdx;
HXDLIN(2241)								_f32Arr_[index522] = ((xScaledCos2 - xScaledSin2) + xBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index523 = (this->vIdx + 1);
HXDLIN(2241)								_f32Arr_[index523] = ((-(yScaledSin1) - yScaledCos2) + yBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index524 = (this->vIdx + 2);
HXDLIN(2241)								float value130 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index524] = value130;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index525 = (this->vIdx + 3);
HXDLIN(2241)								float value131 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index525] = value131;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index526 = (this->vIdx + 4);
HXDLIN(2241)								_f32Arr_[index526] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index527 = (this->vIdx + 5);
HXDLIN(2241)								_f32Arr_[index527] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index528 = (this->vIdx + 6);
HXDLIN(2241)								_f32Arr_[index528] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index529 = (this->vIdx + 7);
HXDLIN(2241)								_f32Arr_[index529] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index530 = (this->vIdx + 8);
HXDLIN(2241)								_f32Arr_[index530] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index531 = (this->vIdx + 9);
HXDLIN(2241)								_f32Arr_[index531] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index532 = (this->vIdx + 10);
HXDLIN(2241)								_f32Arr_[index532] = ((xScaledCos2 + xScaledSin2) + xBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index533 = (this->vIdx + 11);
HXDLIN(2241)								_f32Arr_[index533] = ((-(yScaledSin1) + yScaledCos2) + yBaseTop);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index534 = (this->vIdx + 12);
HXDLIN(2241)								float value132 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index534] = value132;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index535 = (this->vIdx + 13);
HXDLIN(2241)								float value133 = obj1->vValue;
HXDLIN(2241)								_f32Arr_[index535] = value133;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index536 = (this->vIdx + 14);
HXDLIN(2241)								_f32Arr_[index536] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index537 = (this->vIdx + 15);
HXDLIN(2241)								_f32Arr_[index537] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index538 = (this->vIdx + 16);
HXDLIN(2241)								_f32Arr_[index538] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index539 = (this->vIdx + 17);
HXDLIN(2241)								_f32Arr_[index539] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index540 = (this->vIdx + 18);
HXDLIN(2241)								_f32Arr_[index540] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index541 = (this->vIdx + 19);
HXDLIN(2241)								_f32Arr_[index541] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index542 = (this->vIdx + 20);
HXDLIN(2241)								_f32Arr_[index542] = (((xScaledCos2 + xScaledSin2) + xBase3) - (xScaledSin2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index543 = (this->vIdx + 21);
HXDLIN(2241)								_f32Arr_[index543] = (((-(yScaledSin1) + yScaledCos2) + yBase2) - (yScaledCos2 * ( (float)(2) )));
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index544 = (this->vIdx + 22);
HXDLIN(2241)								float value134 = obj1->uValue;
HXDLIN(2241)								_f32Arr_[index544] = value134;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index545 = (this->vIdx + 23);
HXDLIN(2241)								float value135 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index545] = value135;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index546 = (this->vIdx + 24);
HXDLIN(2241)								_f32Arr_[index546] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index547 = (this->vIdx + 25);
HXDLIN(2241)								_f32Arr_[index547] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index548 = (this->vIdx + 26);
HXDLIN(2241)								_f32Arr_[index548] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index549 = (this->vIdx + 27);
HXDLIN(2241)								_f32Arr_[index549] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index550 = (this->vIdx + 28);
HXDLIN(2241)								_f32Arr_[index550] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index551 = (this->vIdx + 29);
HXDLIN(2241)								_f32Arr_[index551] = -1;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index552 = (this->vIdx + 30);
HXDLIN(2241)								_f32Arr_[index552] = ((xScaledCos2 + xScaledSin2) + xBase3);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index553 = (this->vIdx + 31);
HXDLIN(2241)								_f32Arr_[index553] = ((-(yScaledSin1) + yScaledCos2) + yBase2);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index554 = (this->vIdx + 32);
HXDLIN(2241)								float value136 = ( (float)((obj1->uValue + size6)) );
HXDLIN(2241)								_f32Arr_[index554] = value136;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index555 = (this->vIdx + 33);
HXDLIN(2241)								float value137 = ( (float)((obj1->vValue + size6)) );
HXDLIN(2241)								_f32Arr_[index555] = value137;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index556 = (this->vIdx + 34);
HXDLIN(2241)								_f32Arr_[index556] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index557 = (this->vIdx + 35);
HXDLIN(2241)								_f32Arr_[index557] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index558 = (this->vIdx + 36);
HXDLIN(2241)								_f32Arr_[index558] = 0;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index559 = (this->vIdx + 37);
HXDLIN(2241)								_f32Arr_[index559] = ((Float)1.0);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index560 = (this->vIdx + 38);
HXDLIN(2241)								_f32Arr_[index560] = ((Float)0.25);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index561 = (this->vIdx + 39);
HXDLIN(2241)								_f32Arr_[index561] = -1;
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp66 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp66->vIdx = (_hx_tmp66->vIdx + 40);
HXDLIN(2241)							int i411 = (this->i * 4);
HXDLIN(2241)							{
HXLINE(2241)								int index562 = this->iIdx;
HXDLIN(2241)								_i32Arr_[index562] = i411;
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index563 = (this->iIdx + 1);
HXDLIN(2241)								_i32Arr_[index563] = (1 + i411);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index564 = (this->iIdx + 2);
HXDLIN(2241)								_i32Arr_[index564] = (2 + i411);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index565 = (this->iIdx + 3);
HXDLIN(2241)								_i32Arr_[index565] = (2 + i411);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index566 = (this->iIdx + 4);
HXDLIN(2241)								_i32Arr_[index566] = (1 + i411);
            							}
HXDLIN(2241)							{
HXLINE(2241)								int index567 = (this->iIdx + 5);
HXDLIN(2241)								_i32Arr_[index567] = (3 + i411);
            							}
HXDLIN(2241)							 ::map::Map _hx_tmp67 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)							_hx_tmp67->iIdx = (_hx_tmp67->iIdx + 6);
HXDLIN(2241)							this->i++;
            						}
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index568 = this->vIdx;
HXDLIN(2241)						_f32Arr_[index568] = ((-(xScaledCos2) - xScaledSin2) + xBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index569 = (this->vIdx + 1);
HXDLIN(2241)						_f32Arr_[index569] = ((yScaledSin1 - yScaledCos2) + yBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index570 = (this->vIdx + 2);
HXDLIN(2241)						float value138 = obj1->topUValue;
HXDLIN(2241)						_f32Arr_[index570] = value138;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index571 = (this->vIdx + 3);
HXDLIN(2241)						float value139 = obj1->topVValue;
HXDLIN(2241)						_f32Arr_[index571] = value139;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index572 = (this->vIdx + 4);
HXDLIN(2241)						_f32Arr_[index572] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index573 = (this->vIdx + 5);
HXDLIN(2241)						_f32Arr_[index573] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index574 = (this->vIdx + 6);
HXDLIN(2241)						_f32Arr_[index574] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index575 = (this->vIdx + 7);
HXDLIN(2241)						_f32Arr_[index575] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index576 = (this->vIdx + 8);
HXDLIN(2241)						_f32Arr_[index576] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index577 = (this->vIdx + 9);
HXDLIN(2241)						_f32Arr_[index577] = -1;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index578 = (this->vIdx + 10);
HXDLIN(2241)						_f32Arr_[index578] = ((xScaledCos2 - xScaledSin2) + xBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index579 = (this->vIdx + 11);
HXDLIN(2241)						_f32Arr_[index579] = ((-(yScaledSin1) - yScaledCos2) + yBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index580 = (this->vIdx + 12);
HXDLIN(2241)						float value140 = ( (float)((obj1->topUValue + size6)) );
HXDLIN(2241)						_f32Arr_[index580] = value140;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index581 = (this->vIdx + 13);
HXDLIN(2241)						float value141 = obj1->topVValue;
HXDLIN(2241)						_f32Arr_[index581] = value141;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index582 = (this->vIdx + 14);
HXDLIN(2241)						_f32Arr_[index582] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index583 = (this->vIdx + 15);
HXDLIN(2241)						_f32Arr_[index583] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index584 = (this->vIdx + 16);
HXDLIN(2241)						_f32Arr_[index584] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index585 = (this->vIdx + 17);
HXDLIN(2241)						_f32Arr_[index585] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index586 = (this->vIdx + 18);
HXDLIN(2241)						_f32Arr_[index586] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index587 = (this->vIdx + 19);
HXDLIN(2241)						_f32Arr_[index587] = -1;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index588 = (this->vIdx + 20);
HXDLIN(2241)						_f32Arr_[index588] = ((-(xScaledCos2) + xScaledSin2) + xBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index589 = (this->vIdx + 21);
HXDLIN(2241)						_f32Arr_[index589] = ((yScaledSin1 + yScaledCos2) + yBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index590 = (this->vIdx + 22);
HXDLIN(2241)						float value142 = obj1->topUValue;
HXDLIN(2241)						_f32Arr_[index590] = value142;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index591 = (this->vIdx + 23);
HXDLIN(2241)						float value143 = ( (float)((obj1->topVValue + size6)) );
HXDLIN(2241)						_f32Arr_[index591] = value143;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index592 = (this->vIdx + 24);
HXDLIN(2241)						_f32Arr_[index592] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index593 = (this->vIdx + 25);
HXDLIN(2241)						_f32Arr_[index593] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index594 = (this->vIdx + 26);
HXDLIN(2241)						_f32Arr_[index594] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index595 = (this->vIdx + 27);
HXDLIN(2241)						_f32Arr_[index595] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index596 = (this->vIdx + 28);
HXDLIN(2241)						_f32Arr_[index596] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index597 = (this->vIdx + 29);
HXDLIN(2241)						_f32Arr_[index597] = -1;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index598 = (this->vIdx + 30);
HXDLIN(2241)						_f32Arr_[index598] = ((xScaledCos2 + xScaledSin2) + xBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index599 = (this->vIdx + 31);
HXDLIN(2241)						_f32Arr_[index599] = ((-(yScaledSin1) + yScaledCos2) + yBaseTop);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index600 = (this->vIdx + 32);
HXDLIN(2241)						float value144 = ( (float)((obj1->topUValue + size6)) );
HXDLIN(2241)						_f32Arr_[index600] = value144;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index601 = (this->vIdx + 33);
HXDLIN(2241)						float value145 = ( (float)((obj1->topVValue + size6)) );
HXDLIN(2241)						_f32Arr_[index601] = value145;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index602 = (this->vIdx + 34);
HXDLIN(2241)						_f32Arr_[index602] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index603 = (this->vIdx + 35);
HXDLIN(2241)						_f32Arr_[index603] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index604 = (this->vIdx + 36);
HXDLIN(2241)						_f32Arr_[index604] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index605 = (this->vIdx + 37);
HXDLIN(2241)						_f32Arr_[index605] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index606 = (this->vIdx + 38);
HXDLIN(2241)						_f32Arr_[index606] = 0;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index607 = (this->vIdx + 39);
HXDLIN(2241)						_f32Arr_[index607] = -1;
            					}
HXDLIN(2241)					 ::map::Map _hx_tmp68 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)					_hx_tmp68->vIdx = (_hx_tmp68->vIdx + 40);
HXDLIN(2241)					int i412 = (this->i * 4);
HXDLIN(2241)					{
HXLINE(2241)						int index608 = this->iIdx;
HXDLIN(2241)						_i32Arr_[index608] = i412;
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index609 = (this->iIdx + 1);
HXDLIN(2241)						_i32Arr_[index609] = (1 + i412);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index610 = (this->iIdx + 2);
HXDLIN(2241)						_i32Arr_[index610] = (2 + i412);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index611 = (this->iIdx + 3);
HXDLIN(2241)						_i32Arr_[index611] = (2 + i412);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index612 = (this->iIdx + 4);
HXDLIN(2241)						_i32Arr_[index612] = (1 + i412);
            					}
HXDLIN(2241)					{
HXLINE(2241)						int index613 = (this->iIdx + 5);
HXDLIN(2241)						_i32Arr_[index613] = (3 + i412);
            					}
HXDLIN(2241)					 ::map::Map _hx_tmp69 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2241)					_hx_tmp69->iIdx = (_hx_tmp69->iIdx + 6);
HXDLIN(2241)					this->i++;
HXDLIN(2241)					goto _hx_goto_28;
            				}
            				/* default */{
HXLINE(2247)					float screenX2 = (obj1->screenX = (((obj1->mapX * ::map::Camera_obj::cos) + (obj1->mapY * ::map::Camera_obj::sin)) + ::map::Camera_obj::csX));
HXDLIN(2247)					Float screenY2 = (obj1->screenYNoZ + (( (Float)(obj1->mapZ) ) * ( (Float)(-(( (signed char)(88) ))) )));
HXDLIN(2247)					float texW3 = (obj1->width * ( (float)(1024) ));
HXDLIN(2247)					float texH3 = (obj1->height * ( (float)(1024) ));
HXDLIN(2247)					float size7 = (( (float)(((Float)5.5)) ) * obj1->size);
HXDLIN(2247)					float hBase1 = (obj1->hBase = (size7 * texH3));
HXDLIN(2247)					bool _hx_tmp70;
HXDLIN(2247)					if (obj1->props->drawOnGround) {
HXLINE(2247)						_hx_tmp70 = ::hx::IsNotNull( obj1->curSquare );
            					}
            					else {
HXLINE(2247)						_hx_tmp70 = false;
            					}
HXDLIN(2247)					if (_hx_tmp70) {
HXLINE(2247)						float xScaledCos3 = ::map::Camera_obj::xScaledCos;
HXDLIN(2247)						float yScaledCos3 = ::map::Camera_obj::yScaledCos;
HXDLIN(2247)						float xScaledSin3 = ::map::Camera_obj::xScaledSin;
HXDLIN(2247)						float yScaledSin2 = ::map::Camera_obj::yScaledSin;
HXDLIN(2247)						float clipX = obj1->curSquare->clipX;
HXDLIN(2247)						float clipY = obj1->curSquare->clipY;
HXDLIN(2247)						{
HXLINE(2247)							int index614 = this->vIdx;
HXDLIN(2247)							_f32Arr_[index614] = ((-(xScaledCos3) - xScaledSin3) + clipX);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index615 = (this->vIdx + 1);
HXDLIN(2247)							_f32Arr_[index615] = ((yScaledSin2 - yScaledCos3) + clipY);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index616 = (this->vIdx + 2);
HXDLIN(2247)							float value146 = obj1->uValue;
HXDLIN(2247)							_f32Arr_[index616] = value146;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index617 = (this->vIdx + 3);
HXDLIN(2247)							float value147 = obj1->vValue;
HXDLIN(2247)							_f32Arr_[index617] = value147;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index618 = (this->vIdx + 4);
HXDLIN(2247)							_f32Arr_[index618] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index619 = (this->vIdx + 5);
HXDLIN(2247)							_f32Arr_[index619] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index620 = (this->vIdx + 6);
HXDLIN(2247)							_f32Arr_[index620] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index621 = (this->vIdx + 7);
HXDLIN(2247)							_f32Arr_[index621] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index622 = (this->vIdx + 8);
HXDLIN(2247)							_f32Arr_[index622] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index623 = (this->vIdx + 9);
HXDLIN(2247)							_f32Arr_[index623] = -1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index624 = (this->vIdx + 10);
HXDLIN(2247)							_f32Arr_[index624] = ((xScaledCos3 - xScaledSin3) + clipX);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index625 = (this->vIdx + 11);
HXDLIN(2247)							_f32Arr_[index625] = ((-(yScaledSin2) - yScaledCos3) + clipY);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index626 = (this->vIdx + 12);
HXDLIN(2247)							float value148 = (obj1->uValue + obj1->width);
HXDLIN(2247)							_f32Arr_[index626] = value148;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index627 = (this->vIdx + 13);
HXDLIN(2247)							float value149 = obj1->vValue;
HXDLIN(2247)							_f32Arr_[index627] = value149;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index628 = (this->vIdx + 14);
HXDLIN(2247)							_f32Arr_[index628] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index629 = (this->vIdx + 15);
HXDLIN(2247)							_f32Arr_[index629] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index630 = (this->vIdx + 16);
HXDLIN(2247)							_f32Arr_[index630] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index631 = (this->vIdx + 17);
HXDLIN(2247)							_f32Arr_[index631] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index632 = (this->vIdx + 18);
HXDLIN(2247)							_f32Arr_[index632] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index633 = (this->vIdx + 19);
HXDLIN(2247)							_f32Arr_[index633] = -1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index634 = (this->vIdx + 20);
HXDLIN(2247)							_f32Arr_[index634] = ((-(xScaledCos3) + xScaledSin3) + clipX);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index635 = (this->vIdx + 21);
HXDLIN(2247)							_f32Arr_[index635] = ((yScaledSin2 + yScaledCos3) + clipY);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index636 = (this->vIdx + 22);
HXDLIN(2247)							float value150 = obj1->uValue;
HXDLIN(2247)							_f32Arr_[index636] = value150;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index637 = (this->vIdx + 23);
HXDLIN(2247)							float value151 = (obj1->vValue + obj1->height);
HXDLIN(2247)							_f32Arr_[index637] = value151;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index638 = (this->vIdx + 24);
HXDLIN(2247)							_f32Arr_[index638] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index639 = (this->vIdx + 25);
HXDLIN(2247)							_f32Arr_[index639] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index640 = (this->vIdx + 26);
HXDLIN(2247)							_f32Arr_[index640] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index641 = (this->vIdx + 27);
HXDLIN(2247)							_f32Arr_[index641] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index642 = (this->vIdx + 28);
HXDLIN(2247)							_f32Arr_[index642] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index643 = (this->vIdx + 29);
HXDLIN(2247)							_f32Arr_[index643] = -1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index644 = (this->vIdx + 30);
HXDLIN(2247)							_f32Arr_[index644] = ((xScaledCos3 + xScaledSin3) + clipX);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index645 = (this->vIdx + 31);
HXDLIN(2247)							_f32Arr_[index645] = ((-(yScaledSin2) + yScaledCos3) + clipY);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index646 = (this->vIdx + 32);
HXDLIN(2247)							float value152 = (obj1->uValue + obj1->width);
HXDLIN(2247)							_f32Arr_[index646] = value152;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index647 = (this->vIdx + 33);
HXDLIN(2247)							float value153 = (obj1->vValue + obj1->height);
HXDLIN(2247)							_f32Arr_[index647] = value153;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index648 = (this->vIdx + 34);
HXDLIN(2247)							_f32Arr_[index648] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index649 = (this->vIdx + 35);
HXDLIN(2247)							_f32Arr_[index649] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index650 = (this->vIdx + 36);
HXDLIN(2247)							_f32Arr_[index650] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index651 = (this->vIdx + 37);
HXDLIN(2247)							_f32Arr_[index651] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index652 = (this->vIdx + 38);
HXDLIN(2247)							_f32Arr_[index652] = 0;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index653 = (this->vIdx + 39);
HXDLIN(2247)							_f32Arr_[index653] = -1;
            						}
HXDLIN(2247)						 ::map::Map _hx_tmp71 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)						_hx_tmp71->vIdx = (_hx_tmp71->vIdx + 40);
HXDLIN(2247)						unsigned int i413 = ( (unsigned int)((this->i * 4)) );
HXDLIN(2247)						{
HXLINE(2247)							int index654 = this->iIdx;
HXDLIN(2247)							_i32Arr_[index654] = i413;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index655 = (this->iIdx + 1);
HXDLIN(2247)							_i32Arr_[index655] = (1 + i413);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index656 = (this->iIdx + 2);
HXDLIN(2247)							_i32Arr_[index656] = (2 + i413);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index657 = (this->iIdx + 3);
HXDLIN(2247)							_i32Arr_[index657] = (2 + i413);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index658 = (this->iIdx + 4);
HXDLIN(2247)							_i32Arr_[index658] = (1 + i413);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index659 = (this->iIdx + 5);
HXDLIN(2247)							_i32Arr_[index659] = (3 + i413);
            						}
HXDLIN(2247)						 ::map::Map _hx_tmp72 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)						_hx_tmp72->iIdx = (_hx_tmp72->iIdx + 6);
HXDLIN(2247)						this->i++;
HXDLIN(2247)						bool isPortal = (obj1->objClass == HX_("Portal",cc,ee,b9,31));
HXDLIN(2247)						bool _hx_tmp73;
HXDLIN(2247)						bool _hx_tmp74;
HXDLIN(2247)						bool _hx_tmp75;
HXDLIN(2247)						if (!(obj1->props->showName)) {
HXLINE(2247)							_hx_tmp75 = isPortal;
            						}
            						else {
HXLINE(2247)							_hx_tmp75 = true;
            						}
HXDLIN(2247)						if (_hx_tmp75) {
HXLINE(2247)							_hx_tmp74 = ::hx::IsNotNull( obj1->name );
            						}
            						else {
HXLINE(2247)							_hx_tmp74 = false;
            						}
HXDLIN(2247)						if (_hx_tmp74) {
HXLINE(2247)							_hx_tmp73 = (obj1->name != HX_("",00,00,00,00));
            						}
            						else {
HXLINE(2247)							_hx_tmp73 = false;
            						}
HXDLIN(2247)						if (_hx_tmp73) {
HXLINE(2247)							if (::hx::IsNull( obj1->nameTex )) {
HXLINE(2247)								obj1->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,null(),null(),null(),null());
HXDLIN(2247)								obj1->nameText->setBold(true);
HXDLIN(2247)								obj1->nameText->set_text(obj1->name);
HXDLIN(2247)								obj1->nameText->updateMetrics();
HXDLIN(2247)								obj1->nameTex =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((obj1->nameText->get_width() + 20)),64,true,0);
HXDLIN(2247)								obj1->nameTex->draw(obj1->nameText, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,12,0),null(),null(),null(),null());
HXDLIN(2247)								 ::openfl::display::BitmapData obj2 = obj1->nameTex;
HXDLIN(2247)								 ::openfl::display::BitmapData obj3 = obj1->nameTex;
HXDLIN(2247)								 ::openfl::geom::Rectangle obj4 = obj1->nameTex->rect;
HXDLIN(2247)								 ::openfl::geom::Point _hx_tmp76 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXDLIN(2247)								obj2->applyFilter(obj3,obj4,_hx_tmp76, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,3,3,2,1,null(),null()));
            							}
HXDLIN(2247)							 ::openfl::display::BitmapData bitmapData1 = obj1->nameTex;
HXDLIN(2247)							bool needsPad1 = true;
HXDLIN(2247)							 ::engine::GLTextureData textureData4;
HXDLIN(2247)							if (::hx::IsNull( bitmapData1 )) {
HXLINE(2247)								textureData4 = null();
            							}
            							else {
HXLINE(2247)								if (::engine::TextureFactory_obj::textures->exists(bitmapData1)) {
HXLINE(2247)									textureData4 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData1)) );
            								}
            								else {
HXLINE(2247)									if (::hx::IsNull( bitmapData1->image )) {
HXLINE(2247)										textureData4 = null();
            									}
            									else {
HXLINE(2247)										int preW1 = bitmapData1->width;
HXDLIN(2247)										int preH1 = bitmapData1->height;
HXDLIN(2247)										int pad1;
HXDLIN(2247)										if (needsPad1) {
HXLINE(2247)											pad1 = 4;
            										}
            										else {
HXLINE(2247)											pad1 = 0;
            										}
HXDLIN(2247)										int value154 = (bitmapData1->width + pad1);
HXDLIN(2247)										value154 = (value154 - 1);
HXDLIN(2247)										value154 = (value154 | (value154 >> 1));
HXDLIN(2247)										value154 = (value154 | (value154 >> 2));
HXDLIN(2247)										value154 = (value154 | (value154 >> 4));
HXDLIN(2247)										value154 = (value154 | (value154 >> 8));
HXDLIN(2247)										value154 = (value154 | (value154 >> 16));
HXDLIN(2247)										value154 = (value154 + 1);
HXDLIN(2247)										int width1 = value154;
HXDLIN(2247)										int value155 = (bitmapData1->height + pad1);
HXDLIN(2247)										value155 = (value155 - 1);
HXDLIN(2247)										value155 = (value155 | (value155 >> 1));
HXDLIN(2247)										value155 = (value155 | (value155 >> 2));
HXDLIN(2247)										value155 = (value155 | (value155 >> 4));
HXDLIN(2247)										value155 = (value155 | (value155 >> 8));
HXDLIN(2247)										value155 = (value155 | (value155 >> 16));
HXDLIN(2247)										value155 = (value155 + 1);
HXDLIN(2247)										int height1 = value155;
HXDLIN(2247)										Float xOff1 = (( (Float)((width1 - preW1)) ) / ( (Float)(2) ));
HXDLIN(2247)										Float yOff1 = (( (Float)((height1 - preH1)) ) / ( (Float)(2) ));
HXDLIN(2247)										 ::openfl::display::BitmapData bitmapTexture1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width1,height1,true,0);
HXDLIN(2247)										 ::openfl::geom::Point textureData5;
HXDLIN(2247)										if (needsPad1) {
HXLINE(2247)											Float textureData6;
HXDLIN(2247)											if ((xOff1 == 0)) {
HXLINE(2247)												textureData6 = ( (Float)(2) );
            											}
            											else {
HXLINE(2247)												textureData6 = xOff1;
            											}
HXDLIN(2247)											Float textureData7;
HXDLIN(2247)											if ((yOff1 == 0)) {
HXLINE(2247)												textureData7 = ( (Float)(2) );
            											}
            											else {
HXLINE(2247)												textureData7 = yOff1;
            											}
HXDLIN(2247)											textureData5 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData6,textureData7);
            										}
            										else {
HXLINE(2247)											textureData5 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            										}
HXDLIN(2247)										bitmapTexture1->copyPixels(bitmapData1,bitmapData1->rect,textureData5,null(),null(),null());
HXDLIN(2247)										 ::engine::GLTextureData texture2 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width1,height1,bitmapTexture1);
HXDLIN(2247)										texture2->xOffset = xOff1;
HXDLIN(2247)										texture2->yOffset = yOff1;
HXDLIN(2247)										if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2247)											::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2247)											::engine::TextureFactory_obj::count = 0;
            										}
HXDLIN(2247)										::engine::TextureFactory_obj::textures->set(bitmapData1,texture2);
HXDLIN(2247)										::engine::TextureFactory_obj::count++;
HXDLIN(2247)										textureData4 = texture2;
            									}
            								}
            							}
HXDLIN(2247)							this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData4->texture,(( (float)(textureData4->width) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)(textureData4->height) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((screenX2 - ( (float)(3) )) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)((((screenY2 - ( (Float)(hBase1) )) + 50) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),null()));
HXDLIN(2247)							bool _hx_tmp77;
HXDLIN(2247)							if (isPortal) {
HXLINE(2247)								_hx_tmp77 = (::Global_obj::currentInteractiveTarget == obj1->objectId);
            							}
            							else {
HXLINE(2247)								_hx_tmp77 = false;
            							}
HXDLIN(2247)							if (_hx_tmp77) {
HXLINE(2247)								if (::hx::IsNull( obj1->enterTex )) {
HXLINE(2247)									 ::ui::SimpleText enterText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,null(),null(),null(),null());
HXDLIN(2247)									enterText->setBold(true);
HXDLIN(2247)									enterText->set_text(HX_("Enter",f8,dc,b3,03));
HXDLIN(2247)									enterText->updateMetrics();
HXDLIN(2247)									obj1->enterTex =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((enterText->get_width() + 20)),64,true,0);
HXDLIN(2247)									obj1->enterTex->draw(enterText, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,12,0),null(),null(),null(),null());
HXDLIN(2247)									 ::openfl::display::BitmapData obj5 = obj1->enterTex;
HXDLIN(2247)									 ::openfl::display::BitmapData obj6 = obj1->enterTex;
HXDLIN(2247)									 ::openfl::geom::Rectangle obj7 = obj1->enterTex->rect;
HXDLIN(2247)									 ::openfl::geom::Point _hx_tmp78 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXDLIN(2247)									obj5->applyFilter(obj6,obj7,_hx_tmp78, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,3,3,2,1,null(),null()));
            								}
HXDLIN(2247)								 ::openfl::display::BitmapData bitmapData2 = obj1->enterTex;
HXDLIN(2247)								bool needsPad2 = true;
HXDLIN(2247)								 ::engine::GLTextureData textureData8;
HXDLIN(2247)								if (::hx::IsNull( bitmapData2 )) {
HXLINE(2247)									textureData8 = null();
            								}
            								else {
HXLINE(2247)									if (::engine::TextureFactory_obj::textures->exists(bitmapData2)) {
HXLINE(2247)										textureData8 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData2)) );
            									}
            									else {
HXLINE(2247)										if (::hx::IsNull( bitmapData2->image )) {
HXLINE(2247)											textureData8 = null();
            										}
            										else {
HXLINE(2247)											int preW2 = bitmapData2->width;
HXDLIN(2247)											int preH2 = bitmapData2->height;
HXDLIN(2247)											int pad2;
HXDLIN(2247)											if (needsPad2) {
HXLINE(2247)												pad2 = 4;
            											}
            											else {
HXLINE(2247)												pad2 = 0;
            											}
HXDLIN(2247)											int value156 = (bitmapData2->width + pad2);
HXDLIN(2247)											value156 = (value156 - 1);
HXDLIN(2247)											value156 = (value156 | (value156 >> 1));
HXDLIN(2247)											value156 = (value156 | (value156 >> 2));
HXDLIN(2247)											value156 = (value156 | (value156 >> 4));
HXDLIN(2247)											value156 = (value156 | (value156 >> 8));
HXDLIN(2247)											value156 = (value156 | (value156 >> 16));
HXDLIN(2247)											value156 = (value156 + 1);
HXDLIN(2247)											int width2 = value156;
HXDLIN(2247)											int value157 = (bitmapData2->height + pad2);
HXDLIN(2247)											value157 = (value157 - 1);
HXDLIN(2247)											value157 = (value157 | (value157 >> 1));
HXDLIN(2247)											value157 = (value157 | (value157 >> 2));
HXDLIN(2247)											value157 = (value157 | (value157 >> 4));
HXDLIN(2247)											value157 = (value157 | (value157 >> 8));
HXDLIN(2247)											value157 = (value157 | (value157 >> 16));
HXDLIN(2247)											value157 = (value157 + 1);
HXDLIN(2247)											int height2 = value157;
HXDLIN(2247)											Float xOff2 = (( (Float)((width2 - preW2)) ) / ( (Float)(2) ));
HXDLIN(2247)											Float yOff2 = (( (Float)((height2 - preH2)) ) / ( (Float)(2) ));
HXDLIN(2247)											 ::openfl::display::BitmapData bitmapTexture2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width2,height2,true,0);
HXDLIN(2247)											 ::openfl::geom::Point textureData9;
HXDLIN(2247)											if (needsPad2) {
HXLINE(2247)												Float textureData10;
HXDLIN(2247)												if ((xOff2 == 0)) {
HXLINE(2247)													textureData10 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData10 = xOff2;
            												}
HXDLIN(2247)												Float textureData11;
HXDLIN(2247)												if ((yOff2 == 0)) {
HXLINE(2247)													textureData11 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData11 = yOff2;
            												}
HXDLIN(2247)												textureData9 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData10,textureData11);
            											}
            											else {
HXLINE(2247)												textureData9 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            											}
HXDLIN(2247)											bitmapTexture2->copyPixels(bitmapData2,bitmapData2->rect,textureData9,null(),null(),null());
HXDLIN(2247)											 ::engine::GLTextureData texture3 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width2,height2,bitmapTexture2);
HXDLIN(2247)											texture3->xOffset = xOff2;
HXDLIN(2247)											texture3->yOffset = yOff2;
HXDLIN(2247)											if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2247)												::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2247)												::engine::TextureFactory_obj::count = 0;
            											}
HXDLIN(2247)											::engine::TextureFactory_obj::textures->set(bitmapData2,texture3);
HXDLIN(2247)											::engine::TextureFactory_obj::count++;
HXDLIN(2247)											textureData8 = texture3;
            										}
            									}
            								}
HXDLIN(2247)								this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData8->texture,(( (float)(textureData8->width) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)(textureData8->height) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((screenX2 + 8) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(((screenY2 + 60) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),null()));
HXDLIN(2247)								if (::hx::IsNull( obj1->enterKeyTex )) {
HXLINE(2247)									obj1->enterKeyTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("keyIndicators",43,58,49,9c),::util::KeyCodeUtil_obj::charCodeIconIndices->__get(( (int)(::util::Settings_obj::interact) )));
            								}
HXDLIN(2247)								 ::openfl::display::BitmapData bitmapData3 = obj1->enterKeyTex;
HXDLIN(2247)								bool needsPad3 = true;
HXDLIN(2247)								 ::engine::GLTextureData textureData12;
HXDLIN(2247)								if (::hx::IsNull( bitmapData3 )) {
HXLINE(2247)									textureData12 = null();
            								}
            								else {
HXLINE(2247)									if (::engine::TextureFactory_obj::textures->exists(bitmapData3)) {
HXLINE(2247)										textureData12 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData3)) );
            									}
            									else {
HXLINE(2247)										if (::hx::IsNull( bitmapData3->image )) {
HXLINE(2247)											textureData12 = null();
            										}
            										else {
HXLINE(2247)											int preW3 = bitmapData3->width;
HXDLIN(2247)											int preH3 = bitmapData3->height;
HXDLIN(2247)											int pad3;
HXDLIN(2247)											if (needsPad3) {
HXLINE(2247)												pad3 = 4;
            											}
            											else {
HXLINE(2247)												pad3 = 0;
            											}
HXDLIN(2247)											int value158 = (bitmapData3->width + pad3);
HXDLIN(2247)											value158 = (value158 - 1);
HXDLIN(2247)											value158 = (value158 | (value158 >> 1));
HXDLIN(2247)											value158 = (value158 | (value158 >> 2));
HXDLIN(2247)											value158 = (value158 | (value158 >> 4));
HXDLIN(2247)											value158 = (value158 | (value158 >> 8));
HXDLIN(2247)											value158 = (value158 | (value158 >> 16));
HXDLIN(2247)											value158 = (value158 + 1);
HXDLIN(2247)											int width3 = value158;
HXDLIN(2247)											int value159 = (bitmapData3->height + pad3);
HXDLIN(2247)											value159 = (value159 - 1);
HXDLIN(2247)											value159 = (value159 | (value159 >> 1));
HXDLIN(2247)											value159 = (value159 | (value159 >> 2));
HXDLIN(2247)											value159 = (value159 | (value159 >> 4));
HXDLIN(2247)											value159 = (value159 | (value159 >> 8));
HXDLIN(2247)											value159 = (value159 | (value159 >> 16));
HXDLIN(2247)											value159 = (value159 + 1);
HXDLIN(2247)											int height3 = value159;
HXDLIN(2247)											Float xOff3 = (( (Float)((width3 - preW3)) ) / ( (Float)(2) ));
HXDLIN(2247)											Float yOff3 = (( (Float)((height3 - preH3)) ) / ( (Float)(2) ));
HXDLIN(2247)											 ::openfl::display::BitmapData bitmapTexture3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width3,height3,true,0);
HXDLIN(2247)											 ::openfl::geom::Point textureData13;
HXDLIN(2247)											if (needsPad3) {
HXLINE(2247)												Float textureData14;
HXDLIN(2247)												if ((xOff3 == 0)) {
HXLINE(2247)													textureData14 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData14 = xOff3;
            												}
HXDLIN(2247)												Float textureData15;
HXDLIN(2247)												if ((yOff3 == 0)) {
HXLINE(2247)													textureData15 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData15 = yOff3;
            												}
HXDLIN(2247)												textureData13 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData14,textureData15);
            											}
            											else {
HXLINE(2247)												textureData13 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            											}
HXDLIN(2247)											bitmapTexture3->copyPixels(bitmapData3,bitmapData3->rect,textureData13,null(),null(),null());
HXDLIN(2247)											 ::engine::GLTextureData texture4 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width3,height3,bitmapTexture3);
HXDLIN(2247)											texture4->xOffset = xOff3;
HXDLIN(2247)											texture4->yOffset = yOff3;
HXDLIN(2247)											if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2247)												::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2247)												::engine::TextureFactory_obj::count = 0;
            											}
HXDLIN(2247)											::engine::TextureFactory_obj::textures->set(bitmapData3,texture4);
HXDLIN(2247)											::engine::TextureFactory_obj::count++;
HXDLIN(2247)											textureData12 = texture4;
            										}
            									}
            								}
HXDLIN(2247)								this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData12->texture,(( (float)((textureData12->width >> 2)) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)((textureData12->height >> 2)) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((screenX2 - ( (float)(22) )) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(((screenY2 + 39) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),null()));
            							}
            						}
            					}
            					else {
HXLINE(2247)						 ::util::Rect rect4 = null();
HXDLIN(2247)						int action1 = 0;
HXDLIN(2247)						float p1 = ( (float)(((Float)0.0)) );
HXDLIN(2247)						if (::hx::IsNotNull( obj1->animatedChar )) {
HXLINE(2247)							if ((time < (obj1->attackStart + 300))) {
HXLINE(2247)								if (!(obj1->props->dontFaceAttacks)) {
HXLINE(2247)									obj1->facing = obj1->attackAngle;
            								}
HXDLIN(2247)								p1 = ( (float)((( (Float)(::hx::Mod((time - obj1->attackStart),300)) ) / ( (Float)(300) ))) );
HXDLIN(2247)								action1 = 2;
            							}
            							else {
HXLINE(2247)								bool _hx_tmp79;
HXDLIN(2247)								if ((obj1->moveVec->x == 0)) {
HXLINE(2247)									_hx_tmp79 = (obj1->moveVec->y != 0);
            								}
            								else {
HXLINE(2247)									_hx_tmp79 = true;
            								}
HXDLIN(2247)								if (_hx_tmp79) {
HXLINE(2247)									int walkPer1 = ::Std_obj::_hx_int((((Float)0.5) / obj1->moveVec->get_length()));
HXDLIN(2247)									walkPer1 = (walkPer1 + (400 - ::hx::Mod(walkPer1,400)));
HXDLIN(2247)									bool _hx_tmp80;
HXDLIN(2247)									bool _hx_tmp81;
HXDLIN(2247)									bool _hx_tmp82;
HXDLIN(2247)									if (!((obj1->moveVec->x > ( (float)(((Float)0.00001)) )))) {
HXLINE(2247)										_hx_tmp82 = (obj1->moveVec->x < -(( (float)(((Float)0.00001)) )));
            									}
            									else {
HXLINE(2247)										_hx_tmp82 = true;
            									}
HXDLIN(2247)									if (!(_hx_tmp82)) {
HXLINE(2247)										_hx_tmp81 = (obj1->moveVec->y > ( (float)(((Float)0.00001)) ));
            									}
            									else {
HXLINE(2247)										_hx_tmp81 = true;
            									}
HXDLIN(2247)									if (!(_hx_tmp81)) {
HXLINE(2247)										_hx_tmp80 = (obj1->moveVec->y < -(( (float)(((Float)0.00001)) )));
            									}
            									else {
HXLINE(2247)										_hx_tmp80 = true;
            									}
HXDLIN(2247)									if (_hx_tmp80) {
HXLINE(2247)										obj1->facing = ( (float)(::Math_obj::atan2(obj1->moveVec->y,obj1->moveVec->x)) );
HXDLIN(2247)										action1 = 1;
            									}
            									else {
HXLINE(2247)										action1 = 0;
            									}
HXDLIN(2247)									p1 = ( (float)((( (Float)(::hx::Mod(time,walkPer1)) ) / ( (Float)(walkPer1) ))) );
            								}
            							}
HXDLIN(2247)							rect4 = obj1->animatedChar->rectFromFacing(obj1->facing,action1,p1);
            						}
            						else {
HXLINE(2247)							if (::hx::IsNotNull( obj1->animations )) {
HXLINE(2247)								rect4 = obj1->animations->getTexture(time);
            							}
            						}
HXDLIN(2247)						if (::hx::IsNotNull( rect4 )) {
HXLINE(2247)							obj1->uValue = ( (float)((rect4->x / ( (Float)(1024) ))) );
HXDLIN(2247)							obj1->vValue = ( (float)((rect4->y / ( (Float)(1024) ))) );
HXDLIN(2247)							texW3 = ( (float)(rect4->width) );
HXDLIN(2247)							obj1->width = ( (float)((( (Float)(texW3) ) / ( (Float)(1024) ))) );
HXDLIN(2247)							texH3 = ( (float)(rect4->height) );
HXDLIN(2247)							obj1->height = ( (float)((( (Float)(texH3) ) / ( (Float)(1024) ))) );
            						}
HXDLIN(2247)						float sink1 = ( (float)(((Float)1.0)) );
HXDLIN(2247)						bool _hx_tmp83;
HXDLIN(2247)						if (::hx::IsNotNull( obj1->curSquare )) {
HXLINE(2247)							bool _hx_tmp84;
HXDLIN(2247)							if (!(obj1->flying)) {
HXLINE(2247)								if (::hx::IsNotNull( obj1->curSquare->obj )) {
HXLINE(2247)									_hx_tmp84 = obj1->curSquare->obj->props->protectFromSink;
            								}
            								else {
HXLINE(2247)									_hx_tmp84 = false;
            								}
            							}
            							else {
HXLINE(2247)								_hx_tmp84 = true;
            							}
HXDLIN(2247)							_hx_tmp83 = !(_hx_tmp84);
            						}
            						else {
HXLINE(2247)							_hx_tmp83 = false;
            						}
HXDLIN(2247)						if (_hx_tmp83) {
HXLINE(2247)							sink1 = (sink1 + (obj1->curSquare->sink + obj1->sinkLevel));
            						}
HXDLIN(2247)						float flashStrength1 = ( (float)(((Float)0.0)) );
HXDLIN(2247)						if ((obj1->flashPeriodMs > 0)) {
HXLINE(2247)							bool _hx_tmp85;
HXDLIN(2247)							if ((obj1->flashRepeats != -1)) {
HXLINE(2247)								_hx_tmp85 = (time > (obj1->flashStartTime + (obj1->flashPeriodMs * obj1->flashRepeats)));
            							}
            							else {
HXLINE(2247)								_hx_tmp85 = false;
            							}
HXDLIN(2247)							if (_hx_tmp85) {
HXLINE(2247)								obj1->flashRepeats = (obj1->flashStartTime = (obj1->flashPeriodMs = (obj1->flashColor = ( (float)(0) ))));
            							}
            							else {
HXLINE(2247)								flashStrength1 = ( (float)((( (Float)(::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((( (Float)(( (float)(((::hx::Mod((( (Float)(time) ) - ( (Float)(obj1->flashStartTime) )),obj1->flashPeriodMs) / ( (Float)(obj1->flashPeriodMs) )) * ( (Float)(( (float)(((Float)3.141592653589793)) )) ))) )) ) * (( (Float)(65536) ) / ( (Float)((( (float)(((Float)3.141592653589793)) ) * ( (float)(2) ))) )))) & 65535)]) ) * ((Float)0.5))) );
            							}
            						}
HXDLIN(2247)						Float w2 = (( (Float)(((size7 * texW3) * ::util::RenderUtils_obj::clipSpaceScaleX)) ) * ((Float)0.5));
HXDLIN(2247)						Float h2 = ((( (Float)((hBase1 * ::util::RenderUtils_obj::clipSpaceScaleY)) ) * ((Float)0.5)) / ( (Float)(sink1) ));
HXDLIN(2247)						Float yBase3 = ((screenY2 - ((( (Float)(hBase1) ) / ( (Float)(2) )) - ( (Float)((size7 * ( (float)(2) ))) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2247)						float xOffset1 = ( (float)(((Float)0.0)) );
HXDLIN(2247)						bool _hx_tmp86;
HXDLIN(2247)						if ((action1 == 2)) {
HXLINE(2247)							_hx_tmp86 = (p1 >= ((Float)0.5));
            						}
            						else {
HXLINE(2247)							_hx_tmp86 = false;
            						}
HXDLIN(2247)						if (_hx_tmp86) {
HXLINE(2247)							int dir1 = this->player->animatedChar->facingToDir(this->player->facing);
HXDLIN(2247)							if ((dir1 == 1)) {
HXLINE(2247)								xOffset1 = -((texW3 + size7));
            							}
            							else {
HXLINE(2247)								xOffset1 = (texW3 + size7);
            							}
            						}
HXDLIN(2247)						float xBase4;
HXDLIN(2247)						if ((action1 == 2)) {
HXLINE(2247)							xBase4 = xOffset1;
            						}
            						else {
HXLINE(2247)							xBase4 = ( (float)(0) );
            						}
HXDLIN(2247)						float xBase5 = ((screenX2 + xBase4) * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2247)						float texelW2 = ( (float)((((Float)0.001953125) / ( (Float)(size7) ))) );
HXDLIN(2247)						float texelH2 = ( (float)((((Float)0.001953125) / ( (Float)(size7) ))) );
HXDLIN(2247)						{
HXLINE(2247)							int index660 = this->vIdx;
HXDLIN(2247)							_f32Arr_[index660] = (-(w2) + xBase5);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index661 = (this->vIdx + 1);
HXDLIN(2247)							_f32Arr_[index661] = (-(h2) + yBase3);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index662 = (this->vIdx + 2);
HXDLIN(2247)							float value160 = obj1->uValue;
HXDLIN(2247)							_f32Arr_[index662] = value160;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index663 = (this->vIdx + 3);
HXDLIN(2247)							float value161 = obj1->vValue;
HXDLIN(2247)							_f32Arr_[index663] = value161;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index664 = (this->vIdx + 4);
HXDLIN(2247)							_f32Arr_[index664] = texelW2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index665 = (this->vIdx + 5);
HXDLIN(2247)							_f32Arr_[index665] = texelH2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index666 = (this->vIdx + 6);
HXDLIN(2247)							float value162 = obj1->glowColor;
HXDLIN(2247)							_f32Arr_[index666] = value162;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index667 = (this->vIdx + 7);
HXDLIN(2247)							float value163 = obj1->flashColor;
HXDLIN(2247)							_f32Arr_[index667] = value163;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index668 = (this->vIdx + 8);
HXDLIN(2247)							_f32Arr_[index668] = flashStrength1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index669 = (this->vIdx + 9);
HXDLIN(2247)							_f32Arr_[index669] = -1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index670 = (this->vIdx + 10);
HXDLIN(2247)							_f32Arr_[index670] = (w2 + xBase5);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index671 = (this->vIdx + 11);
HXDLIN(2247)							_f32Arr_[index671] = (-(h2) + yBase3);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index672 = (this->vIdx + 12);
HXDLIN(2247)							float value164 = (obj1->uValue + obj1->width);
HXDLIN(2247)							_f32Arr_[index672] = value164;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index673 = (this->vIdx + 13);
HXDLIN(2247)							float value165 = obj1->vValue;
HXDLIN(2247)							_f32Arr_[index673] = value165;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index674 = (this->vIdx + 14);
HXDLIN(2247)							_f32Arr_[index674] = texelW2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index675 = (this->vIdx + 15);
HXDLIN(2247)							_f32Arr_[index675] = texelH2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index676 = (this->vIdx + 16);
HXDLIN(2247)							float value166 = obj1->glowColor;
HXDLIN(2247)							_f32Arr_[index676] = value166;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index677 = (this->vIdx + 17);
HXDLIN(2247)							float value167 = obj1->flashColor;
HXDLIN(2247)							_f32Arr_[index677] = value167;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index678 = (this->vIdx + 18);
HXDLIN(2247)							_f32Arr_[index678] = flashStrength1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index679 = (this->vIdx + 19);
HXDLIN(2247)							_f32Arr_[index679] = -1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index680 = (this->vIdx + 20);
HXDLIN(2247)							_f32Arr_[index680] = (-(w2) + xBase5);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index681 = (this->vIdx + 21);
HXDLIN(2247)							_f32Arr_[index681] = (h2 + yBase3);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index682 = (this->vIdx + 22);
HXDLIN(2247)							float value168 = obj1->uValue;
HXDLIN(2247)							_f32Arr_[index682] = value168;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index683 = (this->vIdx + 23);
HXDLIN(2247)							float value169 = ( (float)((obj1->vValue + (( (Float)(obj1->height) ) / ( (Float)(sink1) )))) );
HXDLIN(2247)							_f32Arr_[index683] = value169;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index684 = (this->vIdx + 24);
HXDLIN(2247)							_f32Arr_[index684] = texelW2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index685 = (this->vIdx + 25);
HXDLIN(2247)							_f32Arr_[index685] = texelH2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index686 = (this->vIdx + 26);
HXDLIN(2247)							float value170 = obj1->glowColor;
HXDLIN(2247)							_f32Arr_[index686] = value170;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index687 = (this->vIdx + 27);
HXDLIN(2247)							float value171 = obj1->flashColor;
HXDLIN(2247)							_f32Arr_[index687] = value171;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index688 = (this->vIdx + 28);
HXDLIN(2247)							_f32Arr_[index688] = flashStrength1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index689 = (this->vIdx + 29);
HXDLIN(2247)							_f32Arr_[index689] = -1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index690 = (this->vIdx + 30);
HXDLIN(2247)							_f32Arr_[index690] = (w2 + xBase5);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index691 = (this->vIdx + 31);
HXDLIN(2247)							_f32Arr_[index691] = (h2 + yBase3);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index692 = (this->vIdx + 32);
HXDLIN(2247)							float value172 = (obj1->uValue + obj1->width);
HXDLIN(2247)							_f32Arr_[index692] = value172;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index693 = (this->vIdx + 33);
HXDLIN(2247)							float value173 = ( (float)((obj1->vValue + (( (Float)(obj1->height) ) / ( (Float)(sink1) )))) );
HXDLIN(2247)							_f32Arr_[index693] = value173;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index694 = (this->vIdx + 34);
HXDLIN(2247)							_f32Arr_[index694] = texelW2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index695 = (this->vIdx + 35);
HXDLIN(2247)							_f32Arr_[index695] = texelH2;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index696 = (this->vIdx + 36);
HXDLIN(2247)							float value174 = obj1->glowColor;
HXDLIN(2247)							_f32Arr_[index696] = value174;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index697 = (this->vIdx + 37);
HXDLIN(2247)							float value175 = obj1->flashColor;
HXDLIN(2247)							_f32Arr_[index697] = value175;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index698 = (this->vIdx + 38);
HXDLIN(2247)							_f32Arr_[index698] = flashStrength1;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index699 = (this->vIdx + 39);
HXDLIN(2247)							_f32Arr_[index699] = -1;
            						}
HXDLIN(2247)						 ::map::Map _hx_tmp87 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)						_hx_tmp87->vIdx = (_hx_tmp87->vIdx + 40);
HXDLIN(2247)						int i414 = (this->i * 4);
HXDLIN(2247)						{
HXLINE(2247)							int index700 = this->iIdx;
HXDLIN(2247)							_i32Arr_[index700] = i414;
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index701 = (this->iIdx + 1);
HXDLIN(2247)							_i32Arr_[index701] = (1 + i414);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index702 = (this->iIdx + 2);
HXDLIN(2247)							_i32Arr_[index702] = (2 + i414);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index703 = (this->iIdx + 3);
HXDLIN(2247)							_i32Arr_[index703] = (2 + i414);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index704 = (this->iIdx + 4);
HXDLIN(2247)							_i32Arr_[index704] = (1 + i414);
            						}
HXDLIN(2247)						{
HXLINE(2247)							int index705 = (this->iIdx + 5);
HXDLIN(2247)							_i32Arr_[index705] = (3 + i414);
            						}
HXDLIN(2247)						 ::map::Map _hx_tmp88 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)						_hx_tmp88->iIdx = (_hx_tmp88->iIdx + 6);
HXDLIN(2247)						this->i++;
HXDLIN(2247)						int yPos2;
HXDLIN(2247)						if ((sink1 != 0)) {
HXLINE(2247)							yPos2 = 5;
            						}
            						else {
HXLINE(2247)							yPos2 = 0;
            						}
HXDLIN(2247)						int yPos3 = (15 + yPos2);
HXDLIN(2247)						bool _hx_tmp89;
HXDLIN(2247)						if (::hx::IsNotNull( obj1->props )) {
HXLINE(2247)							_hx_tmp89 = !(obj1->props->noMiniMap);
            						}
            						else {
HXLINE(2247)							_hx_tmp89 = true;
            						}
HXDLIN(2247)						if (_hx_tmp89) {
HXLINE(2247)							xBase5 = (screenX2 * ::util::RenderUtils_obj::clipSpaceScaleX);
HXDLIN(2247)							if ((obj1->hp > obj1->maxHP)) {
HXLINE(2247)								obj1->maxHP = obj1->hp;
            							}
HXDLIN(2247)							float scaledEmptyBarW1 = ( (float)((( (Float)(::map::Map_obj::emptyBarW) ) / ( (Float)(1024) ))) );
HXDLIN(2247)							float scaledEmptyBarH1 = ( (float)((( (Float)(::map::Map_obj::emptyBarH) ) / ( (Float)(1024) ))) );
HXDLIN(2247)							bool _hx_tmp90;
HXDLIN(2247)							if ((obj1->hp >= 0)) {
HXLINE(2247)								_hx_tmp90 = (obj1->hp < obj1->maxHP);
            							}
            							else {
HXLINE(2247)								_hx_tmp90 = false;
            							}
HXDLIN(2247)							if (_hx_tmp90) {
HXLINE(2247)								float scaledBarW2 = ( (float)((( (Float)(::map::Map_obj::hpBarW) ) / ( (Float)(1024) ))) );
HXDLIN(2247)								float scaledBarH2 = ( (float)((( (Float)(::map::Map_obj::hpBarH) ) / ( (Float)(1024) ))) );
HXDLIN(2247)								float barThreshU2 = (::map::Map_obj::hpBarU + scaledBarW2);
HXDLIN(2247)								barThreshU2 = (barThreshU2 * ( (float)((((( (Float)(obj1->hp) ) / ( (Float)(obj1->maxHP) )) * ((Float)0.83333333333333337)) + ((( (Float)(obj1->hp) ) / ( (Float)(obj1->maxHP) )) * ((Float)0.0833333333333333287)))) ));
HXDLIN(2247)								w2 = ( (Float)((::map::Map_obj::hpBarW * ::util::RenderUtils_obj::clipSpaceScaleX)) );
HXDLIN(2247)								h2 = ( (Float)((::map::Map_obj::hpBarH * ::util::RenderUtils_obj::clipSpaceScaleY)) );
HXDLIN(2247)								yBase3 = (((screenY2 + yPos3) - ((( (Float)(::map::Map_obj::hpBarH) ) / ( (Float)(2) )) - ( (Float)(2) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2247)								texelW2 = ( (float)(((Float)0.00048828125)) );
HXDLIN(2247)								texelH2 = ( (float)(((Float)0.00048828125)) );
HXDLIN(2247)								{
HXLINE(2247)									int index706 = this->vIdx;
HXDLIN(2247)									_f32Arr_[index706] = (-(w2) + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index707 = (this->vIdx + 1);
HXDLIN(2247)									_f32Arr_[index707] = (-(h2) + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index708 = (this->vIdx + 2);
HXDLIN(2247)									float value176 = ::map::Map_obj::emptyBarU;
HXDLIN(2247)									_f32Arr_[index708] = value176;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index709 = (this->vIdx + 3);
HXDLIN(2247)									float value177 = ::map::Map_obj::emptyBarV;
HXDLIN(2247)									_f32Arr_[index709] = value177;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index710 = (this->vIdx + 4);
HXDLIN(2247)									_f32Arr_[index710] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index711 = (this->vIdx + 5);
HXDLIN(2247)									_f32Arr_[index711] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index712 = (this->vIdx + 6);
HXDLIN(2247)									_f32Arr_[index712] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index713 = (this->vIdx + 7);
HXDLIN(2247)									_f32Arr_[index713] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index714 = (this->vIdx + 8);
HXDLIN(2247)									_f32Arr_[index714] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index715 = (this->vIdx + 9);
HXDLIN(2247)									_f32Arr_[index715] = -1;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index716 = (this->vIdx + 10);
HXDLIN(2247)									_f32Arr_[index716] = (w2 + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index717 = (this->vIdx + 11);
HXDLIN(2247)									_f32Arr_[index717] = (-(h2) + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index718 = (this->vIdx + 12);
HXDLIN(2247)									float value178 = (::map::Map_obj::emptyBarU + scaledEmptyBarW1);
HXDLIN(2247)									_f32Arr_[index718] = value178;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index719 = (this->vIdx + 13);
HXDLIN(2247)									float value179 = ::map::Map_obj::emptyBarV;
HXDLIN(2247)									_f32Arr_[index719] = value179;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index720 = (this->vIdx + 14);
HXDLIN(2247)									_f32Arr_[index720] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index721 = (this->vIdx + 15);
HXDLIN(2247)									_f32Arr_[index721] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index722 = (this->vIdx + 16);
HXDLIN(2247)									_f32Arr_[index722] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index723 = (this->vIdx + 17);
HXDLIN(2247)									_f32Arr_[index723] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index724 = (this->vIdx + 18);
HXDLIN(2247)									_f32Arr_[index724] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index725 = (this->vIdx + 19);
HXDLIN(2247)									_f32Arr_[index725] = -1;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index726 = (this->vIdx + 20);
HXDLIN(2247)									_f32Arr_[index726] = (-(w2) + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index727 = (this->vIdx + 21);
HXDLIN(2247)									_f32Arr_[index727] = (h2 + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index728 = (this->vIdx + 22);
HXDLIN(2247)									float value180 = ::map::Map_obj::emptyBarU;
HXDLIN(2247)									_f32Arr_[index728] = value180;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index729 = (this->vIdx + 23);
HXDLIN(2247)									float value181 = (::map::Map_obj::emptyBarV + scaledEmptyBarH1);
HXDLIN(2247)									_f32Arr_[index729] = value181;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index730 = (this->vIdx + 24);
HXDLIN(2247)									_f32Arr_[index730] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index731 = (this->vIdx + 25);
HXDLIN(2247)									_f32Arr_[index731] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index732 = (this->vIdx + 26);
HXDLIN(2247)									_f32Arr_[index732] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index733 = (this->vIdx + 27);
HXDLIN(2247)									_f32Arr_[index733] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index734 = (this->vIdx + 28);
HXDLIN(2247)									_f32Arr_[index734] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index735 = (this->vIdx + 29);
HXDLIN(2247)									_f32Arr_[index735] = -1;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index736 = (this->vIdx + 30);
HXDLIN(2247)									_f32Arr_[index736] = (w2 + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index737 = (this->vIdx + 31);
HXDLIN(2247)									_f32Arr_[index737] = (h2 + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index738 = (this->vIdx + 32);
HXDLIN(2247)									float value182 = (::map::Map_obj::emptyBarU + scaledEmptyBarW1);
HXDLIN(2247)									_f32Arr_[index738] = value182;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index739 = (this->vIdx + 33);
HXDLIN(2247)									float value183 = (::map::Map_obj::emptyBarV + scaledEmptyBarH1);
HXDLIN(2247)									_f32Arr_[index739] = value183;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index740 = (this->vIdx + 34);
HXDLIN(2247)									_f32Arr_[index740] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index741 = (this->vIdx + 35);
HXDLIN(2247)									_f32Arr_[index741] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index742 = (this->vIdx + 36);
HXDLIN(2247)									_f32Arr_[index742] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index743 = (this->vIdx + 37);
HXDLIN(2247)									_f32Arr_[index743] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index744 = (this->vIdx + 38);
HXDLIN(2247)									_f32Arr_[index744] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index745 = (this->vIdx + 39);
HXDLIN(2247)									_f32Arr_[index745] = -1;
            								}
HXDLIN(2247)								 ::map::Map _hx_tmp91 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)								_hx_tmp91->vIdx = (_hx_tmp91->vIdx + 40);
HXDLIN(2247)								int i415 = (this->i * 4);
HXDLIN(2247)								{
HXLINE(2247)									int index746 = this->iIdx;
HXDLIN(2247)									_i32Arr_[index746] = i415;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index747 = (this->iIdx + 1);
HXDLIN(2247)									_i32Arr_[index747] = (1 + i415);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index748 = (this->iIdx + 2);
HXDLIN(2247)									_i32Arr_[index748] = (2 + i415);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index749 = (this->iIdx + 3);
HXDLIN(2247)									_i32Arr_[index749] = (2 + i415);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index750 = (this->iIdx + 4);
HXDLIN(2247)									_i32Arr_[index750] = (1 + i415);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index751 = (this->iIdx + 5);
HXDLIN(2247)									_i32Arr_[index751] = (3 + i415);
            								}
HXDLIN(2247)								 ::map::Map _hx_tmp92 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)								_hx_tmp92->iIdx = (_hx_tmp92->iIdx + 6);
HXDLIN(2247)								this->i++;
HXDLIN(2247)								{
HXLINE(2247)									int index752 = this->vIdx;
HXDLIN(2247)									_f32Arr_[index752] = (-(w2) + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index753 = (this->vIdx + 1);
HXDLIN(2247)									_f32Arr_[index753] = (-(h2) + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index754 = (this->vIdx + 2);
HXDLIN(2247)									float value184 = ::map::Map_obj::hpBarU;
HXDLIN(2247)									_f32Arr_[index754] = value184;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index755 = (this->vIdx + 3);
HXDLIN(2247)									float value185 = ::map::Map_obj::hpBarV;
HXDLIN(2247)									_f32Arr_[index755] = value185;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index756 = (this->vIdx + 4);
HXDLIN(2247)									_f32Arr_[index756] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index757 = (this->vIdx + 5);
HXDLIN(2247)									_f32Arr_[index757] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index758 = (this->vIdx + 6);
HXDLIN(2247)									_f32Arr_[index758] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index759 = (this->vIdx + 7);
HXDLIN(2247)									_f32Arr_[index759] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index760 = (this->vIdx + 8);
HXDLIN(2247)									_f32Arr_[index760] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index761 = (this->vIdx + 9);
HXDLIN(2247)									_f32Arr_[index761] = barThreshU2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index762 = (this->vIdx + 10);
HXDLIN(2247)									_f32Arr_[index762] = (w2 + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index763 = (this->vIdx + 11);
HXDLIN(2247)									_f32Arr_[index763] = (-(h2) + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index764 = (this->vIdx + 12);
HXDLIN(2247)									float value186 = (::map::Map_obj::hpBarU + scaledBarW2);
HXDLIN(2247)									_f32Arr_[index764] = value186;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index765 = (this->vIdx + 13);
HXDLIN(2247)									float value187 = ::map::Map_obj::hpBarV;
HXDLIN(2247)									_f32Arr_[index765] = value187;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index766 = (this->vIdx + 14);
HXDLIN(2247)									_f32Arr_[index766] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index767 = (this->vIdx + 15);
HXDLIN(2247)									_f32Arr_[index767] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index768 = (this->vIdx + 16);
HXDLIN(2247)									_f32Arr_[index768] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index769 = (this->vIdx + 17);
HXDLIN(2247)									_f32Arr_[index769] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index770 = (this->vIdx + 18);
HXDLIN(2247)									_f32Arr_[index770] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index771 = (this->vIdx + 19);
HXDLIN(2247)									_f32Arr_[index771] = barThreshU2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index772 = (this->vIdx + 20);
HXDLIN(2247)									_f32Arr_[index772] = (-(w2) + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index773 = (this->vIdx + 21);
HXDLIN(2247)									_f32Arr_[index773] = (h2 + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index774 = (this->vIdx + 22);
HXDLIN(2247)									float value188 = ::map::Map_obj::hpBarU;
HXDLIN(2247)									_f32Arr_[index774] = value188;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index775 = (this->vIdx + 23);
HXDLIN(2247)									float value189 = (::map::Map_obj::hpBarV + scaledBarH2);
HXDLIN(2247)									_f32Arr_[index775] = value189;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index776 = (this->vIdx + 24);
HXDLIN(2247)									_f32Arr_[index776] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index777 = (this->vIdx + 25);
HXDLIN(2247)									_f32Arr_[index777] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index778 = (this->vIdx + 26);
HXDLIN(2247)									_f32Arr_[index778] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index779 = (this->vIdx + 27);
HXDLIN(2247)									_f32Arr_[index779] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index780 = (this->vIdx + 28);
HXDLIN(2247)									_f32Arr_[index780] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index781 = (this->vIdx + 29);
HXDLIN(2247)									_f32Arr_[index781] = barThreshU2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index782 = (this->vIdx + 30);
HXDLIN(2247)									_f32Arr_[index782] = (w2 + xBase5);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index783 = (this->vIdx + 31);
HXDLIN(2247)									_f32Arr_[index783] = (h2 + yBase3);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index784 = (this->vIdx + 32);
HXDLIN(2247)									float value190 = (::map::Map_obj::hpBarU + scaledBarW2);
HXDLIN(2247)									_f32Arr_[index784] = value190;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index785 = (this->vIdx + 33);
HXDLIN(2247)									float value191 = (::map::Map_obj::hpBarV + scaledBarH2);
HXDLIN(2247)									_f32Arr_[index785] = value191;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index786 = (this->vIdx + 34);
HXDLIN(2247)									_f32Arr_[index786] = texelW2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index787 = (this->vIdx + 35);
HXDLIN(2247)									_f32Arr_[index787] = texelH2;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index788 = (this->vIdx + 36);
HXDLIN(2247)									_f32Arr_[index788] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index789 = (this->vIdx + 37);
HXDLIN(2247)									_f32Arr_[index789] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index790 = (this->vIdx + 38);
HXDLIN(2247)									_f32Arr_[index790] = 0;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index791 = (this->vIdx + 39);
HXDLIN(2247)									_f32Arr_[index791] = barThreshU2;
            								}
HXDLIN(2247)								 ::map::Map _hx_tmp93 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)								_hx_tmp93->vIdx = (_hx_tmp93->vIdx + 40);
HXDLIN(2247)								int i416 = (this->i * 4);
HXDLIN(2247)								{
HXLINE(2247)									int index792 = this->iIdx;
HXDLIN(2247)									_i32Arr_[index792] = i416;
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index793 = (this->iIdx + 1);
HXDLIN(2247)									_i32Arr_[index793] = (1 + i416);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index794 = (this->iIdx + 2);
HXDLIN(2247)									_i32Arr_[index794] = (2 + i416);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index795 = (this->iIdx + 3);
HXDLIN(2247)									_i32Arr_[index795] = (2 + i416);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index796 = (this->iIdx + 4);
HXDLIN(2247)									_i32Arr_[index796] = (1 + i416);
            								}
HXDLIN(2247)								{
HXLINE(2247)									int index797 = (this->iIdx + 5);
HXDLIN(2247)									_i32Arr_[index797] = (3 + i416);
            								}
HXDLIN(2247)								 ::map::Map _hx_tmp94 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)								_hx_tmp94->iIdx = (_hx_tmp94->iIdx + 6);
HXDLIN(2247)								this->i++;
HXDLIN(2247)								yPos3 = (yPos3 + 20);
            							}
            						}
HXDLIN(2247)						if ((obj1->condition > 0)) {
HXLINE(2247)							int len1 = 0;
HXDLIN(2247)							{
HXLINE(2247)								int _g6 = 0;
HXDLIN(2247)								while((_g6 < 32)){
HXLINE(2247)									_g6 = (_g6 + 1);
HXDLIN(2247)									int i3 = (_g6 - 1);
HXDLIN(2247)									if (((obj1->condition & (1 << i3)) != 0)) {
HXLINE(2247)										len1 = (len1 + 1);
            									}
            								}
            							}
HXDLIN(2247)							len1 = (len1 >> 1);
HXDLIN(2247)							{
HXLINE(2247)								int _g7 = 0;
HXDLIN(2247)								while((_g7 < 32)){
HXLINE(2247)									_g7 = (_g7 + 1);
HXDLIN(2247)									int i5 = (_g7 - 1);
HXDLIN(2247)									if (((obj1->condition & (1 << i5)) != 0)) {
HXLINE(2247)										 ::util::Rect rect5 = ::util::ConditionEffect_obj::effectRects->__get(i5).StaticCast<  ::util::Rect >();
HXDLIN(2247)										if (::hx::IsNull( rect5 )) {
HXLINE(2247)											continue;
            										}
HXDLIN(2247)										float scaledW1 = ( (float)((rect5->width / ( (Float)(1024) ))) );
HXDLIN(2247)										float scaledH1 = ( (float)((rect5->height / ( (Float)(1024) ))) );
HXDLIN(2247)										float scaledU1 = ( (float)((rect5->x / ( (Float)(1024) ))) );
HXDLIN(2247)										float scaledV1 = ( (float)((rect5->y / ( (Float)(1024) ))) );
HXDLIN(2247)										w2 = (rect5->width * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleX) ));
HXDLIN(2247)										h2 = (rect5->height * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2247)										xBase5 = ( (float)((((( (Float)(screenX2) ) - (rect5->width * ( (Float)(len1) ))) + (( (Float)(i5) ) * rect5->width)) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleX) ))) );
HXDLIN(2247)										yBase3 = (((screenY2 + yPos3) - ((rect5->height / ( (Float)(2) )) - ( (Float)(2) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ));
HXDLIN(2247)										texelW2 = ( (float)(((Float)0.00048828125)) );
HXDLIN(2247)										texelH2 = ( (float)(((Float)0.00048828125)) );
HXDLIN(2247)										{
HXLINE(2247)											int index798 = this->vIdx;
HXDLIN(2247)											_f32Arr_[index798] = (-(w2) + xBase5);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index799 = (this->vIdx + 1);
HXDLIN(2247)											_f32Arr_[index799] = (-(h2) + yBase3);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index800 = (this->vIdx + 2);
HXDLIN(2247)											_f32Arr_[index800] = scaledU1;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index801 = (this->vIdx + 3);
HXDLIN(2247)											_f32Arr_[index801] = scaledV1;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index802 = (this->vIdx + 4);
HXDLIN(2247)											_f32Arr_[index802] = texelW2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index803 = (this->vIdx + 5);
HXDLIN(2247)											_f32Arr_[index803] = texelH2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index804 = (this->vIdx + 6);
HXDLIN(2247)											_f32Arr_[index804] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index805 = (this->vIdx + 7);
HXDLIN(2247)											_f32Arr_[index805] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index806 = (this->vIdx + 8);
HXDLIN(2247)											_f32Arr_[index806] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index807 = (this->vIdx + 9);
HXDLIN(2247)											_f32Arr_[index807] = -1;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index808 = (this->vIdx + 10);
HXDLIN(2247)											_f32Arr_[index808] = (w2 + xBase5);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index809 = (this->vIdx + 11);
HXDLIN(2247)											_f32Arr_[index809] = (-(h2) + yBase3);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index810 = (this->vIdx + 12);
HXDLIN(2247)											_f32Arr_[index810] = (scaledU1 + scaledW1);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index811 = (this->vIdx + 13);
HXDLIN(2247)											_f32Arr_[index811] = scaledV1;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index812 = (this->vIdx + 14);
HXDLIN(2247)											_f32Arr_[index812] = texelW2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index813 = (this->vIdx + 15);
HXDLIN(2247)											_f32Arr_[index813] = texelH2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index814 = (this->vIdx + 16);
HXDLIN(2247)											_f32Arr_[index814] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index815 = (this->vIdx + 17);
HXDLIN(2247)											_f32Arr_[index815] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index816 = (this->vIdx + 18);
HXDLIN(2247)											_f32Arr_[index816] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index817 = (this->vIdx + 19);
HXDLIN(2247)											_f32Arr_[index817] = -1;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index818 = (this->vIdx + 20);
HXDLIN(2247)											_f32Arr_[index818] = (-(w2) + xBase5);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index819 = (this->vIdx + 21);
HXDLIN(2247)											_f32Arr_[index819] = (h2 + yBase3);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index820 = (this->vIdx + 22);
HXDLIN(2247)											_f32Arr_[index820] = scaledU1;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index821 = (this->vIdx + 23);
HXDLIN(2247)											_f32Arr_[index821] = (scaledV1 + scaledH1);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index822 = (this->vIdx + 24);
HXDLIN(2247)											_f32Arr_[index822] = texelW2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index823 = (this->vIdx + 25);
HXDLIN(2247)											_f32Arr_[index823] = texelH2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index824 = (this->vIdx + 26);
HXDLIN(2247)											_f32Arr_[index824] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index825 = (this->vIdx + 27);
HXDLIN(2247)											_f32Arr_[index825] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index826 = (this->vIdx + 28);
HXDLIN(2247)											_f32Arr_[index826] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index827 = (this->vIdx + 29);
HXDLIN(2247)											_f32Arr_[index827] = -1;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index828 = (this->vIdx + 30);
HXDLIN(2247)											_f32Arr_[index828] = (w2 + xBase5);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index829 = (this->vIdx + 31);
HXDLIN(2247)											_f32Arr_[index829] = (h2 + yBase3);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index830 = (this->vIdx + 32);
HXDLIN(2247)											_f32Arr_[index830] = (scaledU1 + scaledW1);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index831 = (this->vIdx + 33);
HXDLIN(2247)											_f32Arr_[index831] = (scaledV1 + scaledH1);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index832 = (this->vIdx + 34);
HXDLIN(2247)											_f32Arr_[index832] = texelW2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index833 = (this->vIdx + 35);
HXDLIN(2247)											_f32Arr_[index833] = texelH2;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index834 = (this->vIdx + 36);
HXDLIN(2247)											_f32Arr_[index834] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index835 = (this->vIdx + 37);
HXDLIN(2247)											_f32Arr_[index835] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index836 = (this->vIdx + 38);
HXDLIN(2247)											_f32Arr_[index836] = 0;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index837 = (this->vIdx + 39);
HXDLIN(2247)											_f32Arr_[index837] = -1;
            										}
HXDLIN(2247)										 ::map::Map _hx_tmp95 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)										_hx_tmp95->vIdx = (_hx_tmp95->vIdx + 40);
HXDLIN(2247)										int i417 = (this->i * 4);
HXDLIN(2247)										{
HXLINE(2247)											int index838 = this->iIdx;
HXDLIN(2247)											_i32Arr_[index838] = i417;
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index839 = (this->iIdx + 1);
HXDLIN(2247)											_i32Arr_[index839] = (1 + i417);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index840 = (this->iIdx + 2);
HXDLIN(2247)											_i32Arr_[index840] = (2 + i417);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index841 = (this->iIdx + 3);
HXDLIN(2247)											_i32Arr_[index841] = (2 + i417);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index842 = (this->iIdx + 4);
HXDLIN(2247)											_i32Arr_[index842] = (1 + i417);
            										}
HXDLIN(2247)										{
HXLINE(2247)											int index843 = (this->iIdx + 5);
HXDLIN(2247)											_i32Arr_[index843] = (3 + i417);
            										}
HXDLIN(2247)										 ::map::Map _hx_tmp96 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2247)										_hx_tmp96->iIdx = (_hx_tmp96->iIdx + 6);
HXDLIN(2247)										this->i++;
            									}
            								}
            							}
            						}
HXDLIN(2247)						bool isPortal1 = (obj1->objClass == HX_("Portal",cc,ee,b9,31));
HXDLIN(2247)						bool _hx_tmp97;
HXDLIN(2247)						bool _hx_tmp98;
HXDLIN(2247)						bool _hx_tmp99;
HXDLIN(2247)						if (!(obj1->props->showName)) {
HXLINE(2247)							_hx_tmp99 = isPortal1;
            						}
            						else {
HXLINE(2247)							_hx_tmp99 = true;
            						}
HXDLIN(2247)						if (_hx_tmp99) {
HXLINE(2247)							_hx_tmp98 = ::hx::IsNotNull( obj1->name );
            						}
            						else {
HXLINE(2247)							_hx_tmp98 = false;
            						}
HXDLIN(2247)						if (_hx_tmp98) {
HXLINE(2247)							_hx_tmp97 = (obj1->name != HX_("",00,00,00,00));
            						}
            						else {
HXLINE(2247)							_hx_tmp97 = false;
            						}
HXDLIN(2247)						if (_hx_tmp97) {
HXLINE(2247)							if (::hx::IsNull( obj1->nameTex )) {
HXLINE(2247)								obj1->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,null(),null(),null(),null());
HXDLIN(2247)								obj1->nameText->setBold(true);
HXDLIN(2247)								obj1->nameText->set_text(obj1->name);
HXDLIN(2247)								obj1->nameText->updateMetrics();
HXDLIN(2247)								obj1->nameTex =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((obj1->nameText->get_width() + 20)),64,true,0);
HXDLIN(2247)								obj1->nameTex->draw(obj1->nameText, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,12,0),null(),null(),null(),null());
HXDLIN(2247)								 ::openfl::display::BitmapData obj8 = obj1->nameTex;
HXDLIN(2247)								 ::openfl::display::BitmapData obj9 = obj1->nameTex;
HXDLIN(2247)								 ::openfl::geom::Rectangle obj10 = obj1->nameTex->rect;
HXDLIN(2247)								 ::openfl::geom::Point _hx_tmp100 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXDLIN(2247)								obj8->applyFilter(obj9,obj10,_hx_tmp100, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,3,3,2,1,null(),null()));
            							}
HXDLIN(2247)							 ::openfl::display::BitmapData bitmapData4 = obj1->nameTex;
HXDLIN(2247)							bool needsPad4 = true;
HXDLIN(2247)							 ::engine::GLTextureData textureData16;
HXDLIN(2247)							if (::hx::IsNull( bitmapData4 )) {
HXLINE(2247)								textureData16 = null();
            							}
            							else {
HXLINE(2247)								if (::engine::TextureFactory_obj::textures->exists(bitmapData4)) {
HXLINE(2247)									textureData16 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData4)) );
            								}
            								else {
HXLINE(2247)									if (::hx::IsNull( bitmapData4->image )) {
HXLINE(2247)										textureData16 = null();
            									}
            									else {
HXLINE(2247)										int preW4 = bitmapData4->width;
HXDLIN(2247)										int preH4 = bitmapData4->height;
HXDLIN(2247)										int pad4;
HXDLIN(2247)										if (needsPad4) {
HXLINE(2247)											pad4 = 4;
            										}
            										else {
HXLINE(2247)											pad4 = 0;
            										}
HXDLIN(2247)										int value192 = (bitmapData4->width + pad4);
HXDLIN(2247)										value192 = (value192 - 1);
HXDLIN(2247)										value192 = (value192 | (value192 >> 1));
HXDLIN(2247)										value192 = (value192 | (value192 >> 2));
HXDLIN(2247)										value192 = (value192 | (value192 >> 4));
HXDLIN(2247)										value192 = (value192 | (value192 >> 8));
HXDLIN(2247)										value192 = (value192 | (value192 >> 16));
HXDLIN(2247)										value192 = (value192 + 1);
HXDLIN(2247)										int width4 = value192;
HXDLIN(2247)										int value193 = (bitmapData4->height + pad4);
HXDLIN(2247)										value193 = (value193 - 1);
HXDLIN(2247)										value193 = (value193 | (value193 >> 1));
HXDLIN(2247)										value193 = (value193 | (value193 >> 2));
HXDLIN(2247)										value193 = (value193 | (value193 >> 4));
HXDLIN(2247)										value193 = (value193 | (value193 >> 8));
HXDLIN(2247)										value193 = (value193 | (value193 >> 16));
HXDLIN(2247)										value193 = (value193 + 1);
HXDLIN(2247)										int height4 = value193;
HXDLIN(2247)										Float xOff4 = (( (Float)((width4 - preW4)) ) / ( (Float)(2) ));
HXDLIN(2247)										Float yOff4 = (( (Float)((height4 - preH4)) ) / ( (Float)(2) ));
HXDLIN(2247)										 ::openfl::display::BitmapData bitmapTexture4 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width4,height4,true,0);
HXDLIN(2247)										 ::openfl::geom::Point textureData17;
HXDLIN(2247)										if (needsPad4) {
HXLINE(2247)											Float textureData18;
HXDLIN(2247)											if ((xOff4 == 0)) {
HXLINE(2247)												textureData18 = ( (Float)(2) );
            											}
            											else {
HXLINE(2247)												textureData18 = xOff4;
            											}
HXDLIN(2247)											Float textureData19;
HXDLIN(2247)											if ((yOff4 == 0)) {
HXLINE(2247)												textureData19 = ( (Float)(2) );
            											}
            											else {
HXLINE(2247)												textureData19 = yOff4;
            											}
HXDLIN(2247)											textureData17 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData18,textureData19);
            										}
            										else {
HXLINE(2247)											textureData17 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            										}
HXDLIN(2247)										bitmapTexture4->copyPixels(bitmapData4,bitmapData4->rect,textureData17,null(),null(),null());
HXDLIN(2247)										 ::engine::GLTextureData texture5 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width4,height4,bitmapTexture4);
HXDLIN(2247)										texture5->xOffset = xOff4;
HXDLIN(2247)										texture5->yOffset = yOff4;
HXDLIN(2247)										if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2247)											::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2247)											::engine::TextureFactory_obj::count = 0;
            										}
HXDLIN(2247)										::engine::TextureFactory_obj::textures->set(bitmapData4,texture5);
HXDLIN(2247)										::engine::TextureFactory_obj::count++;
HXDLIN(2247)										textureData16 = texture5;
            									}
            								}
            							}
HXDLIN(2247)							this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData16->texture,(( (float)(textureData16->width) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)(textureData16->height) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((screenX2 - ( (float)(3) )) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(((((screenY2 - ( (Float)(hBase1) )) + 30) + (( (Float)(((sink1 - ( (float)(1) )) * hBase1)) ) / ( (Float)(3) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),null()));
HXDLIN(2247)							bool _hx_tmp101;
HXDLIN(2247)							if (isPortal1) {
HXLINE(2247)								_hx_tmp101 = (::Global_obj::currentInteractiveTarget == obj1->objectId);
            							}
            							else {
HXLINE(2247)								_hx_tmp101 = false;
            							}
HXDLIN(2247)							if (_hx_tmp101) {
HXLINE(2247)								if (::hx::IsNull( obj1->enterTex )) {
HXLINE(2247)									 ::ui::SimpleText enterText1 =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,null(),null(),null(),null());
HXDLIN(2247)									enterText1->setBold(true);
HXDLIN(2247)									enterText1->set_text(HX_("Enter",f8,dc,b3,03));
HXDLIN(2247)									enterText1->updateMetrics();
HXDLIN(2247)									obj1->enterTex =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Std_obj::_hx_int((enterText1->get_width() + 20)),64,true,0);
HXDLIN(2247)									obj1->enterTex->draw(enterText1, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,12,0),null(),null(),null(),null());
HXDLIN(2247)									 ::openfl::display::BitmapData obj11 = obj1->enterTex;
HXDLIN(2247)									 ::openfl::display::BitmapData obj12 = obj1->enterTex;
HXDLIN(2247)									 ::openfl::geom::Rectangle obj13 = obj1->enterTex->rect;
HXDLIN(2247)									 ::openfl::geom::Point _hx_tmp102 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXDLIN(2247)									obj11->applyFilter(obj12,obj13,_hx_tmp102, ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,0,1,3,3,2,1,null(),null()));
            								}
HXDLIN(2247)								 ::openfl::display::BitmapData bitmapData5 = obj1->enterTex;
HXDLIN(2247)								bool needsPad5 = true;
HXDLIN(2247)								 ::engine::GLTextureData textureData20;
HXDLIN(2247)								if (::hx::IsNull( bitmapData5 )) {
HXLINE(2247)									textureData20 = null();
            								}
            								else {
HXLINE(2247)									if (::engine::TextureFactory_obj::textures->exists(bitmapData5)) {
HXLINE(2247)										textureData20 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData5)) );
            									}
            									else {
HXLINE(2247)										if (::hx::IsNull( bitmapData5->image )) {
HXLINE(2247)											textureData20 = null();
            										}
            										else {
HXLINE(2247)											int preW5 = bitmapData5->width;
HXDLIN(2247)											int preH5 = bitmapData5->height;
HXDLIN(2247)											int pad5;
HXDLIN(2247)											if (needsPad5) {
HXLINE(2247)												pad5 = 4;
            											}
            											else {
HXLINE(2247)												pad5 = 0;
            											}
HXDLIN(2247)											int value194 = (bitmapData5->width + pad5);
HXDLIN(2247)											value194 = (value194 - 1);
HXDLIN(2247)											value194 = (value194 | (value194 >> 1));
HXDLIN(2247)											value194 = (value194 | (value194 >> 2));
HXDLIN(2247)											value194 = (value194 | (value194 >> 4));
HXDLIN(2247)											value194 = (value194 | (value194 >> 8));
HXDLIN(2247)											value194 = (value194 | (value194 >> 16));
HXDLIN(2247)											value194 = (value194 + 1);
HXDLIN(2247)											int width5 = value194;
HXDLIN(2247)											int value195 = (bitmapData5->height + pad5);
HXDLIN(2247)											value195 = (value195 - 1);
HXDLIN(2247)											value195 = (value195 | (value195 >> 1));
HXDLIN(2247)											value195 = (value195 | (value195 >> 2));
HXDLIN(2247)											value195 = (value195 | (value195 >> 4));
HXDLIN(2247)											value195 = (value195 | (value195 >> 8));
HXDLIN(2247)											value195 = (value195 | (value195 >> 16));
HXDLIN(2247)											value195 = (value195 + 1);
HXDLIN(2247)											int height5 = value195;
HXDLIN(2247)											Float xOff5 = (( (Float)((width5 - preW5)) ) / ( (Float)(2) ));
HXDLIN(2247)											Float yOff5 = (( (Float)((height5 - preH5)) ) / ( (Float)(2) ));
HXDLIN(2247)											 ::openfl::display::BitmapData bitmapTexture5 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width5,height5,true,0);
HXDLIN(2247)											 ::openfl::geom::Point textureData21;
HXDLIN(2247)											if (needsPad5) {
HXLINE(2247)												Float textureData22;
HXDLIN(2247)												if ((xOff5 == 0)) {
HXLINE(2247)													textureData22 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData22 = xOff5;
            												}
HXDLIN(2247)												Float textureData23;
HXDLIN(2247)												if ((yOff5 == 0)) {
HXLINE(2247)													textureData23 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData23 = yOff5;
            												}
HXDLIN(2247)												textureData21 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData22,textureData23);
            											}
            											else {
HXLINE(2247)												textureData21 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            											}
HXDLIN(2247)											bitmapTexture5->copyPixels(bitmapData5,bitmapData5->rect,textureData21,null(),null(),null());
HXDLIN(2247)											 ::engine::GLTextureData texture6 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width5,height5,bitmapTexture5);
HXDLIN(2247)											texture6->xOffset = xOff5;
HXDLIN(2247)											texture6->yOffset = yOff5;
HXDLIN(2247)											if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2247)												::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2247)												::engine::TextureFactory_obj::count = 0;
            											}
HXDLIN(2247)											::engine::TextureFactory_obj::textures->set(bitmapData5,texture6);
HXDLIN(2247)											::engine::TextureFactory_obj::count++;
HXDLIN(2247)											textureData20 = texture6;
            										}
            									}
            								}
HXDLIN(2247)								this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData20->texture,(( (float)(textureData20->width) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)(textureData20->height) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((screenX2 + 8) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(((screenY2 + 40) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),null()));
HXDLIN(2247)								if (::hx::IsNull( obj1->enterKeyTex )) {
HXLINE(2247)									obj1->enterKeyTex = ::util::AssetLibrary_obj::getImageFromSet(HX_("keyIndicators",43,58,49,9c),::util::KeyCodeUtil_obj::charCodeIconIndices->__get(( (int)(::util::Settings_obj::interact) )));
            								}
HXDLIN(2247)								 ::openfl::display::BitmapData bitmapData6 = obj1->enterKeyTex;
HXDLIN(2247)								bool needsPad6 = true;
HXDLIN(2247)								 ::engine::GLTextureData textureData24;
HXDLIN(2247)								if (::hx::IsNull( bitmapData6 )) {
HXLINE(2247)									textureData24 = null();
            								}
            								else {
HXLINE(2247)									if (::engine::TextureFactory_obj::textures->exists(bitmapData6)) {
HXLINE(2247)										textureData24 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData6)) );
            									}
            									else {
HXLINE(2247)										if (::hx::IsNull( bitmapData6->image )) {
HXLINE(2247)											textureData24 = null();
            										}
            										else {
HXLINE(2247)											int preW6 = bitmapData6->width;
HXDLIN(2247)											int preH6 = bitmapData6->height;
HXDLIN(2247)											int pad6;
HXDLIN(2247)											if (needsPad6) {
HXLINE(2247)												pad6 = 4;
            											}
            											else {
HXLINE(2247)												pad6 = 0;
            											}
HXDLIN(2247)											int value196 = (bitmapData6->width + pad6);
HXDLIN(2247)											value196 = (value196 - 1);
HXDLIN(2247)											value196 = (value196 | (value196 >> 1));
HXDLIN(2247)											value196 = (value196 | (value196 >> 2));
HXDLIN(2247)											value196 = (value196 | (value196 >> 4));
HXDLIN(2247)											value196 = (value196 | (value196 >> 8));
HXDLIN(2247)											value196 = (value196 | (value196 >> 16));
HXDLIN(2247)											value196 = (value196 + 1);
HXDLIN(2247)											int width6 = value196;
HXDLIN(2247)											int value197 = (bitmapData6->height + pad6);
HXDLIN(2247)											value197 = (value197 - 1);
HXDLIN(2247)											value197 = (value197 | (value197 >> 1));
HXDLIN(2247)											value197 = (value197 | (value197 >> 2));
HXDLIN(2247)											value197 = (value197 | (value197 >> 4));
HXDLIN(2247)											value197 = (value197 | (value197 >> 8));
HXDLIN(2247)											value197 = (value197 | (value197 >> 16));
HXDLIN(2247)											value197 = (value197 + 1);
HXDLIN(2247)											int height6 = value197;
HXDLIN(2247)											Float xOff6 = (( (Float)((width6 - preW6)) ) / ( (Float)(2) ));
HXDLIN(2247)											Float yOff6 = (( (Float)((height6 - preH6)) ) / ( (Float)(2) ));
HXDLIN(2247)											 ::openfl::display::BitmapData bitmapTexture6 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width6,height6,true,0);
HXDLIN(2247)											 ::openfl::geom::Point textureData25;
HXDLIN(2247)											if (needsPad6) {
HXLINE(2247)												Float textureData26;
HXDLIN(2247)												if ((xOff6 == 0)) {
HXLINE(2247)													textureData26 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData26 = xOff6;
            												}
HXDLIN(2247)												Float textureData27;
HXDLIN(2247)												if ((yOff6 == 0)) {
HXLINE(2247)													textureData27 = ( (Float)(2) );
            												}
            												else {
HXLINE(2247)													textureData27 = yOff6;
            												}
HXDLIN(2247)												textureData25 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData26,textureData27);
            											}
            											else {
HXLINE(2247)												textureData25 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            											}
HXDLIN(2247)											bitmapTexture6->copyPixels(bitmapData6,bitmapData6->rect,textureData25,null(),null(),null());
HXDLIN(2247)											 ::engine::GLTextureData texture7 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width6,height6,bitmapTexture6);
HXDLIN(2247)											texture7->xOffset = xOff6;
HXDLIN(2247)											texture7->yOffset = yOff6;
HXDLIN(2247)											if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2247)												::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2247)												::engine::TextureFactory_obj::count = 0;
            											}
HXDLIN(2247)											::engine::TextureFactory_obj::textures->set(bitmapData6,texture7);
HXDLIN(2247)											::engine::TextureFactory_obj::count++;
HXDLIN(2247)											textureData24 = texture7;
            										}
            									}
            								}
HXDLIN(2247)								this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData24->texture,(( (float)((textureData24->width >> 2)) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)((textureData24->height >> 2)) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((screenX2 - ( (float)(22) )) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(((screenY2 + 19) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),null()));
            							}
            						}
            					}
            				}
            				_hx_goto_28:;
            			}
HXLINE(2251)			i = (i + 1);
            		}
HXLINE(2254)		{
HXLINE(2254)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this29 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2254)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_blend_equation(32774);
            		}
HXLINE(2255)		{
HXLINE(2255)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this30 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2255)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable(3042);
            		}
HXLINE(2256)		{
HXLINE(2256)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this31 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2256)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_blend_func(770,771);
            		}
HXLINE(2257)		unsigned char _hx_switch_1 = ::util::Settings_obj::glowType;
            		if (  (_hx_switch_1==( (unsigned char)(0) )) ){
HXLINE(2259)			 ::lime::graphics::opengl::GLObject program1 = this->defaultProgram;
HXDLIN(2259)			{
HXLINE(2259)				::lime::graphics::opengl::GL_obj::context->_hx___currentProgram = program1;
HXDLIN(2259)				int _hx_tmp103;
HXDLIN(2259)				if (::hx::IsNull( program1 )) {
HXLINE(2259)					_hx_tmp103 = 0;
            				}
            				else {
HXLINE(2259)					_hx_tmp103 = program1->id;
            				}
HXDLIN(2259)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_use_program(_hx_tmp103);
            			}
HXDLIN(2259)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_1==( (unsigned char)(1) )) ){
HXLINE(2261)			 ::lime::graphics::opengl::GLObject program2 = this->lowGlowProgram;
HXDLIN(2261)			{
HXLINE(2261)				::lime::graphics::opengl::GL_obj::context->_hx___currentProgram = program2;
HXDLIN(2261)				int _hx_tmp104;
HXDLIN(2261)				if (::hx::IsNull( program2 )) {
HXLINE(2261)					_hx_tmp104 = 0;
            				}
            				else {
HXLINE(2261)					_hx_tmp104 = program2->id;
            				}
HXDLIN(2261)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_use_program(_hx_tmp104);
            			}
HXDLIN(2261)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_1==( (unsigned char)(2) )) ){
HXLINE(2263)			 ::lime::graphics::opengl::GLObject program3 = this->medGlowProgram;
HXDLIN(2263)			{
HXLINE(2263)				::lime::graphics::opengl::GL_obj::context->_hx___currentProgram = program3;
HXDLIN(2263)				int _hx_tmp105;
HXDLIN(2263)				if (::hx::IsNull( program3 )) {
HXLINE(2263)					_hx_tmp105 = 0;
            				}
            				else {
HXLINE(2263)					_hx_tmp105 = program3->id;
            				}
HXDLIN(2263)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_use_program(_hx_tmp105);
            			}
HXDLIN(2263)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_1==( (unsigned char)(3) )) ){
HXLINE(2265)			 ::lime::graphics::opengl::GLObject program4 = this->highGlowProgram;
HXDLIN(2265)			{
HXLINE(2265)				::lime::graphics::opengl::GL_obj::context->_hx___currentProgram = program4;
HXDLIN(2265)				int _hx_tmp106;
HXDLIN(2265)				if (::hx::IsNull( program4 )) {
HXLINE(2265)					_hx_tmp106 = 0;
            				}
            				else {
HXLINE(2265)					_hx_tmp106 = program4->id;
            				}
HXDLIN(2265)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_use_program(_hx_tmp106);
            			}
HXDLIN(2265)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_1==( (unsigned char)(4) )) ){
HXLINE(2267)			 ::lime::graphics::opengl::GLObject program5 = this->veryHighGlowProgram;
HXDLIN(2267)			{
HXLINE(2267)				::lime::graphics::opengl::GL_obj::context->_hx___currentProgram = program5;
HXDLIN(2267)				int _hx_tmp107;
HXDLIN(2267)				if (::hx::IsNull( program5 )) {
HXLINE(2267)					_hx_tmp107 = 0;
            				}
            				else {
HXLINE(2267)					_hx_tmp107 = program5->id;
            				}
HXDLIN(2267)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_use_program(_hx_tmp107);
            			}
HXDLIN(2267)			goto _hx_goto_31;
            		}
            		_hx_goto_31:;
HXLINE(2270)		{
HXLINE(2270)			 ::lime::graphics::opengl::GLObject vertexArray1 = this->objVAO;
HXDLIN(2270)			{
HXLINE(2270)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this32 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2270)				int _hx_tmp108;
HXDLIN(2270)				if (::hx::IsNull( vertexArray1 )) {
HXLINE(2270)					_hx_tmp108 = 0;
            				}
            				else {
HXLINE(2270)					_hx_tmp108 = vertexArray1->id;
            				}
HXDLIN(2270)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_vertex_array(_hx_tmp108);
            			}
            		}
HXLINE(2272)		{
HXLINE(2272)			 ::lime::graphics::opengl::GLObject buffer2 = this->objVBO;
HXDLIN(2272)			{
HXLINE(2272)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this33 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2272)				if ((34962 == _this33->ARRAY_BUFFER)) {
HXLINE(2272)					_this33->_hx___arrayBufferBinding = buffer2;
            				}
HXDLIN(2272)				if ((34962 == _this33->ELEMENT_ARRAY_BUFFER)) {
HXLINE(2272)					_this33->_hx___elementBufferBinding = buffer2;
            				}
HXDLIN(2272)				int _hx_tmp109;
HXDLIN(2272)				if (::hx::IsNull( buffer2 )) {
HXLINE(2272)					_hx_tmp109 = 0;
            				}
            				else {
HXLINE(2272)					_hx_tmp109 = buffer2->id;
            				}
HXDLIN(2272)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34962,_hx_tmp109);
            			}
            		}
HXLINE(2273)		if ((this->vIdx > this->objVBOLen)) {
HXLINE(2274)			{
HXLINE(2274)				int size8 = (this->vIdx * 4);
HXDLIN(2274)				Float srcData4 = (uintptr_t)_f32Arr_;
HXDLIN(2274)				{
HXLINE(2274)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this34 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2274)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34962,size8,srcData4,35048);
            				}
            			}
HXLINE(2275)			this->objVBOLen = this->vIdx;
            		}
            		else {
HXLINE(2277)			int size9 = (this->vIdx * 4);
HXDLIN(2277)			Float srcData5 = (uintptr_t)_f32Arr_;
HXDLIN(2277)			{
HXLINE(2277)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this35 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2277)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_sub_data(34962,0,size9,srcData5);
            			}
            		}
HXLINE(2279)		{
HXLINE(2279)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this36 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2279)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(0);
            		}
HXLINE(2280)		{
HXLINE(2280)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this37 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2280)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(0,4,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            		}
HXLINE(2281)		{
HXLINE(2281)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this38 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2281)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(1);
            		}
HXLINE(2282)		{
HXLINE(2282)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this39 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2282)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(1,2,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(16));
            		}
HXLINE(2283)		{
HXLINE(2283)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this40 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2283)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(2);
            		}
HXLINE(2284)		{
HXLINE(2284)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this41 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2284)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(2,2,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(24));
            		}
HXLINE(2285)		{
HXLINE(2285)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this42 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2285)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(3);
            		}
HXLINE(2286)		{
HXLINE(2286)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this43 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2286)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(3,1,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(32));
            		}
HXLINE(2287)		{
HXLINE(2287)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this44 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2287)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(4);
            		}
HXLINE(2288)		{
HXLINE(2288)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this45 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2288)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(4,1,5126,false,40,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(36));
            		}
HXLINE(2290)		{
HXLINE(2290)			 ::lime::graphics::opengl::GLObject buffer3 = this->objIBO;
HXDLIN(2290)			{
HXLINE(2290)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this46 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2290)				if ((34963 == _this46->ARRAY_BUFFER)) {
HXLINE(2290)					_this46->_hx___arrayBufferBinding = buffer3;
            				}
HXDLIN(2290)				if ((34963 == _this46->ELEMENT_ARRAY_BUFFER)) {
HXLINE(2290)					_this46->_hx___elementBufferBinding = buffer3;
            				}
HXDLIN(2290)				int _hx_tmp110;
HXDLIN(2290)				if (::hx::IsNull( buffer3 )) {
HXLINE(2290)					_hx_tmp110 = 0;
            				}
            				else {
HXLINE(2290)					_hx_tmp110 = buffer3->id;
            				}
HXDLIN(2290)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34963,_hx_tmp110);
            			}
            		}
HXLINE(2291)		if ((this->iIdx > this->objIBOLen)) {
HXLINE(2292)			{
HXLINE(2292)				int size10 = (this->iIdx * 4);
HXDLIN(2292)				Float srcData6 = (uintptr_t)_i32Arr_;
HXDLIN(2292)				{
HXLINE(2292)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this47 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2292)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_data(34963,size10,srcData6,35048);
            				}
            			}
HXLINE(2293)			this->objIBOLen = this->iIdx;
            		}
            		else {
HXLINE(2295)			int size11 = (this->iIdx * 4);
HXDLIN(2295)			Float srcData7 = (uintptr_t)_i32Arr_;
HXDLIN(2295)			{
HXLINE(2295)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this48 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2295)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_buffer_sub_data(34963,0,size11,srcData7);
            			}
            		}
HXLINE(2297)		{
HXLINE(2297)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this49 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2297)			::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_draw_elements(4,this->iIdx,5125,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            		}
HXLINE(2299)		{
HXLINE(2299)			 ::Dynamic sb = this->speechBalloons->iterator();
HXDLIN(2299)			while(( (bool)(sb->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2299)				 ::map::SpeechBalloon sb1 = ( ( ::map::SpeechBalloon)(sb->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2300)				bool _hx_tmp111;
HXDLIN(2300)				if (!(sb1->disposed)) {
HXLINE(2300)					 ::objects::GameObject tmp1 = sb1->go;
HXDLIN(2300)					 ::map::Map _hx_tmp112;
HXDLIN(2300)					if (::hx::IsNotNull( tmp1 )) {
HXLINE(2300)						_hx_tmp112 = tmp1->map;
            					}
            					else {
HXLINE(2300)						_hx_tmp112 = null();
            					}
HXDLIN(2300)					_hx_tmp111 = ::hx::IsNull( _hx_tmp112 );
            				}
            				else {
HXLINE(2300)					_hx_tmp111 = true;
            				}
HXDLIN(2300)				if (_hx_tmp111) {
HXLINE(2301)					continue;
            				}
HXLINE(2303)				int dt = (time - sb1->startTime);
HXLINE(2304)				if ((dt > sb1->lifetime)) {
HXLINE(2305)					sb1->disposed = true;
HXLINE(2306)					continue;
            				}
HXLINE(2309)				 ::engine::GLTextureData textureData28;
HXLINE(2310)				switch((int)(sb1->sbType)){
            					case (int)1: {
HXLINE(2312)						 ::openfl::display::BitmapData bitmapData7 = this->tellBalloonTex;
HXDLIN(2312)						bool needsPad7 = true;
HXDLIN(2312)						if (::hx::IsNull( bitmapData7 )) {
HXLINE(2312)							textureData28 = null();
            						}
            						else {
HXLINE(2312)							if (::engine::TextureFactory_obj::textures->exists(bitmapData7)) {
HXLINE(2312)								textureData28 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData7)) );
            							}
            							else {
HXLINE(2312)								if (::hx::IsNull( bitmapData7->image )) {
HXLINE(2312)									textureData28 = null();
            								}
            								else {
HXLINE(2312)									int preW7 = bitmapData7->width;
HXDLIN(2312)									int preH7 = bitmapData7->height;
HXDLIN(2312)									int pad7;
HXDLIN(2312)									if (needsPad7) {
HXLINE(2312)										pad7 = 4;
            									}
            									else {
HXLINE(2312)										pad7 = 0;
            									}
HXDLIN(2312)									int value198 = (bitmapData7->width + pad7);
HXDLIN(2312)									value198 = (value198 - 1);
HXDLIN(2312)									value198 = (value198 | (value198 >> 1));
HXDLIN(2312)									value198 = (value198 | (value198 >> 2));
HXDLIN(2312)									value198 = (value198 | (value198 >> 4));
HXDLIN(2312)									value198 = (value198 | (value198 >> 8));
HXDLIN(2312)									value198 = (value198 | (value198 >> 16));
HXDLIN(2312)									value198 = (value198 + 1);
HXDLIN(2312)									int width7 = value198;
HXDLIN(2312)									int value199 = (bitmapData7->height + pad7);
HXDLIN(2312)									value199 = (value199 - 1);
HXDLIN(2312)									value199 = (value199 | (value199 >> 1));
HXDLIN(2312)									value199 = (value199 | (value199 >> 2));
HXDLIN(2312)									value199 = (value199 | (value199 >> 4));
HXDLIN(2312)									value199 = (value199 | (value199 >> 8));
HXDLIN(2312)									value199 = (value199 | (value199 >> 16));
HXDLIN(2312)									value199 = (value199 + 1);
HXDLIN(2312)									int height7 = value199;
HXDLIN(2312)									Float xOff7 = (( (Float)((width7 - preW7)) ) / ( (Float)(2) ));
HXDLIN(2312)									Float yOff7 = (( (Float)((height7 - preH7)) ) / ( (Float)(2) ));
HXDLIN(2312)									 ::openfl::display::BitmapData bitmapTexture7 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width7,height7,true,0);
HXDLIN(2312)									 ::openfl::geom::Point textureData29;
HXDLIN(2312)									if (needsPad7) {
HXLINE(2312)										Float textureData30;
HXDLIN(2312)										if ((xOff7 == 0)) {
HXLINE(2312)											textureData30 = ( (Float)(2) );
            										}
            										else {
HXLINE(2312)											textureData30 = xOff7;
            										}
HXDLIN(2312)										Float textureData31;
HXDLIN(2312)										if ((yOff7 == 0)) {
HXLINE(2312)											textureData31 = ( (Float)(2) );
            										}
            										else {
HXLINE(2312)											textureData31 = yOff7;
            										}
HXDLIN(2312)										textureData29 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData30,textureData31);
            									}
            									else {
HXLINE(2312)										textureData29 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            									}
HXDLIN(2312)									bitmapTexture7->copyPixels(bitmapData7,bitmapData7->rect,textureData29,null(),null(),null());
HXDLIN(2312)									 ::engine::GLTextureData texture8 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width7,height7,bitmapTexture7);
HXDLIN(2312)									texture8->xOffset = xOff7;
HXDLIN(2312)									texture8->yOffset = yOff7;
HXDLIN(2312)									if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2312)										::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2312)										::engine::TextureFactory_obj::count = 0;
            									}
HXDLIN(2312)									::engine::TextureFactory_obj::textures->set(bitmapData7,texture8);
HXDLIN(2312)									::engine::TextureFactory_obj::count++;
HXDLIN(2312)									textureData28 = texture8;
            								}
            							}
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(2314)						 ::openfl::display::BitmapData bitmapData8 = this->guildBalloonTex;
HXDLIN(2314)						bool needsPad8 = true;
HXDLIN(2314)						if (::hx::IsNull( bitmapData8 )) {
HXLINE(2314)							textureData28 = null();
            						}
            						else {
HXLINE(2314)							if (::engine::TextureFactory_obj::textures->exists(bitmapData8)) {
HXLINE(2314)								textureData28 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData8)) );
            							}
            							else {
HXLINE(2314)								if (::hx::IsNull( bitmapData8->image )) {
HXLINE(2314)									textureData28 = null();
            								}
            								else {
HXLINE(2314)									int preW8 = bitmapData8->width;
HXDLIN(2314)									int preH8 = bitmapData8->height;
HXDLIN(2314)									int pad8;
HXDLIN(2314)									if (needsPad8) {
HXLINE(2314)										pad8 = 4;
            									}
            									else {
HXLINE(2314)										pad8 = 0;
            									}
HXDLIN(2314)									int value200 = (bitmapData8->width + pad8);
HXDLIN(2314)									value200 = (value200 - 1);
HXDLIN(2314)									value200 = (value200 | (value200 >> 1));
HXDLIN(2314)									value200 = (value200 | (value200 >> 2));
HXDLIN(2314)									value200 = (value200 | (value200 >> 4));
HXDLIN(2314)									value200 = (value200 | (value200 >> 8));
HXDLIN(2314)									value200 = (value200 | (value200 >> 16));
HXDLIN(2314)									value200 = (value200 + 1);
HXDLIN(2314)									int width8 = value200;
HXDLIN(2314)									int value201 = (bitmapData8->height + pad8);
HXDLIN(2314)									value201 = (value201 - 1);
HXDLIN(2314)									value201 = (value201 | (value201 >> 1));
HXDLIN(2314)									value201 = (value201 | (value201 >> 2));
HXDLIN(2314)									value201 = (value201 | (value201 >> 4));
HXDLIN(2314)									value201 = (value201 | (value201 >> 8));
HXDLIN(2314)									value201 = (value201 | (value201 >> 16));
HXDLIN(2314)									value201 = (value201 + 1);
HXDLIN(2314)									int height8 = value201;
HXDLIN(2314)									Float xOff8 = (( (Float)((width8 - preW8)) ) / ( (Float)(2) ));
HXDLIN(2314)									Float yOff8 = (( (Float)((height8 - preH8)) ) / ( (Float)(2) ));
HXDLIN(2314)									 ::openfl::display::BitmapData bitmapTexture8 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width8,height8,true,0);
HXDLIN(2314)									 ::openfl::geom::Point textureData32;
HXDLIN(2314)									if (needsPad8) {
HXLINE(2314)										Float textureData33;
HXDLIN(2314)										if ((xOff8 == 0)) {
HXLINE(2314)											textureData33 = ( (Float)(2) );
            										}
            										else {
HXLINE(2314)											textureData33 = xOff8;
            										}
HXDLIN(2314)										Float textureData34;
HXDLIN(2314)										if ((yOff8 == 0)) {
HXLINE(2314)											textureData34 = ( (Float)(2) );
            										}
            										else {
HXLINE(2314)											textureData34 = yOff8;
            										}
HXDLIN(2314)										textureData32 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData33,textureData34);
            									}
            									else {
HXLINE(2314)										textureData32 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            									}
HXDLIN(2314)									bitmapTexture8->copyPixels(bitmapData8,bitmapData8->rect,textureData32,null(),null(),null());
HXDLIN(2314)									 ::engine::GLTextureData texture9 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width8,height8,bitmapTexture8);
HXDLIN(2314)									texture9->xOffset = xOff8;
HXDLIN(2314)									texture9->yOffset = yOff8;
HXDLIN(2314)									if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2314)										::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2314)										::engine::TextureFactory_obj::count = 0;
            									}
HXDLIN(2314)									::engine::TextureFactory_obj::textures->set(bitmapData8,texture9);
HXDLIN(2314)									::engine::TextureFactory_obj::count++;
HXDLIN(2314)									textureData28 = texture9;
            								}
            							}
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(2316)						 ::openfl::display::BitmapData bitmapData9 = this->enemyBalloonTex;
HXDLIN(2316)						bool needsPad9 = true;
HXDLIN(2316)						if (::hx::IsNull( bitmapData9 )) {
HXLINE(2316)							textureData28 = null();
            						}
            						else {
HXLINE(2316)							if (::engine::TextureFactory_obj::textures->exists(bitmapData9)) {
HXLINE(2316)								textureData28 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData9)) );
            							}
            							else {
HXLINE(2316)								if (::hx::IsNull( bitmapData9->image )) {
HXLINE(2316)									textureData28 = null();
            								}
            								else {
HXLINE(2316)									int preW9 = bitmapData9->width;
HXDLIN(2316)									int preH9 = bitmapData9->height;
HXDLIN(2316)									int pad9;
HXDLIN(2316)									if (needsPad9) {
HXLINE(2316)										pad9 = 4;
            									}
            									else {
HXLINE(2316)										pad9 = 0;
            									}
HXDLIN(2316)									int value202 = (bitmapData9->width + pad9);
HXDLIN(2316)									value202 = (value202 - 1);
HXDLIN(2316)									value202 = (value202 | (value202 >> 1));
HXDLIN(2316)									value202 = (value202 | (value202 >> 2));
HXDLIN(2316)									value202 = (value202 | (value202 >> 4));
HXDLIN(2316)									value202 = (value202 | (value202 >> 8));
HXDLIN(2316)									value202 = (value202 | (value202 >> 16));
HXDLIN(2316)									value202 = (value202 + 1);
HXDLIN(2316)									int width9 = value202;
HXDLIN(2316)									int value203 = (bitmapData9->height + pad9);
HXDLIN(2316)									value203 = (value203 - 1);
HXDLIN(2316)									value203 = (value203 | (value203 >> 1));
HXDLIN(2316)									value203 = (value203 | (value203 >> 2));
HXDLIN(2316)									value203 = (value203 | (value203 >> 4));
HXDLIN(2316)									value203 = (value203 | (value203 >> 8));
HXDLIN(2316)									value203 = (value203 | (value203 >> 16));
HXDLIN(2316)									value203 = (value203 + 1);
HXDLIN(2316)									int height9 = value203;
HXDLIN(2316)									Float xOff9 = (( (Float)((width9 - preW9)) ) / ( (Float)(2) ));
HXDLIN(2316)									Float yOff9 = (( (Float)((height9 - preH9)) ) / ( (Float)(2) ));
HXDLIN(2316)									 ::openfl::display::BitmapData bitmapTexture9 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width9,height9,true,0);
HXDLIN(2316)									 ::openfl::geom::Point textureData35;
HXDLIN(2316)									if (needsPad9) {
HXLINE(2316)										Float textureData36;
HXDLIN(2316)										if ((xOff9 == 0)) {
HXLINE(2316)											textureData36 = ( (Float)(2) );
            										}
            										else {
HXLINE(2316)											textureData36 = xOff9;
            										}
HXDLIN(2316)										Float textureData37;
HXDLIN(2316)										if ((yOff9 == 0)) {
HXLINE(2316)											textureData37 = ( (Float)(2) );
            										}
            										else {
HXLINE(2316)											textureData37 = yOff9;
            										}
HXDLIN(2316)										textureData35 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData36,textureData37);
            									}
            									else {
HXLINE(2316)										textureData35 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            									}
HXDLIN(2316)									bitmapTexture9->copyPixels(bitmapData9,bitmapData9->rect,textureData35,null(),null(),null());
HXDLIN(2316)									 ::engine::GLTextureData texture10 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width9,height9,bitmapTexture9);
HXDLIN(2316)									texture10->xOffset = xOff9;
HXDLIN(2316)									texture10->yOffset = yOff9;
HXDLIN(2316)									if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2316)										::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2316)										::engine::TextureFactory_obj::count = 0;
            									}
HXDLIN(2316)									::engine::TextureFactory_obj::textures->set(bitmapData9,texture10);
HXDLIN(2316)									::engine::TextureFactory_obj::count++;
HXDLIN(2316)									textureData28 = texture10;
            								}
            							}
            						}
            					}
            					break;
            					case (int)4: {
HXLINE(2318)						 ::openfl::display::BitmapData bitmapData10 = this->partyBalloonTex;
HXDLIN(2318)						bool needsPad10 = true;
HXDLIN(2318)						if (::hx::IsNull( bitmapData10 )) {
HXLINE(2318)							textureData28 = null();
            						}
            						else {
HXLINE(2318)							if (::engine::TextureFactory_obj::textures->exists(bitmapData10)) {
HXLINE(2318)								textureData28 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData10)) );
            							}
            							else {
HXLINE(2318)								if (::hx::IsNull( bitmapData10->image )) {
HXLINE(2318)									textureData28 = null();
            								}
            								else {
HXLINE(2318)									int preW10 = bitmapData10->width;
HXDLIN(2318)									int preH10 = bitmapData10->height;
HXDLIN(2318)									int pad10;
HXDLIN(2318)									if (needsPad10) {
HXLINE(2318)										pad10 = 4;
            									}
            									else {
HXLINE(2318)										pad10 = 0;
            									}
HXDLIN(2318)									int value204 = (bitmapData10->width + pad10);
HXDLIN(2318)									value204 = (value204 - 1);
HXDLIN(2318)									value204 = (value204 | (value204 >> 1));
HXDLIN(2318)									value204 = (value204 | (value204 >> 2));
HXDLIN(2318)									value204 = (value204 | (value204 >> 4));
HXDLIN(2318)									value204 = (value204 | (value204 >> 8));
HXDLIN(2318)									value204 = (value204 | (value204 >> 16));
HXDLIN(2318)									value204 = (value204 + 1);
HXDLIN(2318)									int width10 = value204;
HXDLIN(2318)									int value205 = (bitmapData10->height + pad10);
HXDLIN(2318)									value205 = (value205 - 1);
HXDLIN(2318)									value205 = (value205 | (value205 >> 1));
HXDLIN(2318)									value205 = (value205 | (value205 >> 2));
HXDLIN(2318)									value205 = (value205 | (value205 >> 4));
HXDLIN(2318)									value205 = (value205 | (value205 >> 8));
HXDLIN(2318)									value205 = (value205 | (value205 >> 16));
HXDLIN(2318)									value205 = (value205 + 1);
HXDLIN(2318)									int height10 = value205;
HXDLIN(2318)									Float xOff10 = (( (Float)((width10 - preW10)) ) / ( (Float)(2) ));
HXDLIN(2318)									Float yOff10 = (( (Float)((height10 - preH10)) ) / ( (Float)(2) ));
HXDLIN(2318)									 ::openfl::display::BitmapData bitmapTexture10 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width10,height10,true,0);
HXDLIN(2318)									 ::openfl::geom::Point textureData38;
HXDLIN(2318)									if (needsPad10) {
HXLINE(2318)										Float textureData39;
HXDLIN(2318)										if ((xOff10 == 0)) {
HXLINE(2318)											textureData39 = ( (Float)(2) );
            										}
            										else {
HXLINE(2318)											textureData39 = xOff10;
            										}
HXDLIN(2318)										Float textureData40;
HXDLIN(2318)										if ((yOff10 == 0)) {
HXLINE(2318)											textureData40 = ( (Float)(2) );
            										}
            										else {
HXLINE(2318)											textureData40 = yOff10;
            										}
HXDLIN(2318)										textureData38 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData39,textureData40);
            									}
            									else {
HXLINE(2318)										textureData38 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            									}
HXDLIN(2318)									bitmapTexture10->copyPixels(bitmapData10,bitmapData10->rect,textureData38,null(),null(),null());
HXDLIN(2318)									 ::engine::GLTextureData texture11 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width10,height10,bitmapTexture10);
HXDLIN(2318)									texture11->xOffset = xOff10;
HXDLIN(2318)									texture11->yOffset = yOff10;
HXDLIN(2318)									if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2318)										::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2318)										::engine::TextureFactory_obj::count = 0;
            									}
HXDLIN(2318)									::engine::TextureFactory_obj::textures->set(bitmapData10,texture11);
HXDLIN(2318)									::engine::TextureFactory_obj::count++;
HXDLIN(2318)									textureData28 = texture11;
            								}
            							}
            						}
            					}
            					break;
            					case (int)5: {
HXLINE(2320)						 ::openfl::display::BitmapData bitmapData11 = this->adminBalloonTex;
HXDLIN(2320)						bool needsPad11 = true;
HXDLIN(2320)						if (::hx::IsNull( bitmapData11 )) {
HXLINE(2320)							textureData28 = null();
            						}
            						else {
HXLINE(2320)							if (::engine::TextureFactory_obj::textures->exists(bitmapData11)) {
HXLINE(2320)								textureData28 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData11)) );
            							}
            							else {
HXLINE(2320)								if (::hx::IsNull( bitmapData11->image )) {
HXLINE(2320)									textureData28 = null();
            								}
            								else {
HXLINE(2320)									int preW11 = bitmapData11->width;
HXDLIN(2320)									int preH11 = bitmapData11->height;
HXDLIN(2320)									int pad11;
HXDLIN(2320)									if (needsPad11) {
HXLINE(2320)										pad11 = 4;
            									}
            									else {
HXLINE(2320)										pad11 = 0;
            									}
HXDLIN(2320)									int value206 = (bitmapData11->width + pad11);
HXDLIN(2320)									value206 = (value206 - 1);
HXDLIN(2320)									value206 = (value206 | (value206 >> 1));
HXDLIN(2320)									value206 = (value206 | (value206 >> 2));
HXDLIN(2320)									value206 = (value206 | (value206 >> 4));
HXDLIN(2320)									value206 = (value206 | (value206 >> 8));
HXDLIN(2320)									value206 = (value206 | (value206 >> 16));
HXDLIN(2320)									value206 = (value206 + 1);
HXDLIN(2320)									int width11 = value206;
HXDLIN(2320)									int value207 = (bitmapData11->height + pad11);
HXDLIN(2320)									value207 = (value207 - 1);
HXDLIN(2320)									value207 = (value207 | (value207 >> 1));
HXDLIN(2320)									value207 = (value207 | (value207 >> 2));
HXDLIN(2320)									value207 = (value207 | (value207 >> 4));
HXDLIN(2320)									value207 = (value207 | (value207 >> 8));
HXDLIN(2320)									value207 = (value207 | (value207 >> 16));
HXDLIN(2320)									value207 = (value207 + 1);
HXDLIN(2320)									int height11 = value207;
HXDLIN(2320)									Float xOff11 = (( (Float)((width11 - preW11)) ) / ( (Float)(2) ));
HXDLIN(2320)									Float yOff11 = (( (Float)((height11 - preH11)) ) / ( (Float)(2) ));
HXDLIN(2320)									 ::openfl::display::BitmapData bitmapTexture11 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width11,height11,true,0);
HXDLIN(2320)									 ::openfl::geom::Point textureData41;
HXDLIN(2320)									if (needsPad11) {
HXLINE(2320)										Float textureData42;
HXDLIN(2320)										if ((xOff11 == 0)) {
HXLINE(2320)											textureData42 = ( (Float)(2) );
            										}
            										else {
HXLINE(2320)											textureData42 = xOff11;
            										}
HXDLIN(2320)										Float textureData43;
HXDLIN(2320)										if ((yOff11 == 0)) {
HXLINE(2320)											textureData43 = ( (Float)(2) );
            										}
            										else {
HXLINE(2320)											textureData43 = yOff11;
            										}
HXDLIN(2320)										textureData41 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData42,textureData43);
            									}
            									else {
HXLINE(2320)										textureData41 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            									}
HXDLIN(2320)									bitmapTexture11->copyPixels(bitmapData11,bitmapData11->rect,textureData41,null(),null(),null());
HXDLIN(2320)									 ::engine::GLTextureData texture12 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width11,height11,bitmapTexture11);
HXDLIN(2320)									texture12->xOffset = xOff11;
HXDLIN(2320)									texture12->yOffset = yOff11;
HXDLIN(2320)									if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2320)										::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2320)										::engine::TextureFactory_obj::count = 0;
            									}
HXDLIN(2320)									::engine::TextureFactory_obj::textures->set(bitmapData11,texture12);
HXDLIN(2320)									::engine::TextureFactory_obj::count++;
HXDLIN(2320)									textureData28 = texture12;
            								}
            							}
            						}
            					}
            					break;
            					default:{
HXLINE(2322)						 ::openfl::display::BitmapData bitmapData12 = this->normalBalloonTex;
HXDLIN(2322)						bool needsPad12 = true;
HXDLIN(2322)						if (::hx::IsNull( bitmapData12 )) {
HXLINE(2322)							textureData28 = null();
            						}
            						else {
HXLINE(2322)							if (::engine::TextureFactory_obj::textures->exists(bitmapData12)) {
HXLINE(2322)								textureData28 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData12)) );
            							}
            							else {
HXLINE(2322)								if (::hx::IsNull( bitmapData12->image )) {
HXLINE(2322)									textureData28 = null();
            								}
            								else {
HXLINE(2322)									int preW12 = bitmapData12->width;
HXDLIN(2322)									int preH12 = bitmapData12->height;
HXDLIN(2322)									int pad12;
HXDLIN(2322)									if (needsPad12) {
HXLINE(2322)										pad12 = 4;
            									}
            									else {
HXLINE(2322)										pad12 = 0;
            									}
HXDLIN(2322)									int value208 = (bitmapData12->width + pad12);
HXDLIN(2322)									value208 = (value208 - 1);
HXDLIN(2322)									value208 = (value208 | (value208 >> 1));
HXDLIN(2322)									value208 = (value208 | (value208 >> 2));
HXDLIN(2322)									value208 = (value208 | (value208 >> 4));
HXDLIN(2322)									value208 = (value208 | (value208 >> 8));
HXDLIN(2322)									value208 = (value208 | (value208 >> 16));
HXDLIN(2322)									value208 = (value208 + 1);
HXDLIN(2322)									int width12 = value208;
HXDLIN(2322)									int value209 = (bitmapData12->height + pad12);
HXDLIN(2322)									value209 = (value209 - 1);
HXDLIN(2322)									value209 = (value209 | (value209 >> 1));
HXDLIN(2322)									value209 = (value209 | (value209 >> 2));
HXDLIN(2322)									value209 = (value209 | (value209 >> 4));
HXDLIN(2322)									value209 = (value209 | (value209 >> 8));
HXDLIN(2322)									value209 = (value209 | (value209 >> 16));
HXDLIN(2322)									value209 = (value209 + 1);
HXDLIN(2322)									int height12 = value209;
HXDLIN(2322)									Float xOff12 = (( (Float)((width12 - preW12)) ) / ( (Float)(2) ));
HXDLIN(2322)									Float yOff12 = (( (Float)((height12 - preH12)) ) / ( (Float)(2) ));
HXDLIN(2322)									 ::openfl::display::BitmapData bitmapTexture12 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width12,height12,true,0);
HXDLIN(2322)									 ::openfl::geom::Point textureData44;
HXDLIN(2322)									if (needsPad12) {
HXLINE(2322)										Float textureData45;
HXDLIN(2322)										if ((xOff12 == 0)) {
HXLINE(2322)											textureData45 = ( (Float)(2) );
            										}
            										else {
HXLINE(2322)											textureData45 = xOff12;
            										}
HXDLIN(2322)										Float textureData46;
HXDLIN(2322)										if ((yOff12 == 0)) {
HXLINE(2322)											textureData46 = ( (Float)(2) );
            										}
            										else {
HXLINE(2322)											textureData46 = yOff12;
            										}
HXDLIN(2322)										textureData44 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData45,textureData46);
            									}
            									else {
HXLINE(2322)										textureData44 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            									}
HXDLIN(2322)									bitmapTexture12->copyPixels(bitmapData12,bitmapData12->rect,textureData44,null(),null(),null());
HXDLIN(2322)									 ::engine::GLTextureData texture13 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width12,height12,bitmapTexture12);
HXDLIN(2322)									texture13->xOffset = xOff12;
HXDLIN(2322)									texture13->yOffset = yOff12;
HXDLIN(2322)									if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2322)										::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2322)										::engine::TextureFactory_obj::count = 0;
            									}
HXDLIN(2322)									::engine::TextureFactory_obj::textures->set(bitmapData12,texture13);
HXDLIN(2322)									::engine::TextureFactory_obj::count++;
HXDLIN(2322)									textureData28 = texture13;
            								}
            							}
            						}
            					}
            				}
HXLINE(2325)				Float alpha = ((Float)1.0);
HXLINE(2326)				if ((dt < 333)) {
HXLINE(2327)					alpha = (( (Float)(-((::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((((( (Float)(dt) ) / ( (Float)(333) )) * ( (Float)(( (float)(((Float)3.141592653589793)) )) )) + (( (Float)(( (float)(((Float)3.141592653589793)) )) ) * ((Float)0.5))) * (( (Float)(65536) ) / ( (Float)((( (float)(((Float)3.141592653589793)) ) * ( (float)(2) ))) )))) & 65535)] - ( (float)(1) )))) ) / ( (Float)(2) ));
            				}
            				else {
HXLINE(2328)					if ((dt > (sb1->lifetime - 333))) {
HXLINE(2329)						alpha = (( (Float)(-((::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((( (float)(((( (Float)(1) ) - (( (Float)(((dt - sb1->lifetime) + 333)) ) / ( (Float)(333) ))) * ( (Float)(( (float)(((Float)3.141592653589793)) )) ))) ) + (( (Float)(( (float)(((Float)3.141592653589793)) )) ) * ((Float)0.5))) * (( (Float)(65536) ) / ( (Float)((( (float)(((Float)3.141592653589793)) ) * ( (float)(2) ))) )))) & 65535)] - ( (float)(1) )))) ) / ( (Float)(2) ));
            					}
            				}
HXLINE(2331)				this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData28->texture,(( (float)((textureData28->width << 2)) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)((textureData28->height << 2)) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((sb1->go->screenX + 45) * ::util::RenderUtils_obj::clipSpaceScaleX),(((sb1->go->screenYNoZ - sb1->go->hBase) - ( (float)(40) )) * ::util::RenderUtils_obj::clipSpaceScaleY),( (float)(0) ),( (float)(0) ),alpha));
HXLINE(2338)				 ::openfl::display::BitmapData bitmapData13 = sb1->textTex;
HXDLIN(2338)				bool needsPad13 = true;
HXDLIN(2338)				 ::engine::GLTextureData textureData47;
HXDLIN(2338)				if (::hx::IsNull( bitmapData13 )) {
HXLINE(2338)					textureData47 = null();
            				}
            				else {
HXLINE(2338)					if (::engine::TextureFactory_obj::textures->exists(bitmapData13)) {
HXLINE(2338)						textureData47 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData13)) );
            					}
            					else {
HXLINE(2338)						if (::hx::IsNull( bitmapData13->image )) {
HXLINE(2338)							textureData47 = null();
            						}
            						else {
HXLINE(2338)							int preW13 = bitmapData13->width;
HXDLIN(2338)							int preH13 = bitmapData13->height;
HXDLIN(2338)							int pad13;
HXDLIN(2338)							if (needsPad13) {
HXLINE(2338)								pad13 = 4;
            							}
            							else {
HXLINE(2338)								pad13 = 0;
            							}
HXDLIN(2338)							int value210 = (bitmapData13->width + pad13);
HXDLIN(2338)							value210 = (value210 - 1);
HXDLIN(2338)							value210 = (value210 | (value210 >> 1));
HXDLIN(2338)							value210 = (value210 | (value210 >> 2));
HXDLIN(2338)							value210 = (value210 | (value210 >> 4));
HXDLIN(2338)							value210 = (value210 | (value210 >> 8));
HXDLIN(2338)							value210 = (value210 | (value210 >> 16));
HXDLIN(2338)							value210 = (value210 + 1);
HXDLIN(2338)							int width13 = value210;
HXDLIN(2338)							int value211 = (bitmapData13->height + pad13);
HXDLIN(2338)							value211 = (value211 - 1);
HXDLIN(2338)							value211 = (value211 | (value211 >> 1));
HXDLIN(2338)							value211 = (value211 | (value211 >> 2));
HXDLIN(2338)							value211 = (value211 | (value211 >> 4));
HXDLIN(2338)							value211 = (value211 | (value211 >> 8));
HXDLIN(2338)							value211 = (value211 | (value211 >> 16));
HXDLIN(2338)							value211 = (value211 + 1);
HXDLIN(2338)							int height13 = value211;
HXDLIN(2338)							Float xOff13 = (( (Float)((width13 - preW13)) ) / ( (Float)(2) ));
HXDLIN(2338)							Float yOff13 = (( (Float)((height13 - preH13)) ) / ( (Float)(2) ));
HXDLIN(2338)							 ::openfl::display::BitmapData bitmapTexture13 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width13,height13,true,0);
HXDLIN(2338)							 ::openfl::geom::Point textureData48;
HXDLIN(2338)							if (needsPad13) {
HXLINE(2338)								Float textureData49;
HXDLIN(2338)								if ((xOff13 == 0)) {
HXLINE(2338)									textureData49 = ( (Float)(2) );
            								}
            								else {
HXLINE(2338)									textureData49 = xOff13;
            								}
HXDLIN(2338)								Float textureData50;
HXDLIN(2338)								if ((yOff13 == 0)) {
HXLINE(2338)									textureData50 = ( (Float)(2) );
            								}
            								else {
HXLINE(2338)									textureData50 = yOff13;
            								}
HXDLIN(2338)								textureData48 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData49,textureData50);
            							}
            							else {
HXLINE(2338)								textureData48 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            							}
HXDLIN(2338)							bitmapTexture13->copyPixels(bitmapData13,bitmapData13->rect,textureData48,null(),null(),null());
HXDLIN(2338)							 ::engine::GLTextureData texture14 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width13,height13,bitmapTexture13);
HXDLIN(2338)							texture14->xOffset = xOff13;
HXDLIN(2338)							texture14->yOffset = yOff13;
HXDLIN(2338)							if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2338)								::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2338)								::engine::TextureFactory_obj::count = 0;
            							}
HXDLIN(2338)							::engine::TextureFactory_obj::textures->set(bitmapData13,texture14);
HXDLIN(2338)							::engine::TextureFactory_obj::count++;
HXDLIN(2338)							textureData47 = texture14;
            						}
            					}
            				}
HXLINE(2339)				this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData47->texture,(( (float)(textureData47->width) ) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(0) ),( (float)(0) ),(( (float)(textureData47->height) ) * ::util::RenderUtils_obj::clipSpaceScaleY),((sb1->go->screenX + 42) * ::util::RenderUtils_obj::clipSpaceScaleX),((((sb1->go->screenYNoZ - sb1->go->hBase) - ( (float)(33) )) - ( (float)((sb1->numLines * 6)) )) * ::util::RenderUtils_obj::clipSpaceScaleY),( (float)(0) ),( (float)(0) ),alpha));
            			}
            		}
HXLINE(2347)		{
HXLINE(2347)			int _g8 = 0;
HXDLIN(2347)			::Array< ::Dynamic> _g9 = this->statusTexts;
HXDLIN(2347)			while((_g8 < _g9->length)){
HXLINE(2347)				 ::map::CharacterStatusText st = _g9->__get(_g8).StaticCast<  ::map::CharacterStatusText >();
HXDLIN(2347)				_g8 = (_g8 + 1);
HXLINE(2348)				bool _hx_tmp113;
HXDLIN(2348)				if (!(st->disposed)) {
HXLINE(2348)					 ::objects::GameObject tmp2 = st->go;
HXDLIN(2348)					 ::map::Map _hx_tmp114;
HXDLIN(2348)					if (::hx::IsNotNull( tmp2 )) {
HXLINE(2348)						_hx_tmp114 = tmp2->map;
            					}
            					else {
HXLINE(2348)						_hx_tmp114 = null();
            					}
HXDLIN(2348)					_hx_tmp113 = ::hx::IsNull( _hx_tmp114 );
            				}
            				else {
HXLINE(2348)					_hx_tmp113 = true;
            				}
HXDLIN(2348)				if (_hx_tmp113) {
HXLINE(2349)					continue;
            				}
HXLINE(2351)				int dt1 = (time - st->startTime);
HXLINE(2352)				if ((dt1 > st->lifetime)) {
HXLINE(2353)					st->disposed = true;
HXLINE(2354)					continue;
            				}
HXLINE(2357)				Float frac = (( (Float)(dt1) ) / ( (Float)(st->lifetime) ));
HXLINE(2358)				Float scale = ::Math_obj::min(( (Float)(1) ),::Math_obj::max(((Float)0.7),((( (Float)(1) ) - (frac * ((Float)0.3))) + ((Float)0.075))));
HXLINE(2359)				 ::openfl::display::BitmapData bitmapData14 = st->textTex;
HXDLIN(2359)				bool needsPad14 = true;
HXDLIN(2359)				 ::engine::GLTextureData textureData51;
HXDLIN(2359)				if (::hx::IsNull( bitmapData14 )) {
HXLINE(2359)					textureData51 = null();
            				}
            				else {
HXLINE(2359)					if (::engine::TextureFactory_obj::textures->exists(bitmapData14)) {
HXLINE(2359)						textureData51 = ( ( ::engine::GLTextureData)(::engine::TextureFactory_obj::textures->get(bitmapData14)) );
            					}
            					else {
HXLINE(2359)						if (::hx::IsNull( bitmapData14->image )) {
HXLINE(2359)							textureData51 = null();
            						}
            						else {
HXLINE(2359)							int preW14 = bitmapData14->width;
HXDLIN(2359)							int preH14 = bitmapData14->height;
HXDLIN(2359)							int pad14;
HXDLIN(2359)							if (needsPad14) {
HXLINE(2359)								pad14 = 4;
            							}
            							else {
HXLINE(2359)								pad14 = 0;
            							}
HXDLIN(2359)							int value212 = (bitmapData14->width + pad14);
HXDLIN(2359)							value212 = (value212 - 1);
HXDLIN(2359)							value212 = (value212 | (value212 >> 1));
HXDLIN(2359)							value212 = (value212 | (value212 >> 2));
HXDLIN(2359)							value212 = (value212 | (value212 >> 4));
HXDLIN(2359)							value212 = (value212 | (value212 >> 8));
HXDLIN(2359)							value212 = (value212 | (value212 >> 16));
HXDLIN(2359)							value212 = (value212 + 1);
HXDLIN(2359)							int width14 = value212;
HXDLIN(2359)							int value213 = (bitmapData14->height + pad14);
HXDLIN(2359)							value213 = (value213 - 1);
HXDLIN(2359)							value213 = (value213 | (value213 >> 1));
HXDLIN(2359)							value213 = (value213 | (value213 >> 2));
HXDLIN(2359)							value213 = (value213 | (value213 >> 4));
HXDLIN(2359)							value213 = (value213 | (value213 >> 8));
HXDLIN(2359)							value213 = (value213 | (value213 >> 16));
HXDLIN(2359)							value213 = (value213 + 1);
HXDLIN(2359)							int height14 = value213;
HXDLIN(2359)							Float xOff14 = (( (Float)((width14 - preW14)) ) / ( (Float)(2) ));
HXDLIN(2359)							Float yOff14 = (( (Float)((height14 - preH14)) ) / ( (Float)(2) ));
HXDLIN(2359)							 ::openfl::display::BitmapData bitmapTexture14 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width14,height14,true,0);
HXDLIN(2359)							 ::openfl::geom::Point textureData52;
HXDLIN(2359)							if (needsPad14) {
HXLINE(2359)								Float textureData53;
HXDLIN(2359)								if ((xOff14 == 0)) {
HXLINE(2359)									textureData53 = ( (Float)(2) );
            								}
            								else {
HXLINE(2359)									textureData53 = xOff14;
            								}
HXDLIN(2359)								Float textureData54;
HXDLIN(2359)								if ((yOff14 == 0)) {
HXLINE(2359)									textureData54 = ( (Float)(2) );
            								}
            								else {
HXLINE(2359)									textureData54 = yOff14;
            								}
HXDLIN(2359)								textureData52 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,textureData53,textureData54);
            							}
            							else {
HXLINE(2359)								textureData52 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
            							}
HXDLIN(2359)							bitmapTexture14->copyPixels(bitmapData14,bitmapData14->rect,textureData52,null(),null(),null());
HXDLIN(2359)							 ::engine::GLTextureData texture15 =  ::engine::GLTextureData_obj::__alloc( HX_CTX ,width14,height14,bitmapTexture14);
HXDLIN(2359)							texture15->xOffset = xOff14;
HXDLIN(2359)							texture15->yOffset = yOff14;
HXDLIN(2359)							if ((::engine::TextureFactory_obj::count > 1000)) {
HXLINE(2359)								::engine::TextureFactory_obj::disposeNormalTextures();
HXDLIN(2359)								::engine::TextureFactory_obj::count = 0;
            							}
HXDLIN(2359)							::engine::TextureFactory_obj::textures->set(bitmapData14,texture15);
HXDLIN(2359)							::engine::TextureFactory_obj::count++;
HXDLIN(2359)							textureData51 = texture15;
            						}
            					}
            				}
HXLINE(2360)				this->rdSingle->push( ::map::RenderDataSingle_obj::__alloc( HX_CTX ,textureData51->texture,( (float)(((( (Float)(textureData51->width) ) * scale) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleX) ))) ),( (float)(0) ),( (float)(0) ),( (float)(((( (Float)(textureData51->height) ) * scale) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),((st->go->screenX + st->xOffset) * ::util::RenderUtils_obj::clipSpaceScaleX),( (float)(((( (Float)(((st->go->screenYNoZ + st->yOffset) - st->go->hBase)) ) - (frac * ( (Float)(40) ))) * ( (Float)(::util::RenderUtils_obj::clipSpaceScaleY) ))) ),( (float)(0) ),( (float)(0) ),((( (Float)(1) ) - frac) + ((Float)0.33))));
            			}
            		}
HXLINE(2368)		i = 0;
HXLINE(2369)		int rdsLen = this->rdSingle->length;
HXLINE(2370)		if ((rdsLen > 0)) {
HXLINE(2371)			{
HXLINE(2371)				 ::lime::graphics::opengl::GLObject vbo = this->singleVBO;
HXDLIN(2371)				{
HXLINE(2371)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this50 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2371)					if ((34962 == _this50->ARRAY_BUFFER)) {
HXLINE(2371)						_this50->_hx___arrayBufferBinding = vbo;
            					}
HXDLIN(2371)					if ((34962 == _this50->ELEMENT_ARRAY_BUFFER)) {
HXLINE(2371)						_this50->_hx___elementBufferBinding = vbo;
            					}
HXDLIN(2371)					int _hx_tmp115;
HXDLIN(2371)					if (::hx::IsNull( vbo )) {
HXLINE(2371)						_hx_tmp115 = 0;
            					}
            					else {
HXLINE(2371)						_hx_tmp115 = vbo->id;
            					}
HXDLIN(2371)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34962,_hx_tmp115);
            				}
HXDLIN(2371)				{
HXLINE(2371)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this51 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2371)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_enable_vertex_attrib_array(0);
            				}
HXDLIN(2371)				{
HXLINE(2371)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this52 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2371)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_vertex_attrib_pointer(0,4,5126,false,0,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            				}
            			}
HXLINE(2372)			{
HXLINE(2372)				 ::lime::graphics::opengl::GLObject buffer4 = this->singleIBO;
HXDLIN(2372)				{
HXLINE(2372)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this53 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2372)					if ((34963 == _this53->ARRAY_BUFFER)) {
HXLINE(2372)						_this53->_hx___arrayBufferBinding = buffer4;
            					}
HXDLIN(2372)					if ((34963 == _this53->ELEMENT_ARRAY_BUFFER)) {
HXLINE(2372)						_this53->_hx___elementBufferBinding = buffer4;
            					}
HXDLIN(2372)					int _hx_tmp116;
HXDLIN(2372)					if (::hx::IsNull( buffer4 )) {
HXLINE(2372)						_hx_tmp116 = 0;
            					}
            					else {
HXLINE(2372)						_hx_tmp116 = buffer4->id;
            					}
HXDLIN(2372)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_buffer(34963,_hx_tmp116);
            				}
            			}
HXLINE(2373)			{
HXLINE(2373)				 ::lime::graphics::opengl::GLObject program6 = this->singleProgram;
HXDLIN(2373)				{
HXLINE(2373)					::lime::graphics::opengl::GL_obj::context->_hx___currentProgram = program6;
HXDLIN(2373)					int _hx_tmp117;
HXDLIN(2373)					if (::hx::IsNull( program6 )) {
HXLINE(2373)						_hx_tmp117 = 0;
            					}
            					else {
HXLINE(2373)						_hx_tmp117 = program6->id;
            					}
HXDLIN(2373)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_use_program(_hx_tmp117);
            				}
            			}
            		}
HXLINE(2376)		while((i < rdsLen)){
HXLINE(2377)			 ::map::RenderDataSingle rd = this->rdSingle->__get(i).StaticCast<  ::map::RenderDataSingle >();
HXLINE(2378)			{
HXLINE(2378)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this54 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2378)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform4f(0,( (float)(( (Float)(rd->cosX) )) ),( (float)(( (Float)(rd->sinX) )) ),( (float)(( (Float)(rd->sinY) )) ),( (float)(( (Float)(rd->cosY) )) ));
            			}
HXLINE(2379)			{
HXLINE(2379)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this55 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2379)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform2f(1,( (float)(( (Float)(rd->x) )) ),( (float)(( (Float)(rd->y) )) ));
            			}
HXLINE(2380)			{
HXLINE(2380)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this56 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2380)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform2f(2,( (float)(( (Float)(rd->texelW) )) ),( (float)(( (Float)(rd->texelH) )) ));
            			}
HXLINE(2381)			{
HXLINE(2381)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this57 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2381)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_uniform1f(3,( (float)(( (Float)(rd->alpha) )) ));
            			}
HXLINE(2382)			{
HXLINE(2382)				 ::lime::graphics::opengl::GLObject texture16 = rd->texture;
HXDLIN(2382)				{
HXLINE(2382)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this58 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2382)					if ((3553 == _this58->TEXTURE_2D)) {
HXLINE(2382)						_this58->_hx___texture2DBinding = texture16;
            					}
HXDLIN(2382)					if ((3553 == _this58->TEXTURE_CUBE_MAP)) {
HXLINE(2382)						_this58->_hx___textureCubeMapBinding = texture16;
            					}
HXDLIN(2382)					int _hx_tmp118;
HXDLIN(2382)					if (::hx::IsNull( texture16 )) {
HXLINE(2382)						_hx_tmp118 = 0;
            					}
            					else {
HXLINE(2382)						_hx_tmp118 = texture16->id;
            					}
HXDLIN(2382)					::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_bind_texture(3553,_hx_tmp118);
            				}
            			}
HXLINE(2383)			{
HXLINE(2383)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext _this59 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(2383)				::lime::_internal::backend::native::NativeCFFI_obj::lime_gl_draw_elements(4,6,5123,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(0));
            			}
HXLINE(2384)			i = (i + 1);
            		}
HXLINE(2387)		this->c3d->present();
            	}


float Map_obj::emptyBarU;

float Map_obj::emptyBarV;

float Map_obj::emptyBarW;

float Map_obj::emptyBarH;

float Map_obj::hpBarU;

float Map_obj::hpBarV;

float Map_obj::hpBarW;

float Map_obj::hpBarH;

float Map_obj::mpBarU;

float Map_obj::mpBarV;

float Map_obj::mpBarW;

float Map_obj::mpBarH;

float Map_obj::oxygenBarU;

float Map_obj::oxygenBarV;

float Map_obj::oxygenBarW;

float Map_obj::oxygenBarH;

float Map_obj::shieldBarU;

float Map_obj::shieldBarV;

float Map_obj::shieldBarW;

float Map_obj::shieldBarH;

float Map_obj::leftMaskU;

float Map_obj::leftMaskV;

float Map_obj::topMaskU;

float Map_obj::topMaskV;

float Map_obj::rightMaskU;

float Map_obj::rightMaskV;

float Map_obj::bottomMaskU;

float Map_obj::bottomMaskV;


::hx::ObjectPtr< Map_obj > Map_obj::__new() {
	::hx::ObjectPtr< Map_obj > __this = new Map_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Map_obj > Map_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Map_obj *__this = (Map_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Map_obj), true, "map.Map"));
	*(void **)__this = Map_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Map_obj::Map_obj()
{
}

void Map_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Map);
	HX_MARK_MEMBER_NAME(mapWidth,"mapWidth");
	HX_MARK_MEMBER_NAME(mapHeight,"mapHeight");
	HX_MARK_MEMBER_NAME(mapName,"mapName");
	HX_MARK_MEMBER_NAME(back,"back");
	HX_MARK_MEMBER_NAME(allowPlayerTeleport,"allowPlayerTeleport");
	HX_MARK_MEMBER_NAME(showDisplays,"showDisplays");
	HX_MARK_MEMBER_NAME(squares,"squares");
	HX_MARK_MEMBER_NAME(gameObjectsLen,"gameObjectsLen");
	HX_MARK_MEMBER_NAME(gameObjects,"gameObjects");
	HX_MARK_MEMBER_NAME(rdSingle,"rdSingle");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(quest,"quest");
	HX_MARK_MEMBER_NAME(lastWidth,"lastWidth");
	HX_MARK_MEMBER_NAME(lastHeight,"lastHeight");
	HX_MARK_MEMBER_NAME(c3d,"c3d");
	HX_MARK_MEMBER_NAME(lastTileUpdate,"lastTileUpdate");
	HX_MARK_MEMBER_NAME(lastBufferUpdate,"lastBufferUpdate");
	HX_MARK_MEMBER_NAME(visSquares,"visSquares");
	HX_MARK_MEMBER_NAME(visSquareLen,"visSquareLen");
	HX_MARK_MEMBER_NAME(defaultProgram,"defaultProgram");
	HX_MARK_MEMBER_NAME(lowGlowProgram,"lowGlowProgram");
	HX_MARK_MEMBER_NAME(medGlowProgram,"medGlowProgram");
	HX_MARK_MEMBER_NAME(highGlowProgram,"highGlowProgram");
	HX_MARK_MEMBER_NAME(veryHighGlowProgram,"veryHighGlowProgram");
	HX_MARK_MEMBER_NAME(singleProgram,"singleProgram");
	HX_MARK_MEMBER_NAME(groundProgram,"groundProgram");
	HX_MARK_MEMBER_NAME(singleVBO,"singleVBO");
	HX_MARK_MEMBER_NAME(singleIBO,"singleIBO");
	HX_MARK_MEMBER_NAME(groundVAO,"groundVAO");
	HX_MARK_MEMBER_NAME(groundVBO,"groundVBO");
	HX_MARK_MEMBER_NAME(groundVBOLen,"groundVBOLen");
	HX_MARK_MEMBER_NAME(groundIBO,"groundIBO");
	HX_MARK_MEMBER_NAME(groundIBOLen,"groundIBOLen");
	HX_MARK_MEMBER_NAME(objVAO,"objVAO");
	HX_MARK_MEMBER_NAME(objVBO,"objVBO");
	HX_MARK_MEMBER_NAME(objVBOLen,"objVBOLen");
	HX_MARK_MEMBER_NAME(objIBO,"objIBO");
	HX_MARK_MEMBER_NAME(objIBOLen,"objIBOLen");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(vIdx,"vIdx");
	HX_MARK_MEMBER_NAME(iIdx,"iIdx");
	HX_MARK_MEMBER_NAME(speechBalloons,"speechBalloons");
	HX_MARK_MEMBER_NAME(statusTexts,"statusTexts");
	HX_MARK_MEMBER_NAME(normalBalloonTex,"normalBalloonTex");
	HX_MARK_MEMBER_NAME(tellBalloonTex,"tellBalloonTex");
	HX_MARK_MEMBER_NAME(guildBalloonTex,"guildBalloonTex");
	HX_MARK_MEMBER_NAME(enemyBalloonTex,"enemyBalloonTex");
	HX_MARK_MEMBER_NAME(partyBalloonTex,"partyBalloonTex");
	HX_MARK_MEMBER_NAME(adminBalloonTex,"adminBalloonTex");
	HX_MARK_END_CLASS();
}

void Map_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mapWidth,"mapWidth");
	HX_VISIT_MEMBER_NAME(mapHeight,"mapHeight");
	HX_VISIT_MEMBER_NAME(mapName,"mapName");
	HX_VISIT_MEMBER_NAME(back,"back");
	HX_VISIT_MEMBER_NAME(allowPlayerTeleport,"allowPlayerTeleport");
	HX_VISIT_MEMBER_NAME(showDisplays,"showDisplays");
	HX_VISIT_MEMBER_NAME(squares,"squares");
	HX_VISIT_MEMBER_NAME(gameObjectsLen,"gameObjectsLen");
	HX_VISIT_MEMBER_NAME(gameObjects,"gameObjects");
	HX_VISIT_MEMBER_NAME(rdSingle,"rdSingle");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(quest,"quest");
	HX_VISIT_MEMBER_NAME(lastWidth,"lastWidth");
	HX_VISIT_MEMBER_NAME(lastHeight,"lastHeight");
	HX_VISIT_MEMBER_NAME(c3d,"c3d");
	HX_VISIT_MEMBER_NAME(lastTileUpdate,"lastTileUpdate");
	HX_VISIT_MEMBER_NAME(lastBufferUpdate,"lastBufferUpdate");
	HX_VISIT_MEMBER_NAME(visSquares,"visSquares");
	HX_VISIT_MEMBER_NAME(visSquareLen,"visSquareLen");
	HX_VISIT_MEMBER_NAME(defaultProgram,"defaultProgram");
	HX_VISIT_MEMBER_NAME(lowGlowProgram,"lowGlowProgram");
	HX_VISIT_MEMBER_NAME(medGlowProgram,"medGlowProgram");
	HX_VISIT_MEMBER_NAME(highGlowProgram,"highGlowProgram");
	HX_VISIT_MEMBER_NAME(veryHighGlowProgram,"veryHighGlowProgram");
	HX_VISIT_MEMBER_NAME(singleProgram,"singleProgram");
	HX_VISIT_MEMBER_NAME(groundProgram,"groundProgram");
	HX_VISIT_MEMBER_NAME(singleVBO,"singleVBO");
	HX_VISIT_MEMBER_NAME(singleIBO,"singleIBO");
	HX_VISIT_MEMBER_NAME(groundVAO,"groundVAO");
	HX_VISIT_MEMBER_NAME(groundVBO,"groundVBO");
	HX_VISIT_MEMBER_NAME(groundVBOLen,"groundVBOLen");
	HX_VISIT_MEMBER_NAME(groundIBO,"groundIBO");
	HX_VISIT_MEMBER_NAME(groundIBOLen,"groundIBOLen");
	HX_VISIT_MEMBER_NAME(objVAO,"objVAO");
	HX_VISIT_MEMBER_NAME(objVBO,"objVBO");
	HX_VISIT_MEMBER_NAME(objVBOLen,"objVBOLen");
	HX_VISIT_MEMBER_NAME(objIBO,"objIBO");
	HX_VISIT_MEMBER_NAME(objIBOLen,"objIBOLen");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(vIdx,"vIdx");
	HX_VISIT_MEMBER_NAME(iIdx,"iIdx");
	HX_VISIT_MEMBER_NAME(speechBalloons,"speechBalloons");
	HX_VISIT_MEMBER_NAME(statusTexts,"statusTexts");
	HX_VISIT_MEMBER_NAME(normalBalloonTex,"normalBalloonTex");
	HX_VISIT_MEMBER_NAME(tellBalloonTex,"tellBalloonTex");
	HX_VISIT_MEMBER_NAME(guildBalloonTex,"guildBalloonTex");
	HX_VISIT_MEMBER_NAME(enemyBalloonTex,"enemyBalloonTex");
	HX_VISIT_MEMBER_NAME(partyBalloonTex,"partyBalloonTex");
	HX_VISIT_MEMBER_NAME(adminBalloonTex,"adminBalloonTex");
}

void Map_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mapWidth",ca,25,a5,41));
	outFields->push(HX_("mapHeight",a3,63,2b,e5));
	outFields->push(HX_("mapName",07,27,fb,2d));
	outFields->push(HX_("back",27,da,10,41));
	outFields->push(HX_("allowPlayerTeleport",95,c9,a2,39));
	outFields->push(HX_("showDisplays",0e,26,28,51));
	outFields->push(HX_("squares",36,89,ce,7a));
	outFields->push(HX_("gameObjectsLen",f3,f1,3b,72));
	outFields->push(HX_("gameObjects",02,df,05,67));
	outFields->push(HX_("rdSingle",da,0f,8f,a4));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("quest",e2,8b,ea,5d));
	outFields->push(HX_("lastWidth",d0,e3,0f,17));
	outFields->push(HX_("lastHeight",dd,ea,26,cd));
	outFields->push(HX_("c3d",f4,4b,4b,00));
	outFields->push(HX_("lastTileUpdate",cd,f1,22,5f));
	outFields->push(HX_("lastBufferUpdate",9f,f6,aa,de));
	outFields->push(HX_("visSquares",36,47,20,21));
	outFields->push(HX_("visSquareLen",38,c1,0b,df));
	outFields->push(HX_("defaultProgram",c3,a3,39,23));
	outFields->push(HX_("lowGlowProgram",43,e3,15,9b));
	outFields->push(HX_("medGlowProgram",cb,2c,09,c3));
	outFields->push(HX_("highGlowProgram",35,77,0b,d1));
	outFields->push(HX_("veryHighGlowProgram",1f,07,63,3d));
	outFields->push(HX_("singleProgram",dc,6c,8e,5a));
	outFields->push(HX_("groundProgram",bd,be,e4,d6));
	outFields->push(HX_("singleVBO",1b,da,68,b7));
	outFields->push(HX_("singleIBO",ce,fc,5e,b7));
	outFields->push(HX_("groundVAO",9d,66,96,bf));
	outFields->push(HX_("groundVBO",7c,67,96,bf));
	outFields->push(HX_("groundVBOLen",b9,71,54,09));
	outFields->push(HX_("groundIBO",2f,8a,8c,bf));
	outFields->push(HX_("groundIBOLen",e6,c0,b0,d6));
	outFields->push(HX_("objVAO",2d,ff,33,15));
	outFields->push(HX_("objVBO",0c,00,34,15));
	outFields->push(HX_("objVBOLen",29,93,74,2b));
	outFields->push(HX_("objIBO",bf,22,2a,15));
	outFields->push(HX_("objIBOLen",56,e2,d0,f8));
	outFields->push(HX_("i",69,00,00,00));
	outFields->push(HX_("vIdx",67,e9,36,4e));
	outFields->push(HX_("iIdx",54,23,9f,45));
	outFields->push(HX_("speechBalloons",26,43,61,f7));
	outFields->push(HX_("statusTexts",94,7e,1d,7b));
	outFields->push(HX_("normalBalloonTex",7f,37,5d,9c));
	outFields->push(HX_("tellBalloonTex",09,b8,21,97));
	outFields->push(HX_("guildBalloonTex",0b,ee,1a,5b));
	outFields->push(HX_("enemyBalloonTex",e0,aa,62,9b));
	outFields->push(HX_("partyBalloonTex",3e,ab,67,76));
	outFields->push(HX_("adminBalloonTex",e7,83,26,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Map_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /* unsigned short */ ,(int)offsetof(Map_obj,mapWidth),HX_("mapWidth",ca,25,a5,41)},
	{::hx::fsUnknown /* unsigned short */ ,(int)offsetof(Map_obj,mapHeight),HX_("mapHeight",a3,63,2b,e5)},
	{::hx::fsString,(int)offsetof(Map_obj,mapName),HX_("mapName",07,27,fb,2d)},
	{::hx::fsInt,(int)offsetof(Map_obj,back),HX_("back",27,da,10,41)},
	{::hx::fsBool,(int)offsetof(Map_obj,allowPlayerTeleport),HX_("allowPlayerTeleport",95,c9,a2,39)},
	{::hx::fsBool,(int)offsetof(Map_obj,showDisplays),HX_("showDisplays",0e,26,28,51)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Map_obj,squares),HX_("squares",36,89,ce,7a)},
	{::hx::fsInt,(int)offsetof(Map_obj,gameObjectsLen),HX_("gameObjectsLen",f3,f1,3b,72)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Map_obj,gameObjects),HX_("gameObjects",02,df,05,67)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Map_obj,rdSingle),HX_("rdSingle",da,0f,8f,a4)},
	{::hx::fsObject /*  ::objects::Player */ ,(int)offsetof(Map_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::map::Quest */ ,(int)offsetof(Map_obj,quest),HX_("quest",e2,8b,ea,5d)},
	{::hx::fsUnknown /* short */ ,(int)offsetof(Map_obj,lastWidth),HX_("lastWidth",d0,e3,0f,17)},
	{::hx::fsUnknown /* short */ ,(int)offsetof(Map_obj,lastHeight),HX_("lastHeight",dd,ea,26,cd)},
	{::hx::fsObject /*  ::openfl::display3D::Context3D */ ,(int)offsetof(Map_obj,c3d),HX_("c3d",f4,4b,4b,00)},
	{::hx::fsInt,(int)offsetof(Map_obj,lastTileUpdate),HX_("lastTileUpdate",cd,f1,22,5f)},
	{::hx::fsInt,(int)offsetof(Map_obj,lastBufferUpdate),HX_("lastBufferUpdate",9f,f6,aa,de)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Map_obj,visSquares),HX_("visSquares",36,47,20,21)},
	{::hx::fsUnknown /* unsigned short */ ,(int)offsetof(Map_obj,visSquareLen),HX_("visSquareLen",38,c1,0b,df)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,defaultProgram),HX_("defaultProgram",c3,a3,39,23)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,lowGlowProgram),HX_("lowGlowProgram",43,e3,15,9b)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,medGlowProgram),HX_("medGlowProgram",cb,2c,09,c3)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,highGlowProgram),HX_("highGlowProgram",35,77,0b,d1)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,veryHighGlowProgram),HX_("veryHighGlowProgram",1f,07,63,3d)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,singleProgram),HX_("singleProgram",dc,6c,8e,5a)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,groundProgram),HX_("groundProgram",bd,be,e4,d6)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,singleVBO),HX_("singleVBO",1b,da,68,b7)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,singleIBO),HX_("singleIBO",ce,fc,5e,b7)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,groundVAO),HX_("groundVAO",9d,66,96,bf)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,groundVBO),HX_("groundVBO",7c,67,96,bf)},
	{::hx::fsInt,(int)offsetof(Map_obj,groundVBOLen),HX_("groundVBOLen",b9,71,54,09)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,groundIBO),HX_("groundIBO",2f,8a,8c,bf)},
	{::hx::fsInt,(int)offsetof(Map_obj,groundIBOLen),HX_("groundIBOLen",e6,c0,b0,d6)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,objVAO),HX_("objVAO",2d,ff,33,15)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,objVBO),HX_("objVBO",0c,00,34,15)},
	{::hx::fsInt,(int)offsetof(Map_obj,objVBOLen),HX_("objVBOLen",29,93,74,2b)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(Map_obj,objIBO),HX_("objIBO",bf,22,2a,15)},
	{::hx::fsInt,(int)offsetof(Map_obj,objIBOLen),HX_("objIBOLen",56,e2,d0,f8)},
	{::hx::fsInt,(int)offsetof(Map_obj,i),HX_("i",69,00,00,00)},
	{::hx::fsInt,(int)offsetof(Map_obj,vIdx),HX_("vIdx",67,e9,36,4e)},
	{::hx::fsInt,(int)offsetof(Map_obj,iIdx),HX_("iIdx",54,23,9f,45)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Map_obj,speechBalloons),HX_("speechBalloons",26,43,61,f7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Map_obj,statusTexts),HX_("statusTexts",94,7e,1d,7b)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Map_obj,normalBalloonTex),HX_("normalBalloonTex",7f,37,5d,9c)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Map_obj,tellBalloonTex),HX_("tellBalloonTex",09,b8,21,97)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Map_obj,guildBalloonTex),HX_("guildBalloonTex",0b,ee,1a,5b)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Map_obj,enemyBalloonTex),HX_("enemyBalloonTex",e0,aa,62,9b)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Map_obj,partyBalloonTex),HX_("partyBalloonTex",3e,ab,67,76)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Map_obj,adminBalloonTex),HX_("adminBalloonTex",e7,83,26,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Map_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::emptyBarU,HX_("emptyBarU",4f,18,e9,fd)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::emptyBarV,HX_("emptyBarV",50,18,e9,fd)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::emptyBarW,HX_("emptyBarW",51,18,e9,fd)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::emptyBarH,HX_("emptyBarH",42,18,e9,fd)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::hpBarU,HX_("hpBarU",4a,92,e8,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::hpBarV,HX_("hpBarV",4b,92,e8,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::hpBarW,HX_("hpBarW",4c,92,e8,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::hpBarH,HX_("hpBarH",3d,92,e8,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::mpBarU,HX_("mpBarU",25,60,b1,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::mpBarV,HX_("mpBarV",26,60,b1,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::mpBarW,HX_("mpBarW",27,60,b1,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::mpBarH,HX_("mpBarH",18,60,b1,3d)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::oxygenBarU,HX_("oxygenBarU",a2,3e,77,e9)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::oxygenBarV,HX_("oxygenBarV",a3,3e,77,e9)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::oxygenBarW,HX_("oxygenBarW",a4,3e,77,e9)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::oxygenBarH,HX_("oxygenBarH",95,3e,77,e9)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::shieldBarU,HX_("shieldBarU",2b,38,b6,df)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::shieldBarV,HX_("shieldBarV",2c,38,b6,df)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::shieldBarW,HX_("shieldBarW",2d,38,b6,df)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::shieldBarH,HX_("shieldBarH",1e,38,b6,df)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::leftMaskU,HX_("leftMaskU",62,7c,02,18)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::leftMaskV,HX_("leftMaskV",63,7c,02,18)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::topMaskU,HX_("topMaskU",14,9b,f2,50)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::topMaskV,HX_("topMaskV",15,9b,f2,50)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::rightMaskU,HX_("rightMaskU",6d,74,e7,05)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::rightMaskV,HX_("rightMaskV",6e,74,e7,05)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::bottomMaskU,HX_("bottomMaskU",fe,22,b3,68)},
	{::hx::fsUnknown /* float */ ,(void *) &Map_obj::bottomMaskV,HX_("bottomMaskV",ff,22,b3,68)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Map_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Map_obj::emptyBarU,"emptyBarU");
	HX_MARK_MEMBER_NAME(Map_obj::emptyBarV,"emptyBarV");
	HX_MARK_MEMBER_NAME(Map_obj::emptyBarW,"emptyBarW");
	HX_MARK_MEMBER_NAME(Map_obj::emptyBarH,"emptyBarH");
	HX_MARK_MEMBER_NAME(Map_obj::hpBarU,"hpBarU");
	HX_MARK_MEMBER_NAME(Map_obj::hpBarV,"hpBarV");
	HX_MARK_MEMBER_NAME(Map_obj::hpBarW,"hpBarW");
	HX_MARK_MEMBER_NAME(Map_obj::hpBarH,"hpBarH");
	HX_MARK_MEMBER_NAME(Map_obj::mpBarU,"mpBarU");
	HX_MARK_MEMBER_NAME(Map_obj::mpBarV,"mpBarV");
	HX_MARK_MEMBER_NAME(Map_obj::mpBarW,"mpBarW");
	HX_MARK_MEMBER_NAME(Map_obj::mpBarH,"mpBarH");
	HX_MARK_MEMBER_NAME(Map_obj::oxygenBarU,"oxygenBarU");
	HX_MARK_MEMBER_NAME(Map_obj::oxygenBarV,"oxygenBarV");
	HX_MARK_MEMBER_NAME(Map_obj::oxygenBarW,"oxygenBarW");
	HX_MARK_MEMBER_NAME(Map_obj::oxygenBarH,"oxygenBarH");
	HX_MARK_MEMBER_NAME(Map_obj::shieldBarU,"shieldBarU");
	HX_MARK_MEMBER_NAME(Map_obj::shieldBarV,"shieldBarV");
	HX_MARK_MEMBER_NAME(Map_obj::shieldBarW,"shieldBarW");
	HX_MARK_MEMBER_NAME(Map_obj::shieldBarH,"shieldBarH");
	HX_MARK_MEMBER_NAME(Map_obj::leftMaskU,"leftMaskU");
	HX_MARK_MEMBER_NAME(Map_obj::leftMaskV,"leftMaskV");
	HX_MARK_MEMBER_NAME(Map_obj::topMaskU,"topMaskU");
	HX_MARK_MEMBER_NAME(Map_obj::topMaskV,"topMaskV");
	HX_MARK_MEMBER_NAME(Map_obj::rightMaskU,"rightMaskU");
	HX_MARK_MEMBER_NAME(Map_obj::rightMaskV,"rightMaskV");
	HX_MARK_MEMBER_NAME(Map_obj::bottomMaskU,"bottomMaskU");
	HX_MARK_MEMBER_NAME(Map_obj::bottomMaskV,"bottomMaskV");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Map_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Map_obj::emptyBarU,"emptyBarU");
	HX_VISIT_MEMBER_NAME(Map_obj::emptyBarV,"emptyBarV");
	HX_VISIT_MEMBER_NAME(Map_obj::emptyBarW,"emptyBarW");
	HX_VISIT_MEMBER_NAME(Map_obj::emptyBarH,"emptyBarH");
	HX_VISIT_MEMBER_NAME(Map_obj::hpBarU,"hpBarU");
	HX_VISIT_MEMBER_NAME(Map_obj::hpBarV,"hpBarV");
	HX_VISIT_MEMBER_NAME(Map_obj::hpBarW,"hpBarW");
	HX_VISIT_MEMBER_NAME(Map_obj::hpBarH,"hpBarH");
	HX_VISIT_MEMBER_NAME(Map_obj::mpBarU,"mpBarU");
	HX_VISIT_MEMBER_NAME(Map_obj::mpBarV,"mpBarV");
	HX_VISIT_MEMBER_NAME(Map_obj::mpBarW,"mpBarW");
	HX_VISIT_MEMBER_NAME(Map_obj::mpBarH,"mpBarH");
	HX_VISIT_MEMBER_NAME(Map_obj::oxygenBarU,"oxygenBarU");
	HX_VISIT_MEMBER_NAME(Map_obj::oxygenBarV,"oxygenBarV");
	HX_VISIT_MEMBER_NAME(Map_obj::oxygenBarW,"oxygenBarW");
	HX_VISIT_MEMBER_NAME(Map_obj::oxygenBarH,"oxygenBarH");
	HX_VISIT_MEMBER_NAME(Map_obj::shieldBarU,"shieldBarU");
	HX_VISIT_MEMBER_NAME(Map_obj::shieldBarV,"shieldBarV");
	HX_VISIT_MEMBER_NAME(Map_obj::shieldBarW,"shieldBarW");
	HX_VISIT_MEMBER_NAME(Map_obj::shieldBarH,"shieldBarH");
	HX_VISIT_MEMBER_NAME(Map_obj::leftMaskU,"leftMaskU");
	HX_VISIT_MEMBER_NAME(Map_obj::leftMaskV,"leftMaskV");
	HX_VISIT_MEMBER_NAME(Map_obj::topMaskU,"topMaskU");
	HX_VISIT_MEMBER_NAME(Map_obj::topMaskV,"topMaskV");
	HX_VISIT_MEMBER_NAME(Map_obj::rightMaskU,"rightMaskU");
	HX_VISIT_MEMBER_NAME(Map_obj::rightMaskV,"rightMaskV");
	HX_VISIT_MEMBER_NAME(Map_obj::bottomMaskU,"bottomMaskU");
	HX_VISIT_MEMBER_NAME(Map_obj::bottomMaskV,"bottomMaskV");
};

#endif

::hx::Class Map_obj::__mClass;

void Map_obj::__register()
{
	Map_obj _hx_dummy;
	Map_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.Map",aa,1b,c5,18);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Map_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Map_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Map_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Map_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Map_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Map_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_63_boot)
HXDLIN(  63)		emptyBarU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_64_boot)
HXDLIN(  64)		emptyBarV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_65_boot)
HXDLIN(  65)		emptyBarW = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_66_boot)
HXDLIN(  66)		emptyBarH = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_67_boot)
HXDLIN(  67)		hpBarU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_68_boot)
HXDLIN(  68)		hpBarV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_69_boot)
HXDLIN(  69)		hpBarW = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_70_boot)
HXDLIN(  70)		hpBarH = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_71_boot)
HXDLIN(  71)		mpBarU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_72_boot)
HXDLIN(  72)		mpBarV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_73_boot)
HXDLIN(  73)		mpBarW = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_74_boot)
HXDLIN(  74)		mpBarH = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_75_boot)
HXDLIN(  75)		oxygenBarU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_76_boot)
HXDLIN(  76)		oxygenBarV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_77_boot)
HXDLIN(  77)		oxygenBarW = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_78_boot)
HXDLIN(  78)		oxygenBarH = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_79_boot)
HXDLIN(  79)		shieldBarU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_80_boot)
HXDLIN(  80)		shieldBarV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_81_boot)
HXDLIN(  81)		shieldBarW = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_82_boot)
HXDLIN(  82)		shieldBarH = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_83_boot)
HXDLIN(  83)		leftMaskU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_84_boot)
HXDLIN(  84)		leftMaskV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_85_boot)
HXDLIN(  85)		topMaskU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_86_boot)
HXDLIN(  86)		topMaskV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_87_boot)
HXDLIN(  87)		rightMaskU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_88_boot)
HXDLIN(  88)		rightMaskV = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_89_boot)
HXDLIN(  89)		bottomMaskU = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_680c17cc7afbb141_90_boot)
HXDLIN(  90)		bottomMaskV = ( (float)(((Float)0.0)) );
            	}
}

} // end namespace map
