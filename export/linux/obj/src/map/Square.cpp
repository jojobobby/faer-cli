// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_map_GroundProperties
#include <map/GroundProperties.h>
#endif
#ifndef INCLUDED_map_Square
#include <map/Square.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_animation_Animations
#include <objects/animation/Animations.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aea84ca840ce7018_7_new,"map.Square","new",0x72bb00c1,"map.Square.new","map/Square.hx",7,0x9f8389ae)
namespace map{

void Square_obj::__construct(float x,float y){
            	HX_STACKFRAME(&_hx_pos_aea84ca840ce7018_7_new)
HXLINE(  32)		this->y = ( (unsigned short)(0) );
HXLINE(  31)		this->x = ( (unsigned short)(0) );
HXLINE(  30)		this->middleY = ( (float)(((Float)0.0)) );
HXLINE(  29)		this->middleX = ( (float)(((Float)0.0)) );
HXLINE(  27)		this->bottomBlendV = ( (float)(((Float)-1.0)) );
HXLINE(  26)		this->bottomBlendU = ( (float)(((Float)-1.0)) );
HXLINE(  25)		this->rightBlendV = ( (float)(((Float)-1.0)) );
HXLINE(  24)		this->rightBlendU = ( (float)(((Float)-1.0)) );
HXLINE(  23)		this->topBlendV = ( (float)(((Float)-1.0)) );
HXLINE(  22)		this->topBlendU = ( (float)(((Float)-1.0)) );
HXLINE(  21)		this->leftBlendV = ( (float)(((Float)-1.0)) );
HXLINE(  20)		this->leftBlendU = ( (float)(((Float)-1.0)) );
HXLINE(  18)		this->clipY = ( (float)(((Float)0.0)) );
HXLINE(  17)		this->clipX = ( (float)(((Float)0.0)) );
HXLINE(  16)		this->lastVisible = 0;
HXLINE(  15)		this->lastDamage = 0;
HXLINE(  14)		this->sink = ( (float)(((Float)0.0)) );
HXLINE(  13)		this->baseV = ( (float)(1) );
HXLINE(  12)		this->baseU = ( (float)(1) );
HXLINE(  10)		this->props = ::map::GroundLibrary_obj::defaultProps;
HXLINE(   9)		this->obj = null();
HXLINE(   8)		this->tileType = 255;
HXLINE(  35)		this->x = ( (unsigned short)(::Std_obj::_hx_int(( (Float)(x) ))) );
HXLINE(  36)		this->y = ( (unsigned short)(::Std_obj::_hx_int(( (Float)(y) ))) );
HXLINE(  37)		this->middleX = x;
HXLINE(  38)		this->middleY = y;
            	}

Dynamic Square_obj::__CreateEmpty() { return new Square_obj; }

void *Square_obj::_hx_vtable = 0;

Dynamic Square_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Square_obj > _hx_result = new Square_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Square_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03fa0c39;
}


::hx::ObjectPtr< Square_obj > Square_obj::__new(float x,float y) {
	::hx::ObjectPtr< Square_obj > __this = new Square_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< Square_obj > Square_obj::__alloc(::hx::Ctx *_hx_ctx,float x,float y) {
	Square_obj *__this = (Square_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Square_obj), true, "map.Square"));
	*(void **)__this = Square_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

Square_obj::Square_obj()
{
}

void Square_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Square);
	HX_MARK_MEMBER_NAME(tileType,"tileType");
	HX_MARK_MEMBER_NAME(obj,"obj");
	HX_MARK_MEMBER_NAME(props,"props");
	HX_MARK_MEMBER_NAME(animations,"animations");
	HX_MARK_MEMBER_NAME(baseU,"baseU");
	HX_MARK_MEMBER_NAME(baseV,"baseV");
	HX_MARK_MEMBER_NAME(sink,"sink");
	HX_MARK_MEMBER_NAME(lastDamage,"lastDamage");
	HX_MARK_MEMBER_NAME(lastVisible,"lastVisible");
	HX_MARK_MEMBER_NAME(clipX,"clipX");
	HX_MARK_MEMBER_NAME(clipY,"clipY");
	HX_MARK_MEMBER_NAME(leftBlendU,"leftBlendU");
	HX_MARK_MEMBER_NAME(leftBlendV,"leftBlendV");
	HX_MARK_MEMBER_NAME(topBlendU,"topBlendU");
	HX_MARK_MEMBER_NAME(topBlendV,"topBlendV");
	HX_MARK_MEMBER_NAME(rightBlendU,"rightBlendU");
	HX_MARK_MEMBER_NAME(rightBlendV,"rightBlendV");
	HX_MARK_MEMBER_NAME(bottomBlendU,"bottomBlendU");
	HX_MARK_MEMBER_NAME(bottomBlendV,"bottomBlendV");
	HX_MARK_MEMBER_NAME(middleX,"middleX");
	HX_MARK_MEMBER_NAME(middleY,"middleY");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void Square_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tileType,"tileType");
	HX_VISIT_MEMBER_NAME(obj,"obj");
	HX_VISIT_MEMBER_NAME(props,"props");
	HX_VISIT_MEMBER_NAME(animations,"animations");
	HX_VISIT_MEMBER_NAME(baseU,"baseU");
	HX_VISIT_MEMBER_NAME(baseV,"baseV");
	HX_VISIT_MEMBER_NAME(sink,"sink");
	HX_VISIT_MEMBER_NAME(lastDamage,"lastDamage");
	HX_VISIT_MEMBER_NAME(lastVisible,"lastVisible");
	HX_VISIT_MEMBER_NAME(clipX,"clipX");
	HX_VISIT_MEMBER_NAME(clipY,"clipY");
	HX_VISIT_MEMBER_NAME(leftBlendU,"leftBlendU");
	HX_VISIT_MEMBER_NAME(leftBlendV,"leftBlendV");
	HX_VISIT_MEMBER_NAME(topBlendU,"topBlendU");
	HX_VISIT_MEMBER_NAME(topBlendV,"topBlendV");
	HX_VISIT_MEMBER_NAME(rightBlendU,"rightBlendU");
	HX_VISIT_MEMBER_NAME(rightBlendV,"rightBlendV");
	HX_VISIT_MEMBER_NAME(bottomBlendU,"bottomBlendU");
	HX_VISIT_MEMBER_NAME(bottomBlendV,"bottomBlendV");
	HX_VISIT_MEMBER_NAME(middleX,"middleX");
	HX_VISIT_MEMBER_NAME(middleY,"middleY");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

::hx::Val Square_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"obj") ) { return ::hx::Val( obj ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sink") ) { return ::hx::Val( sink ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { return ::hx::Val( props ); }
		if (HX_FIELD_EQ(inName,"baseU") ) { return ::hx::Val( baseU ); }
		if (HX_FIELD_EQ(inName,"baseV") ) { return ::hx::Val( baseV ); }
		if (HX_FIELD_EQ(inName,"clipX") ) { return ::hx::Val( clipX ); }
		if (HX_FIELD_EQ(inName,"clipY") ) { return ::hx::Val( clipY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"middleX") ) { return ::hx::Val( middleX ); }
		if (HX_FIELD_EQ(inName,"middleY") ) { return ::hx::Val( middleY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileType") ) { return ::hx::Val( tileType ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"topBlendU") ) { return ::hx::Val( topBlendU ); }
		if (HX_FIELD_EQ(inName,"topBlendV") ) { return ::hx::Val( topBlendV ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"animations") ) { return ::hx::Val( animations ); }
		if (HX_FIELD_EQ(inName,"lastDamage") ) { return ::hx::Val( lastDamage ); }
		if (HX_FIELD_EQ(inName,"leftBlendU") ) { return ::hx::Val( leftBlendU ); }
		if (HX_FIELD_EQ(inName,"leftBlendV") ) { return ::hx::Val( leftBlendV ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastVisible") ) { return ::hx::Val( lastVisible ); }
		if (HX_FIELD_EQ(inName,"rightBlendU") ) { return ::hx::Val( rightBlendU ); }
		if (HX_FIELD_EQ(inName,"rightBlendV") ) { return ::hx::Val( rightBlendV ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bottomBlendU") ) { return ::hx::Val( bottomBlendU ); }
		if (HX_FIELD_EQ(inName,"bottomBlendV") ) { return ::hx::Val( bottomBlendV ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Square_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< unsigned short >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< unsigned short >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"obj") ) { obj=inValue.Cast<  ::objects::GameObject >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sink") ) { sink=inValue.Cast< float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { props=inValue.Cast<  ::map::GroundProperties >(); return inValue; }
		if (HX_FIELD_EQ(inName,"baseU") ) { baseU=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"baseV") ) { baseV=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clipX") ) { clipX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clipY") ) { clipY=inValue.Cast< float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"middleX") ) { middleX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"middleY") ) { middleY=inValue.Cast< float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileType") ) { tileType=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"topBlendU") ) { topBlendU=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"topBlendV") ) { topBlendV=inValue.Cast< float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"animations") ) { animations=inValue.Cast<  ::objects::animation::Animations >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastDamage") ) { lastDamage=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftBlendU") ) { leftBlendU=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftBlendV") ) { leftBlendV=inValue.Cast< float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastVisible") ) { lastVisible=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightBlendU") ) { rightBlendU=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightBlendV") ) { rightBlendV=inValue.Cast< float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bottomBlendU") ) { bottomBlendU=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomBlendV") ) { bottomBlendV=inValue.Cast< float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Square_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tileType",08,19,0f,87));
	outFields->push(HX_("obj",f7,8f,54,00));
	outFields->push(HX_("props",70,e7,8f,c8));
	outFields->push(HX_("animations",ef,34,1c,83));
	outFields->push(HX_("baseU",24,27,ba,ad));
	outFields->push(HX_("baseV",25,27,ba,ad));
	outFields->push(HX_("sink",53,96,53,4c));
	outFields->push(HX_("lastDamage",65,73,bf,e8));
	outFields->push(HX_("lastVisible",bc,2c,d0,57));
	outFields->push(HX_("clipX",88,87,5e,48));
	outFields->push(HX_("clipY",89,87,5e,48));
	outFields->push(HX_("leftBlendU",4b,1a,67,d0));
	outFields->push(HX_("leftBlendV",4c,1a,67,d0));
	outFields->push(HX_("topBlendU",59,d7,91,69));
	outFields->push(HX_("topBlendV",5a,d7,91,69));
	outFields->push(HX_("rightBlendU",e0,2b,db,0a));
	outFields->push(HX_("rightBlendV",e1,2b,db,0a));
	outFields->push(HX_("bottomBlendU",2f,3c,48,1a));
	outFields->push(HX_("bottomBlendV",30,3c,48,1a));
	outFields->push(HX_("middleX",63,17,9a,86));
	outFields->push(HX_("middleY",64,17,9a,86));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Square_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Square_obj,tileType),HX_("tileType",08,19,0f,87)},
	{::hx::fsObject /*  ::objects::GameObject */ ,(int)offsetof(Square_obj,obj),HX_("obj",f7,8f,54,00)},
	{::hx::fsObject /*  ::map::GroundProperties */ ,(int)offsetof(Square_obj,props),HX_("props",70,e7,8f,c8)},
	{::hx::fsObject /*  ::objects::animation::Animations */ ,(int)offsetof(Square_obj,animations),HX_("animations",ef,34,1c,83)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,baseU),HX_("baseU",24,27,ba,ad)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,baseV),HX_("baseV",25,27,ba,ad)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,sink),HX_("sink",53,96,53,4c)},
	{::hx::fsInt,(int)offsetof(Square_obj,lastDamage),HX_("lastDamage",65,73,bf,e8)},
	{::hx::fsInt,(int)offsetof(Square_obj,lastVisible),HX_("lastVisible",bc,2c,d0,57)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,clipX),HX_("clipX",88,87,5e,48)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,clipY),HX_("clipY",89,87,5e,48)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,leftBlendU),HX_("leftBlendU",4b,1a,67,d0)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,leftBlendV),HX_("leftBlendV",4c,1a,67,d0)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,topBlendU),HX_("topBlendU",59,d7,91,69)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,topBlendV),HX_("topBlendV",5a,d7,91,69)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,rightBlendU),HX_("rightBlendU",e0,2b,db,0a)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,rightBlendV),HX_("rightBlendV",e1,2b,db,0a)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,bottomBlendU),HX_("bottomBlendU",2f,3c,48,1a)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,bottomBlendV),HX_("bottomBlendV",30,3c,48,1a)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,middleX),HX_("middleX",63,17,9a,86)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Square_obj,middleY),HX_("middleY",64,17,9a,86)},
	{::hx::fsUnknown /* unsigned short */ ,(int)offsetof(Square_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsUnknown /* unsigned short */ ,(int)offsetof(Square_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Square_obj_sStaticStorageInfo = 0;
#endif

static ::String Square_obj_sMemberFields[] = {
	HX_("tileType",08,19,0f,87),
	HX_("obj",f7,8f,54,00),
	HX_("props",70,e7,8f,c8),
	HX_("animations",ef,34,1c,83),
	HX_("baseU",24,27,ba,ad),
	HX_("baseV",25,27,ba,ad),
	HX_("sink",53,96,53,4c),
	HX_("lastDamage",65,73,bf,e8),
	HX_("lastVisible",bc,2c,d0,57),
	HX_("clipX",88,87,5e,48),
	HX_("clipY",89,87,5e,48),
	HX_("leftBlendU",4b,1a,67,d0),
	HX_("leftBlendV",4c,1a,67,d0),
	HX_("topBlendU",59,d7,91,69),
	HX_("topBlendV",5a,d7,91,69),
	HX_("rightBlendU",e0,2b,db,0a),
	HX_("rightBlendV",e1,2b,db,0a),
	HX_("bottomBlendU",2f,3c,48,1a),
	HX_("bottomBlendV",30,3c,48,1a),
	HX_("middleX",63,17,9a,86),
	HX_("middleY",64,17,9a,86),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	::String(null()) };

::hx::Class Square_obj::__mClass;

void Square_obj::__register()
{
	Square_obj _hx_dummy;
	Square_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.Square",4f,8c,a1,d9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Square_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Square_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Square_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Square_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace map
