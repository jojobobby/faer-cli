// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_map_AnimateProperties
#include <map/AnimateProperties.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fc8ec133bebd86b2_5_new,"map.AnimateProperties","new",0xe8afe574,"map.AnimateProperties.new","map/AnimateProperties.hx",5,0x3873eafd)
namespace map{

void AnimateProperties_obj::__construct( ::Xml animateXML){
            	HX_STACKFRAME(&_hx_pos_fc8ec133bebd86b2_5_new)
HXLINE(  12)		this->dy = ((Float)0.0);
HXLINE(  11)		this->dx = ((Float)0.0);
HXLINE(  10)		this->animType = 0;
HXLINE(  15)		bool _hx_tmp;
HXDLIN(  15)		if (::hx::IsNotNull( animateXML )) {
HXLINE(  15)			_hx_tmp = ::hx::IsNull( animateXML->firstElement() );
            		}
            		else {
HXLINE(  15)			_hx_tmp = true;
            		}
HXDLIN(  15)		if (_hx_tmp) {
HXLINE(  16)			return;
            		}
HXLINE(  18)		{
HXLINE(  18)			bool _hx_tmp1;
HXDLIN(  18)			if ((animateXML->nodeType != ::Xml_obj::Document)) {
HXLINE(  18)				_hx_tmp1 = (animateXML->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  18)				_hx_tmp1 = true;
            			}
HXDLIN(  18)			if (_hx_tmp1) {
HXLINE(  18)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(animateXML->nodeType)));
            			}
HXDLIN(  18)			::String _hx_switch_0 = animateXML->nodeValue;
            			if (  (_hx_switch_0==HX_("Flow",0e,44,97,2e)) ){
HXLINE(  22)				this->animType = 2;
HXDLIN(  22)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("Wave",d9,91,cb,39)) ){
HXLINE(  20)				this->animType = 1;
HXDLIN(  20)				goto _hx_goto_0;
            			}
            			_hx_goto_0:;
            		}
HXLINE(  25)		float _hx_tmp2;
HXDLIN(  25)		if (::hx::IsNotNull( animateXML->get(HX_("dx",94,57,00,00)) )) {
HXLINE(  25)			_hx_tmp2 = ( (float)(::Std_obj::parseFloat(animateXML->get(HX_("dx",94,57,00,00)))) );
            		}
            		else {
HXLINE(  25)			_hx_tmp2 = ( (float)(0) );
            		}
HXDLIN(  25)		this->dx = ( (Float)(_hx_tmp2) );
HXLINE(  26)		float _hx_tmp3;
HXDLIN(  26)		if (::hx::IsNotNull( animateXML->get(HX_("dy",95,57,00,00)) )) {
HXLINE(  26)			_hx_tmp3 = ( (float)(::Std_obj::parseFloat(animateXML->get(HX_("dy",95,57,00,00)))) );
            		}
            		else {
HXLINE(  26)			_hx_tmp3 = ( (float)(0) );
            		}
HXDLIN(  26)		this->dy = ( (Float)(_hx_tmp3) );
            	}

Dynamic AnimateProperties_obj::__CreateEmpty() { return new AnimateProperties_obj; }

void *AnimateProperties_obj::_hx_vtable = 0;

Dynamic AnimateProperties_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnimateProperties_obj > _hx_result = new AnimateProperties_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AnimateProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x51ff0cb8;
}


::hx::ObjectPtr< AnimateProperties_obj > AnimateProperties_obj::__new( ::Xml animateXML) {
	::hx::ObjectPtr< AnimateProperties_obj > __this = new AnimateProperties_obj();
	__this->__construct(animateXML);
	return __this;
}

::hx::ObjectPtr< AnimateProperties_obj > AnimateProperties_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml animateXML) {
	AnimateProperties_obj *__this = (AnimateProperties_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnimateProperties_obj), false, "map.AnimateProperties"));
	*(void **)__this = AnimateProperties_obj::_hx_vtable;
	__this->__construct(animateXML);
	return __this;
}

AnimateProperties_obj::AnimateProperties_obj()
{
}

::hx::Val AnimateProperties_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { return ::hx::Val( dx ); }
		if (HX_FIELD_EQ(inName,"dy") ) { return ::hx::Val( dy ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"animType") ) { return ::hx::Val( animType ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AnimateProperties_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"animType") ) { animType=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimateProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("animType",6b,81,5e,80));
	outFields->push(HX_("dx",94,57,00,00));
	outFields->push(HX_("dy",95,57,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AnimateProperties_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(AnimateProperties_obj,animType),HX_("animType",6b,81,5e,80)},
	{::hx::fsFloat,(int)offsetof(AnimateProperties_obj,dx),HX_("dx",94,57,00,00)},
	{::hx::fsFloat,(int)offsetof(AnimateProperties_obj,dy),HX_("dy",95,57,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AnimateProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String AnimateProperties_obj_sMemberFields[] = {
	HX_("animType",6b,81,5e,80),
	HX_("dx",94,57,00,00),
	HX_("dy",95,57,00,00),
	::String(null()) };

::hx::Class AnimateProperties_obj::__mClass;

void AnimateProperties_obj::__register()
{
	AnimateProperties_obj _hx_dummy;
	AnimateProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.AnimateProperties",82,5b,93,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnimateProperties_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnimateProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimateProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimateProperties_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace map
