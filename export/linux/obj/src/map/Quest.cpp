// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_map_Quest
#include <map/Quest.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e275deb11169f5ce_6_new,"map.Quest","new",0xb9d81562,"map.Quest.new","map/Quest.hx",6,0xade4954f)
HX_LOCAL_STACK_FRAME(_hx_pos_e275deb11169f5ce_17_setObject,"map.Quest","setObject",0xc597e683,"map.Quest.setObject","map/Quest.hx",17,0xade4954f)
HX_LOCAL_STACK_FRAME(_hx_pos_e275deb11169f5ce_25_completed,"map.Quest","completed",0x9fe9940d,"map.Quest.completed","map/Quest.hx",25,0xade4954f)
namespace map{

void Quest_obj::__construct( ::map::Map map){
            	HX_STACKFRAME(&_hx_pos_e275deb11169f5ce_6_new)
HXLINE(  11)		this->questOldAt = 0;
HXLINE(  10)		this->questAvailableAt = 0;
HXLINE(   8)		this->objectId = -1;
HXLINE(  14)		this->map = map;
            	}

Dynamic Quest_obj::__CreateEmpty() { return new Quest_obj; }

void *Quest_obj::_hx_vtable = 0;

Dynamic Quest_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Quest_obj > _hx_result = new Quest_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Quest_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78aab4a6;
}

void Quest_obj::setObject(int objectId){
            	HX_STACKFRAME(&_hx_pos_e275deb11169f5ce_17_setObject)
HXLINE(  18)		bool _hx_tmp;
HXDLIN(  18)		if ((this->objectId == -1)) {
HXLINE(  18)			_hx_tmp = (objectId != -1);
            		}
            		else {
HXLINE(  18)			_hx_tmp = false;
            		}
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  19)			this->questAvailableAt = (::lime::_hx_system::System_obj::getTimer() + 4000);
HXLINE(  20)			this->questOldAt = (this->questAvailableAt + 2000);
            		}
HXLINE(  22)		this->objectId = objectId;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quest_obj,setObject,(void))

void Quest_obj::completed(){
            	HX_STACKFRAME(&_hx_pos_e275deb11169f5ce_25_completed)
HXLINE(  26)		int _hx_tmp = (::lime::_hx_system::System_obj::getTimer() + 15000);
HXDLIN(  26)		this->questAvailableAt = ::Std_obj::_hx_int((( (Float)(_hx_tmp) ) - (::Math_obj::random() * ( (Float)(10000) ))));
HXLINE(  27)		this->questOldAt = (this->questAvailableAt + 2000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quest_obj,completed,(void))


::hx::ObjectPtr< Quest_obj > Quest_obj::__new( ::map::Map map) {
	::hx::ObjectPtr< Quest_obj > __this = new Quest_obj();
	__this->__construct(map);
	return __this;
}

::hx::ObjectPtr< Quest_obj > Quest_obj::__alloc(::hx::Ctx *_hx_ctx, ::map::Map map) {
	Quest_obj *__this = (Quest_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Quest_obj), true, "map.Quest"));
	*(void **)__this = Quest_obj::_hx_vtable;
	__this->__construct(map);
	return __this;
}

Quest_obj::Quest_obj()
{
}

void Quest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Quest);
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(objectId,"objectId");
	HX_MARK_MEMBER_NAME(questAvailableAt,"questAvailableAt");
	HX_MARK_MEMBER_NAME(questOldAt,"questOldAt");
	HX_MARK_END_CLASS();
}

void Quest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(objectId,"objectId");
	HX_VISIT_MEMBER_NAME(questAvailableAt,"questAvailableAt");
	HX_VISIT_MEMBER_NAME(questOldAt,"questOldAt");
}

::hx::Val Quest_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"objectId") ) { return ::hx::Val( objectId ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setObject") ) { return ::hx::Val( setObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"completed") ) { return ::hx::Val( completed_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"questOldAt") ) { return ::hx::Val( questOldAt ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"questAvailableAt") ) { return ::hx::Val( questAvailableAt ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Quest_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"objectId") ) { objectId=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"questOldAt") ) { questOldAt=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"questAvailableAt") ) { questAvailableAt=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Quest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("objectId",7a,2c,2c,83));
	outFields->push(HX_("questAvailableAt",5a,0a,71,b8));
	outFields->push(HX_("questOldAt",38,1a,fc,ad));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Quest_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::map::Map */ ,(int)offsetof(Quest_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsInt,(int)offsetof(Quest_obj,objectId),HX_("objectId",7a,2c,2c,83)},
	{::hx::fsInt,(int)offsetof(Quest_obj,questAvailableAt),HX_("questAvailableAt",5a,0a,71,b8)},
	{::hx::fsInt,(int)offsetof(Quest_obj,questOldAt),HX_("questOldAt",38,1a,fc,ad)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Quest_obj_sStaticStorageInfo = 0;
#endif

static ::String Quest_obj_sMemberFields[] = {
	HX_("objectId",7a,2c,2c,83),
	HX_("questAvailableAt",5a,0a,71,b8),
	HX_("questOldAt",38,1a,fc,ad),
	HX_("setObject",01,f4,e6,74),
	HX_("completed",8b,a1,38,4f),
	::String(null()) };

::hx::Class Quest_obj::__mClass;

void Quest_obj::__register()
{
	Quest_obj _hx_dummy;
	Quest_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.Quest",70,7c,cd,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Quest_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Quest_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Quest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Quest_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace map
