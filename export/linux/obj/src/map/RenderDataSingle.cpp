// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_map_RenderDataSingle
#include <map/RenderDataSingle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d4e099297b45a195_44_new,"map.RenderDataSingle","new",0xe28e276c,"map.RenderDataSingle.new","map/Map.hx",44,0x6334c415)
namespace map{

void RenderDataSingle_obj::__construct( ::lime::graphics::opengl::GLObject texture,float cosX,float sinX,float sinY,float cosY,float x,float y,float texelW,float texelH, ::Dynamic alpha){
            	HX_STACKFRAME(&_hx_pos_d4e099297b45a195_44_new)
HXLINE(  54)		this->alpha = ( (float)(((Float)1.0)) );
HXLINE(  44)		this->texture = texture;
HXDLIN(  44)		this->cosX = cosX;
HXDLIN(  44)		this->sinX = sinX;
HXDLIN(  44)		this->sinY = sinY;
HXDLIN(  44)		this->cosY = cosY;
HXDLIN(  44)		this->x = x;
HXDLIN(  44)		this->y = y;
HXDLIN(  44)		this->texelW = texelW;
HXDLIN(  44)		this->texelH = texelH;
HXDLIN(  44)		if (::hx::IsNotNull( alpha )) {
HXDLIN(  44)			this->alpha = ( (float)(alpha) );
            		}
            	}

Dynamic RenderDataSingle_obj::__CreateEmpty() { return new RenderDataSingle_obj; }

void *RenderDataSingle_obj::_hx_vtable = 0;

Dynamic RenderDataSingle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RenderDataSingle_obj > _hx_result = new RenderDataSingle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9]);
	return _hx_result;
}

bool RenderDataSingle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3421b520;
}


::hx::ObjectPtr< RenderDataSingle_obj > RenderDataSingle_obj::__new( ::lime::graphics::opengl::GLObject texture,float cosX,float sinX,float sinY,float cosY,float x,float y,float texelW,float texelH, ::Dynamic alpha) {
	::hx::ObjectPtr< RenderDataSingle_obj > __this = new RenderDataSingle_obj();
	__this->__construct(texture,cosX,sinX,sinY,cosY,x,y,texelW,texelH,alpha);
	return __this;
}

::hx::ObjectPtr< RenderDataSingle_obj > RenderDataSingle_obj::__alloc(::hx::Ctx *_hx_ctx, ::lime::graphics::opengl::GLObject texture,float cosX,float sinX,float sinY,float cosY,float x,float y,float texelW,float texelH, ::Dynamic alpha) {
	RenderDataSingle_obj *__this = (RenderDataSingle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RenderDataSingle_obj), true, "map.RenderDataSingle"));
	*(void **)__this = RenderDataSingle_obj::_hx_vtable;
	__this->__construct(texture,cosX,sinX,sinY,cosY,x,y,texelW,texelH,alpha);
	return __this;
}

RenderDataSingle_obj::RenderDataSingle_obj()
{
}

void RenderDataSingle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderDataSingle);
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(cosX,"cosX");
	HX_MARK_MEMBER_NAME(sinX,"sinX");
	HX_MARK_MEMBER_NAME(sinY,"sinY");
	HX_MARK_MEMBER_NAME(cosY,"cosY");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(texelW,"texelW");
	HX_MARK_MEMBER_NAME(texelH,"texelH");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_END_CLASS();
}

void RenderDataSingle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(cosX,"cosX");
	HX_VISIT_MEMBER_NAME(sinX,"sinX");
	HX_VISIT_MEMBER_NAME(sinY,"sinY");
	HX_VISIT_MEMBER_NAME(cosY,"cosY");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(texelW,"texelW");
	HX_VISIT_MEMBER_NAME(texelH,"texelH");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
}

::hx::Val RenderDataSingle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cosX") ) { return ::hx::Val( cosX ); }
		if (HX_FIELD_EQ(inName,"sinX") ) { return ::hx::Val( sinX ); }
		if (HX_FIELD_EQ(inName,"sinY") ) { return ::hx::Val( sinY ); }
		if (HX_FIELD_EQ(inName,"cosY") ) { return ::hx::Val( cosY ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"texelW") ) { return ::hx::Val( texelW ); }
		if (HX_FIELD_EQ(inName,"texelH") ) { return ::hx::Val( texelH ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RenderDataSingle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cosX") ) { cosX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sinX") ) { sinX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sinY") ) { sinY=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cosY") ) { cosY=inValue.Cast< float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"texelW") ) { texelW=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texelH") ) { texelH=inValue.Cast< float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RenderDataSingle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("cosX",31,be,c4,41));
	outFields->push(HX_("sinX",40,96,53,4c));
	outFields->push(HX_("sinY",41,96,53,4c));
	outFields->push(HX_("cosY",32,be,c4,41));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("texelW",89,0e,7d,d8));
	outFields->push(HX_("texelH",7a,0e,7d,d8));
	outFields->push(HX_("alpha",5e,a7,96,21));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RenderDataSingle_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(RenderDataSingle_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,cosX),HX_("cosX",31,be,c4,41)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,sinX),HX_("sinX",40,96,53,4c)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,sinY),HX_("sinY",41,96,53,4c)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,cosY),HX_("cosY",32,be,c4,41)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,texelW),HX_("texelW",89,0e,7d,d8)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,texelH),HX_("texelH",7a,0e,7d,d8)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(RenderDataSingle_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RenderDataSingle_obj_sStaticStorageInfo = 0;
#endif

static ::String RenderDataSingle_obj_sMemberFields[] = {
	HX_("texture",db,c8,e0,9e),
	HX_("cosX",31,be,c4,41),
	HX_("sinX",40,96,53,4c),
	HX_("sinY",41,96,53,4c),
	HX_("cosY",32,be,c4,41),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("texelW",89,0e,7d,d8),
	HX_("texelH",7a,0e,7d,d8),
	HX_("alpha",5e,a7,96,21),
	::String(null()) };

::hx::Class RenderDataSingle_obj::__mClass;

void RenderDataSingle_obj::__register()
{
	RenderDataSingle_obj _hx_dummy;
	RenderDataSingle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.RenderDataSingle",7a,41,bb,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RenderDataSingle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RenderDataSingle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderDataSingle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderDataSingle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace map
