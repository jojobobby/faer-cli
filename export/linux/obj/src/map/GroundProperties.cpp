// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_map_AnimateProperties
#include <map/AnimateProperties.h>
#endif
#ifndef INCLUDED_map_GroundProperties
#include <map/GroundProperties.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_04f153b157c9e844_5_new,"map.GroundProperties","new",0x40cb667e,"map.GroundProperties.new","map/GroundProperties.hx",5,0x83621751)
namespace map{

void GroundProperties_obj::__construct( ::Xml groundXML){
            	HX_GC_STACKFRAME(&_hx_pos_04f153b157c9e844_5_new)
HXLINE(  17)		this->sinking = false;
HXLINE(  16)		this->sink = false;
HXLINE(  15)		this->push = false;
HXLINE(  14)		this->vOffset = ((Float)0.0);
HXLINE(  13)		this->uOffset = ((Float)0.0);
HXLINE(  12)		this->speed = ((Float)1.0);
HXLINE(  11)		this->blendPriority = -1;
HXLINE(   9)		this->damage = 0;
HXLINE(   8)		this->noWalk = true;
HXLINE(   7)		this->objId = HX_("",00,00,00,00);
HXLINE(   6)		this->objType = 0;
HXLINE(  20)		int _hx_tmp;
HXDLIN(  20)		if (::hx::IsNotNull( groundXML->get(HX_("type",ba,f2,08,4d)) )) {
HXLINE(  20)			_hx_tmp = ( (int)(::Std_obj::parseInt(groundXML->get(HX_("type",ba,f2,08,4d)))) );
            		}
            		else {
HXLINE(  20)			_hx_tmp = 0;
            		}
HXDLIN(  20)		this->objType = _hx_tmp;
HXLINE(  21)		::String tmp = groundXML->get(HX_("id",db,5b,00,00));
HXDLIN(  21)		::String _hx_tmp1;
HXDLIN(  21)		if (::hx::IsNotNull( tmp )) {
HXLINE(  21)			_hx_tmp1 = tmp;
            		}
            		else {
HXLINE(  21)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(  21)		this->objId = _hx_tmp1;
HXLINE(  22)		this->noWalk = ( (bool)(groundXML->elementsNamed(HX_("NoWalk",0a,12,1c,53))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  23)		int _hx_tmp2;
HXDLIN(  23)		if (( (bool)(groundXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  23)			 ::Xml _this = ( ( ::Xml)(groundXML->elementsNamed(HX_("Damage",8f,04,79,52))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  23)			bool _hx_tmp3;
HXDLIN(  23)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  23)				_hx_tmp3 = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  23)				_hx_tmp3 = false;
            			}
HXDLIN(  23)			if (_hx_tmp3) {
HXLINE(  23)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN(  23)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  23)			bool _hx_tmp4;
HXDLIN(  23)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  23)				_hx_tmp4 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  23)				_hx_tmp4 = true;
            			}
HXDLIN(  23)			if (_hx_tmp4) {
HXLINE(  23)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN(  23)			_hx_tmp2 = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
            		}
            		else {
HXLINE(  23)			_hx_tmp2 = 0;
            		}
HXDLIN(  23)		this->damage = _hx_tmp2;
HXLINE(  24)		this->push = ( (bool)(groundXML->elementsNamed(HX_("Push",fa,3d,3a,35))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  25)		int _hx_tmp5;
HXDLIN(  25)		if (( (bool)(groundXML->elementsNamed(HX_("BlendPriority",b5,a8,5f,2b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  25)			 ::Xml _this2 = ( ( ::Xml)(groundXML->elementsNamed(HX_("BlendPriority",b5,a8,5f,2b))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  25)			bool _hx_tmp6;
HXDLIN(  25)			if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE(  25)				_hx_tmp6 = (_this2->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  25)				_hx_tmp6 = false;
            			}
HXDLIN(  25)			if (_hx_tmp6) {
HXLINE(  25)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            			}
HXDLIN(  25)			 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  25)			bool _hx_tmp7;
HXDLIN(  25)			if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE(  25)				_hx_tmp7 = (_this3->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  25)				_hx_tmp7 = true;
            			}
HXDLIN(  25)			if (_hx_tmp7) {
HXLINE(  25)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            			}
HXDLIN(  25)			_hx_tmp5 = ( (int)(::Std_obj::parseInt(_this3->nodeValue)) );
            		}
            		else {
HXLINE(  25)			_hx_tmp5 = 0;
            		}
HXDLIN(  25)		this->blendPriority = _hx_tmp5;
HXLINE(  26)		float _hx_tmp8;
HXDLIN(  26)		if (( (bool)(groundXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  26)			 ::Xml _this4 = ( ( ::Xml)(groundXML->elementsNamed(HX_("Speed",67,07,97,14))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  26)			bool _hx_tmp9;
HXDLIN(  26)			if ((_this4->nodeType != ::Xml_obj::Document)) {
HXLINE(  26)				_hx_tmp9 = (_this4->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  26)				_hx_tmp9 = false;
            			}
HXDLIN(  26)			if (_hx_tmp9) {
HXLINE(  26)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this4->nodeType)));
            			}
HXDLIN(  26)			 ::Xml _this5 = _this4->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  26)			bool _hx_tmp10;
HXDLIN(  26)			if ((_this5->nodeType != ::Xml_obj::Document)) {
HXLINE(  26)				_hx_tmp10 = (_this5->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  26)				_hx_tmp10 = true;
            			}
HXDLIN(  26)			if (_hx_tmp10) {
HXLINE(  26)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this5->nodeType)));
            			}
HXDLIN(  26)			_hx_tmp8 = ( (float)(::Std_obj::parseFloat(_this5->nodeValue)) );
            		}
            		else {
HXLINE(  26)			_hx_tmp8 = ( (float)(((Float)1.0)) );
            		}
HXDLIN(  26)		this->speed = ( (Float)(_hx_tmp8) );
HXLINE(  27)		int _hx_tmp11;
HXDLIN(  27)		if (( (bool)(groundXML->elementsNamed(HX_("XOffset",0b,de,34,e0))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  27)			 ::Xml _this6 = ( ( ::Xml)(groundXML->elementsNamed(HX_("XOffset",0b,de,34,e0))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  27)			bool _hx_tmp12;
HXDLIN(  27)			if ((_this6->nodeType != ::Xml_obj::Document)) {
HXLINE(  27)				_hx_tmp12 = (_this6->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  27)				_hx_tmp12 = false;
            			}
HXDLIN(  27)			if (_hx_tmp12) {
HXLINE(  27)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this6->nodeType)));
            			}
HXDLIN(  27)			 ::Xml _this7 = _this6->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  27)			bool _hx_tmp13;
HXDLIN(  27)			if ((_this7->nodeType != ::Xml_obj::Document)) {
HXLINE(  27)				_hx_tmp13 = (_this7->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  27)				_hx_tmp13 = true;
            			}
HXDLIN(  27)			if (_hx_tmp13) {
HXLINE(  27)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this7->nodeType)));
            			}
HXDLIN(  27)			_hx_tmp11 = ( (int)(::Std_obj::parseInt(_this7->nodeValue)) );
            		}
            		else {
HXLINE(  27)			_hx_tmp11 = 0;
            		}
HXDLIN(  27)		this->uOffset = ( (Float)(_hx_tmp11) );
HXLINE(  28)		int _hx_tmp14;
HXDLIN(  28)		if (( (bool)(groundXML->elementsNamed(HX_("YOffset",cc,54,ca,09))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  28)			 ::Xml _this8 = ( ( ::Xml)(groundXML->elementsNamed(HX_("YOffset",cc,54,ca,09))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  28)			bool _hx_tmp15;
HXDLIN(  28)			if ((_this8->nodeType != ::Xml_obj::Document)) {
HXLINE(  28)				_hx_tmp15 = (_this8->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(  28)				_hx_tmp15 = false;
            			}
HXDLIN(  28)			if (_hx_tmp15) {
HXLINE(  28)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this8->nodeType)));
            			}
HXDLIN(  28)			 ::Xml _this9 = _this8->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  28)			bool _hx_tmp16;
HXDLIN(  28)			if ((_this9->nodeType != ::Xml_obj::Document)) {
HXLINE(  28)				_hx_tmp16 = (_this9->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(  28)				_hx_tmp16 = true;
            			}
HXDLIN(  28)			if (_hx_tmp16) {
HXLINE(  28)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this9->nodeType)));
            			}
HXDLIN(  28)			_hx_tmp14 = ( (int)(::Std_obj::parseInt(_this9->nodeValue)) );
            		}
            		else {
HXLINE(  28)			_hx_tmp14 = 0;
            		}
HXDLIN(  28)		this->vOffset = ( (Float)(_hx_tmp14) );
HXLINE(  29)		this->push = ( (bool)(groundXML->elementsNamed(HX_("Push",fa,3d,3a,35))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  30)		this->sink = ( (bool)(groundXML->elementsNamed(HX_("Sink",73,c2,2c,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  31)		this->sinking = ( (bool)(groundXML->elementsNamed(HX_("Sinking",4f,14,0c,14))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
HXLINE(  33)		if (( (bool)(groundXML->elementsNamed(HX_("Animate",81,02,9e,47))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  34)			this->animate =  ::map::AnimateProperties_obj::__alloc( HX_CTX ,( ( ::Xml)(groundXML->elementsNamed(HX_("Animate",81,02,9e,47))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) ));
            		}
            		else {
HXLINE(  36)			this->animate =  ::map::AnimateProperties_obj::__alloc( HX_CTX ,::Xml_obj::parse(HX_("",00,00,00,00)));
            		}
            	}

Dynamic GroundProperties_obj::__CreateEmpty() { return new GroundProperties_obj; }

void *GroundProperties_obj::_hx_vtable = 0;

Dynamic GroundProperties_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GroundProperties_obj > _hx_result = new GroundProperties_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GroundProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5261f716;
}


::hx::ObjectPtr< GroundProperties_obj > GroundProperties_obj::__new( ::Xml groundXML) {
	::hx::ObjectPtr< GroundProperties_obj > __this = new GroundProperties_obj();
	__this->__construct(groundXML);
	return __this;
}

::hx::ObjectPtr< GroundProperties_obj > GroundProperties_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml groundXML) {
	GroundProperties_obj *__this = (GroundProperties_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GroundProperties_obj), true, "map.GroundProperties"));
	*(void **)__this = GroundProperties_obj::_hx_vtable;
	__this->__construct(groundXML);
	return __this;
}

GroundProperties_obj::GroundProperties_obj()
{
}

void GroundProperties_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GroundProperties);
	HX_MARK_MEMBER_NAME(objType,"objType");
	HX_MARK_MEMBER_NAME(objId,"objId");
	HX_MARK_MEMBER_NAME(noWalk,"noWalk");
	HX_MARK_MEMBER_NAME(damage,"damage");
	HX_MARK_MEMBER_NAME(animate,"animate");
	HX_MARK_MEMBER_NAME(blendPriority,"blendPriority");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(uOffset,"uOffset");
	HX_MARK_MEMBER_NAME(vOffset,"vOffset");
	HX_MARK_MEMBER_NAME(push,"push");
	HX_MARK_MEMBER_NAME(sink,"sink");
	HX_MARK_MEMBER_NAME(sinking,"sinking");
	HX_MARK_END_CLASS();
}

void GroundProperties_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objType,"objType");
	HX_VISIT_MEMBER_NAME(objId,"objId");
	HX_VISIT_MEMBER_NAME(noWalk,"noWalk");
	HX_VISIT_MEMBER_NAME(damage,"damage");
	HX_VISIT_MEMBER_NAME(animate,"animate");
	HX_VISIT_MEMBER_NAME(blendPriority,"blendPriority");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(uOffset,"uOffset");
	HX_VISIT_MEMBER_NAME(vOffset,"vOffset");
	HX_VISIT_MEMBER_NAME(push,"push");
	HX_VISIT_MEMBER_NAME(sink,"sink");
	HX_VISIT_MEMBER_NAME(sinking,"sinking");
}

::hx::Val GroundProperties_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push ); }
		if (HX_FIELD_EQ(inName,"sink") ) { return ::hx::Val( sink ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"objId") ) { return ::hx::Val( objId ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"noWalk") ) { return ::hx::Val( noWalk ); }
		if (HX_FIELD_EQ(inName,"damage") ) { return ::hx::Val( damage ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objType") ) { return ::hx::Val( objType ); }
		if (HX_FIELD_EQ(inName,"animate") ) { return ::hx::Val( animate ); }
		if (HX_FIELD_EQ(inName,"uOffset") ) { return ::hx::Val( uOffset ); }
		if (HX_FIELD_EQ(inName,"vOffset") ) { return ::hx::Val( vOffset ); }
		if (HX_FIELD_EQ(inName,"sinking") ) { return ::hx::Val( sinking ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"blendPriority") ) { return ::hx::Val( blendPriority ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GroundProperties_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { push=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sink") ) { sink=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"objId") ) { objId=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"noWalk") ) { noWalk=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"damage") ) { damage=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objType") ) { objType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animate") ) { animate=inValue.Cast<  ::map::AnimateProperties >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uOffset") ) { uOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vOffset") ) { vOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sinking") ) { sinking=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"blendPriority") ) { blendPriority=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GroundProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("objType",51,76,23,77));
	outFields->push(HX_("objId",b2,fb,91,2a));
	outFields->push(HX_("noWalk",ea,9d,87,1e));
	outFields->push(HX_("damage",6f,90,e4,1d));
	outFields->push(HX_("animate",a1,da,4c,7a));
	outFields->push(HX_("blendPriority",d5,58,6f,e3));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("uOffset",e8,51,23,96));
	outFields->push(HX_("vOffset",a9,c8,b8,bf));
	outFields->push(HX_("push",da,11,61,4a));
	outFields->push(HX_("sink",53,96,53,4c));
	outFields->push(HX_("sinking",6f,ec,ba,46));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GroundProperties_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(GroundProperties_obj,objType),HX_("objType",51,76,23,77)},
	{::hx::fsString,(int)offsetof(GroundProperties_obj,objId),HX_("objId",b2,fb,91,2a)},
	{::hx::fsBool,(int)offsetof(GroundProperties_obj,noWalk),HX_("noWalk",ea,9d,87,1e)},
	{::hx::fsInt,(int)offsetof(GroundProperties_obj,damage),HX_("damage",6f,90,e4,1d)},
	{::hx::fsObject /*  ::map::AnimateProperties */ ,(int)offsetof(GroundProperties_obj,animate),HX_("animate",a1,da,4c,7a)},
	{::hx::fsInt,(int)offsetof(GroundProperties_obj,blendPriority),HX_("blendPriority",d5,58,6f,e3)},
	{::hx::fsFloat,(int)offsetof(GroundProperties_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsFloat,(int)offsetof(GroundProperties_obj,uOffset),HX_("uOffset",e8,51,23,96)},
	{::hx::fsFloat,(int)offsetof(GroundProperties_obj,vOffset),HX_("vOffset",a9,c8,b8,bf)},
	{::hx::fsBool,(int)offsetof(GroundProperties_obj,push),HX_("push",da,11,61,4a)},
	{::hx::fsBool,(int)offsetof(GroundProperties_obj,sink),HX_("sink",53,96,53,4c)},
	{::hx::fsBool,(int)offsetof(GroundProperties_obj,sinking),HX_("sinking",6f,ec,ba,46)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GroundProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String GroundProperties_obj_sMemberFields[] = {
	HX_("objType",51,76,23,77),
	HX_("objId",b2,fb,91,2a),
	HX_("noWalk",ea,9d,87,1e),
	HX_("damage",6f,90,e4,1d),
	HX_("animate",a1,da,4c,7a),
	HX_("blendPriority",d5,58,6f,e3),
	HX_("speed",87,97,69,81),
	HX_("uOffset",e8,51,23,96),
	HX_("vOffset",a9,c8,b8,bf),
	HX_("push",da,11,61,4a),
	HX_("sink",53,96,53,4c),
	HX_("sinking",6f,ec,ba,46),
	::String(null()) };

::hx::Class GroundProperties_obj::__mClass;

void GroundProperties_obj::__register()
{
	GroundProperties_obj _hx_dummy;
	GroundProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.GroundProperties",8c,0f,c3,e5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GroundProperties_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GroundProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GroundProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GroundProperties_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace map
