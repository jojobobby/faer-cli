// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_map_RegionLibrary
#include <map/RegionLibrary.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_de749f582fe41643_10_parseFromXML,"map.RegionLibrary","parseFromXML",0x01920bb3,"map.RegionLibrary.parseFromXML","map/RegionLibrary.hx",10,0xc0a918ea)
HX_LOCAL_STACK_FRAME(_hx_pos_de749f582fe41643_19_getIdFromType,"map.RegionLibrary","getIdFromType",0x9181e93c,"map.RegionLibrary.getIdFromType","map/RegionLibrary.hx",19,0xc0a918ea)
HX_LOCAL_STACK_FRAME(_hx_pos_de749f582fe41643_27_getColor,"map.RegionLibrary","getColor",0x9a9c5586,"map.RegionLibrary.getColor","map/RegionLibrary.hx",27,0xc0a918ea)
HX_LOCAL_STACK_FRAME(_hx_pos_de749f582fe41643_7_boot,"map.RegionLibrary","boot",0x06c5d84b,"map.RegionLibrary.boot","map/RegionLibrary.hx",7,0xc0a918ea)
HX_LOCAL_STACK_FRAME(_hx_pos_de749f582fe41643_8_boot,"map.RegionLibrary","boot",0x06c5d84b,"map.RegionLibrary.boot","map/RegionLibrary.hx",8,0xc0a918ea)
namespace map{

void RegionLibrary_obj::__construct() { }

Dynamic RegionLibrary_obj::__CreateEmpty() { return new RegionLibrary_obj; }

void *RegionLibrary_obj::_hx_vtable = 0;

Dynamic RegionLibrary_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RegionLibrary_obj > _hx_result = new RegionLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RegionLibrary_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4a51eb8f;
}

 ::haxe::ds::IntMap RegionLibrary_obj::xmlLibrary;

 ::haxe::ds::StringMap RegionLibrary_obj::idToType;

void RegionLibrary_obj::parseFromXML( ::Xml xml){
            	HX_STACKFRAME(&_hx_pos_de749f582fe41643_10_parseFromXML)
HXLINE(  11)		int objType = 0;
HXLINE(  12)		{
HXLINE(  12)			 ::Dynamic regionXML = xml->elementsNamed(HX_("Region",14,35,21,35));
HXDLIN(  12)			while(( (bool)(regionXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  12)				 ::Xml regionXML1 = ( ( ::Xml)(regionXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  13)				objType = ( (int)(::Std_obj::parseInt(regionXML1->get(HX_("type",ba,f2,08,4d)))) );
HXLINE(  14)				::map::RegionLibrary_obj::xmlLibrary->set(objType,regionXML1);
HXLINE(  15)				 ::haxe::ds::StringMap _hx_tmp = ::map::RegionLibrary_obj::idToType;
HXDLIN(  15)				_hx_tmp->set(regionXML1->get(HX_("id",db,5b,00,00)),objType);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RegionLibrary_obj,parseFromXML,(void))

::String RegionLibrary_obj::getIdFromType(int objType){
            	HX_STACKFRAME(&_hx_pos_de749f582fe41643_19_getIdFromType)
HXLINE(  20)		 ::Xml objectXML = ( ( ::Xml)(::map::RegionLibrary_obj::xmlLibrary->get(objType)) );
HXLINE(  21)		if (::hx::IsNull( objectXML )) {
HXLINE(  22)			return null();
            		}
HXLINE(  24)		return objectXML->get(HX_("id",db,5b,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RegionLibrary_obj,getIdFromType,return )

int RegionLibrary_obj::getColor(int objType){
            	HX_STACKFRAME(&_hx_pos_de749f582fe41643_27_getColor)
HXLINE(  28)		 ::Xml objectXML = ( ( ::Xml)(::map::RegionLibrary_obj::xmlLibrary->get(objType)) );
HXLINE(  29)		if (::hx::IsNull( objectXML )) {
HXLINE(  30)			return 0;
            		}
HXLINE(  32)		 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("Color",43,e1,89,dd))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  32)		bool _hx_tmp;
HXDLIN(  32)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  32)			_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  32)			_hx_tmp = false;
            		}
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  32)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(  32)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  32)		bool _hx_tmp1;
HXDLIN(  32)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  32)			_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  32)			_hx_tmp1 = true;
            		}
HXDLIN(  32)		if (_hx_tmp1) {
HXLINE(  32)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN(  32)		return ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RegionLibrary_obj,getColor,return )


RegionLibrary_obj::RegionLibrary_obj()
{
}

bool RegionLibrary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"idToType") ) { outValue = ( idToType ); return true; }
		if (HX_FIELD_EQ(inName,"getColor") ) { outValue = getColor_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xmlLibrary") ) { outValue = ( xmlLibrary ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"parseFromXML") ) { outValue = parseFromXML_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getIdFromType") ) { outValue = getIdFromType_dyn(); return true; }
	}
	return false;
}

bool RegionLibrary_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"idToType") ) { idToType=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xmlLibrary") ) { xmlLibrary=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RegionLibrary_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo RegionLibrary_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &RegionLibrary_obj::xmlLibrary,HX_("xmlLibrary",e4,59,bb,21)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &RegionLibrary_obj::idToType,HX_("idToType",10,04,6a,6b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void RegionLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RegionLibrary_obj::xmlLibrary,"xmlLibrary");
	HX_MARK_MEMBER_NAME(RegionLibrary_obj::idToType,"idToType");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RegionLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RegionLibrary_obj::xmlLibrary,"xmlLibrary");
	HX_VISIT_MEMBER_NAME(RegionLibrary_obj::idToType,"idToType");
};

#endif

::hx::Class RegionLibrary_obj::__mClass;

static ::String RegionLibrary_obj_sStaticFields[] = {
	HX_("xmlLibrary",e4,59,bb,21),
	HX_("idToType",10,04,6a,6b),
	HX_("parseFromXML",9a,76,e0,b1),
	HX_("getIdFromType",75,08,d1,25),
	HX_("getColor",ed,80,33,aa),
	::String(null())
};

void RegionLibrary_obj::__register()
{
	RegionLibrary_obj _hx_dummy;
	RegionLibrary_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("map.RegionLibrary",f5,82,9c,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RegionLibrary_obj::__GetStatic;
	__mClass->mSetStaticField = &RegionLibrary_obj::__SetStatic;
	__mClass->mMarkFunc = RegionLibrary_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RegionLibrary_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< RegionLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RegionLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegionLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegionLibrary_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RegionLibrary_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_de749f582fe41643_7_boot)
HXDLIN(   7)		xmlLibrary =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_de749f582fe41643_8_boot)
HXDLIN(   8)		idToType =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace map
