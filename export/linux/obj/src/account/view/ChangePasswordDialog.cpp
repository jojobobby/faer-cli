// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_account_ChangePasswordData
#include <account/ChangePasswordData.h>
#endif
#ifndef INCLUDED_account_services_ChangePasswordTask
#include <account/services/ChangePasswordTask.h>
#endif
#ifndef INCLUDED_account_view_AccountDetailDialog
#include <account/view/AccountDetailDialog.h>
#endif
#ifndef INCLUDED_account_view_ChangePasswordDialog
#include <account/view/ChangePasswordDialog.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_lib_tasks_TaskData
#include <lib/tasks/TaskData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_ui_ClickableText
#include <ui/ClickableText.h>
#endif
#ifndef INCLUDED_ui_Frame
#include <ui/Frame.h>
#endif
#ifndef INCLUDED_ui_TextInputField
#include <ui/TextInputField.h>
#endif
#ifndef INCLUDED_ui_dialogs_DialogsView
#include <ui/dialogs/DialogsView.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8505aa94d67562ea_16_new,"account.view.ChangePasswordDialog","new",0xc3ce220d,"account.view.ChangePasswordDialog.new","account/view/ChangePasswordDialog.hx",16,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_29_onAdded,"account.view.ChangePasswordDialog","onAdded",0xcc4a9f4e,"account.view.ChangePasswordDialog.onAdded","account/view/ChangePasswordDialog.hx",29,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_34_onRemoved,"account.view.ChangePasswordDialog","onRemoved",0xca3929ae,"account.view.ChangePasswordDialog.onRemoved","account/view/ChangePasswordDialog.hx",34,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_44_onChange,"account.view.ChangePasswordDialog","onChange",0x0d5d0322,"account.view.ChangePasswordDialog.onChange","account/view/ChangePasswordDialog.hx",44,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_54_onChange,"account.view.ChangePasswordDialog","onChange",0x0d5d0322,"account.view.ChangePasswordDialog.onChange","account/view/ChangePasswordDialog.hx",54,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_65_isCurrentPasswordValid,"account.view.ChangePasswordDialog","isCurrentPasswordValid",0x7752eb65,"account.view.ChangePasswordDialog.isCurrentPasswordValid","account/view/ChangePasswordDialog.hx",65,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_73_isNewPasswordValid,"account.view.ChangePasswordDialog","isNewPasswordValid",0x7ea7285e,"account.view.ChangePasswordDialog.isNewPasswordValid","account/view/ChangePasswordDialog.hx",73,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_81_isNewPasswordVerified,"account.view.ChangePasswordDialog","isNewPasswordVerified",0xa0805de6,"account.view.ChangePasswordDialog.isNewPasswordVerified","account/view/ChangePasswordDialog.hx",81,0xe124cda3)
HX_LOCAL_STACK_FRAME(_hx_pos_8505aa94d67562ea_41_onCancel,"account.view.ChangePasswordDialog","onCancel",0x0e1e5f2c,"account.view.ChangePasswordDialog.onCancel","account/view/ChangePasswordDialog.hx",41,0xe124cda3)
namespace account{
namespace view{

void ChangePasswordDialog_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_8505aa94d67562ea_16_new)
HXLINE(  17)		super::__construct(HX_("Change your password",98,90,63,ff),HX_("Cancel",9a,61,c8,ec),HX_("Submit",38,cc,9a,ce),null());
HXLINE(  18)		this->password =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("Password",3b,df,81,22),true,HX_("",00,00,00,00));
HXLINE(  19)		this->addTextInputField(this->password);
HXLINE(  20)		this->newPassword =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("New Password",1b,6f,60,c3),true,HX_("",00,00,00,00));
HXLINE(  21)		this->addTextInputField(this->newPassword);
HXLINE(  22)		this->retypeNewPassword =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("Retype New Password",0e,3b,c4,d3),true,HX_("",00,00,00,00));
HXLINE(  23)		this->addTextInputField(this->retypeNewPassword);
HXLINE(  24)		this->leftButton->addEventListener(HX_("click",48,7c,5e,48),::account::view::ChangePasswordDialog_obj::onCancel_dyn(),null(),null(),null());
HXLINE(  25)		this->rightButton->addEventListener(HX_("click",48,7c,5e,48),this->onChange_dyn(),null(),null(),null());
HXLINE(  26)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic ChangePasswordDialog_obj::__CreateEmpty() { return new ChangePasswordDialog_obj; }

void *ChangePasswordDialog_obj::_hx_vtable = 0;

Dynamic ChangePasswordDialog_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChangePasswordDialog_obj > _hx_result = new ChangePasswordDialog_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ChangePasswordDialog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3517a2f1) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x3517a2f1;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x4a08f421 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void ChangePasswordDialog_obj::onAdded( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_8505aa94d67562ea_29_onAdded)
HXLINE(  30)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  31)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChangePasswordDialog_obj,onAdded,(void))

void ChangePasswordDialog_obj::onRemoved( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_8505aa94d67562ea_34_onRemoved)
HXLINE(  35)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null());
HXLINE(  36)		this->leftButton->removeEventListener(HX_("click",48,7c,5e,48),::account::view::ChangePasswordDialog_obj::onCancel_dyn(),null());
HXLINE(  37)		this->rightButton->removeEventListener(HX_("click",48,7c,5e,48),this->onChange_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChangePasswordDialog_obj,onRemoved,(void))

void ChangePasswordDialog_obj::onChange( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_8505aa94d67562ea_44_onChange)
HXDLIN(  44)		 ::account::view::ChangePasswordDialog _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  45)		 ::account::ChangePasswordData data = null();
HXLINE(  46)		bool _hx_tmp;
HXDLIN(  46)		bool _hx_tmp1;
HXDLIN(  46)		if (this->isCurrentPasswordValid()) {
HXLINE(  46)			_hx_tmp1 = this->isNewPasswordValid();
            		}
            		else {
HXLINE(  46)			_hx_tmp1 = false;
            		}
HXDLIN(  46)		if (_hx_tmp1) {
HXLINE(  46)			_hx_tmp = this->isNewPasswordVerified();
            		}
            		else {
HXLINE(  46)			_hx_tmp = false;
            		}
HXDLIN(  46)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::account::view::ChangePasswordDialog,_gthis) HXARGC(1)
            			void _hx_run( ::lib::tasks::TaskData taskData){
            				HX_GC_STACKFRAME(&_hx_pos_8505aa94d67562ea_54_onChange)
HXLINE(  54)				if (taskData->success) {
HXLINE(  55)					 ::ui::dialogs::DialogsView _hx_tmp = ::Global_obj::layers->dialogs;
HXDLIN(  55)					_hx_tmp->openDialog( ::account::view::AccountDetailDialog_obj::__alloc( HX_CTX ));
            				}
            				else {
HXLINE(  57)					_gthis->password->setError(taskData->error);
HXLINE(  58)					_gthis->enable();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  47)			this->disable();
HXLINE(  48)			data =  ::account::ChangePasswordData_obj::__alloc( HX_CTX );
HXLINE(  49)			data->currentPassword = this->password->text();
HXLINE(  50)			data->newPassword = this->newPassword->text();
HXLINE(  51)			::account::services::ChangePasswordTask_obj::changePwData = data;
HXLINE(  53)			::Global_obj::changePasswordTask->finished->once( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  61)			::Global_obj::changePasswordTask->start();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChangePasswordDialog_obj,onChange,(void))

bool ChangePasswordDialog_obj::isCurrentPasswordValid(){
            	HX_STACKFRAME(&_hx_pos_8505aa94d67562ea_65_isCurrentPasswordValid)
HXLINE(  66)		bool isValid = (this->password->text().length >= 5);
HXLINE(  67)		if (!(isValid)) {
HXLINE(  68)			this->password->setError(HX_("Incorrect password",96,d7,29,74));
            		}
HXLINE(  70)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChangePasswordDialog_obj,isCurrentPasswordValid,return )

bool ChangePasswordDialog_obj::isNewPasswordValid(){
            	HX_STACKFRAME(&_hx_pos_8505aa94d67562ea_73_isNewPasswordValid)
HXLINE(  74)		bool isValid = (this->newPassword->text().length >= 5);
HXLINE(  75)		if (!(isValid)) {
HXLINE(  76)			this->newPassword->setError(HX_("New password too short",8b,f4,c7,ca));
            		}
HXLINE(  78)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChangePasswordDialog_obj,isNewPasswordValid,return )

bool ChangePasswordDialog_obj::isNewPasswordVerified(){
            	HX_STACKFRAME(&_hx_pos_8505aa94d67562ea_81_isNewPasswordVerified)
HXLINE(  82)		::String isValid = this->newPassword->text();
HXDLIN(  82)		bool isValid1 = (isValid == this->retypeNewPassword->text());
HXLINE(  83)		if (!(isValid1)) {
HXLINE(  84)			this->retypeNewPassword->setError(HX_("Password does not match",96,17,cc,90));
            		}
HXLINE(  86)		return isValid1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChangePasswordDialog_obj,isNewPasswordVerified,return )

void ChangePasswordDialog_obj::onCancel( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_8505aa94d67562ea_41_onCancel)
HXDLIN(  41)		 ::ui::dialogs::DialogsView _hx_tmp = ::Global_obj::layers->dialogs;
HXDLIN(  41)		_hx_tmp->openDialog( ::account::view::AccountDetailDialog_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ChangePasswordDialog_obj,onCancel,(void))


::hx::ObjectPtr< ChangePasswordDialog_obj > ChangePasswordDialog_obj::__new() {
	::hx::ObjectPtr< ChangePasswordDialog_obj > __this = new ChangePasswordDialog_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ChangePasswordDialog_obj > ChangePasswordDialog_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ChangePasswordDialog_obj *__this = (ChangePasswordDialog_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChangePasswordDialog_obj), true, "account.view.ChangePasswordDialog"));
	*(void **)__this = ChangePasswordDialog_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ChangePasswordDialog_obj::ChangePasswordDialog_obj()
{
}

void ChangePasswordDialog_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChangePasswordDialog);
	HX_MARK_MEMBER_NAME(password,"password");
	HX_MARK_MEMBER_NAME(newPassword,"newPassword");
	HX_MARK_MEMBER_NAME(retypeNewPassword,"retypeNewPassword");
	 ::ui::Frame_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChangePasswordDialog_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(password,"password");
	HX_VISIT_MEMBER_NAME(newPassword,"newPassword");
	HX_VISIT_MEMBER_NAME(retypeNewPassword,"retypeNewPassword");
	 ::ui::Frame_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChangePasswordDialog_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"password") ) { return ::hx::Val( password ); }
		if (HX_FIELD_EQ(inName,"onChange") ) { return ::hx::Val( onChange_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRemoved") ) { return ::hx::Val( onRemoved_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"newPassword") ) { return ::hx::Val( newPassword ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"retypeNewPassword") ) { return ::hx::Val( retypeNewPassword ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"isNewPasswordValid") ) { return ::hx::Val( isNewPasswordValid_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"isNewPasswordVerified") ) { return ::hx::Val( isNewPasswordVerified_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"isCurrentPasswordValid") ) { return ::hx::Val( isCurrentPasswordValid_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChangePasswordDialog_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"onCancel") ) { outValue = onCancel_dyn(); return true; }
	}
	return false;
}

::hx::Val ChangePasswordDialog_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"password") ) { password=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"newPassword") ) { newPassword=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"retypeNewPassword") ) { retypeNewPassword=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ChangePasswordDialog_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("password",1b,23,d0,48));
	outFields->push(HX_("newPassword",9b,0f,ad,6d));
	outFields->push(HX_("retypeNewPassword",ae,58,21,33));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChangePasswordDialog_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(ChangePasswordDialog_obj,password),HX_("password",1b,23,d0,48)},
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(ChangePasswordDialog_obj,newPassword),HX_("newPassword",9b,0f,ad,6d)},
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(ChangePasswordDialog_obj,retypeNewPassword),HX_("retypeNewPassword",ae,58,21,33)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ChangePasswordDialog_obj_sStaticStorageInfo = 0;
#endif

static ::String ChangePasswordDialog_obj_sMemberFields[] = {
	HX_("password",1b,23,d0,48),
	HX_("newPassword",9b,0f,ad,6d),
	HX_("retypeNewPassword",ae,58,21,33),
	HX_("onAdded",21,73,81,b2),
	HX_("onRemoved",41,d8,aa,ca),
	HX_("onChange",ef,87,1f,97),
	HX_("isCurrentPasswordValid",f2,5c,73,dc),
	HX_("isNewPasswordValid",6b,8f,52,70),
	HX_("isNewPasswordVerified",f9,1c,47,e9),
	::String(null()) };

::hx::Class ChangePasswordDialog_obj::__mClass;

static ::String ChangePasswordDialog_obj_sStaticFields[] = {
	HX_("onCancel",f9,e3,e0,97),
	::String(null())
};

void ChangePasswordDialog_obj::__register()
{
	ChangePasswordDialog_obj _hx_dummy;
	ChangePasswordDialog_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("account.view.ChangePasswordDialog",9b,17,1f,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChangePasswordDialog_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChangePasswordDialog_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChangePasswordDialog_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChangePasswordDialog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChangePasswordDialog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChangePasswordDialog_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace account
} // end namespace view
