// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_account_Account
#include <account/Account.h>
#endif
#ifndef INCLUDED_account_services_GetCharListTask
#include <account/services/GetCharListTask.h>
#endif
#ifndef INCLUDED_account_services_LoginTask
#include <account/services/LoginTask.h>
#endif
#ifndef INCLUDED_account_view_ForgotPasswordDialog
#include <account/view/ForgotPasswordDialog.h>
#endif
#ifndef INCLUDED_account_view_LoginDialog
#include <account/view/LoginDialog.h>
#endif
#ifndef INCLUDED_account_view_RegisterDialog
#include <account/view/RegisterDialog.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_lib_tasks_TaskData
#include <lib/tasks/TaskData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_screens_CharacterSelectionScreen
#include <screens/CharacterSelectionScreen.h>
#endif
#ifndef INCLUDED_ui_ClickableText
#include <ui/ClickableText.h>
#endif
#ifndef INCLUDED_ui_Frame
#include <ui/Frame.h>
#endif
#ifndef INCLUDED_ui_TextInputField
#include <ui/TextInputField.h>
#endif
#ifndef INCLUDED_ui_dialogs_DialogsView
#include <ui/dialogs/DialogsView.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7ef5adc10b78050f_21_new,"account.view.LoginDialog","new",0x9b166dbb,"account.view.LoginDialog.new","account/view/LoginDialog.hx",21,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_44_onAdded,"account.view.LoginDialog","onAdded",0x24cd59fc,"account.view.LoginDialog.onAdded","account/view/LoginDialog.hx",44,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_49_onRemoved,"account.view.LoginDialog","onRemoved",0x54e26bdc,"account.view.LoginDialog.onRemoved","account/view/LoginDialog.hx",49,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_69_isPasswordValid,"account.view.LoginDialog","isPasswordValid",0x3881a372,"account.view.LoginDialog.isPasswordValid","account/view/LoginDialog.hx",69,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_77_isEmailValid,"account.view.LoginDialog","isEmailValid",0x3120580f,"account.view.LoginDialog.isEmailValid","account/view/LoginDialog.hx",77,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_86_onSignIn,"account.view.LoginDialog","onSignIn",0x245128c6,"account.view.LoginDialog.onSignIn","account/view/LoginDialog.hx",86,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_97_loginComplete,"account.view.LoginDialog","loginComplete",0x3c8ba45d,"account.view.LoginDialog.loginComplete","account/view/LoginDialog.hx",97,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_102_charListComplete,"account.view.LoginDialog","charListComplete",0xe558e0f2,"account.view.LoginDialog.charListComplete","account/view/LoginDialog.hx",102,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_58_onRegister,"account.view.LoginDialog","onRegister",0x14c00ea7,"account.view.LoginDialog.onRegister","account/view/LoginDialog.hx",58,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_62_onCancel,"account.view.LoginDialog","onCancel",0x27fefcbe,"account.view.LoginDialog.onCancel","account/view/LoginDialog.hx",62,0xe9b42675)
HX_LOCAL_STACK_FRAME(_hx_pos_7ef5adc10b78050f_66_onForgot,"account.view.LoginDialog","onForgot",0x6d551d27,"account.view.LoginDialog.onForgot","account/view/LoginDialog.hx",66,0xe9b42675)
namespace account{
namespace view{

void LoginDialog_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_7ef5adc10b78050f_21_new)
HXLINE(  22)		super::__construct(HX_("Sign in",c8,3f,02,0e),HX_("Cancel",9a,61,c8,ec),HX_("Sign in",c8,3f,02,0e),null());
HXLINE(  24)		this->email =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("Email",fc,3e,fc,02),false,HX_("",00,00,00,00));
HXLINE(  25)		this->addTextInputField(this->email);
HXLINE(  27)		this->password =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("Password",3b,df,81,22),true,HX_("",00,00,00,00));
HXLINE(  28)		this->addTextInputField(this->password);
HXLINE(  30)		this->forgotText =  ::ui::ClickableText_obj::__alloc( HX_CTX ,12,false,HX_("Forgot your password?  Click here",7c,66,db,bb));
HXLINE(  31)		this->addNavigationText(this->forgotText);
HXLINE(  32)		this->forgotText->addEventListener(HX_("click",48,7c,5e,48),::account::view::LoginDialog_obj::onForgot_dyn(),null(),null(),null());
HXLINE(  34)		this->registerText =  ::ui::ClickableText_obj::__alloc( HX_CTX ,12,false,HX_("New user?  Click here to Register",44,1c,31,3c));
HXLINE(  35)		this->addNavigationText(this->registerText);
HXLINE(  36)		this->registerText->addEventListener(HX_("click",48,7c,5e,48),::account::view::LoginDialog_obj::onRegister_dyn(),null(),null(),null());
HXLINE(  38)		this->leftButton->addEventListener(HX_("click",48,7c,5e,48),::account::view::LoginDialog_obj::onCancel_dyn(),null(),null(),null());
HXLINE(  39)		this->rightButton->addEventListener(HX_("click",48,7c,5e,48),this->onSignIn_dyn(),null(),null(),null());
HXLINE(  41)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic LoginDialog_obj::__CreateEmpty() { return new LoginDialog_obj; }

void *LoginDialog_obj::_hx_vtable = 0;

Dynamic LoginDialog_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LoginDialog_obj > _hx_result = new LoginDialog_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LoginDialog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3517a2f1) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x3517a2f1;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3791321f || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void LoginDialog_obj::onAdded( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_7ef5adc10b78050f_44_onAdded)
HXLINE(  45)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  46)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,onAdded,(void))

void LoginDialog_obj::onRemoved( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_7ef5adc10b78050f_49_onRemoved)
HXLINE(  50)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null());
HXLINE(  51)		this->forgotText->removeEventListener(HX_("click",48,7c,5e,48),::account::view::LoginDialog_obj::onForgot_dyn(),null());
HXLINE(  52)		this->registerText->removeEventListener(HX_("click",48,7c,5e,48),::account::view::LoginDialog_obj::onRegister_dyn(),null());
HXLINE(  53)		this->leftButton->removeEventListener(HX_("click",48,7c,5e,48),::account::view::LoginDialog_obj::onCancel_dyn(),null());
HXLINE(  54)		this->rightButton->removeEventListener(HX_("click",48,7c,5e,48),this->onSignIn_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,onRemoved,(void))

bool LoginDialog_obj::isPasswordValid(){
            	HX_STACKFRAME(&_hx_pos_7ef5adc10b78050f_69_isPasswordValid)
HXLINE(  70)		bool isValid = (this->password->text() != HX_("",00,00,00,00));
HXLINE(  71)		if (!(isValid)) {
HXLINE(  72)			this->password->setError(HX_("Password too short",cb,f0,64,db));
            		}
HXLINE(  74)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LoginDialog_obj,isPasswordValid,return )

bool LoginDialog_obj::isEmailValid(){
            	HX_STACKFRAME(&_hx_pos_7ef5adc10b78050f_77_isEmailValid)
HXLINE(  78)		bool isValid = (this->email->text() != HX_("",00,00,00,00));
HXLINE(  79)		if (!(isValid)) {
HXLINE(  80)			this->email->setError(HX_("Not a valid email address",60,f8,d9,6a));
            		}
HXLINE(  82)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LoginDialog_obj,isEmailValid,return )

void LoginDialog_obj::onSignIn( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_7ef5adc10b78050f_86_onSignIn)
HXDLIN(  86)		bool _hx_tmp;
HXDLIN(  86)		if (this->isEmailValid()) {
HXDLIN(  86)			_hx_tmp = this->isPasswordValid();
            		}
            		else {
HXDLIN(  86)			_hx_tmp = false;
            		}
HXDLIN(  86)		if (_hx_tmp) {
HXLINE(  87)			::account::Account_obj::email = this->email->text();
HXLINE(  88)			::account::Account_obj::password = this->password->text();
HXLINE(  90)			this->disable();
HXLINE(  92)			::Global_obj::loginTask->finished->once(this->loginComplete_dyn());
HXLINE(  93)			::Global_obj::loginTask->start();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,onSignIn,(void))

void LoginDialog_obj::loginComplete( ::lib::tasks::TaskData _){
            	HX_STACKFRAME(&_hx_pos_7ef5adc10b78050f_97_loginComplete)
HXLINE(  98)		::Global_obj::charListTask->finished->once(this->charListComplete_dyn());
HXLINE(  99)		::Global_obj::charListTask->start();
            	}


HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,loginComplete,(void))

void LoginDialog_obj::charListComplete( ::lib::tasks::TaskData _){
            	HX_GC_STACKFRAME(&_hx_pos_7ef5adc10b78050f_102_charListComplete)
HXLINE( 103)		::Global_obj::layers->dialogs->closeDialogs();
HXLINE( 104)		::Global_obj::invalidate();
HXLINE( 105)		::Global_obj::setScreenValid( ::screens::CharacterSelectionScreen_obj::__alloc( HX_CTX ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,charListComplete,(void))

void LoginDialog_obj::onRegister( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_7ef5adc10b78050f_58_onRegister)
HXDLIN(  58)		 ::ui::dialogs::DialogsView _hx_tmp = ::Global_obj::layers->dialogs;
HXDLIN(  58)		_hx_tmp->openDialog( ::account::view::RegisterDialog_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,onRegister,(void))

void LoginDialog_obj::onCancel( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_7ef5adc10b78050f_62_onCancel)
HXDLIN(  62)		::Global_obj::layers->dialogs->closeDialogs();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,onCancel,(void))

void LoginDialog_obj::onForgot( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_7ef5adc10b78050f_66_onForgot)
HXDLIN(  66)		 ::ui::dialogs::DialogsView _hx_tmp = ::Global_obj::layers->dialogs;
HXDLIN(  66)		_hx_tmp->openDialog( ::account::view::ForgotPasswordDialog_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoginDialog_obj,onForgot,(void))


::hx::ObjectPtr< LoginDialog_obj > LoginDialog_obj::__new() {
	::hx::ObjectPtr< LoginDialog_obj > __this = new LoginDialog_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< LoginDialog_obj > LoginDialog_obj::__alloc(::hx::Ctx *_hx_ctx) {
	LoginDialog_obj *__this = (LoginDialog_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LoginDialog_obj), true, "account.view.LoginDialog"));
	*(void **)__this = LoginDialog_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LoginDialog_obj::LoginDialog_obj()
{
}

void LoginDialog_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LoginDialog);
	HX_MARK_MEMBER_NAME(email,"email");
	HX_MARK_MEMBER_NAME(password,"password");
	HX_MARK_MEMBER_NAME(forgotText,"forgotText");
	HX_MARK_MEMBER_NAME(registerText,"registerText");
	 ::ui::Frame_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LoginDialog_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(email,"email");
	HX_VISIT_MEMBER_NAME(password,"password");
	HX_VISIT_MEMBER_NAME(forgotText,"forgotText");
	HX_VISIT_MEMBER_NAME(registerText,"registerText");
	 ::ui::Frame_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val LoginDialog_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { return ::hx::Val( email ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"password") ) { return ::hx::Val( password ); }
		if (HX_FIELD_EQ(inName,"onSignIn") ) { return ::hx::Val( onSignIn_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRemoved") ) { return ::hx::Val( onRemoved_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forgotText") ) { return ::hx::Val( forgotText ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"registerText") ) { return ::hx::Val( registerText ); }
		if (HX_FIELD_EQ(inName,"isEmailValid") ) { return ::hx::Val( isEmailValid_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loginComplete") ) { return ::hx::Val( loginComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isPasswordValid") ) { return ::hx::Val( isPasswordValid_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"charListComplete") ) { return ::hx::Val( charListComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LoginDialog_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"onCancel") ) { outValue = onCancel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onForgot") ) { outValue = onForgot_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onRegister") ) { outValue = onRegister_dyn(); return true; }
	}
	return false;
}

::hx::Val LoginDialog_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { email=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"password") ) { password=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forgotText") ) { forgotText=inValue.Cast<  ::ui::ClickableText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"registerText") ) { registerText=inValue.Cast<  ::ui::ClickableText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LoginDialog_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("email",1c,cf,ce,6f));
	outFields->push(HX_("password",1b,23,d0,48));
	outFields->push(HX_("forgotText",30,34,dd,ab));
	outFields->push(HX_("registerText",b0,0c,e9,c8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LoginDialog_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(LoginDialog_obj,email),HX_("email",1c,cf,ce,6f)},
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(LoginDialog_obj,password),HX_("password",1b,23,d0,48)},
	{::hx::fsObject /*  ::ui::ClickableText */ ,(int)offsetof(LoginDialog_obj,forgotText),HX_("forgotText",30,34,dd,ab)},
	{::hx::fsObject /*  ::ui::ClickableText */ ,(int)offsetof(LoginDialog_obj,registerText),HX_("registerText",b0,0c,e9,c8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LoginDialog_obj_sStaticStorageInfo = 0;
#endif

static ::String LoginDialog_obj_sMemberFields[] = {
	HX_("email",1c,cf,ce,6f),
	HX_("password",1b,23,d0,48),
	HX_("forgotText",30,34,dd,ab),
	HX_("registerText",b0,0c,e9,c8),
	HX_("onAdded",21,73,81,b2),
	HX_("onRemoved",41,d8,aa,ca),
	HX_("isPasswordValid",97,e9,5a,aa),
	HX_("isEmailValid",ca,f8,25,2e),
	HX_("onSignIn",01,10,33,94),
	HX_("loginComplete",42,a7,72,a4),
	HX_("charListComplete",2d,fb,9c,11),
	::String(null()) };

::hx::Class LoginDialog_obj::__mClass;

static ::String LoginDialog_obj_sStaticFields[] = {
	HX_("onRegister",a2,7a,56,ae),
	HX_("onCancel",f9,e3,e0,97),
	HX_("onForgot",62,04,37,dd),
	::String(null())
};

void LoginDialog_obj::__register()
{
	LoginDialog_obj _hx_dummy;
	LoginDialog_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("account.view.LoginDialog",49,74,d0,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LoginDialog_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LoginDialog_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LoginDialog_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LoginDialog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoginDialog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoginDialog_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace account
} // end namespace view
