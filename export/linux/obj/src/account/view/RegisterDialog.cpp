// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_account_AccountData
#include <account/AccountData.h>
#endif
#ifndef INCLUDED_account_services_GetCharListTask
#include <account/services/GetCharListTask.h>
#endif
#ifndef INCLUDED_account_services_RegisterAccountTask
#include <account/services/RegisterAccountTask.h>
#endif
#ifndef INCLUDED_account_view_AccountDetailDialog
#include <account/view/AccountDetailDialog.h>
#endif
#ifndef INCLUDED_account_view_FormField
#include <account/view/FormField.h>
#endif
#ifndef INCLUDED_account_view_LabeledField
#include <account/view/LabeledField.h>
#endif
#ifndef INCLUDED_account_view_LoginDialog
#include <account/view/LoginDialog.h>
#endif
#ifndef INCLUDED_account_view_RegisterDialog
#include <account/view/RegisterDialog.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_lib_tasks_TaskData
#include <lib/tasks/TaskData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_ClickableText
#include <ui/ClickableText.h>
#endif
#ifndef INCLUDED_ui_Frame
#include <ui/Frame.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_dialogs_DialogsView
#include <ui/dialogs/DialogsView.h>
#endif
#ifndef INCLUDED_util_EmptySignal
#include <util/EmptySignal.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f7eb957c10ff681f_15_new,"account.view.RegisterDialog","new",0x538e37c5,"account.view.RegisterDialog.new","account/view/RegisterDialog.hx",15,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_71_onAdded,"account.view.RegisterDialog","onAdded",0x97f3f106,"account.view.RegisterDialog.onAdded","account/view/RegisterDialog.hx",71,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_76_onRemoved,"account.view.RegisterDialog","onRemoved",0xd0245966,"account.view.RegisterDialog.onRemoved","account/view/RegisterDialog.hx",76,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_91_displayErrors,"account.view.RegisterDialog","displayErrors",0xc76cb732,"account.view.RegisterDialog.displayErrors","account/view/RegisterDialog.hx",91,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_97_areInputsValid,"account.view.RegisterDialog","areInputsValid",0x815455da,"account.view.RegisterDialog.areInputsValid","account/view/RegisterDialog.hx",97,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_107_isNameValid,"account.view.RegisterDialog","isNameValid",0x81a5cdcc,"account.view.RegisterDialog.isNameValid","account/view/RegisterDialog.hx",107,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_115_isEmailValid,"account.view.RegisterDialog","isEmailValid",0x7747fcc5,"account.view.RegisterDialog.isEmailValid","account/view/RegisterDialog.hx",115,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_124_isPasswordValid,"account.view.RegisterDialog","isPasswordValid",0xe405547c,"account.view.RegisterDialog.isPasswordValid","account/view/RegisterDialog.hx",124,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_132_isPasswordVerified,"account.view.RegisterDialog","isPasswordVerified",0x931a1888,"account.view.RegisterDialog.isPasswordVerified","account/view/RegisterDialog.hx",132,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_140_clearErrors,"account.view.RegisterDialog","clearErrors",0x5d0d657d,"account.view.RegisterDialog.clearErrors","account/view/RegisterDialog.hx",140,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_146_displayErrorText,"account.view.RegisterDialog","displayErrorText",0xa6fbc36e,"account.view.RegisterDialog.displayErrorText","account/view/RegisterDialog.hx",146,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_160_sendData,"account.view.RegisterDialog","sendData",0xb4ecfe0d,"account.view.RegisterDialog.sendData","account/view/RegisterDialog.hx",160,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_163_sendData,"account.view.RegisterDialog","sendData",0xb4ecfe0d,"account.view.RegisterDialog.sendData","account/view/RegisterDialog.hx",163,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_152_sendData,"account.view.RegisterDialog","sendData",0xb4ecfe0d,"account.view.RegisterDialog.sendData","account/view/RegisterDialog.hx",152,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_179_onRegister,"account.view.RegisterDialog","onRegister",0x732df9dd,"account.view.RegisterDialog.onRegister","account/view/RegisterDialog.hx",179,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_83_onCancel,"account.view.RegisterDialog","onCancel",0x769c8e74,"account.view.RegisterDialog.onCancel","account/view/RegisterDialog.hx",83,0xc69f5eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_f7eb957c10ff681f_87_onSignIn,"account.view.RegisterDialog","onSignIn",0x72eeba7c,"account.view.RegisterDialog.onSignIn","account/view/RegisterDialog.hx",87,0xc69f5eeb)
namespace account{
namespace view{

void RegisterDialog_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f7eb957c10ff681f_15_new)
HXLINE(  29)		this->errors = ::Array_obj< ::String >::__new();
HXLINE(  38)		super::__construct(HX_("Register in order to save your progress",4c,6a,ad,1d),HX_("Cancel",9a,61,c8,ec),HX_("Register",83,62,51,aa),326);
HXLINE(  40)		this->nameInput =  ::account::view::LabeledField_obj::__alloc( HX_CTX ,HX_("Name",6b,9e,d8,33),false,275,null());
HXLINE(  41)		this->emailInput =  ::account::view::LabeledField_obj::__alloc( HX_CTX ,HX_("Email",fc,3e,fc,02),false,275,null());
HXLINE(  42)		this->passwordInput =  ::account::view::LabeledField_obj::__alloc( HX_CTX ,HX_("Password",3b,df,81,22),true,275,null());
HXLINE(  43)		this->retypePasswordInput =  ::account::view::LabeledField_obj::__alloc( HX_CTX ,HX_("Retype Password",ae,f5,0d,f5),true,275,null());
HXLINE(  44)		this->tosText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,11776947,false,0,0,true);
HXLINE(  45)		this->tosText->setBold(true);
HXLINE(  46)		this->tosText->set_multiline(true);
HXLINE(  47)		this->tosText->set_htmlText((((((HX_("By clicking 'Register', you are indicating that you have<br>read and agreed to the <font color=\"#7777EE\"><a href=\"",85,e1,25,6b) + HX_("https://to.do/tos",b8,06,c4,33)) + HX_("\" target=\"_blank\">Terms of Use</a></font> and ",b9,d3,1f,02)) + HX_("<font color=\"#7777EE\"><a href=\"",9f,89,41,4f)) + HX_("https://to.do/privacy",68,4e,fd,d7)) + HX_("\" target=\"_blank\">Privacy Policy</a></font>",9d,88,c9,b7)));
HXLINE(  48)		this->tosText->updateMetrics();
HXLINE(  49)		 ::ui::SimpleText _hx_tmp = this->tosText;
HXDLIN(  49)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  50)		this->signInText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,11776947,false,0,0,true);
HXLINE(  51)		this->signInText->setBold(true);
HXLINE(  52)		this->signInText->set_htmlText(HX_("Already registered? <font color=\"#7777EE\"><a href=\"event:flash.events.TextEvent\">here</a></font> to sign in!",f4,5a,21,68));
HXLINE(  53)		this->signInText->updateMetrics();
HXLINE(  54)		 ::ui::SimpleText _hx_tmp1 = this->signInText;
HXDLIN(  54)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  55)		this->signInText->addEventListener(HX_("link",fa,17,b3,47),::account::view::RegisterDialog_obj::onSignIn_dyn(),null(),null(),null());
HXLINE(  56)		this->addLabeledField(this->nameInput);
HXLINE(  57)		this->addLabeledField(this->emailInput);
HXLINE(  58)		this->addLabeledField(this->passwordInput);
HXLINE(  59)		this->addLabeledField(this->retypePasswordInput);
HXLINE(  60)		this->addSpace(8);
HXLINE(  61)		this->addComponent(this->tosText,14);
HXLINE(  62)		this->addSpace(8);
HXLINE(  63)		this->addComponent(this->signInText,14);
HXLINE(  65)		this->leftButton->addEventListener(HX_("click",48,7c,5e,48),::account::view::RegisterDialog_obj::onCancel_dyn(),null(),null(),null());
HXLINE(  66)		this->rightButton->addEventListener(HX_("click",48,7c,5e,48),this->onRegister_dyn(),null(),null(),null());
HXLINE(  68)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic RegisterDialog_obj::__CreateEmpty() { return new RegisterDialog_obj; }

void *RegisterDialog_obj::_hx_vtable = 0;

Dynamic RegisterDialog_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RegisterDialog_obj > _hx_result = new RegisterDialog_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RegisterDialog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3517a2f1) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x3517a2f1;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7ec8a2ed;
		}
	}
}

void RegisterDialog_obj::onAdded( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_71_onAdded)
HXLINE(  72)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  73)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterDialog_obj,onAdded,(void))

void RegisterDialog_obj::onRemoved( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_76_onRemoved)
HXLINE(  77)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null());
HXLINE(  78)		this->leftButton->removeEventListener(HX_("click",48,7c,5e,48),::account::view::RegisterDialog_obj::onCancel_dyn(),null());
HXLINE(  79)		this->rightButton->removeEventListener(HX_("click",48,7c,5e,48),this->onRegister_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterDialog_obj,onRemoved,(void))

void RegisterDialog_obj::displayErrors(){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_91_displayErrors)
HXDLIN(  91)		if ((this->errors->length == 0)) {
HXLINE(  92)			this->clearErrors();
            		}
            		else {
HXLINE(  94)			::String _hx_tmp;
HXDLIN(  94)			if ((this->errors->length == 1)) {
HXLINE(  94)				_hx_tmp = this->errors->__get(0);
            			}
            			else {
HXLINE(  94)				_hx_tmp = HX_("Please fix the errors below",0c,40,50,e2);
            			}
HXDLIN(  94)			this->displayErrorText(_hx_tmp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,displayErrors,(void))

bool RegisterDialog_obj::areInputsValid(){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_97_areInputsValid)
HXLINE(  98)		this->errors->removeRange(0,this->errors->length);
HXLINE(  99)		bool isValid = true;
HXLINE( 100)		if (this->isNameValid()) {
HXLINE( 100)			isValid = true;
            		}
            		else {
HXLINE( 100)			isValid = false;
            		}
HXLINE( 101)		if (!(this->isEmailValid())) {
HXLINE( 101)			isValid = false;
            		}
HXLINE( 102)		if (!(this->isPasswordValid())) {
HXLINE( 102)			isValid = false;
            		}
HXLINE( 103)		if (!(this->isPasswordVerified())) {
HXLINE( 103)			isValid = false;
            		}
HXLINE( 104)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,areInputsValid,return )

bool RegisterDialog_obj::isNameValid(){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_107_isNameValid)
HXLINE( 108)		bool isValid = (this->nameInput->text().length < 10);
HXLINE( 109)		this->nameInput->setErrorHighlight(!(isValid));
HXLINE( 110)		if (!(isValid)) {
HXLINE( 111)			this->errors->push(HX_("Name too long",dd,52,42,4d));
            		}
HXLINE( 112)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,isNameValid,return )

bool RegisterDialog_obj::isEmailValid(){
            	HX_GC_STACKFRAME(&_hx_pos_f7eb957c10ff681f_115_isEmailValid)
HXLINE( 116)		 ::EReg regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}$",0e,ff,b7,77),HX_("i",69,00,00,00));
HXLINE( 117)		bool isValid = regex->match(this->emailInput->text());
HXLINE( 118)		this->emailInput->setErrorHighlight(!(isValid));
HXLINE( 119)		if (!(isValid)) {
HXLINE( 120)			this->errors->push(HX_("Not a valid email address",60,f8,d9,6a));
            		}
HXLINE( 121)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,isEmailValid,return )

bool RegisterDialog_obj::isPasswordValid(){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_124_isPasswordValid)
HXLINE( 125)		bool isValid = (this->passwordInput->text().length >= 5);
HXLINE( 126)		this->passwordInput->setErrorHighlight(!(isValid));
HXLINE( 127)		if (!(isValid)) {
HXLINE( 128)			this->errors->push(HX_("The password is too short",50,1f,3c,0b));
            		}
HXLINE( 129)		return isValid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,isPasswordValid,return )

bool RegisterDialog_obj::isPasswordVerified(){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_132_isPasswordVerified)
HXLINE( 133)		::String isValid = this->passwordInput->text();
HXDLIN( 133)		bool isValid1 = (isValid == this->retypePasswordInput->text());
HXLINE( 134)		this->retypePasswordInput->setErrorHighlight(!(isValid1));
HXLINE( 135)		if (!(isValid1)) {
HXLINE( 136)			this->errors->push(HX_("The password did not match",81,ae,03,78));
            		}
HXLINE( 137)		return isValid1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,isPasswordVerified,return )

void RegisterDialog_obj::clearErrors(){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_140_clearErrors)
HXLINE( 141)		this->titleText->set_text(HX_("Register in order to save your progress",4c,6a,ad,1d));
HXLINE( 142)		this->titleText->updateMetrics();
HXLINE( 143)		this->titleText->setColor(11776947);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,clearErrors,(void))

void RegisterDialog_obj::displayErrorText(::String value){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_146_displayErrorText)
HXLINE( 147)		this->titleText->set_text(value);
HXLINE( 148)		this->titleText->updateMetrics();
HXLINE( 149)		this->titleText->setColor(16549442);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterDialog_obj,displayErrorText,(void))

void RegisterDialog_obj::sendData(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::account::view::RegisterDialog,_gthis) HXARGC(1)
            		void _hx_run( ::lib::tasks::TaskData taskData){
            			HX_GC_STACKFRAME(&_hx_pos_f7eb957c10ff681f_160_sendData)
HXLINE( 160)			if (taskData->success) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::account::view::RegisterDialog,_gthis) HXARGC(1)
            				void _hx_run( ::lib::tasks::TaskData taskData){
            					HX_GC_STACKFRAME(&_hx_pos_f7eb957c10ff681f_163_sendData)
HXLINE( 163)					if (taskData->success) {
HXLINE( 164)						 ::ui::dialogs::DialogsView _hx_tmp = ::Global_obj::layers->dialogs;
HXDLIN( 164)						_hx_tmp->openDialog( ::account::view::AccountDetailDialog_obj::__alloc( HX_CTX ));
            					}
            					else {
HXLINE( 166)						_gthis->displayErrorText(taskData->error);
HXLINE( 167)						_gthis->enable();
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 161)				::Global_obj::updateAccount->emit();
HXLINE( 162)				::Global_obj::charListTask->finished->once( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 170)				::Global_obj::charListTask->start();
            			}
            			else {
HXLINE( 172)				_gthis->displayErrorText(taskData->error);
HXLINE( 173)				_gthis->enable();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f7eb957c10ff681f_152_sendData)
HXDLIN( 152)		 ::account::view::RegisterDialog _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 153)		 ::account::AccountData data =  ::account::AccountData_obj::__alloc( HX_CTX );
HXLINE( 154)		data->userName = this->nameInput->text();
HXLINE( 155)		data->email = this->emailInput->text();
HXLINE( 156)		data->password = this->passwordInput->text();
HXLINE( 157)		::account::services::RegisterAccountTask_obj::accountData = data;
HXLINE( 159)		::Global_obj::registerAccountTask->finished->once( ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 176)		::Global_obj::registerAccountTask->start();
            	}


HX_DEFINE_DYNAMIC_FUNC0(RegisterDialog_obj,sendData,(void))

void RegisterDialog_obj::onRegister( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_179_onRegister)
HXLINE( 180)		this->displayErrors();
HXLINE( 181)		if (this->areInputsValid()) {
HXLINE( 182)			this->sendData();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterDialog_obj,onRegister,(void))

void RegisterDialog_obj::onCancel( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_f7eb957c10ff681f_83_onCancel)
HXDLIN(  83)		::Global_obj::layers->dialogs->closeDialogs();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RegisterDialog_obj,onCancel,(void))

void RegisterDialog_obj::onSignIn( ::openfl::events::TextEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_f7eb957c10ff681f_87_onSignIn)
HXDLIN(  87)		 ::ui::dialogs::DialogsView _hx_tmp = ::Global_obj::layers->dialogs;
HXDLIN(  87)		_hx_tmp->openDialog( ::account::view::LoginDialog_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RegisterDialog_obj,onSignIn,(void))


::hx::ObjectPtr< RegisterDialog_obj > RegisterDialog_obj::__new() {
	::hx::ObjectPtr< RegisterDialog_obj > __this = new RegisterDialog_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< RegisterDialog_obj > RegisterDialog_obj::__alloc(::hx::Ctx *_hx_ctx) {
	RegisterDialog_obj *__this = (RegisterDialog_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RegisterDialog_obj), true, "account.view.RegisterDialog"));
	*(void **)__this = RegisterDialog_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RegisterDialog_obj::RegisterDialog_obj()
{
}

void RegisterDialog_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RegisterDialog);
	HX_MARK_MEMBER_NAME(errors,"errors");
	HX_MARK_MEMBER_NAME(nameInput,"nameInput");
	HX_MARK_MEMBER_NAME(emailInput,"emailInput");
	HX_MARK_MEMBER_NAME(passwordInput,"passwordInput");
	HX_MARK_MEMBER_NAME(retypePasswordInput,"retypePasswordInput");
	HX_MARK_MEMBER_NAME(signInText,"signInText");
	HX_MARK_MEMBER_NAME(tosText,"tosText");
	 ::ui::Frame_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RegisterDialog_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(errors,"errors");
	HX_VISIT_MEMBER_NAME(nameInput,"nameInput");
	HX_VISIT_MEMBER_NAME(emailInput,"emailInput");
	HX_VISIT_MEMBER_NAME(passwordInput,"passwordInput");
	HX_VISIT_MEMBER_NAME(retypePasswordInput,"retypePasswordInput");
	HX_VISIT_MEMBER_NAME(signInText,"signInText");
	HX_VISIT_MEMBER_NAME(tosText,"tosText");
	 ::ui::Frame_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val RegisterDialog_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"errors") ) { return ::hx::Val( errors ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tosText") ) { return ::hx::Val( tosText ); }
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sendData") ) { return ::hx::Val( sendData_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nameInput") ) { return ::hx::Val( nameInput ); }
		if (HX_FIELD_EQ(inName,"onRemoved") ) { return ::hx::Val( onRemoved_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"emailInput") ) { return ::hx::Val( emailInput ); }
		if (HX_FIELD_EQ(inName,"signInText") ) { return ::hx::Val( signInText ); }
		if (HX_FIELD_EQ(inName,"onRegister") ) { return ::hx::Val( onRegister_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isNameValid") ) { return ::hx::Val( isNameValid_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearErrors") ) { return ::hx::Val( clearErrors_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isEmailValid") ) { return ::hx::Val( isEmailValid_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"passwordInput") ) { return ::hx::Val( passwordInput ); }
		if (HX_FIELD_EQ(inName,"displayErrors") ) { return ::hx::Val( displayErrors_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"areInputsValid") ) { return ::hx::Val( areInputsValid_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isPasswordValid") ) { return ::hx::Val( isPasswordValid_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"displayErrorText") ) { return ::hx::Val( displayErrorText_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"isPasswordVerified") ) { return ::hx::Val( isPasswordVerified_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"retypePasswordInput") ) { return ::hx::Val( retypePasswordInput ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RegisterDialog_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"onCancel") ) { outValue = onCancel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onSignIn") ) { outValue = onSignIn_dyn(); return true; }
	}
	return false;
}

::hx::Val RegisterDialog_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"errors") ) { errors=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tosText") ) { tosText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nameInput") ) { nameInput=inValue.Cast<  ::account::view::LabeledField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"emailInput") ) { emailInput=inValue.Cast<  ::account::view::LabeledField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"signInText") ) { signInText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"passwordInput") ) { passwordInput=inValue.Cast<  ::account::view::LabeledField >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"retypePasswordInput") ) { retypePasswordInput=inValue.Cast<  ::account::view::LabeledField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RegisterDialog_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("errors",ab,83,68,51));
	outFields->push(HX_("nameInput",bf,91,d2,b7));
	outFields->push(HX_("emailInput",4e,1f,6c,e8));
	outFields->push(HX_("passwordInput",ef,ee,be,5f));
	outFields->push(HX_("retypePasswordInput",c2,e2,a5,a1));
	outFields->push(HX_("signInText",4f,fb,f0,85));
	outFields->push(HX_("tosText",65,8b,3e,a8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RegisterDialog_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(RegisterDialog_obj,errors),HX_("errors",ab,83,68,51)},
	{::hx::fsObject /*  ::account::view::LabeledField */ ,(int)offsetof(RegisterDialog_obj,nameInput),HX_("nameInput",bf,91,d2,b7)},
	{::hx::fsObject /*  ::account::view::LabeledField */ ,(int)offsetof(RegisterDialog_obj,emailInput),HX_("emailInput",4e,1f,6c,e8)},
	{::hx::fsObject /*  ::account::view::LabeledField */ ,(int)offsetof(RegisterDialog_obj,passwordInput),HX_("passwordInput",ef,ee,be,5f)},
	{::hx::fsObject /*  ::account::view::LabeledField */ ,(int)offsetof(RegisterDialog_obj,retypePasswordInput),HX_("retypePasswordInput",c2,e2,a5,a1)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(RegisterDialog_obj,signInText),HX_("signInText",4f,fb,f0,85)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(RegisterDialog_obj,tosText),HX_("tosText",65,8b,3e,a8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RegisterDialog_obj_sStaticStorageInfo = 0;
#endif

static ::String RegisterDialog_obj_sMemberFields[] = {
	HX_("errors",ab,83,68,51),
	HX_("nameInput",bf,91,d2,b7),
	HX_("emailInput",4e,1f,6c,e8),
	HX_("passwordInput",ef,ee,be,5f),
	HX_("retypePasswordInput",c2,e2,a5,a1),
	HX_("signInText",4f,fb,f0,85),
	HX_("tosText",65,8b,3e,a8),
	HX_("onAdded",21,73,81,b2),
	HX_("onRemoved",41,d8,aa,ca),
	HX_("displayErrors",8d,3f,cb,12),
	HX_("areInputsValid",1f,1d,ad,28),
	HX_("isNameValid",67,f9,ed,09),
	HX_("isEmailValid",ca,f8,25,2e),
	HX_("isPasswordValid",97,e9,5a,aa),
	HX_("isPasswordVerified",4d,66,88,3e),
	HX_("clearErrors",18,91,55,e5),
	HX_("displayErrorText",f3,a5,88,6b),
	HX_("sendData",92,53,31,d6),
	HX_("onRegister",a2,7a,56,ae),
	::String(null()) };

::hx::Class RegisterDialog_obj::__mClass;

static ::String RegisterDialog_obj_sStaticFields[] = {
	HX_("onCancel",f9,e3,e0,97),
	HX_("onSignIn",01,10,33,94),
	::String(null())
};

void RegisterDialog_obj::__register()
{
	RegisterDialog_obj _hx_dummy;
	RegisterDialog_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("account.view.RegisterDialog",53,f1,43,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RegisterDialog_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RegisterDialog_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RegisterDialog_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RegisterDialog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegisterDialog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegisterDialog_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace account
} // end namespace view
