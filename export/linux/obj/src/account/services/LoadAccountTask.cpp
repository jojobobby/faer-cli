// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_account_Account
#include <account/Account.h>
#endif
#ifndef INCLUDED_account_AccountData
#include <account/AccountData.h>
#endif
#ifndef INCLUDED_account_services_LoadAccountTask
#include <account/services/LoadAccountTask.h>
#endif
#ifndef INCLUDED_appengine_CompletionData
#include <appengine/CompletionData.h>
#endif
#ifndef INCLUDED_appengine_RequestHandler
#include <appengine/RequestHandler.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c92a5159228ffde_14_new,"account.services.LoadAccountTask","new",0xcd47396f,"account.services.LoadAccountTask.new","account/services/LoadAccountTask.hx",14,0x0dcaf8c1)
HX_LOCAL_STACK_FRAME(_hx_pos_2c92a5159228ffde_19_startTask,"account.services.LoadAccountTask","startTask",0x48945716,"account.services.LoadAccountTask.startTask","account/services/LoadAccountTask.hx",19,0x0dcaf8c1)
HX_LOCAL_STACK_FRAME(_hx_pos_2c92a5159228ffde_50_onComplete,"account.services.LoadAccountTask","onComplete",0x6faf3bc9,"account.services.LoadAccountTask.onComplete","account/services/LoadAccountTask.hx",50,0x0dcaf8c1)
namespace account{
namespace services{

void LoadAccountTask_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_2c92a5159228ffde_14_new)
HXLINE(  15)		this->data =  ::account::AccountData_obj::__alloc( HX_CTX );
HXLINE(  16)		super::__construct();
            	}

Dynamic LoadAccountTask_obj::__CreateEmpty() { return new LoadAccountTask_obj; }

void *LoadAccountTask_obj::_hx_vtable = 0;

Dynamic LoadAccountTask_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LoadAccountTask_obj > _hx_result = new LoadAccountTask_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LoadAccountTask_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1eb3a7a5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1eb3a7a5;
	} else {
		return inClassId==(int)0x7e99215e;
	}
}

void LoadAccountTask_obj::startTask(){
            	HX_STACKFRAME(&_hx_pos_2c92a5159228ffde_19_startTask)
HXLINE(  20)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  21)			if (::sys::FileSystem_obj::exists(HX_("login",69,d9,f3,78))) {
HXLINE(  22)				int _g = 0;
HXDLIN(  22)				::Array< ::String > _g1 = ::sys::io::File_obj::getContent(HX_("login",69,d9,f3,78)).split(HX_("\n",0a,00,00,00));
HXDLIN(  22)				while((_g < _g1->length)){
HXLINE(  22)					::String s = _g1->__get(_g);
HXDLIN(  22)					_g = (_g + 1);
HXLINE(  23)					::Array< ::String > line = s.split(HX_("=>",61,35,00,00));
HXLINE(  24)					::String _hx_switch_0 = line->__get(0);
            					if (  (_hx_switch_0==HX_("email",1c,cf,ce,6f)) ){
HXLINE(  28)						this->data->email = line->__get(1);
HXDLIN(  28)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("name",4b,72,ff,48)) ){
HXLINE(  26)						this->data->userName = line->__get(1);
HXDLIN(  26)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("password",1b,23,d0,48)) ){
HXLINE(  30)						this->data->password = line->__get(1);
HXDLIN(  30)						goto _hx_goto_2;
            					}
            					_hx_goto_2:;
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g2 = _hx_e;
HXLINE(  34)				this->data->userName = HX_("",00,00,00,00);
HXLINE(  35)				this->data->email = HX_("",00,00,00,00);
HXLINE(  36)				this->data->password = HX_("",00,00,00,00);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  39)		if ((this->data->email != HX_("",00,00,00,00))) {
HXLINE(  40)			::appengine::RequestHandler_obj::http->setParameter(HX_("email",1c,cf,ce,6f),this->data->email);
HXLINE(  41)			::appengine::RequestHandler_obj::http->setParameter(HX_("password",1b,23,d0,48),this->data->password);
HXLINE(  42)			::appengine::RequestHandler_obj::complete->once(this->onComplete_dyn());
HXLINE(  43)			::appengine::RequestHandler_obj::sendRequest(HX_("/account/verify",4a,48,17,19));
            		}
            		else {
HXLINE(  45)			::account::Account_obj::updateUser(HX_("Guest",b8,2e,16,2f),HX_("",00,00,00,00),HX_("",00,00,00,00));
HXLINE(  46)			this->completeTask(true,null());
            		}
            	}


void LoadAccountTask_obj::onComplete( ::appengine::CompletionData compData){
            	HX_STACKFRAME(&_hx_pos_2c92a5159228ffde_50_onComplete)
HXLINE(  51)		if (compData->success) {
HXLINE(  52)			::account::Account_obj::updateUser(this->data->userName,this->data->email,this->data->password);
            		}
HXLINE(  54)		this->completeTask(compData->success,compData->result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LoadAccountTask_obj,onComplete,(void))


::hx::ObjectPtr< LoadAccountTask_obj > LoadAccountTask_obj::__new() {
	::hx::ObjectPtr< LoadAccountTask_obj > __this = new LoadAccountTask_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< LoadAccountTask_obj > LoadAccountTask_obj::__alloc(::hx::Ctx *_hx_ctx) {
	LoadAccountTask_obj *__this = (LoadAccountTask_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LoadAccountTask_obj), true, "account.services.LoadAccountTask"));
	*(void **)__this = LoadAccountTask_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LoadAccountTask_obj::LoadAccountTask_obj()
{
}

void LoadAccountTask_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LoadAccountTask);
	HX_MARK_MEMBER_NAME(data,"data");
	 ::lib::tasks::Task_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LoadAccountTask_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	 ::lib::tasks::Task_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val LoadAccountTask_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTask") ) { return ::hx::Val( startTask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return ::hx::Val( onComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LoadAccountTask_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::account::AccountData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LoadAccountTask_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LoadAccountTask_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::account::AccountData */ ,(int)offsetof(LoadAccountTask_obj,data),HX_("data",2a,56,63,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LoadAccountTask_obj_sStaticStorageInfo = 0;
#endif

static ::String LoadAccountTask_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("startTask",c7,38,ea,05),
	HX_("onComplete",f8,d4,7e,5d),
	::String(null()) };

::hx::Class LoadAccountTask_obj::__mClass;

void LoadAccountTask_obj::__register()
{
	LoadAccountTask_obj _hx_dummy;
	LoadAccountTask_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("account.services.LoadAccountTask",fd,55,dc,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LoadAccountTask_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LoadAccountTask_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoadAccountTask_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoadAccountTask_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace account
} // end namespace services
