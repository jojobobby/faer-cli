// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_account_Account
#include <account/Account.h>
#endif
#ifndef INCLUDED_account_services_GetCharListTask
#include <account/services/GetCharListTask.h>
#endif
#ifndef INCLUDED_appengine_CompletionData
#include <appengine/CompletionData.h>
#endif
#ifndef INCLUDED_appengine_RequestHandler
#include <appengine/RequestHandler.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif
#ifndef INCLUDED_openfl_utils_Timer
#include <openfl/utils/Timer.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5aaf2391fc5385c8_10_new,"account.services.GetCharListTask","new",0x041f2652,"account.services.GetCharListTask.new","account/services/GetCharListTask.hx",10,0x9c63793e)
HX_LOCAL_STACK_FRAME(_hx_pos_5aaf2391fc5385c8_14_startTask,"account.services.GetCharListTask","startTask",0x63ad9039,"account.services.GetCharListTask.startTask","account/services/GetCharListTask.hx",14,0x9c63793e)
HX_LOCAL_STACK_FRAME(_hx_pos_5aaf2391fc5385c8_17_sendRequest,"account.services.GetCharListTask","sendRequest",0xa56ecad9,"account.services.GetCharListTask.sendRequest","account/services/GetCharListTask.hx",17,0x9c63793e)
HX_LOCAL_STACK_FRAME(_hx_pos_5aaf2391fc5385c8_25_onComplete,"account.services.GetCharListTask","onComplete",0x0aa80146,"account.services.GetCharListTask.onComplete","account/services/GetCharListTask.hx",25,0x9c63793e)
HX_LOCAL_STACK_FRAME(_hx_pos_5aaf2391fc5385c8_31_onListComplete,"account.services.GetCharListTask","onListComplete",0x92ad3244,"account.services.GetCharListTask.onListComplete","account/services/GetCharListTask.hx",31,0x9c63793e)
HX_LOCAL_STACK_FRAME(_hx_pos_5aaf2391fc5385c8_44_stopRetryTimer,"account.services.GetCharListTask","stopRetryTimer",0xb7ea752d,"account.services.GetCharListTask.stopRetryTimer","account/services/GetCharListTask.hx",44,0x9c63793e)
HX_LOCAL_STACK_FRAME(_hx_pos_5aaf2391fc5385c8_50_onRetryTimer,"account.services.GetCharListTask","onRetryTimer",0x51af3d0a,"account.services.GetCharListTask.onRetryTimer","account/services/GetCharListTask.hx",50,0x9c63793e)
namespace account{
namespace services{

void GetCharListTask_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5aaf2391fc5385c8_10_new)
HXDLIN(  10)		super::__construct();
            	}

Dynamic GetCharListTask_obj::__CreateEmpty() { return new GetCharListTask_obj; }

void *GetCharListTask_obj::_hx_vtable = 0;

Dynamic GetCharListTask_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GetCharListTask_obj > _hx_result = new GetCharListTask_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GetCharListTask_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x06f4a708) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x06f4a708;
	} else {
		return inClassId==(int)0x7e99215e;
	}
}

void GetCharListTask_obj::startTask(){
            	HX_STACKFRAME(&_hx_pos_5aaf2391fc5385c8_14_startTask)
HXDLIN(  14)		this->sendRequest();
            	}


void GetCharListTask_obj::sendRequest(){
            	HX_STACKFRAME(&_hx_pos_5aaf2391fc5385c8_17_sendRequest)
HXLINE(  18)		::appengine::RequestHandler_obj::http->setParameter(HX_("email",1c,cf,ce,6f),::account::Account_obj::email);
HXLINE(  19)		::appengine::RequestHandler_obj::http->setParameter(HX_("password",1b,23,d0,48),::account::Account_obj::password);
HXLINE(  20)		::appengine::RequestHandler_obj::complete->once(this->onComplete_dyn());
HXLINE(  21)		::appengine::RequestHandler_obj::sendRequest(HX_("/char/list",68,7b,5f,cb));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GetCharListTask_obj,sendRequest,(void))

void GetCharListTask_obj::onComplete( ::appengine::CompletionData compData){
            	HX_STACKFRAME(&_hx_pos_5aaf2391fc5385c8_25_onComplete)
HXDLIN(  25)		if (compData->success) {
HXLINE(  26)			this->onListComplete(compData->result);
            		}
            		else {
HXLINE(  28)			this->onListComplete(HX_("EOF",9c,a0,34,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GetCharListTask_obj,onComplete,(void))

void GetCharListTask_obj::onListComplete(::String data){
            	HX_STACKFRAME(&_hx_pos_5aaf2391fc5385c8_31_onListComplete)
HXLINE(  32)		bool _hx_tmp;
HXDLIN(  32)		if ((data != HX_("EOF",9c,a0,34,00))) {
HXLINE(  32)			_hx_tmp = (data.indexOf(HX_("Error",a8,3b,57,06),null()) == -1);
            		}
            		else {
HXLINE(  32)			_hx_tmp = false;
            		}
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  33)			::Global_obj::parseCharList(::Xml_obj::parse(data)->firstElement());
HXLINE(  34)			this->completeTask(true,null());
            		}
            		else {
HXLINE(  36)			::haxe::Log_obj::trace((HX_("Char list error: ",16,72,23,ad) + data),::hx::SourceInfo(HX_("src/account/services/GetCharListTask.hx",53,dd,47,3e),36,HX_("account.services.GetCharListTask",60,55,1d,3d),HX_("onListComplete",f6,c6,3c,12)));
HXLINE(  37)			this->completeTask(false,null());
            		}
HXLINE(  40)		if (::hx::IsNotNull( this->retryTimer )) {
HXLINE(  41)			this->stopRetryTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GetCharListTask_obj,onListComplete,(void))

void GetCharListTask_obj::stopRetryTimer(){
            	HX_STACKFRAME(&_hx_pos_5aaf2391fc5385c8_44_stopRetryTimer)
HXLINE(  45)		this->retryTimer->stop();
HXLINE(  46)		this->retryTimer->removeEventListener(HX_("timerComplete",9e,49,cc,97),this->onRetryTimer_dyn(),null());
HXLINE(  47)		this->retryTimer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GetCharListTask_obj,stopRetryTimer,(void))

void GetCharListTask_obj::onRetryTimer( ::openfl::events::TimerEvent event){
            	HX_STACKFRAME(&_hx_pos_5aaf2391fc5385c8_50_onRetryTimer)
HXLINE(  51)		this->stopRetryTimer();
HXLINE(  52)		this->sendRequest();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GetCharListTask_obj,onRetryTimer,(void))


::hx::ObjectPtr< GetCharListTask_obj > GetCharListTask_obj::__new() {
	::hx::ObjectPtr< GetCharListTask_obj > __this = new GetCharListTask_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< GetCharListTask_obj > GetCharListTask_obj::__alloc(::hx::Ctx *_hx_ctx) {
	GetCharListTask_obj *__this = (GetCharListTask_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GetCharListTask_obj), true, "account.services.GetCharListTask"));
	*(void **)__this = GetCharListTask_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GetCharListTask_obj::GetCharListTask_obj()
{
}

void GetCharListTask_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GetCharListTask);
	HX_MARK_MEMBER_NAME(retryTimer,"retryTimer");
	 ::lib::tasks::Task_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GetCharListTask_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(retryTimer,"retryTimer");
	 ::lib::tasks::Task_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GetCharListTask_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"startTask") ) { return ::hx::Val( startTask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"retryTimer") ) { return ::hx::Val( retryTimer ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return ::hx::Val( onComplete_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sendRequest") ) { return ::hx::Val( sendRequest_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onRetryTimer") ) { return ::hx::Val( onRetryTimer_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onListComplete") ) { return ::hx::Val( onListComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopRetryTimer") ) { return ::hx::Val( stopRetryTimer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GetCharListTask_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"retryTimer") ) { retryTimer=inValue.Cast<  ::openfl::utils::Timer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GetCharListTask_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("retryTimer",3d,3f,64,4e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GetCharListTask_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::utils::Timer */ ,(int)offsetof(GetCharListTask_obj,retryTimer),HX_("retryTimer",3d,3f,64,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GetCharListTask_obj_sStaticStorageInfo = 0;
#endif

static ::String GetCharListTask_obj_sMemberFields[] = {
	HX_("retryTimer",3d,3f,64,4e),
	HX_("startTask",c7,38,ea,05),
	HX_("sendRequest",e7,32,91,ce),
	HX_("onComplete",f8,d4,7e,5d),
	HX_("onListComplete",f6,c6,3c,12),
	HX_("stopRetryTimer",df,09,7a,37),
	HX_("onRetryTimer",3c,e1,a7,26),
	::String(null()) };

::hx::Class GetCharListTask_obj::__mClass;

void GetCharListTask_obj::__register()
{
	GetCharListTask_obj _hx_dummy;
	GetCharListTask_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("account.services.GetCharListTask",60,55,1d,3d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GetCharListTask_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GetCharListTask_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GetCharListTask_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GetCharListTask_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace account
} // end namespace services
