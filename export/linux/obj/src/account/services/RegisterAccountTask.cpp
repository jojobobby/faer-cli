// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_account_Account
#include <account/Account.h>
#endif
#ifndef INCLUDED_account_AccountData
#include <account/AccountData.h>
#endif
#ifndef INCLUDED_account_services_RegisterAccountTask
#include <account/services/RegisterAccountTask.h>
#endif
#ifndef INCLUDED_appengine_CompletionData
#include <appengine/CompletionData.h>
#endif
#ifndef INCLUDED_appengine_RequestHandler
#include <appengine/RequestHandler.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f99762f9043a951d_9_new,"account.services.RegisterAccountTask","new",0xe52c0652,"account.services.RegisterAccountTask.new","account/services/RegisterAccountTask.hx",9,0x5978093e)
HX_LOCAL_STACK_FRAME(_hx_pos_f99762f9043a951d_12_startTask,"account.services.RegisterAccountTask","startTask",0x5da27039,"account.services.RegisterAccountTask.startTask","account/services/RegisterAccountTask.hx",12,0x5978093e)
HX_LOCAL_STACK_FRAME(_hx_pos_f99762f9043a951d_20_onComplete,"account.services.RegisterAccountTask","onComplete",0xc6f72146,"account.services.RegisterAccountTask.onComplete","account/services/RegisterAccountTask.hx",20,0x5978093e)
HX_LOCAL_STACK_FRAME(_hx_pos_f99762f9043a951d_29_onRegisterDone,"account.services.RegisterAccountTask","onRegisterDone",0xcb1c1b92,"account.services.RegisterAccountTask.onRegisterDone","account/services/RegisterAccountTask.hx",29,0x5978093e)
namespace account{
namespace services{

void RegisterAccountTask_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f99762f9043a951d_9_new)
HXDLIN(   9)		super::__construct();
            	}

Dynamic RegisterAccountTask_obj::__CreateEmpty() { return new RegisterAccountTask_obj; }

void *RegisterAccountTask_obj::_hx_vtable = 0;

Dynamic RegisterAccountTask_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RegisterAccountTask_obj > _hx_result = new RegisterAccountTask_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RegisterAccountTask_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x01c88f6c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x01c88f6c;
	} else {
		return inClassId==(int)0x7e99215e;
	}
}

void RegisterAccountTask_obj::startTask(){
            	HX_STACKFRAME(&_hx_pos_f99762f9043a951d_12_startTask)
HXLINE(  13)		::appengine::RequestHandler_obj::http->setParameter(HX_("username",16,86,eb,20),::account::services::RegisterAccountTask_obj::accountData->userName);
HXLINE(  14)		::appengine::RequestHandler_obj::http->setParameter(HX_("email",1c,cf,ce,6f),::account::services::RegisterAccountTask_obj::accountData->email);
HXLINE(  15)		::appengine::RequestHandler_obj::http->setParameter(HX_("password",1b,23,d0,48),::account::services::RegisterAccountTask_obj::accountData->password);
HXLINE(  16)		::appengine::RequestHandler_obj::complete->once(this->onComplete_dyn());
HXLINE(  17)		::appengine::RequestHandler_obj::sendRequest(HX_("/account/register",74,01,8f,c1));
            	}


void RegisterAccountTask_obj::onComplete( ::appengine::CompletionData compData){
            	HX_STACKFRAME(&_hx_pos_f99762f9043a951d_20_onComplete)
HXLINE(  21)		if (compData->success) {
HXLINE(  22)			::account::services::RegisterAccountTask_obj::onRegisterDone();
            		}
HXLINE(  24)		::account::services::RegisterAccountTask_obj::accountData = null();
HXLINE(  25)		this->completeTask(compData->success,compData->result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterAccountTask_obj,onComplete,(void))

 ::account::AccountData RegisterAccountTask_obj::accountData;

void RegisterAccountTask_obj::onRegisterDone(){
            	HX_STACKFRAME(&_hx_pos_f99762f9043a951d_29_onRegisterDone)
HXDLIN(  29)		::account::Account_obj::updateUser(::account::services::RegisterAccountTask_obj::accountData->userName,::account::services::RegisterAccountTask_obj::accountData->email,::account::services::RegisterAccountTask_obj::accountData->password);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(RegisterAccountTask_obj,onRegisterDone,(void))


::hx::ObjectPtr< RegisterAccountTask_obj > RegisterAccountTask_obj::__new() {
	::hx::ObjectPtr< RegisterAccountTask_obj > __this = new RegisterAccountTask_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< RegisterAccountTask_obj > RegisterAccountTask_obj::__alloc(::hx::Ctx *_hx_ctx) {
	RegisterAccountTask_obj *__this = (RegisterAccountTask_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RegisterAccountTask_obj), true, "account.services.RegisterAccountTask"));
	*(void **)__this = RegisterAccountTask_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RegisterAccountTask_obj::RegisterAccountTask_obj()
{
}

::hx::Val RegisterAccountTask_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"startTask") ) { return ::hx::Val( startTask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return ::hx::Val( onComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RegisterAccountTask_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"accountData") ) { outValue = ( accountData ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onRegisterDone") ) { outValue = onRegisterDone_dyn(); return true; }
	}
	return false;
}

bool RegisterAccountTask_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"accountData") ) { accountData=ioValue.Cast<  ::account::AccountData >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RegisterAccountTask_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo RegisterAccountTask_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::account::AccountData */ ,(void *) &RegisterAccountTask_obj::accountData,HX_("accountData",77,d9,96,85)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String RegisterAccountTask_obj_sMemberFields[] = {
	HX_("startTask",c7,38,ea,05),
	HX_("onComplete",f8,d4,7e,5d),
	::String(null()) };

static void RegisterAccountTask_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RegisterAccountTask_obj::accountData,"accountData");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RegisterAccountTask_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RegisterAccountTask_obj::accountData,"accountData");
};

#endif

::hx::Class RegisterAccountTask_obj::__mClass;

static ::String RegisterAccountTask_obj_sStaticFields[] = {
	HX_("accountData",77,d9,96,85),
	HX_("onRegisterDone",44,90,4c,e8),
	::String(null())
};

void RegisterAccountTask_obj::__register()
{
	RegisterAccountTask_obj _hx_dummy;
	RegisterAccountTask_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("account.services.RegisterAccountTask",60,35,3a,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RegisterAccountTask_obj::__GetStatic;
	__mClass->mSetStaticField = &RegisterAccountTask_obj::__SetStatic;
	__mClass->mMarkFunc = RegisterAccountTask_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RegisterAccountTask_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RegisterAccountTask_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RegisterAccountTask_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RegisterAccountTask_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegisterAccountTask_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegisterAccountTask_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace account
} // end namespace services
