// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_account_AccountData
#include <account/AccountData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6db64520eeae0a6c_3_new,"account.AccountData","new",0xefec5408,"account.AccountData.new","account/AccountData.hx",3,0x2d97a429)
namespace account{

void AccountData_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6db64520eeae0a6c_3_new)
HXLINE(   6)		this->password = HX_("",00,00,00,00);
HXLINE(   5)		this->email = HX_("",00,00,00,00);
HXLINE(   4)		this->userName = HX_("",00,00,00,00);
            	}

Dynamic AccountData_obj::__CreateEmpty() { return new AccountData_obj; }

void *AccountData_obj::_hx_vtable = 0;

Dynamic AccountData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AccountData_obj > _hx_result = new AccountData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AccountData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0eea521a;
}


AccountData_obj::AccountData_obj()
{
}

void AccountData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AccountData);
	HX_MARK_MEMBER_NAME(userName,"userName");
	HX_MARK_MEMBER_NAME(email,"email");
	HX_MARK_MEMBER_NAME(password,"password");
	HX_MARK_END_CLASS();
}

void AccountData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(userName,"userName");
	HX_VISIT_MEMBER_NAME(email,"email");
	HX_VISIT_MEMBER_NAME(password,"password");
}

::hx::Val AccountData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { return ::hx::Val( email ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userName") ) { return ::hx::Val( userName ); }
		if (HX_FIELD_EQ(inName,"password") ) { return ::hx::Val( password ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AccountData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { email=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userName") ) { userName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"password") ) { password=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AccountData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("userName",36,b2,c4,0b));
	outFields->push(HX_("email",1c,cf,ce,6f));
	outFields->push(HX_("password",1b,23,d0,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AccountData_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(AccountData_obj,userName),HX_("userName",36,b2,c4,0b)},
	{::hx::fsString,(int)offsetof(AccountData_obj,email),HX_("email",1c,cf,ce,6f)},
	{::hx::fsString,(int)offsetof(AccountData_obj,password),HX_("password",1b,23,d0,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AccountData_obj_sStaticStorageInfo = 0;
#endif

static ::String AccountData_obj_sMemberFields[] = {
	HX_("userName",36,b2,c4,0b),
	HX_("email",1c,cf,ce,6f),
	HX_("password",1b,23,d0,48),
	::String(null()) };

::hx::Class AccountData_obj::__mClass;

void AccountData_obj::__register()
{
	AccountData_obj _hx_dummy;
	AccountData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("account.AccountData",16,f0,a7,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AccountData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AccountData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AccountData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AccountData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace account
