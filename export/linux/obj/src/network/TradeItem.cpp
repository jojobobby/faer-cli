// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_network_TradeItem
#include <network/TradeItem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b72d07b15b4a29a0_3_new,"network.TradeItem","new",0x0ecbdf29,"network.TradeItem.new","network/TradeItem.hx",3,0x8ab275e8)
namespace network{

void TradeItem_obj::__construct( ::Dynamic item, ::Dynamic slotType, ::Dynamic tradeable, ::Dynamic included){
            	HX_STACKFRAME(&_hx_pos_b72d07b15b4a29a0_3_new)
HXLINE(   7)		this->included = false;
HXLINE(   6)		this->tradeable = false;
HXLINE(   5)		this->slotType = 0;
HXLINE(   4)		this->item = 0;
HXLINE(   3)		if (::hx::IsNotNull( item )) {
HXDLIN(   3)			this->item = ( (int)(item) );
            		}
HXDLIN(   3)		if (::hx::IsNotNull( slotType )) {
HXDLIN(   3)			this->slotType = ( (int)(slotType) );
            		}
HXDLIN(   3)		if (::hx::IsNotNull( tradeable )) {
HXDLIN(   3)			this->tradeable = ( (bool)(tradeable) );
            		}
HXDLIN(   3)		if (::hx::IsNotNull( included )) {
HXDLIN(   3)			this->included = ( (bool)(included) );
            		}
            	}

Dynamic TradeItem_obj::__CreateEmpty() { return new TradeItem_obj; }

void *TradeItem_obj::_hx_vtable = 0;

Dynamic TradeItem_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TradeItem_obj > _hx_result = new TradeItem_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TradeItem_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4eda82ed;
}


TradeItem_obj::TradeItem_obj()
{
}

::hx::Val TradeItem_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"item") ) { return ::hx::Val( item ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"slotType") ) { return ::hx::Val( slotType ); }
		if (HX_FIELD_EQ(inName,"included") ) { return ::hx::Val( included ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tradeable") ) { return ::hx::Val( tradeable ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TradeItem_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"item") ) { item=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"slotType") ) { slotType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"included") ) { included=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tradeable") ) { tradeable=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TradeItem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("item",13,c5,bf,45));
	outFields->push(HX_("slotType",d8,d3,b1,a0));
	outFields->push(HX_("tradeable",fe,7e,0d,33));
	outFields->push(HX_("included",3c,65,27,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TradeItem_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(TradeItem_obj,item),HX_("item",13,c5,bf,45)},
	{::hx::fsInt,(int)offsetof(TradeItem_obj,slotType),HX_("slotType",d8,d3,b1,a0)},
	{::hx::fsBool,(int)offsetof(TradeItem_obj,tradeable),HX_("tradeable",fe,7e,0d,33)},
	{::hx::fsBool,(int)offsetof(TradeItem_obj,included),HX_("included",3c,65,27,66)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TradeItem_obj_sStaticStorageInfo = 0;
#endif

static ::String TradeItem_obj_sMemberFields[] = {
	HX_("item",13,c5,bf,45),
	HX_("slotType",d8,d3,b1,a0),
	HX_("tradeable",fe,7e,0d,33),
	HX_("included",3c,65,27,66),
	::String(null()) };

::hx::Class TradeItem_obj::__mClass;

void TradeItem_obj::__register()
{
	TradeItem_obj _hx_dummy;
	TradeItem_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("network.TradeItem",b7,16,79,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TradeItem_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TradeItem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TradeItem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TradeItem_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace network
