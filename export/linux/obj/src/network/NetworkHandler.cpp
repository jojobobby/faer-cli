// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_account_Account
#include <account/Account.h>
#endif
#ifndef INCLUDED_assets_CharacterFactory
#include <assets/CharacterFactory.h>
#endif
#ifndef INCLUDED_assets_CharacterTemplate
#include <assets/CharacterTemplate.h>
#endif
#ifndef INCLUDED_classes_model_CharacterClass
#include <classes/model/CharacterClass.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkin
#include <classes/model/CharacterSkin.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkinState
#include <classes/model/CharacterSkinState.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkins
#include <classes/model/CharacterSkins.h>
#endif
#ifndef INCLUDED_classes_model_ClassModel
#include <classes/model/ClassModel.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_MoveRecord
#include <game/MoveRecord.h>
#endif
#ifndef INCLUDED_game_MoveRecords
#include <game/MoveRecords.h>
#endif
#ifndef INCLUDED_game_events_GuildResultEvent
#include <game/events/GuildResultEvent.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_objects_Projectile
#include <lime/utils/ObjectPool_objects_Projectile.h>
#endif
#ifndef INCLUDED_map_Camera
#include <map/Camera.h>
#endif
#ifndef INCLUDED_map_CharacterStatusText
#include <map/CharacterStatusText.h>
#endif
#ifndef INCLUDED_map_GroundProperties
#include <map/GroundProperties.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_map_Quest
#include <map/Quest.h>
#endif
#ifndef INCLUDED_map_SpeechBalloon
#include <map/SpeechBalloon.h>
#endif
#ifndef INCLUDED_map_Square
#include <map/Square.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_network_TradeItem
#include <network/TradeItem.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_ObjectProperties
#include <objects/ObjectProperties.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_objects_Projectile
#include <objects/Projectile.h>
#endif
#ifndef INCLUDED_objects_ProjectileProperties
#include <objects/ProjectileProperties.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ProgressEvent
#include <openfl/events/ProgressEvent.h>
#endif
#ifndef INCLUDED_openfl_events_SecurityErrorEvent
#include <openfl/events/SecurityErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_Socket
#include <openfl/net/Socket.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_servers_Server
#include <servers/Server.h>
#endif
#ifndef INCLUDED_sound_SoundEffectLibrary
#include <sound/SoundEffectLibrary.h>
#endif
#ifndef INCLUDED_ui_MiniMap
#include <ui/MiniMap.h>
#endif
#ifndef INCLUDED_ui_TextBox
#include <ui/TextBox.h>
#endif
#ifndef INCLUDED_ui_dialogs_Dialog
#include <ui/dialogs/Dialog.h>
#endif
#ifndef INCLUDED_ui_dialogs_DialogsView
#include <ui/dialogs/DialogsView.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_234_init,"network.NetworkHandler","init",0xe6549822,"network.NetworkHandler.init","network/NetworkHandler.hx",234,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_245_reset,"network.NetworkHandler","reset",0xcc605c7d,"network.NetworkHandler.reset","network/NetworkHandler.hx",245,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_254_connect,"network.NetworkHandler","connect",0x9f44d618,"network.NetworkHandler.connect","network/NetworkHandler.hx",254,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_259_disconnect,"network.NetworkHandler","disconnect",0x3b43daee,"network.NetworkHandler.disconnect","network/NetworkHandler.hx",259,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_268_sendPacket,"network.NetworkHandler","sendPacket",0x56edf582,"network.NetworkHandler.sendPacket","network/NetworkHandler.hx",268,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_293_onConnect,"network.NetworkHandler","onConnect",0xe4ecf639,"network.NetworkHandler.onConnect","network/NetworkHandler.hx",293,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_349_onClose,"network.NetworkHandler","onClose",0x68655047,"network.NetworkHandler.onClose","network/NetworkHandler.hx",349,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_352_onIOError,"network.NetworkHandler","onIOError",0x7a432c71,"network.NetworkHandler.onIOError","network/NetworkHandler.hx",352,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_357_onSecurityError,"network.NetworkHandler","onSecurityError",0x38500877,"network.NetworkHandler.onSecurityError","network/NetworkHandler.hx",357,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_363_onSocketData,"network.NetworkHandler","onSocketData",0x73d9c48e,"network.NetworkHandler.onSocketData","network/NetworkHandler.hx",363,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_618_onSocketData,"network.NetworkHandler","onSocketData",0x73d9c48e,"network.NetworkHandler.onSocketData","network/NetworkHandler.hx",618,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_609_onSocketData,"network.NetworkHandler","onSocketData",0x73d9c48e,"network.NetworkHandler.onSocketData","network/NetworkHandler.hx",609,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_632_onSocketData,"network.NetworkHandler","onSocketData",0x73d9c48e,"network.NetworkHandler.onSocketData","network/NetworkHandler.hx",632,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1118_updateAck,"network.NetworkHandler","updateAck",0x7a98d06e,"network.NetworkHandler.updateAck","network/NetworkHandler.hx",1118,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1132_gotoAck,"network.NetworkHandler","gotoAck",0xba901194,"network.NetworkHandler.gotoAck","network/NetworkHandler.hx",1132,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1145_pong,"network.NetworkHandler","pong",0xeaf5dd0a,"network.NetworkHandler.pong","network/NetworkHandler.hx",1145,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1155_playerShoot,"network.NetworkHandler","playerShoot",0x708e6fec,"network.NetworkHandler.playerShoot","network/NetworkHandler.hx",1155,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1181_playerHit,"network.NetworkHandler","playerHit",0xf882a720,"network.NetworkHandler.playerHit","network/NetworkHandler.hx",1181,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1191_enemyHit,"network.NetworkHandler","enemyHit",0xe64cd6fd,"network.NetworkHandler.enemyHit","network/NetworkHandler.hx",1191,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1225_groundDamage,"network.NetworkHandler","groundDamage",0xadf00568,"network.NetworkHandler.groundDamage","network/NetworkHandler.hx",1225,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1236_playerText,"network.NetworkHandler","playerText",0x81bb1f40,"network.NetworkHandler.playerText","network/NetworkHandler.hx",1236,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1245_invSwap,"network.NetworkHandler","invSwap",0xbbd3ca52,"network.NetworkHandler.invSwap","network/NetworkHandler.hx",1245,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1276_invSwapVial,"network.NetworkHandler","invSwapVial",0x0284b650,"network.NetworkHandler.invSwapVial","network/NetworkHandler.hx",1276,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1308_invDrop,"network.NetworkHandler","invDrop",0xb1e5d7ee,"network.NetworkHandler.invDrop","network/NetworkHandler.hx",1308,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1322_useItem,"network.NetworkHandler","useItem",0xde2fe728,"network.NetworkHandler.useItem","network/NetworkHandler.hx",1322,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1351_useItem_new,"network.NetworkHandler","useItem_new",0xf8d5b089,"network.NetworkHandler.useItem_new","network/NetworkHandler.hx",1351,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1420_teleport,"network.NetworkHandler","teleport",0xf575f0bd,"network.NetworkHandler.teleport","network/NetworkHandler.hx",1420,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1429_usePortal,"network.NetworkHandler","usePortal",0xab720c01,"network.NetworkHandler.usePortal","network/NetworkHandler.hx",1429,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1491_requestTrade,"network.NetworkHandler","requestTrade",0x9ba900a7,"network.NetworkHandler.requestTrade","network/NetworkHandler.hx",1491,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1532_escape,"network.NetworkHandler","escape",0xda528913,"network.NetworkHandler.escape","network/NetworkHandler.hx",1532,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1556_joinGuild,"network.NetworkHandler","joinGuild",0x553f8f17,"network.NetworkHandler.joinGuild","network/NetworkHandler.hx",1556,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1586_setPlayerSkinTemplate,"network.NetworkHandler","setPlayerSkinTemplate",0xb25c63c8,"network.NetworkHandler.setPlayerSkinTemplate","network/NetworkHandler.hx",1586,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_1596_move,"network.NetworkHandler","move",0xe8fa4023,"network.NetworkHandler.move","network/NetworkHandler.hx",1596,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_219_boot,"network.NetworkHandler","boot",0xe1b4e144,"network.NetworkHandler.boot","network/NetworkHandler.hx",219,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_222_boot,"network.NetworkHandler","boot",0xe1b4e144,"network.NetworkHandler.boot","network/NetworkHandler.hx",222,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_223_boot,"network.NetworkHandler","boot",0xe1b4e144,"network.NetworkHandler.boot","network/NetworkHandler.hx",223,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_224_boot,"network.NetworkHandler","boot",0xe1b4e144,"network.NetworkHandler.boot","network/NetworkHandler.hx",224,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_225_boot,"network.NetworkHandler","boot",0xe1b4e144,"network.NetworkHandler.boot","network/NetworkHandler.hx",225,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_228_boot,"network.NetworkHandler","boot",0xe1b4e144,"network.NetworkHandler.boot","network/NetworkHandler.hx",228,0xa101de81)
HX_LOCAL_STACK_FRAME(_hx_pos_9fdca7b25a3f936a_232_boot,"network.NetworkHandler","boot",0xe1b4e144,"network.NetworkHandler.boot","network/NetworkHandler.hx",232,0xa101de81)
namespace network{

void NetworkHandler_obj::__construct() { }

Dynamic NetworkHandler_obj::__CreateEmpty() { return new NetworkHandler_obj; }

void *NetworkHandler_obj::_hx_vtable = 0;

Dynamic NetworkHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NetworkHandler_obj > _hx_result = new NetworkHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NetworkHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0680e18a;
}

 ::openfl::net::Socket NetworkHandler_obj::socket;

 ::servers::Server NetworkHandler_obj::server;

int NetworkHandler_obj::gameId;

bool NetworkHandler_obj::createCharacter;

int NetworkHandler_obj::charId;

int NetworkHandler_obj::lastTickId;

 ::openfl::utils::ByteArrayData NetworkHandler_obj::fmMap;

int NetworkHandler_obj::playerId;

 ::objects::Player NetworkHandler_obj::player;

 ::openfl::utils::ByteArrayData NetworkHandler_obj::outgoingData;

int NetworkHandler_obj::readLen;

void NetworkHandler_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_234_init)
HXLINE( 235)		::network::NetworkHandler_obj::outgoingData =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 237)		::network::NetworkHandler_obj::socket->addEventListener(HX_("connect",ea,3b,80,15),::network::NetworkHandler_obj::onConnect_dyn(),null(),null(),null());
HXLINE( 238)		::network::NetworkHandler_obj::socket->addEventListener(HX_("close",b8,17,63,48),::network::NetworkHandler_obj::onClose_dyn(),null(),null(),null());
HXLINE( 239)		::network::NetworkHandler_obj::socket->addEventListener(HX_("socketData",7d,63,de,b1),::network::NetworkHandler_obj::onSocketData_dyn(),null(),null(),null());
HXLINE( 240)		::network::NetworkHandler_obj::socket->addEventListener(HX_("ioError",02,fe,41,76),::network::NetworkHandler_obj::onIOError_dyn(),null(),null(),null());
HXLINE( 241)		::network::NetworkHandler_obj::socket->addEventListener(HX_("securityError",e8,28,7c,a2),::network::NetworkHandler_obj::onSecurityError_dyn(),null(),null(),null());
HXLINE( 242)		::network::NetworkHandler_obj::socket->set_endian(1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NetworkHandler_obj,init,(void))

void NetworkHandler_obj::reset( ::servers::Server newServer,int newGameId,bool newCreateCharacter,int newCharId, ::openfl::utils::ByteArrayData newFmMap){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_245_reset)
HXLINE( 246)		::network::NetworkHandler_obj::server = newServer;
HXLINE( 247)		::network::NetworkHandler_obj::gameId = newGameId;
HXLINE( 248)		::network::NetworkHandler_obj::createCharacter = newCreateCharacter;
HXLINE( 249)		::network::NetworkHandler_obj::charId = newCharId;
HXLINE( 250)		::network::NetworkHandler_obj::fmMap = newFmMap;
HXLINE( 251)		::network::NetworkHandler_obj::readLen = 65535;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NetworkHandler_obj,reset,(void))

void NetworkHandler_obj::connect(){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_254_connect)
HXLINE( 255)		{
HXLINE( 255)			 ::game::GameSprite tmp = ::Global_obj::gameSprite;
HXDLIN( 255)			if (::hx::IsNotNull( tmp )) {
HXLINE( 255)				tmp->disconnect();
            			}
            		}
HXLINE( 256)		::network::NetworkHandler_obj::socket->connect(::network::NetworkHandler_obj::server->address,::network::NetworkHandler_obj::server->port);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NetworkHandler_obj,connect,(void))

void NetworkHandler_obj::disconnect(){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_259_disconnect)
HXLINE( 260)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 261)			::network::NetworkHandler_obj::socket->close();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 264)		{
HXLINE( 264)			 ::game::GameSprite tmp = ::Global_obj::gameSprite;
HXDLIN( 264)			if (::hx::IsNotNull( tmp )) {
HXLINE( 264)				tmp->close();
            			}
            		}
HXLINE( 265)		::Global_obj::gameSprite = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NetworkHandler_obj,disconnect,(void))

void NetworkHandler_obj::sendPacket(int packetId){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_268_sendPacket)
HXLINE( 269)		bool _hx_tmp;
HXDLIN( 269)		if (::hx::IsNotNull( ::network::NetworkHandler_obj::socket )) {
HXLINE( 269)			_hx_tmp = !(::network::NetworkHandler_obj::socket->get_connected());
            		}
            		else {
HXLINE( 269)			_hx_tmp = true;
            		}
HXDLIN( 269)		if (_hx_tmp) {
HXLINE( 270)			return;
            		}
HXLINE( 272)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 276)			bool _hx_tmp1;
HXDLIN( 276)			if (::hx::IsNotNull( ::network::NetworkHandler_obj::outgoingData )) {
HXLINE( 276)				int a = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(::network::NetworkHandler_obj::outgoingData);
HXDLIN( 276)				if ((false != (a < 0))) {
HXLINE( 276)					_hx_tmp1 = false;
            				}
            				else {
HXLINE( 276)					_hx_tmp1 = (0 >= a);
            				}
            			}
            			else {
HXLINE( 276)				_hx_tmp1 = true;
            			}
HXDLIN( 276)			if (_hx_tmp1) {
HXLINE( 277)				::network::NetworkHandler_obj::socket->writeByte(packetId);
HXLINE( 278)				::network::NetworkHandler_obj::socket->flush();
HXLINE( 279)				return;
            			}
HXLINE( 282)			::network::NetworkHandler_obj::outgoingData->position = 0;
HXLINE( 283)			::network::NetworkHandler_obj::socket->writeByte(packetId);
HXLINE( 284)			::network::NetworkHandler_obj::socket->writeBytes(::network::NetworkHandler_obj::outgoingData,null(),null());
HXLINE( 285)			::network::NetworkHandler_obj::socket->flush();
HXLINE( 286)			::network::NetworkHandler_obj::outgoingData->clear();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 287)				 ::haxe::Exception _g1 = ::haxe::Exception_obj::caught(_g);
HXDLIN( 287)				{
HXLINE( 288)					{
HXLINE( 288)						 ::game::GameSprite tmp = ::Global_obj::gameSprite;
HXDLIN( 288)						if (::hx::IsNotNull( tmp )) {
HXLINE( 288)							 ::ui::TextBox tmp1 = tmp->textBox;
HXDLIN( 288)							tmp1->addText((HX_("Socket Write Error: ",e0,76,14,b9) + ::Std_obj::string(_g1)),( (unsigned int)(16711680) ));
            						}
            					}
HXLINE( 289)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 289)					::String _hx_tmp3 = ((HX_("Socket Write Error: ",e0,76,14,b9) + ::Std_obj::string(_g1)) + HX_(", stack trace: ",9f,40,6c,1b));
HXDLIN( 289)					::Array< ::Dynamic> tmp2 = _g1->get_stack();
HXDLIN( 289)					::String _hx_tmp4;
HXDLIN( 289)					if (::hx::IsNull( tmp2 )) {
HXLINE( 289)						_hx_tmp4 = HX_("null",87,9e,0e,49);
            					}
            					else {
HXLINE( 289)						_hx_tmp4 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp2);
            					}
HXDLIN( 289)					_hx_tmp2((_hx_tmp3 + _hx_tmp4),::hx::SourceInfo(HX_("src/network/NetworkHandler.hx",56,46,30,c7),289,HX_("network.NetworkHandler",9c,1c,1c,d4),HX_("sendPacket",f0,7e,ee,84)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,sendPacket,(void))

void NetworkHandler_obj::onConnect( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_293_onConnect)
HXLINE( 294)		::Global_obj::gameSprite->textBox->addText(HX_("Connected!",58,91,c0,eb),( (unsigned int)(255) ));
HXLINE( 296)		bool _hx_tmp;
HXDLIN( 296)		if (::hx::IsNotNull( ::network::NetworkHandler_obj::fmMap )) {
HXLINE( 296)			_hx_tmp = (::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(::network::NetworkHandler_obj::fmMap) == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp = true;
            		}
HXDLIN( 296)		if (_hx_tmp) {
HXLINE( 297)			::network::NetworkHandler_obj::outgoingData->writeUTF(HX_("0.5",77,94,24,00));
HXLINE( 298)			::network::NetworkHandler_obj::outgoingData->writeInt(::network::NetworkHandler_obj::gameId);
HXLINE( 299)			::network::NetworkHandler_obj::outgoingData->writeUTF(::account::Account_obj::email);
HXLINE( 300)			::network::NetworkHandler_obj::outgoingData->writeUTF(::account::Account_obj::password);
HXLINE( 301)			::network::NetworkHandler_obj::outgoingData->writeShort(::network::NetworkHandler_obj::charId);
HXLINE( 302)			::network::NetworkHandler_obj::outgoingData->writeBoolean(::network::NetworkHandler_obj::createCharacter);
HXLINE( 303)			if (::network::NetworkHandler_obj::createCharacter) {
HXLINE( 304)				 ::classes::model::CharacterClass charClass = ::Global_obj::classModel->getSelected();
HXLINE( 305)				::network::NetworkHandler_obj::outgoingData->writeShort(charClass->id);
HXLINE( 306)				::network::NetworkHandler_obj::outgoingData->writeShort(0);
            			}
HXLINE( 309)			::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(6) )) ));
            		}
            		else {
HXLINE( 325)			::network::NetworkHandler_obj::outgoingData->writeUTF(HX_("0.5",77,94,24,00));
HXLINE( 326)			::network::NetworkHandler_obj::outgoingData->writeUTF(::account::Account_obj::email);
HXLINE( 327)			::network::NetworkHandler_obj::outgoingData->writeUTF(::account::Account_obj::password);
HXLINE( 328)			::network::NetworkHandler_obj::outgoingData->writeShort(::network::NetworkHandler_obj::charId);
HXLINE( 329)			::network::NetworkHandler_obj::outgoingData->writeShort(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(::network::NetworkHandler_obj::fmMap));
HXLINE( 330)			::network::NetworkHandler_obj::outgoingData->writeBytes(::network::NetworkHandler_obj::fmMap,0,0);
HXLINE( 332)			::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(32) )) ));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,onConnect,(void))

void NetworkHandler_obj::onClose( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_349_onClose)
HXDLIN( 349)		::network::NetworkHandler_obj::disconnect();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,onClose,(void))

void NetworkHandler_obj::onIOError( ::openfl::events::IOErrorEvent e){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_352_onIOError)
HXLINE( 353)		{
HXLINE( 353)			 ::game::GameSprite tmp = ::Global_obj::gameSprite;
HXDLIN( 353)			if (::hx::IsNotNull( tmp )) {
HXLINE( 353)				tmp->textBox->addText((HX_("Socket IO Error: ",41,a5,91,05) + e->text),( (unsigned int)(16711680) ));
            			}
            		}
HXLINE( 354)		::network::NetworkHandler_obj::disconnect();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,onIOError,(void))

void NetworkHandler_obj::onSecurityError( ::openfl::events::SecurityErrorEvent e){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_357_onSecurityError)
HXLINE( 358)		{
HXLINE( 358)			 ::game::GameSprite tmp = ::Global_obj::gameSprite;
HXDLIN( 358)			if (::hx::IsNotNull( tmp )) {
HXLINE( 358)				tmp->textBox->addText((HX_("Socket Security Error: ",fb,e5,8d,3d) + e->text),( (unsigned int)(16711680) ));
            			}
            		}
HXLINE( 359)		::network::NetworkHandler_obj::disconnect();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,onSecurityError,(void))

void NetworkHandler_obj::onSocketData( ::openfl::events::ProgressEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_363_onSocketData)
HXDLIN( 363)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 364)			while(true){
HXLINE( 364)				bool _hx_tmp;
HXDLIN( 364)				if (::hx::IsNotNull( ::network::NetworkHandler_obj::socket )) {
HXLINE( 364)					_hx_tmp = ::network::NetworkHandler_obj::socket->get_connected();
            				}
            				else {
HXLINE( 364)					_hx_tmp = false;
            				}
HXDLIN( 364)				if (!(_hx_tmp)) {
HXLINE( 364)					goto _hx_goto_9;
            				}
HXLINE( 365)				if ((::network::NetworkHandler_obj::socket->get_bytesAvailable() < 2)) {
HXLINE( 366)					goto _hx_goto_9;
            				}
HXLINE( 368)				if ((::network::NetworkHandler_obj::readLen == 65535)) {
HXLINE( 369)					::network::NetworkHandler_obj::readLen = ::network::NetworkHandler_obj::socket->readUnsignedShort();
            				}
HXLINE( 371)				bool _hx_tmp1;
HXDLIN( 371)				if ((::network::NetworkHandler_obj::readLen != 65535)) {
HXLINE( 371)					int _hx_tmp2 = ::network::NetworkHandler_obj::readLen;
HXDLIN( 371)					_hx_tmp1 = (_hx_tmp2 > ::network::NetworkHandler_obj::socket->get_bytesAvailable());
            				}
            				else {
HXLINE( 371)					_hx_tmp1 = false;
            				}
HXDLIN( 371)				if (_hx_tmp1) {
HXLINE( 372)					goto _hx_goto_9;
            				}
HXLINE( 374)				 ::openfl::utils::ByteArrayData data =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 375)				::network::NetworkHandler_obj::socket->readBytes(data,0,::network::NetworkHandler_obj::readLen);
HXLINE( 377)				::network::NetworkHandler_obj::readLen = 65535;
HXLINE( 384)				signed char _hx_switch_0 = ( (signed char)(data->readUnsignedByte()) );
            				if (  (_hx_switch_0==( (signed char)(0) )) ){
HXLINE( 482)					::network::NetworkHandler_obj::playerId = data->readInt();
HXLINE( 483)					::network::NetworkHandler_obj::charId = data->readInt();
HXLINE( 489)					::Global_obj::gameSprite->initialize();
HXLINE( 490)					::network::NetworkHandler_obj::createCharacter = false;
HXLINE( 481)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(1) )) ){
HXLINE( 925)					::String name = data->readUTF();
HXLINE( 926)					int objectId = data->readInt();
HXLINE( 927)					int bubbleTime = data->readUnsignedByte();
HXLINE( 928)					::String recipient = data->readUTF();
HXLINE( 929)					::String text = data->readUTF();
HXLINE( 930)					int textColor = 16777215;
HXLINE( 931)					int nameColor = 16711935;
HXLINE( 932)					if ((text != HX_("",00,00,00,00))) {
HXLINE( 933)						textColor = data->readUnsignedInt();
            					}
HXLINE( 934)					if ((name != HX_("",00,00,00,00))) {
HXLINE( 935)						nameColor = data->readUnsignedInt();
            					}
HXLINE( 955)					if ((objectId != -1)) {
HXLINE( 956)						 ::objects::GameObject go = ::Global_obj::gameSprite->map->getGameObject(objectId);
HXLINE( 957)						if (::hx::IsNotNull( go )) {
HXLINE( 958)							if (go->props->isEnemy) {
HXLINE( 959)								 ::map::Map _hx_tmp3 = ::Global_obj::gameSprite->map;
HXDLIN( 959)								_hx_tmp3->addSpeechBalloon( ::map::SpeechBalloon_obj::__alloc( HX_CTX ,go,text,3,bubbleTime));
HXLINE( 960)								return;
            							}
HXLINE( 963)							int sbType = 0;
HXLINE( 964)							if ((recipient != HX_("",00,00,00,00))) {
HXLINE( 965)								sbType = 1;
            							}
HXLINE( 967)							switch((int)(nameColor)){
            								case (int)0: {
HXLINE( 972)									sbType = 2;
            								}
            								break;
            								case (int)1: {
HXLINE( 974)									sbType = 4;
            								}
            								break;
            								case (int)15911494: {
HXLINE( 969)									sbType = 5;
            								}
            								break;
            							}
HXLINE( 977)							 ::map::Map _hx_tmp4 = ::Global_obj::gameSprite->map;
HXDLIN( 977)							_hx_tmp4->addSpeechBalloon( ::map::SpeechBalloon_obj::__alloc( HX_CTX ,go,text,sbType,bubbleTime));
            						}
            					}
HXLINE( 981)					::Global_obj::gameSprite->textBox->addTextFull(name,recipient,text,( (unsigned int)(nameColor) ),( (unsigned int)(textColor) ));
HXLINE( 924)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(2) )) ){
HXLINE( 804)					int bulletId = data->readUnsignedByte();
HXLINE( 805)					int ownerId = data->readInt();
HXLINE( 806)					int containerType = data->readShort();
HXLINE( 807)					Float startX = data->readFloat();
HXLINE( 808)					Float startY = data->readFloat();
HXLINE( 809)					Float angle = data->readFloat();
HXLINE( 810)					int damage = data->readShort();
HXLINE( 831)					 ::objects::GameObject owner = ::Global_obj::gameSprite->map->getGameObject(ownerId);
HXLINE( 832)					bool _hx_tmp5;
HXDLIN( 832)					if (::hx::IsNotNull( owner )) {
HXLINE( 832)						_hx_tmp5 = owner->dead;
            					}
            					else {
HXLINE( 832)						_hx_tmp5 = true;
            					}
HXDLIN( 832)					if (_hx_tmp5) {
HXLINE( 835)						return;
            					}
HXLINE( 838)					 ::objects::Projectile proj = ::Global_obj::projPool->get();
HXLINE( 839)					proj->reset(containerType,0,ownerId,bulletId,( (float)(angle) ),::Global_obj::gameSprite->lastFixedUpdate);
HXLINE( 840)					proj->setDamages(damage,0,0);
HXLINE( 841)					::Global_obj::gameSprite->map->addGameObject(( ( ::objects::GameObject)(proj) ),( (float)(startX) ),( (float)(startY) ));
HXLINE( 803)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(3) )) ){
HXLINE( 492)					int targetId = data->readInt();
HXLINE( 493)					::Array< int > effects = ::Array_obj< int >::__new();
HXLINE( 494)					int effBitMask = data->readUnsignedInt();
HXLINE( 495)					{
HXLINE( 495)						int _g = 0;
HXDLIN( 495)						while((_g < 31)){
HXLINE( 495)							_g = (_g + 1);
HXDLIN( 495)							int i = (_g - 1);
HXLINE( 496)							if (((effBitMask & (1 << i)) != 0)) {
HXLINE( 497)								effects->push(i);
            							}
            						}
            					}
HXLINE( 499)					int damageAmount = data->readUnsignedShort();
HXLINE( 500)					bool kill = data->readBoolean();
HXLINE( 501)					int bulletId1 = data->readUnsignedByte();
HXLINE( 502)					int objectId1 = data->readInt();
HXLINE( 520)					 ::map::Map map = ::Global_obj::gameSprite->map;
HXLINE( 521)					 ::objects::Projectile proj1 = null();
HXLINE( 522)					bool _hx_tmp6;
HXDLIN( 522)					if ((objectId1 >= 0)) {
HXLINE( 522)						bool aNeg = (bulletId1 < 0);
HXDLIN( 522)						if ((aNeg != false)) {
HXLINE( 522)							_hx_tmp6 = aNeg;
            						}
            						else {
HXLINE( 522)							_hx_tmp6 = (bulletId1 > 0);
            						}
            					}
            					else {
HXLINE( 522)						_hx_tmp6 = false;
            					}
HXDLIN( 522)					if (_hx_tmp6) {
HXLINE( 523)						 ::Dynamic projId = ::objects::Projectile_obj::objBullIdToObjId->get(((bulletId1 << 24) | objectId1));
HXLINE( 524)						proj1 = ( ( ::objects::Projectile)(map->getGameObject(( (int)(projId) ))) );
HXLINE( 525)						bool _hx_tmp7;
HXDLIN( 525)						if (::hx::IsNotNull( proj1 )) {
HXLINE( 525)							_hx_tmp7 = !(proj1->projProps->multiHit);
            						}
            						else {
HXLINE( 525)							_hx_tmp7 = false;
            						}
HXDLIN( 525)						if (_hx_tmp7) {
HXLINE( 526)							map->removeGameObject(( (int)(projId) ));
            						}
            					}
HXLINE( 529)					 ::objects::GameObject go1 = map->getGameObject(targetId);
HXLINE( 530)					if (::hx::IsNotNull( go1 )) {
HXLINE( 531)						go1->damage(-1,damageAmount,effects,kill,proj1,null());
            					}
HXLINE( 491)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(4) )) ){
HXLINE(1058)					{
HXLINE(1058)						int _g1 = 0;
HXDLIN(1058)						int _g2 = data->readShort();
HXDLIN(1058)						while((_g1 < _g2)){
HXLINE(1058)							_g1 = (_g1 + 1);
HXLINE(1059)							int x = data->readShort();
HXLINE(1060)							int y = data->readShort();
HXLINE(1061)							int tileType = data->readUnsignedShort();
HXLINE(1062)							::Global_obj::gameSprite->map->setGroundTile(( (unsigned short)(x) ),( (unsigned short)(y) ),( (unsigned short)(tileType) ));
HXLINE(1063)							::Global_obj::gameSprite->miniMap->setGroundTile(x,y,tileType);
            						}
            					}
HXLINE(1066)					{
HXLINE(1066)						int _g3 = 0;
HXDLIN(1066)						int _g4 = data->readShort();
HXDLIN(1066)						while((_g3 < _g4)){
HXLINE(1066)							_g3 = (_g3 + 1);
HXLINE(1067)							 ::map::Map _hx_tmp8 = ::Global_obj::gameSprite->map;
HXDLIN(1067)							_hx_tmp8->removeObj(data->readInt());
            						}
            					}
HXLINE(1069)					{
HXLINE(1069)						int _g5 = 0;
HXDLIN(1069)						int _g6 = data->readShort();
HXDLIN(1069)						while((_g5 < _g6)){
HXLINE(1069)							_g5 = (_g5 + 1);
HXLINE(1070)							int objType = data->readUnsignedShort();
HXLINE(1071)							int objId = data->readInt();
HXLINE(1072)							Float x1 = data->readFloat();
HXLINE(1073)							Float y1 = data->readFloat();
HXLINE(1075)							 ::map::Map map1 = ::Global_obj::gameSprite->map;
HXLINE(1076)							 ::objects::GameObject go2 = ::objects::ObjectLibrary_obj::getObjectFromType(objType);
HXLINE(1077)							if (::hx::IsNotNull( go2 )) {
HXLINE(1077)								go2->setObjectId(objId);
            							}
HXLINE(1079)							{
HXLINE(1079)								int _g7 = 0;
HXDLIN(1079)								int _g8 = data->readShort();
HXDLIN(1079)								while((_g7 < _g8)){
HXLINE(1079)									_g7 = (_g7 + 1);
HXLINE(1080)									{
HXLINE(1080)										int statType = data->readUnsignedByte();
HXDLIN(1080)										switch((int)(statType)){
            											case (int)0: {
HXLINE(1080)												int maxHP = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->maxHP = maxHP;
            												}
            											}
            											break;
            											case (int)1: {
HXLINE(1080)												int hp = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->hp = hp;
            												}
            											}
            											break;
            											case (int)2: {
HXLINE(1080)												int size = data->readUnsignedShort();
HXDLIN(1080)												bool _hx_tmp9;
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													_hx_tmp9 = (size != 100);
            												}
            												else {
HXLINE(1080)													_hx_tmp9 = false;
            												}
HXDLIN(1080)												if (_hx_tmp9) {
HXLINE(1080)													int _hx_int = size;
HXDLIN(1080)													Float _hx_tmp10;
HXDLIN(1080)													if ((_hx_int < 0)) {
HXLINE(1080)														_hx_tmp10 = (((Float)4294967296.0) + _hx_int);
            													}
            													else {
HXLINE(1080)														_hx_tmp10 = (_hx_int + ((Float)0.0));
            													}
HXDLIN(1080)													go2->size = ( (float)((_hx_tmp10 / ((Float)100.))) );
            												}
            											}
            											break;
            											case (int)3: {
HXLINE(1080)												int maxMP = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->maxMP = maxMP;
            												}
            											}
            											break;
            											case (int)4: {
HXLINE(1080)												int mp = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->mp = mp;
            												}
            											}
            											break;
            											case (int)8: case (int)9: case (int)10: case (int)11: case (int)12: case (int)13: case (int)14: case (int)15: case (int)16: case (int)17: case (int)18: case (int)19: {
HXLINE(1080)												int itemType = data->readUnsignedShort();
HXDLIN(1080)												if ((itemType == 65535)) {
HXLINE(1080)													itemType = -1;
            												}
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->equipment[(statType - 8)] = itemType;
            												}
            											}
            											break;
            											case (int)20: {
HXLINE(1080)												int strength = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->strength = strength;
            												}
            											}
            											break;
            											case (int)21: {
HXLINE(1080)												int defense = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->defense = defense;
            												}
            											}
            											break;
            											case (int)22: {
HXLINE(1080)												int speed = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->speed = speed;
            												}
            											}
            											break;
            											case (int)27: {
HXLINE(1080)												int stam = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->stamina = stam;
            												}
            											}
            											break;
            											case (int)29: {
HXLINE(1080)												int cond = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->condition = cond;
            												}
            											}
            											break;
            											case (int)30: {
HXLINE(1080)												int pen = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->penetration = pen;
            												}
            											}
            											break;
            											case (int)31: {
HXLINE(1080)												::String newName = data->readUTF();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													bool _hx_tmp11;
HXDLIN(1080)													if ((newName == HX_("",00,00,00,00))) {
HXLINE(1080)														_hx_tmp11 = (go2->objClass == HX_("Portal",cc,ee,b9,31));
            													}
            													else {
HXLINE(1080)														_hx_tmp11 = false;
            													}
HXDLIN(1080)													if (!(_hx_tmp11)) {
HXLINE(1080)														if ((go2->name != newName)) {
HXLINE(1080)															go2->name = newName;
HXDLIN(1080)															go2->nameTex = null();
            														}
            													}
            												}
            											}
            											break;
            											case (int)34: {
HXLINE(1080)												data->readUnsignedShort();
            											}
            											break;
            											case (int)35: {
HXLINE(1080)												int gems = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->gems = gems;
            												}
            											}
            											break;
            											case (int)36: {
HXLINE(1080)												data->readShort();
            											}
            											break;
            											case (int)37: {
HXLINE(1080)												data->readBoolean();
            											}
            											break;
            											case (int)38: {
HXLINE(1080)												int accId = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->accountId = accId;
            												}
            											}
            											break;
            											case (int)40: {
HXLINE(1080)												data->readUnsignedByte();
            											}
            											break;
            											case (int)42: {
HXLINE(1080)												data->readByte();
            											}
            											break;
            											case (int)43: {
HXLINE(1080)												int gold = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->gold = gold;
            												}
            											}
            											break;
            											case (int)44: {
HXLINE(1080)												int crowns = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->crowns = crowns;
            												}
            											}
            											break;
            											case (int)46: {
HXLINE(1080)												int maxHPBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->maxHPBoost = maxHPBoost;
            												}
            											}
            											break;
            											case (int)47: {
HXLINE(1080)												int maxMPBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->maxMPBoost = maxMPBoost;
            												}
            											}
            											break;
            											case (int)48: {
HXLINE(1080)												int strengthBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->strengthBoost = strengthBoost;
            												}
            											}
            											break;
            											case (int)49: {
HXLINE(1080)												int defenseBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->defenseBoost = defenseBoost;
            												}
            											}
            											break;
            											case (int)50: {
HXLINE(1080)												int speedBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->speedBoost = speedBoost;
            												}
            											}
            											break;
            											case (int)52: {
HXLINE(1080)												int staminaBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->staminaBoost = staminaBoost;
            												}
            											}
            											break;
            											case (int)54: {
HXLINE(1080)												int ownerId1 = data->readInt();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->ownerId = ownerId1;
            												}
            											}
            											break;
            											case (int)55: {
HXLINE(1080)												Float damageMult = data->readFloat();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->damageMult = damageMult;
            												}
            											}
            											break;
            											case (int)56: {
HXLINE(1080)												int tier = data->readUnsignedByte();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->tier = tier;
HXDLIN(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->updateMaxValues();
            												}
            											}
            											break;
            											case (int)57: {
HXLINE(1080)												int penBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->penetrationBoost = penBoost;
            												}
            											}
            											break;
            											case (int)58: {
HXLINE(1080)												Float hitMult = data->readFloat();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->hitMult = hitMult;
            												}
            											}
            											break;
            											case (int)60: {
HXLINE(1080)												Float sinkLevel = (( (Float)(data->readByte()) ) / ( (Float)(10) ));
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													 ::objects::Player player = ::hx::TCast<  ::objects::Player >::cast(go2);
HXDLIN(1080)													if (::hx::IsInstanceNotEq( player,::Global_obj::gameSprite->map->player )) {
HXLINE(1080)														player->sinkLevel = ( (float)(sinkLevel) );
            													}
            												}
            											}
            											break;
            											case (int)61: {
HXLINE(1080)												int altTex = data->readUnsignedShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->setAltTexture(altTex);
            												}
            											}
            											break;
            											case (int)62: {
HXLINE(1080)												::String guildName = data->readUTF();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->setGuildName(guildName);
            												}
            											}
            											break;
            											case (int)63: {
HXLINE(1080)												int guildRank = data->readByte();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->guildRank = guildRank;
            												}
            											}
            											break;
            											case (int)65: {
HXLINE(1080)												int healthVialCount = data->readUnsignedByte();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->healthVialCount = healthVialCount;
            												}
            											}
            											break;
            											case (int)66: {
HXLINE(1080)												int magicVialCount = data->readUnsignedByte();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->magicVialCount = magicVialCount;
            												}
            											}
            											break;
            											case (int)67: case (int)68: case (int)69: case (int)70: case (int)71: case (int)72: case (int)73: case (int)74: {
HXLINE(1080)												int itemType1 = data->readUnsignedShort();
HXDLIN(1080)												if ((itemType1 == 65535)) {
HXLINE(1080)													itemType1 = -1;
            												}
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->equipment[(((statType - 67) + 4) + 8)] = itemType1;
            												}
            											}
            											break;
            											case (int)75: {
HXLINE(1080)												bool hasBackpack = data->readBoolean();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->hasBackpack = hasBackpack;
            												}
            											}
            											break;
            											case (int)76: {
HXLINE(1080)												int skinId = data->readUnsignedShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													 ::objects::Player player1 = ::hx::TCast<  ::objects::Player >::cast(go2);
HXDLIN(1080)													if ((player1->skinId != skinId)) {
HXLINE(1080)														::network::NetworkHandler_obj::setPlayerSkinTemplate(player1,skinId);
            													}
            												}
            											}
            											break;
            											case (int)77: {
HXLINE(1080)												int wit = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->wit = wit;
            												}
            											}
            											break;
            											case (int)78: {
HXLINE(1080)												int res = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													go2->resistance = res;
            												}
            											}
            											break;
            											case (int)79: {
HXLINE(1080)												int haste = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->haste = haste;
            												}
            											}
            											break;
            											case (int)80: {
HXLINE(1080)												int int1 = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->intelligence = int1;
            												}
            											}
            											break;
            											case (int)81: {
HXLINE(1080)												int pier = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->piercing = pier;
            												}
            											}
            											break;
            											case (int)82: {
HXLINE(1080)												int ten = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->tenacity = ten;
            												}
            											}
            											break;
            											case (int)83: {
HXLINE(1080)												int witBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->witBoost = witBoost;
            												}
            											}
            											break;
            											case (int)84: {
HXLINE(1080)												int resBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->resistanceBoost = resBoost;
            												}
            											}
            											break;
            											case (int)85: {
HXLINE(1080)												int hasteBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->hasteBoost = hasteBoost;
            												}
            											}
            											break;
            											case (int)86: {
HXLINE(1080)												int intBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->intelligenceBoost = intBoost;
            												}
            											}
            											break;
            											case (int)87: {
HXLINE(1080)												int pierBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->piercingBoost = pierBoost;
            												}
            											}
            											break;
            											case (int)88: {
HXLINE(1080)												int tenBoost = data->readShort();
HXDLIN(1080)												if (::hx::IsNotNull( go2 )) {
HXLINE(1080)													::hx::TCast<  ::objects::Player >::cast(go2)->tenacityBoost = tenBoost;
            												}
            											}
            											break;
            											default:{
HXLINE(1080)												::haxe::Log_obj::trace((HX_("Unhandled stat: type=",4c,b5,a2,e5) + statType),::hx::SourceInfo(HX_("src/network/NetworkHandler.hx",56,46,30,c7),2010,HX_("network.NetworkHandler",9c,1c,1c,d4),HX_("parseStat",a7,35,02,d4)));
            											}
            										}
            									}
            								}
            							}
HXLINE(1082)							if (::hx::IsNull( go2 )) {
HXLINE(1083)								::haxe::Log_obj::trace((((((HX_("Could not find Update GameObject: objId=",1e,fe,49,e6) + objId) + HX_(", x=",39,14,2e,1d)) + x1) + HX_(", y=",18,15,2e,1d)) + y1),::hx::SourceInfo(HX_("src/network/NetworkHandler.hx",56,46,30,c7),1083,HX_("network.NetworkHandler",9c,1c,1c,d4),HX_("onSocketData",7c,05,22,8a)));
HXLINE(1084)								continue;
            							}
HXLINE(1087)							map1->addGameObject(go2,( (float)(x1) ),( (float)(y1) ));
HXLINE(1088)							if (go2->props->isPlayer) {
HXLINE(1089)								 ::objects::Player newPlayer = ::hx::TCast<  ::objects::Player >::cast(go2);
HXLINE(1090)								::network::NetworkHandler_obj::setPlayerSkinTemplate(newPlayer,0);
HXLINE(1091)								if ((newPlayer->objectId == ::network::NetworkHandler_obj::playerId)) {
HXLINE(1092)									::network::NetworkHandler_obj::player = newPlayer;
HXLINE(1093)									map1->player = newPlayer;
HXLINE(1094)									::Global_obj::gameSprite->setFocus(newPlayer);
            								}
            							}
HXLINE(1098)							bool _hx_tmp12;
HXDLIN(1098)							bool _hx_tmp13;
HXDLIN(1098)							if (go2->props->staticObj) {
HXLINE(1098)								_hx_tmp13 = go2->props->occupySquare;
            							}
            							else {
HXLINE(1098)								_hx_tmp13 = false;
            							}
HXDLIN(1098)							if (_hx_tmp13) {
HXLINE(1098)								_hx_tmp12 = !(go2->props->noMiniMap);
            							}
            							else {
HXLINE(1098)								_hx_tmp12 = false;
            							}
HXDLIN(1098)							if (_hx_tmp12) {
HXLINE(1099)								 ::ui::MiniMap _hx_tmp14 = ::Global_obj::gameSprite->miniMap;
HXDLIN(1099)								int _hx_tmp15 = ::Std_obj::_hx_int(( (Float)(go2->mapX) ));
HXDLIN(1099)								_hx_tmp14->setGameObjectTile(_hx_tmp15,::Std_obj::_hx_int(( (Float)(go2->mapY) )),go2);
            							}
            						}
            					}
HXLINE(1102)					::network::NetworkHandler_obj::updateAck();
HXLINE(1057)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(5) )) ){
HXLINE( 759)					int objectId2 = data->readInt();
HXLINE( 760)					::String text1 = data->readUTF();
HXLINE( 761)					int color = data->readUnsignedInt();
HXLINE( 766)					 ::objects::GameObject go3 = ::Global_obj::gameSprite->map->getGameObject(objectId2);
HXLINE( 767)					if (::hx::IsNotNull( go3 )) {
HXLINE( 768)						 ::map::Map _hx_tmp16 = ::Global_obj::gameSprite->map;
HXDLIN( 768)						_hx_tmp16->addStatusText( ::map::CharacterStatusText_obj::__alloc( HX_CTX ,go3,text1,color,2000));
            					}
            					else {
HXLINE( 770)						 ::objects::GameObject p = ::Global_obj::gameSprite->map->getGameObject(objectId2);
HXLINE( 771)						if (::hx::IsNotNull( p )) {
HXLINE( 772)							 ::map::Map _hx_tmp17 = ::Global_obj::gameSprite->map;
HXDLIN( 772)							_hx_tmp17->addStatusText( ::map::CharacterStatusText_obj::__alloc( HX_CTX ,p,text1,color,2000));
HXLINE( 773)							bool _hx_tmp18;
HXDLIN( 773)							if (::hx::IsInstanceEq( p,::network::NetworkHandler_obj::player )) {
HXLINE( 773)								_hx_tmp18 = (text1 == HX_("Quest Complete!",4a,7f,e7,89));
            							}
            							else {
HXLINE( 773)								_hx_tmp18 = false;
            							}
HXDLIN( 773)							if (_hx_tmp18) {
HXLINE( 774)								::Global_obj::gameSprite->map->quest->completed();
            							}
            						}
            					}
HXLINE( 758)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(6) )) ){
HXLINE( 719)					if (::hx::IsNull( ::Global_obj::gameSprite )) {
HXLINE( 720)						return;
            					}
HXLINE( 722)					int tickId = data->readUnsignedByte();
HXLINE( 723)					int int2 = data->readUnsignedByte();
HXDLIN( 723)					Float tickTime;
HXDLIN( 723)					if ((int2 < 0)) {
HXLINE( 723)						tickTime = (((Float)4294967296.0) + int2);
            					}
            					else {
HXLINE( 723)						tickTime = (int2 + ((Float)0.0));
            					}
HXDLIN( 723)					int tickTime1 = ::Std_obj::_hx_int((((Float)1000.) / tickTime));
HXLINE( 724)					int len = data->readShort();
HXLINE( 725)					{
HXLINE( 725)						int _g9 = 0;
HXDLIN( 725)						while((_g9 < len)){
HXLINE( 725)							_g9 = (_g9 + 1);
HXLINE( 726)							int objId1 = data->readInt();
HXLINE( 727)							Float x2 = data->readFloat();
HXLINE( 728)							Float y2 = data->readFloat();
HXLINE( 731)							 ::objects::GameObject go4 = ::Global_obj::gameSprite->map->getGameObject(objId1);
HXLINE( 732)							if (::hx::IsNotNull( go4 )) {
HXLINE( 733)								bool _hx_tmp19;
HXDLIN( 733)								if ((tickTime1 != 0)) {
HXLINE( 733)									_hx_tmp19 = (objId1 != ::network::NetworkHandler_obj::playerId);
            								}
            								else {
HXLINE( 733)									_hx_tmp19 = false;
            								}
HXDLIN( 733)								if (_hx_tmp19) {
HXLINE( 734)									go4->onTickPos(( (float)(x2) ),( (float)(y2) ),tickTime1,tickId);
            								}
HXLINE( 735)								{
HXLINE( 735)									int _g10 = 0;
HXDLIN( 735)									int _g11 = data->readShort();
HXDLIN( 735)									while((_g10 < _g11)){
HXLINE( 735)										_g10 = (_g10 + 1);
HXLINE( 736)										{
HXLINE( 736)											int statType1 = data->readUnsignedByte();
HXDLIN( 736)											switch((int)(statType1)){
            												case (int)0: {
HXLINE( 736)													int maxHP1 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->maxHP = maxHP1;
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 736)													int hp1 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->hp = hp1;
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 736)													int size1 = data->readUnsignedShort();
HXDLIN( 736)													bool _hx_tmp20;
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														_hx_tmp20 = (size1 != 100);
            													}
            													else {
HXLINE( 736)														_hx_tmp20 = false;
            													}
HXDLIN( 736)													if (_hx_tmp20) {
HXLINE( 736)														int int3 = size1;
HXDLIN( 736)														Float _hx_tmp21;
HXDLIN( 736)														if ((int3 < 0)) {
HXLINE( 736)															_hx_tmp21 = (((Float)4294967296.0) + int3);
            														}
            														else {
HXLINE( 736)															_hx_tmp21 = (int3 + ((Float)0.0));
            														}
HXDLIN( 736)														go4->size = ( (float)((_hx_tmp21 / ((Float)100.))) );
            													}
            												}
            												break;
            												case (int)3: {
HXLINE( 736)													int maxMP1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->maxMP = maxMP1;
            													}
            												}
            												break;
            												case (int)4: {
HXLINE( 736)													int mp1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->mp = mp1;
            													}
            												}
            												break;
            												case (int)8: case (int)9: case (int)10: case (int)11: case (int)12: case (int)13: case (int)14: case (int)15: case (int)16: case (int)17: case (int)18: case (int)19: {
HXLINE( 736)													int itemType2 = data->readUnsignedShort();
HXDLIN( 736)													if ((itemType2 == 65535)) {
HXLINE( 736)														itemType2 = -1;
            													}
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->equipment[(statType1 - 8)] = itemType2;
            													}
            												}
            												break;
            												case (int)20: {
HXLINE( 736)													int strength1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->strength = strength1;
            													}
            												}
            												break;
            												case (int)21: {
HXLINE( 736)													int defense1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->defense = defense1;
            													}
            												}
            												break;
            												case (int)22: {
HXLINE( 736)													int speed1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->speed = speed1;
            													}
            												}
            												break;
            												case (int)27: {
HXLINE( 736)													int stam1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->stamina = stam1;
            													}
            												}
            												break;
            												case (int)29: {
HXLINE( 736)													int cond1 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->condition = cond1;
            													}
            												}
            												break;
            												case (int)30: {
HXLINE( 736)													int pen1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->penetration = pen1;
            													}
            												}
            												break;
            												case (int)31: {
HXLINE( 736)													::String newName1 = data->readUTF();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														bool _hx_tmp22;
HXDLIN( 736)														if ((newName1 == HX_("",00,00,00,00))) {
HXLINE( 736)															_hx_tmp22 = (go4->objClass == HX_("Portal",cc,ee,b9,31));
            														}
            														else {
HXLINE( 736)															_hx_tmp22 = false;
            														}
HXDLIN( 736)														if (!(_hx_tmp22)) {
HXLINE( 736)															if ((go4->name != newName1)) {
HXLINE( 736)																go4->name = newName1;
HXDLIN( 736)																go4->nameTex = null();
            															}
            														}
            													}
            												}
            												break;
            												case (int)34: {
HXLINE( 736)													data->readUnsignedShort();
            												}
            												break;
            												case (int)35: {
HXLINE( 736)													int gems1 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->gems = gems1;
            													}
            												}
            												break;
            												case (int)36: {
HXLINE( 736)													data->readShort();
            												}
            												break;
            												case (int)37: {
HXLINE( 736)													data->readBoolean();
            												}
            												break;
            												case (int)38: {
HXLINE( 736)													int accId1 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->accountId = accId1;
            													}
            												}
            												break;
            												case (int)40: {
HXLINE( 736)													data->readUnsignedByte();
            												}
            												break;
            												case (int)42: {
HXLINE( 736)													data->readByte();
            												}
            												break;
            												case (int)43: {
HXLINE( 736)													int gold1 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->gold = gold1;
            													}
            												}
            												break;
            												case (int)44: {
HXLINE( 736)													int crowns1 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->crowns = crowns1;
            													}
            												}
            												break;
            												case (int)46: {
HXLINE( 736)													int maxHPBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->maxHPBoost = maxHPBoost1;
            													}
            												}
            												break;
            												case (int)47: {
HXLINE( 736)													int maxMPBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->maxMPBoost = maxMPBoost1;
            													}
            												}
            												break;
            												case (int)48: {
HXLINE( 736)													int strengthBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->strengthBoost = strengthBoost1;
            													}
            												}
            												break;
            												case (int)49: {
HXLINE( 736)													int defenseBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->defenseBoost = defenseBoost1;
            													}
            												}
            												break;
            												case (int)50: {
HXLINE( 736)													int speedBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->speedBoost = speedBoost1;
            													}
            												}
            												break;
            												case (int)52: {
HXLINE( 736)													int staminaBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->staminaBoost = staminaBoost1;
            													}
            												}
            												break;
            												case (int)54: {
HXLINE( 736)													int ownerId2 = data->readInt();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->ownerId = ownerId2;
            													}
            												}
            												break;
            												case (int)55: {
HXLINE( 736)													Float damageMult1 = data->readFloat();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->damageMult = damageMult1;
            													}
            												}
            												break;
            												case (int)56: {
HXLINE( 736)													int tier1 = data->readUnsignedByte();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->tier = tier1;
HXDLIN( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->updateMaxValues();
            													}
            												}
            												break;
            												case (int)57: {
HXLINE( 736)													int penBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->penetrationBoost = penBoost1;
            													}
            												}
            												break;
            												case (int)58: {
HXLINE( 736)													Float hitMult1 = data->readFloat();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->hitMult = hitMult1;
            													}
            												}
            												break;
            												case (int)60: {
HXLINE( 736)													Float sinkLevel1 = (( (Float)(data->readByte()) ) / ( (Float)(10) ));
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														 ::objects::Player player2 = ::hx::TCast<  ::objects::Player >::cast(go4);
HXDLIN( 736)														if (::hx::IsInstanceNotEq( player2,::Global_obj::gameSprite->map->player )) {
HXLINE( 736)															player2->sinkLevel = ( (float)(sinkLevel1) );
            														}
            													}
            												}
            												break;
            												case (int)61: {
HXLINE( 736)													int altTex1 = data->readUnsignedShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->setAltTexture(altTex1);
            													}
            												}
            												break;
            												case (int)62: {
HXLINE( 736)													::String guildName1 = data->readUTF();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->setGuildName(guildName1);
            													}
            												}
            												break;
            												case (int)63: {
HXLINE( 736)													int guildRank1 = data->readByte();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->guildRank = guildRank1;
            													}
            												}
            												break;
            												case (int)65: {
HXLINE( 736)													int healthVialCount1 = data->readUnsignedByte();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->healthVialCount = healthVialCount1;
            													}
            												}
            												break;
            												case (int)66: {
HXLINE( 736)													int magicVialCount1 = data->readUnsignedByte();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->magicVialCount = magicVialCount1;
            													}
            												}
            												break;
            												case (int)67: case (int)68: case (int)69: case (int)70: case (int)71: case (int)72: case (int)73: case (int)74: {
HXLINE( 736)													int itemType3 = data->readUnsignedShort();
HXDLIN( 736)													if ((itemType3 == 65535)) {
HXLINE( 736)														itemType3 = -1;
            													}
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->equipment[(((statType1 - 67) + 4) + 8)] = itemType3;
            													}
            												}
            												break;
            												case (int)75: {
HXLINE( 736)													bool hasBackpack1 = data->readBoolean();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->hasBackpack = hasBackpack1;
            													}
            												}
            												break;
            												case (int)76: {
HXLINE( 736)													int skinId1 = data->readUnsignedShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														 ::objects::Player player3 = ::hx::TCast<  ::objects::Player >::cast(go4);
HXDLIN( 736)														if ((player3->skinId != skinId1)) {
HXLINE( 736)															::network::NetworkHandler_obj::setPlayerSkinTemplate(player3,skinId1);
            														}
            													}
            												}
            												break;
            												case (int)77: {
HXLINE( 736)													int wit1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->wit = wit1;
            													}
            												}
            												break;
            												case (int)78: {
HXLINE( 736)													int res1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														go4->resistance = res1;
            													}
            												}
            												break;
            												case (int)79: {
HXLINE( 736)													int haste1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->haste = haste1;
            													}
            												}
            												break;
            												case (int)80: {
HXLINE( 736)													int int4 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->intelligence = int4;
            													}
            												}
            												break;
            												case (int)81: {
HXLINE( 736)													int pier1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->piercing = pier1;
            													}
            												}
            												break;
            												case (int)82: {
HXLINE( 736)													int ten1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->tenacity = ten1;
            													}
            												}
            												break;
            												case (int)83: {
HXLINE( 736)													int witBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->witBoost = witBoost1;
            													}
            												}
            												break;
            												case (int)84: {
HXLINE( 736)													int resBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->resistanceBoost = resBoost1;
            													}
            												}
            												break;
            												case (int)85: {
HXLINE( 736)													int hasteBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->hasteBoost = hasteBoost1;
            													}
            												}
            												break;
            												case (int)86: {
HXLINE( 736)													int intBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->intelligenceBoost = intBoost1;
            													}
            												}
            												break;
            												case (int)87: {
HXLINE( 736)													int pierBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->piercingBoost = pierBoost1;
            													}
            												}
            												break;
            												case (int)88: {
HXLINE( 736)													int tenBoost1 = data->readShort();
HXDLIN( 736)													if (::hx::IsNotNull( go4 )) {
HXLINE( 736)														::hx::TCast<  ::objects::Player >::cast(go4)->tenacityBoost = tenBoost1;
            													}
            												}
            												break;
            												default:{
HXLINE( 736)													::haxe::Log_obj::trace((HX_("Unhandled stat: type=",4c,b5,a2,e5) + statType1),::hx::SourceInfo(HX_("src/network/NetworkHandler.hx",56,46,30,c7),2010,HX_("network.NetworkHandler",9c,1c,1c,d4),HX_("parseStat",a7,35,02,d4)));
            												}
            											}
            										}
            									}
            								}
HXLINE( 741)								::network::NetworkHandler_obj::move(tickId,::network::NetworkHandler_obj::player);
HXLINE( 742)								::network::NetworkHandler_obj::lastTickId = tickId;
HXLINE( 743)								continue;
            							}
HXLINE( 746)							::haxe::Log_obj::trace((((((HX_("Could not find NewTick GameObject: objId=",20,ea,d8,b3) + objId1) + HX_(", x=",39,14,2e,1d)) + x2) + HX_(", y=",18,15,2e,1d)) + y2),::hx::SourceInfo(HX_("src/network/NetworkHandler.hx",56,46,30,c7),746,HX_("network.NetworkHandler",9c,1c,1c,d4),HX_("onSocketData",7c,05,22,8a)));
HXLINE( 747)							{
HXLINE( 747)								int _g12 = 0;
HXDLIN( 747)								int _g13 = data->readShort();
HXDLIN( 747)								while((_g12 < _g13)){
HXLINE( 747)									_g12 = (_g12 + 1);
HXLINE( 748)									{
HXLINE( 748)										int statType2 = data->readUnsignedByte();
HXDLIN( 748)										switch((int)(statType2)){
            											case (int)0: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)1: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)2: {
HXLINE( 748)												data->readUnsignedShort();
            											}
            											break;
            											case (int)3: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)4: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)8: case (int)9: case (int)10: case (int)11: case (int)12: case (int)13: case (int)14: case (int)15: case (int)16: case (int)17: case (int)18: case (int)19: {
HXLINE( 748)												data->readUnsignedShort();
            											}
            											break;
            											case (int)20: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)21: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)22: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)27: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)29: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)30: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)31: {
HXLINE( 748)												data->readUTF();
            											}
            											break;
            											case (int)34: {
HXLINE( 748)												data->readUnsignedShort();
            											}
            											break;
            											case (int)35: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)36: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)37: {
HXLINE( 748)												data->readBoolean();
            											}
            											break;
            											case (int)38: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)40: {
HXLINE( 748)												data->readUnsignedByte();
            											}
            											break;
            											case (int)42: {
HXLINE( 748)												data->readByte();
            											}
            											break;
            											case (int)43: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)44: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)46: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)47: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)48: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)49: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)50: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)52: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)54: {
HXLINE( 748)												data->readInt();
            											}
            											break;
            											case (int)55: {
HXLINE( 748)												data->readFloat();
            											}
            											break;
            											case (int)56: {
HXLINE( 748)												data->readUnsignedByte();
            											}
            											break;
            											case (int)57: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)58: {
HXLINE( 748)												data->readFloat();
            											}
            											break;
            											case (int)60: {
HXLINE( 748)												data->readByte();
            											}
            											break;
            											case (int)61: {
HXLINE( 748)												data->readUnsignedShort();
            											}
            											break;
            											case (int)62: {
HXLINE( 748)												data->readUTF();
            											}
            											break;
            											case (int)63: {
HXLINE( 748)												data->readByte();
            											}
            											break;
            											case (int)65: {
HXLINE( 748)												data->readUnsignedByte();
            											}
            											break;
            											case (int)66: {
HXLINE( 748)												data->readUnsignedByte();
            											}
            											break;
            											case (int)67: case (int)68: case (int)69: case (int)70: case (int)71: case (int)72: case (int)73: case (int)74: {
HXLINE( 748)												data->readUnsignedShort();
            											}
            											break;
            											case (int)75: {
HXLINE( 748)												data->readBoolean();
            											}
            											break;
            											case (int)76: {
HXLINE( 748)												data->readUnsignedShort();
            											}
            											break;
            											case (int)77: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)78: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)79: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)80: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)81: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)82: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)83: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)84: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)85: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)86: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)87: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											case (int)88: {
HXLINE( 748)												data->readShort();
            											}
            											break;
            											default:{
HXLINE( 748)												::haxe::Log_obj::trace((HX_("Unhandled stat: type=",4c,b5,a2,e5) + statType2),::hx::SourceInfo(HX_("src/network/NetworkHandler.hx",56,46,30,c7),2010,HX_("network.NetworkHandler",9c,1c,1c,d4),HX_("parseStat",a7,35,02,d4)));
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXLINE( 755)					::network::NetworkHandler_obj::move(tickId,::network::NetworkHandler_obj::player);
HXLINE( 757)					::network::NetworkHandler_obj::lastTickId = tickId;
HXLINE( 718)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(7) )) ){
HXLINE( 845)					data->readUnsignedByte();
HXLINE( 846)					data->readInt();
HXLINE( 847)					data->readFloat();
HXLINE( 848)					data->readFloat();
HXLINE( 849)					data->readFloat();
HXLINE( 850)					data->readFloat();
HXLINE( 851)					data->readInt();
HXLINE( 844)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(8) )) ){
HXLINE( 639)					int objId2 = data->readInt();
HXLINE( 640)					Float x3 = data->readFloat();
HXLINE( 641)					Float y3 = data->readFloat();
HXLINE( 647)					 ::objects::GameObject player4 = ::Global_obj::gameSprite->map->getGameObject(objId2);
HXLINE( 648)					if (::hx::IsNull( player4 )) {
HXLINE( 649)						return;
            					}
HXLINE( 651)					player4->onGoto(( (float)(x3) ),( (float)(y3) ),::Global_obj::gameSprite->lastFixedUpdate);
HXLINE( 653)					::network::NetworkHandler_obj::gotoAck(::Global_obj::gameSprite->lastFixedUpdate);
HXLINE( 638)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(9) )) ){
HXLINE( 683)					if ((data->readInt() != 0)) {
HXLINE( 684)						::sound::SoundEffectLibrary_obj::play(HX_("error",c8,cb,29,73),null(),null());
            					}
HXLINE( 683)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(10) )) ){
HXLINE( 778)					int serial = data->readInt();
HXLINE( 784)					::network::NetworkHandler_obj::pong(serial,::lime::_hx_system::System_obj::getTimer());
HXLINE( 777)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(11) )) ){
HXLINE( 688)					int width = data->readInt();
HXLINE( 689)					int height = data->readInt();
HXLINE( 690)					::String name1 = data->readUTF();
HXLINE( 691)					data->readUTF();
HXLINE( 692)					int background = data->readInt();
HXLINE( 693)					data->readInt();
HXLINE( 694)					bool allowPlayerTeleport = data->readBoolean();
HXLINE( 695)					bool showDisplays = data->readBoolean();
HXLINE( 697)					::Global_obj::gameSprite->map->setProps(width,height,name1,background,allowPlayerTeleport,showDisplays);
HXLINE( 687)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(12) )) ){
HXLINE( 534)					data->readInt();
HXLINE( 535)					data->readInt();
HXLINE( 536)					data->readUTF();
HXLINE( 542)					::network::NetworkHandler_obj::disconnect();
HXLINE( 532)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(13) )) ){
HXLINE( 468)					signed char result = ( (signed char)(data->readInt()) );
HXLINE( 469)					::String resultStr = data->readUTF();
HXLINE( 475)					if ((result == 1)) {
HXLINE( 477)						 ::ui::dialogs::DialogsView _hx_tmp23 = ::Global_obj::layers->dialogs;
HXDLIN( 477)						_hx_tmp23->openDialog( ::ui::dialogs::Dialog_obj::__alloc( HX_CTX ,HX_("Purchase Error",29,16,83,cb),resultStr,HX_("Close",98,87,90,db),null()));
            					}
            					else {
HXLINE( 479)						unsigned int _hx_tmp24;
HXDLIN( 479)						if ((result == ( (signed char)(0) ))) {
HXLINE( 479)							_hx_tmp24 = ( (unsigned int)(255) );
            						}
            						else {
HXLINE( 479)							_hx_tmp24 = ( (unsigned int)(16711680) );
            						}
HXDLIN( 479)						::Global_obj::gameSprite->textBox->addText(resultStr,_hx_tmp24);
            					}
HXLINE( 467)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(14) )) ){
HXLINE( 415)					Float x4 = data->readFloat();
HXLINE( 416)					Float y4 = data->readFloat();
HXLINE( 417)					Float radius = data->readFloat();
HXLINE( 418)					int damage1 = data->readUnsignedShort();
HXLINE( 419)					int effect = data->readUnsignedByte();
HXLINE( 420)					data->readFloat();
HXLINE( 421)					int origType = data->readUnsignedShort();
HXLINE( 422)					data->readUnsignedInt();
HXLINE( 444)					int d = 0;
HXLINE( 445)					::Array< int > effects1 = null();
HXLINE( 446)					if (::hx::IsNull( ::Global_obj::gameSprite->map->player )) {
HXLINE( 448)						return;
            					}
HXLINE( 454)					if ((::Global_obj::gameSprite->map->player->distTo(( (float)(x4) ),( (float)(y4) )) <= radius)) {
HXLINE( 455)						int d1 = ::objects::GameObject_obj::physicalDamage(damage1,::Global_obj::gameSprite->map->player->defense,::Global_obj::gameSprite->map->player->condition);
HXDLIN( 455)						d = ::Std_obj::_hx_int((( (Float)(d1) ) * ::Global_obj::gameSprite->map->player->hitMult));
HXLINE( 457)						effects1 = null();
HXLINE( 458)						if ((effect != 0)) {
HXLINE( 459)							effects1 = ::Array_obj< int >::__new();
HXLINE( 460)							effects1->push(effect);
            						}
HXLINE( 463)						::Global_obj::gameSprite->map->player->damage(origType,d,effects1,false,null(),null());
            					}
HXLINE( 414)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(15) )) ){
HXLINE( 400)					data->readInt();
HXLINE( 401)					::Array< int > ids = ::Array_obj< int >::__new();
HXLINE( 402)					int num = data->readShort();
HXLINE( 403)					{
HXLINE( 403)						int _g14 = 0;
HXDLIN( 403)						while((_g14 < num)){
HXLINE( 403)							_g14 = (_g14 + 1);
HXLINE( 404)							ids->push(data->readInt());
            						}
            					}
HXLINE( 399)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(16) )) ){
HXLINE( 796)					int objId3 = data->readInt();
HXLINE( 802)					::Global_obj::gameSprite->map->quest->setObject(objId3);
HXLINE( 795)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(17) )) ){
HXLINE( 655)					bool success = data->readBoolean();
HXLINE( 656)					::String errorText = data->readUTF();
HXLINE( 662)					::Global_obj::gameSprite->textBox->addText(errorText,( (unsigned int)(16711680) ));
HXLINE( 663)					::Global_obj::gameSprite->dispatchEvent( ::game::events::GuildResultEvent_obj::__alloc( HX_CTX ,success,errorText));
HXLINE( 654)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(18) )) ){
HXLINE( 386)					int bulletId2 = data->readByte();
HXLINE( 387)					int ownerId3 = data->readInt();
HXLINE( 388)					int containerType1 = data->readUnsignedShort();
HXLINE( 389)					Float angle1 = data->readFloat();
HXLINE( 391)					 ::objects::GameObject owner1 = ::Global_obj::gameSprite->map->getGameObject(ownerId3);
HXLINE( 392)					bool _hx_tmp25;
HXDLIN( 392)					if (::hx::IsNotNull( owner1 )) {
HXLINE( 392)						_hx_tmp25 = owner1->dead;
            					}
            					else {
HXLINE( 392)						_hx_tmp25 = true;
            					}
HXDLIN( 392)					if (_hx_tmp25) {
HXLINE( 393)						return;
            					}
HXLINE( 395)					 ::objects::Projectile proj2 = ::Global_obj::projPool->get();
HXLINE( 396)					proj2->reset(containerType1,0,ownerId3,bulletId2,( (float)(angle1) ),::Global_obj::gameSprite->lastFixedUpdate);
HXLINE( 397)					::Global_obj::gameSprite->map->addGameObject(( ( ::objects::GameObject)(proj2) ),owner1->mapX,owner1->mapY);
HXLINE( 398)					owner1->setAttack(containerType1,( (float)(angle1) ));
HXLINE( 385)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(19) )) ){
HXLINE( 544)					int bulletId3 = data->readUnsignedByte();
HXLINE( 545)					int ownerId4 = data->readInt();
HXLINE( 546)					int bulletType = data->readUnsignedByte();
HXLINE( 547)					Float startX1 = data->readFloat();
HXLINE( 548)					Float startY1 = data->readFloat();
HXLINE( 549)					Float angle2 = data->readFloat();
HXLINE( 550)					int damage2 = data->readShort();
HXLINE( 551)					int magicDamage = data->readShort();
HXLINE( 552)					int trueDamage = data->readShort();
HXLINE( 553)					int numShots = data->readUnsignedByte();
HXLINE( 554)					Float angleInc = data->readFloat();
HXLINE( 579)					 ::objects::GameObject owner2 = ::Global_obj::gameSprite->map->getGameObject(ownerId4);
HXLINE( 580)					bool _hx_tmp26;
HXDLIN( 580)					if (::hx::IsNotNull( owner2 )) {
HXLINE( 580)						_hx_tmp26 = owner2->dead;
            					}
            					else {
HXLINE( 580)						_hx_tmp26 = true;
            					}
HXDLIN( 580)					if (_hx_tmp26) {
HXLINE( 582)						return;
            					}
HXLINE( 585)					{
HXLINE( 585)						int _g15 = 0;
HXDLIN( 585)						int _g16 = numShots;
HXDLIN( 585)						while((_g15 < _g16)){
HXLINE( 585)							_g15 = (_g15 + 1);
HXDLIN( 585)							int i1 = (_g15 - 1);
HXLINE( 586)							 ::objects::Projectile proj3 = ::Global_obj::projPool->get();
HXLINE( 587)							angle2 = (angle2 + (angleInc * ( (Float)(i1) )));
HXLINE( 588)							int owner3 = owner2->objectType;
HXDLIN( 588)							int int5 = (bulletId3 + i1);
HXDLIN( 588)							Float _hx_tmp27;
HXDLIN( 588)							if ((int5 < 0)) {
HXLINE( 588)								_hx_tmp27 = (((Float)4294967296.0) + int5);
            							}
            							else {
HXLINE( 588)								_hx_tmp27 = (int5 + ((Float)0.0));
            							}
HXDLIN( 588)							proj3->reset(owner3,bulletType,ownerId4,::Std_obj::_hx_int(::hx::Mod(_hx_tmp27,((Float)256.))),( (float)(angle2) ),::Global_obj::gameSprite->lastFixedUpdate);
HXLINE( 589)							proj3->setDamages(damage2,magicDamage,trueDamage);
HXLINE( 590)							::Global_obj::gameSprite->map->addGameObject(( ( ::objects::GameObject)(proj3) ),( (float)(startX1) ),( (float)(startY1) ));
            						}
            					}
HXLINE( 594)					int int6 = (numShots - 1);
HXDLIN( 594)					Float _hx_tmp28;
HXDLIN( 594)					if ((int6 < 0)) {
HXLINE( 594)						_hx_tmp28 = (((Float)4294967296.0) + int6);
            					}
            					else {
HXLINE( 594)						_hx_tmp28 = (int6 + ((Float)0.0));
            					}
HXDLIN( 594)					owner2->setAttack(owner2->objectType,( (float)((angle2 + (angleInc * (_hx_tmp28 / ((Float)2.))))) ));
HXLINE( 543)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(20) )) ){
HXLINE(1023)					::String name2 = data->readUTF();
HXLINE(1030)					::Global_obj::gameSprite->textBox->addText(((((name2 + HX_(" wants to ",28,db,d6,4f)) + HX_("trade with you.  Type \"/trade ",62,48,53,5c)) + name2) + HX_("\" to trade.",d1,0a,49,01)),( (unsigned int)(255) ));
HXLINE(1022)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(21) )) ){
HXLINE(1032)					::Array< ::Dynamic> myItems = ::Array_obj< ::Dynamic>::__new();
HXLINE(1033)					{
HXLINE(1033)						int _g17 = 0;
HXDLIN(1033)						int _g18 = data->readShort();
HXDLIN(1033)						while((_g17 < _g18)){
HXLINE(1033)							_g17 = (_g17 + 1);
HXLINE(1035)							 ::Dynamic _g19 = data->readInt();
HXLINE(1036)							 ::Dynamic _g20 = data->readInt();
HXLINE(1037)							 ::Dynamic _g21 = data->readBoolean();
HXLINE(1034)							myItems->push( ::network::TradeItem_obj::__alloc( HX_CTX ,_g19,_g20,_g21,data->readBoolean()));
            						}
            					}
HXLINE(1041)					data->readUTF();
HXLINE(1042)					::Array< ::Dynamic> yourItems = ::Array_obj< ::Dynamic>::__new();
HXLINE(1043)					{
HXLINE(1043)						int _g22 = 0;
HXDLIN(1043)						int _g23 = data->readShort();
HXDLIN(1043)						while((_g22 < _g23)){
HXLINE(1043)							_g22 = (_g22 + 1);
HXLINE(1045)							 ::Dynamic _g24 = data->readInt();
HXLINE(1046)							 ::Dynamic _g25 = data->readInt();
HXLINE(1047)							 ::Dynamic _g26 = data->readBoolean();
HXLINE(1044)							yourItems->push( ::network::TradeItem_obj::__alloc( HX_CTX ,_g24,_g25,_g26,data->readBoolean()));
            						}
            					}
HXLINE(1031)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(22) )) ){
HXLINE(1000)					::Array< bool > offer = ::Array_obj< bool >::__new();
HXLINE(1001)					int num1 = data->readShort();
HXLINE(1002)					{
HXLINE(1002)						int _g27 = 0;
HXDLIN(1002)						while((_g27 < num1)){
HXLINE(1002)							_g27 = (_g27 + 1);
HXLINE(1003)							offer->push(data->readBoolean());
            						}
            					}
HXLINE( 999)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(23) )) ){
HXLINE(1012)					data->readInt();
HXLINE(1013)					::String description = data->readUTF();
HXLINE(1021)					::Global_obj::gameSprite->textBox->addText(description,( (unsigned int)(255) ));
HXLINE(1011)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(24) )) ){
HXLINE( 983)					::Array< bool > myOffer = ::Array_obj< bool >::__new();
HXLINE( 984)					int num2 = data->readShort();
HXLINE( 985)					{
HXLINE( 985)						int _g28 = 0;
HXDLIN( 985)						int _g29 = num2;
HXDLIN( 985)						while((_g28 < _g29)){
HXLINE( 985)							_g28 = (_g28 + 1);
HXLINE( 986)							myOffer->push(data->readBoolean());
            						}
            					}
HXLINE( 988)					::Array< bool > yourOffer = ::Array_obj< bool >::__new();
HXLINE( 989)					num2 = data->readShort();
HXLINE( 990)					{
HXLINE( 990)						int _g30 = 0;
HXDLIN( 990)						int _g31 = num2;
HXDLIN( 990)						while((_g30 < _g31)){
HXLINE( 990)							_g30 = (_g30 + 1);
HXLINE( 991)							yourOffer->push(data->readBoolean());
            						}
            					}
HXLINE( 982)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(25) )) ){
HXLINE( 665)					::String name3 = data->readUTF();
HXLINE( 666)					::String guildName2 = data->readUTF();
HXLINE( 673)					::Global_obj::gameSprite->textBox->addText(((((((HX_("You have been invited by ",a7,72,cf,f6) + name3) + HX_(" to join the guild ",cd,d2,c5,1f)) + guildName2) + HX_(".\n  If you wish to join type \"/join ",85,24,e4,d3)) + guildName2) + HX_("\"",22,00,00,00)),( (unsigned int)(255) ));
HXLINE( 664)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(26) )) ){
HXLINE( 786)					int ownerId5 = data->readInt();
HXLINE( 787)					int soundId = data->readUnsignedByte();
HXLINE( 792)					 ::objects::GameObject obj = ::Global_obj::gameSprite->map->getGameObject(ownerId5);
HXLINE( 793)					if (::hx::IsNotNull( obj )) {
HXLINE( 794)						obj->playSound(soundId);
            					}
HXLINE( 785)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==( (signed char)(27) )) ){
HXLINE( 596)					signed char errorId = ( (signed char)(data->readInt()) );
HXLINE( 597)					::String errorDescription = data->readUTF();
HXLINE( 603)					signed char _hx_switch_1 = errorId;
            					if (  (_hx_switch_1==( (signed char)(-1) )) ){
HXLINE( 627)						::Global_obj::gameSprite->textBox->addText(errorDescription,( (unsigned int)(16711680) ));
HXDLIN( 627)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_1==( (signed char)(0) )) ||  (_hx_switch_1==( (signed char)(2) )) ){
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            						void _hx_run( ::openfl::events::Event event){
            							HX_GC_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_618_onSocketData)
HXLINE( 619)							 ::ui::dialogs::Dialog dialog = ::hx::TCast<  ::ui::dialogs::Dialog >::cast(event->currentTarget);
HXLINE( 620)							dialog->parent->removeChild(dialog);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 615)						::network::NetworkHandler_obj::disconnect();
HXLINE( 617)						 ::ui::dialogs::Dialog dialog =  ::ui::dialogs::Dialog_obj::__alloc( HX_CTX ,errorDescription,HX_("Connection error",66,be,de,b0),HX_("Ok",3c,45,00,00),null());
HXLINE( 618)						dialog->addEventListener(HX_("DIALOG_BUTTON1",48,38,81,e9), ::Dynamic(new _hx_Closure_1()),null(),null(),null());
HXLINE( 622)						::Global_obj::layers->dialogs->openDialog(dialog);
HXLINE( 614)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_1==( (signed char)(1) )) ){
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            						void _hx_run( ::openfl::events::Event event){
            							HX_GC_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_609_onSocketData)
HXLINE( 610)							 ::ui::dialogs::Dialog dialog = ::hx::TCast<  ::ui::dialogs::Dialog >::cast(event->currentTarget);
HXLINE( 611)							dialog->parent->removeChild(dialog);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 605)						::network::NetworkHandler_obj::disconnect();
HXLINE( 607)						 ::ui::dialogs::Dialog dialog1 =  ::ui::dialogs::Dialog_obj::__alloc( HX_CTX ,(((HX_("Client version: ",c9,9d,af,12) + HX_("0.5",77,94,24,00)) + HX_("\nServer version: ",4b,98,bf,b8)) + errorDescription),HX_("Client Update Needed",f7,d6,84,a4),HX_("Ok",3c,45,00,00),null());
HXLINE( 609)						dialog1->addEventListener(HX_("DIALOG_BUTTON1",48,38,81,e9), ::Dynamic(new _hx_Closure_2()),null(),null(),null());
HXLINE( 613)						::Global_obj::layers->dialogs->openDialog(dialog1);
HXLINE( 604)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_1==( (signed char)(3) )) ){
HXLINE( 624)						::Global_obj::gameSprite->textBox->addText(errorDescription,( (unsigned int)(16711680) ));
HXLINE( 625)						::network::NetworkHandler_obj::player->nextTeleportAt = 0;
HXLINE( 623)						goto _hx_goto_26;
            					}
            					/* default */{
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            						void _hx_run( ::openfl::events::Event event){
            							HX_GC_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_632_onSocketData)
HXLINE( 633)							 ::ui::dialogs::Dialog dialog = ::hx::TCast<  ::ui::dialogs::Dialog >::cast(event->currentTarget);
HXLINE( 634)							dialog->parent->removeChild(dialog);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 629)						::network::NetworkHandler_obj::disconnect();
HXLINE( 631)						 ::ui::dialogs::Dialog dialog2 =  ::ui::dialogs::Dialog_obj::__alloc( HX_CTX ,errorDescription,HX_("Connection error",66,be,de,b0),HX_("Ok",3c,45,00,00),null());
HXLINE( 632)						dialog2->addEventListener(HX_("DIALOG_BUTTON1",48,38,81,e9), ::Dynamic(new _hx_Closure_0()),null(),null(),null());
HXLINE( 636)						::Global_obj::layers->dialogs->openDialog(dialog2);
            					}
            					_hx_goto_26:;
HXLINE( 595)					goto _hx_goto_10;
            				}
            				_hx_goto_10:;
            			}
            			_hx_goto_9:;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g32 = _hx_e;
HXLINE(1110)				 ::haxe::Exception _g33 = ::haxe::Exception_obj::caught(_g32);
HXDLIN(1110)				{
HXLINE(1111)					{
HXLINE(1111)						 ::game::GameSprite tmp = ::Global_obj::gameSprite;
HXDLIN(1111)						if (::hx::IsNotNull( tmp )) {
HXLINE(1111)							 ::ui::TextBox tmp1 = tmp->textBox;
HXDLIN(1111)							tmp1->addText((HX_("Socket Read Error: ",11,d2,1c,3f) + ::Std_obj::string(_g33)),( (unsigned int)(16711680) ));
            						}
            					}
HXLINE(1112)					 ::Dynamic _hx_tmp29 = ::haxe::Log_obj::trace;
HXDLIN(1112)					::String _hx_tmp30 = ((HX_("Socket Read Error: ",11,d2,1c,3f) + ::Std_obj::string(_g33)) + HX_(", stack trace: ",9f,40,6c,1b));
HXDLIN(1112)					::Array< ::Dynamic> tmp2 = _g33->get_stack();
HXDLIN(1112)					::String _hx_tmp31;
HXDLIN(1112)					if (::hx::IsNull( tmp2 )) {
HXLINE(1112)						_hx_tmp31 = HX_("null",87,9e,0e,49);
            					}
            					else {
HXLINE(1112)						_hx_tmp31 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp2);
            					}
HXDLIN(1112)					_hx_tmp29((_hx_tmp30 + _hx_tmp31),::hx::SourceInfo(HX_("src/network/NetworkHandler.hx",56,46,30,c7),1112,HX_("network.NetworkHandler",9c,1c,1c,d4),HX_("onSocketData",7c,05,22,8a)));
HXLINE(1113)					::network::NetworkHandler_obj::disconnect();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,onSocketData,(void))

void NetworkHandler_obj::updateAck(){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1118_updateAck)
HXDLIN(1118)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(3) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NetworkHandler_obj,updateAck,(void))

void NetworkHandler_obj::gotoAck(int time){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1132_gotoAck)
HXLINE(1133)		::network::NetworkHandler_obj::outgoingData->writeInt(time);
HXLINE(1134)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(19) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,gotoAck,(void))

void NetworkHandler_obj::pong(int serial,int time){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1145_pong)
HXLINE(1146)		::network::NetworkHandler_obj::outgoingData->writeInt(serial);
HXLINE(1147)		::network::NetworkHandler_obj::outgoingData->writeInt(time);
HXLINE(1148)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(8) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NetworkHandler_obj,pong,(void))

void NetworkHandler_obj::playerShoot(int time, ::objects::Projectile proj){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1155_playerShoot)
HXLINE(1156)		::network::NetworkHandler_obj::outgoingData->writeInt(time);
HXLINE(1157)		::network::NetworkHandler_obj::outgoingData->writeByte(proj->bulletId);
HXLINE(1158)		::network::NetworkHandler_obj::outgoingData->writeShort(proj->containerType);
HXLINE(1159)		::network::NetworkHandler_obj::outgoingData->writeFloat(( (Float)(proj->mapX) ));
HXLINE(1160)		::network::NetworkHandler_obj::outgoingData->writeFloat(( (Float)(proj->mapY) ));
HXLINE(1161)		::network::NetworkHandler_obj::outgoingData->writeFloat(proj->angle);
HXLINE(1162)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(0) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NetworkHandler_obj,playerShoot,(void))

void NetworkHandler_obj::playerHit(int bulletId,int objectId){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1181_playerHit)
HXLINE(1182)		::network::NetworkHandler_obj::outgoingData->writeByte(bulletId);
HXLINE(1183)		::network::NetworkHandler_obj::outgoingData->writeInt(objectId);
HXLINE(1184)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(13) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NetworkHandler_obj,playerHit,(void))

void NetworkHandler_obj::enemyHit(int time,int bulletId,int targetId,bool kill){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1191_enemyHit)
HXLINE(1193)		::network::NetworkHandler_obj::outgoingData->writeByte(bulletId);
HXLINE(1194)		::network::NetworkHandler_obj::outgoingData->writeInt(targetId);
HXLINE(1196)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(14) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NetworkHandler_obj,enemyHit,(void))

void NetworkHandler_obj::groundDamage(int time,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1225_groundDamage)
HXLINE(1226)		::network::NetworkHandler_obj::outgoingData->writeInt(time);
HXLINE(1227)		::network::NetworkHandler_obj::outgoingData->writeFloat(x);
HXLINE(1228)		::network::NetworkHandler_obj::outgoingData->writeFloat(y);
HXLINE(1229)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(12) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NetworkHandler_obj,groundDamage,(void))

void NetworkHandler_obj::playerText(::String textStr){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1236_playerText)
HXLINE(1237)		::network::NetworkHandler_obj::outgoingData->writeUTF(textStr);
HXLINE(1238)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(2) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,playerText,(void))

bool NetworkHandler_obj::invSwap( ::objects::Player player, ::objects::GameObject sourceObj,int slotId1,int itemId, ::objects::GameObject targetObj,int slotId2,int objectType2){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1245_invSwap)
HXLINE(1246)		if (::hx::IsNull( ::Global_obj::gameSprite )) {
HXLINE(1247)			return false;
            		}
HXLINE(1249)		::network::NetworkHandler_obj::outgoingData->writeInt(sourceObj->objectId);
HXLINE(1250)		::network::NetworkHandler_obj::outgoingData->writeByte(slotId1);
HXLINE(1251)		::network::NetworkHandler_obj::outgoingData->writeInt(targetObj->objectId);
HXLINE(1252)		::network::NetworkHandler_obj::outgoingData->writeByte(slotId2);
HXLINE(1253)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(4) )) ));
HXLINE(1267)		int tempType = sourceObj->equipment->__get(slotId1);
HXLINE(1268)		sourceObj->equipment[slotId1] = targetObj->equipment->__get(slotId2);
HXLINE(1269)		targetObj->equipment[slotId2] = tempType;
HXLINE(1271)		::sound::SoundEffectLibrary_obj::play(HX_("inventory_move_item",9e,0d,3c,14),null(),null());
HXLINE(1272)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(NetworkHandler_obj,invSwap,return )

bool NetworkHandler_obj::invSwapVial( ::objects::Player player, ::objects::GameObject sourceObj,int slotId1,int itemId, ::objects::GameObject targetObj,int slotId2,int objectType2){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1276_invSwapVial)
HXLINE(1277)		if (::hx::IsNull( ::Global_obj::gameSprite )) {
HXLINE(1278)			return false;
            		}
HXLINE(1280)		::network::NetworkHandler_obj::outgoingData->writeInt(sourceObj->objectId);
HXLINE(1281)		::network::NetworkHandler_obj::outgoingData->writeByte(slotId1);
HXLINE(1282)		::network::NetworkHandler_obj::outgoingData->writeInt(targetObj->objectId);
HXLINE(1283)		::network::NetworkHandler_obj::outgoingData->writeByte(slotId2);
HXLINE(1284)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(4) )) ));
HXLINE(1298)		sourceObj->equipment[slotId1] = -1;
HXLINE(1299)		if ((itemId == 2721)) {
HXLINE(1300)			player->healthVialCount++;
            		}
            		else {
HXLINE(1301)			if ((itemId == 2722)) {
HXLINE(1302)				player->magicVialCount++;
            			}
            		}
HXLINE(1304)		::sound::SoundEffectLibrary_obj::play(HX_("inventory_move_item",9e,0d,3c,14),null(),null());
HXLINE(1305)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(NetworkHandler_obj,invSwapVial,return )

void NetworkHandler_obj::invDrop( ::objects::GameObject object,int slotId,int objectType){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1308_invDrop)
HXLINE(1309)		::network::NetworkHandler_obj::outgoingData->writeInt(object->objectId);
HXLINE(1310)		::network::NetworkHandler_obj::outgoingData->writeByte(slotId);
HXLINE(1311)		::network::NetworkHandler_obj::outgoingData->writeShort(objectType);
HXLINE(1312)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(7) )) ));
HXLINE(1318)		bool _hx_tmp;
HXDLIN(1318)		if ((slotId != 254)) {
HXLINE(1318)			_hx_tmp = (slotId != 255);
            		}
            		else {
HXLINE(1318)			_hx_tmp = false;
            		}
HXDLIN(1318)		if (_hx_tmp) {
HXLINE(1319)			object->equipment[slotId] = -1;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NetworkHandler_obj,invDrop,(void))

void NetworkHandler_obj::useItem(int time,int objectId,int slotId,int objectType,Float posX,Float posY,int useType){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1322_useItem)
HXLINE(1323)		::network::NetworkHandler_obj::outgoingData->writeInt(time);
HXLINE(1324)		::network::NetworkHandler_obj::outgoingData->writeInt(objectId);
HXLINE(1325)		::network::NetworkHandler_obj::outgoingData->writeByte(slotId);
HXLINE(1326)		::network::NetworkHandler_obj::outgoingData->writeShort(objectType);
HXLINE(1327)		::network::NetworkHandler_obj::outgoingData->writeFloat(posX);
HXLINE(1328)		::network::NetworkHandler_obj::outgoingData->writeFloat(posY);
HXLINE(1329)		::network::NetworkHandler_obj::outgoingData->writeByte(useType);
HXLINE(1330)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(5) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(NetworkHandler_obj,useItem,(void))

bool NetworkHandler_obj::useItem_new( ::objects::GameObject itemOwner,int slotId){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1351_useItem_new)
HXLINE(1352)		int itemId = itemOwner->equipment->__get(slotId);
HXLINE(1353)		 ::Xml objectXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(itemId)) );
HXLINE(1354)		if (::hx::IsNull( objectXML )) {
HXLINE(1355)			return false;
            		}
HXLINE(1357)		bool _hx_tmp;
HXDLIN(1357)		if (!(( (bool)(objectXML->elementsNamed(HX_("Consumable",c3,28,d2,d6))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ))) {
HXLINE(1357)			_hx_tmp = ( (bool)(objectXML->elementsNamed(HX_("InvUse",f6,37,61,d4))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            		}
            		else {
HXLINE(1357)			_hx_tmp = true;
            		}
HXDLIN(1357)		if (_hx_tmp) {
HXLINE(1358)			if (!(( (bool)(objectXML->elementsNamed(HX_("Activate",d3,d7,5d,bf))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ))) {
HXLINE(1359)				int _hx_tmp1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(1359)				::network::NetworkHandler_obj::useItem(_hx_tmp1,itemOwner->objectId,slotId,itemId,( (Float)(0) ),( (Float)(0) ),0);
HXLINE(1360)				if (( (bool)(objectXML->elementsNamed(HX_("Consumable",c3,28,d2,d6))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(1361)					itemOwner->equipment[slotId] = -1;
            				}
HXLINE(1362)				::sound::SoundEffectLibrary_obj::play(HX_("use_potion",8b,a7,48,a2),null(),null());
HXLINE(1363)				return true;
            			}
HXLINE(1366)			 ::objects::Player plr = ::hx::TCast<  ::objects::Player >::cast(itemOwner);
HXLINE(1367)			int totalActivate = 0;
HXLINE(1368)			int failedActivate = 0;
HXLINE(1370)			{
HXLINE(1370)				 ::Dynamic activateXML = objectXML->elementsNamed(HX_("Activate",d3,d7,5d,bf));
HXDLIN(1370)				while(( (bool)(activateXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1370)					 ::Xml activateXML1 = ( ( ::Xml)(activateXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1371)					totalActivate = (totalActivate + 1);
HXLINE(1373)					::String activationType = ::haxe::xml::Printer_obj::print(activateXML1,null());
HXLINE(1374)					if ((activationType == HX_("UnlockSkin",81,9b,ee,0d))) {
HXLINE(1375)						 ::classes::model::ClassModel skin = ::Global_obj::classModel;
HXDLIN(1375)						 ::classes::model::CharacterSkin skin1 = skin->getCharacterSkin(( (int)(::Std_obj::parseInt(activateXML1->get(HX_("objType",51,76,23,77)))) ));
HXLINE(1377)						 ::classes::model::CharacterSkinState _hx_tmp2 = skin1->getState();
HXDLIN(1377)						if (::hx::IsInstanceEq( _hx_tmp2,::classes::model::CharacterSkinState_obj::OWNED )) {
HXLINE(1378)							::Global_obj::gameSprite->textBox->addText(HX_("You already own this skin!",25,75,04,5c),( (unsigned int)(16711680) ));
HXLINE(1379)							return false;
            						}
            						else {
HXLINE(1381)							skin1->setState(::classes::model::CharacterSkinState_obj::OWNED);
HXLINE(1382)							::Global_obj::gameSprite->textBox->addText(HX_("Skin unlocked successfully.",4d,6f,ea,cc),( (unsigned int)(255) ));
            						}
            					}
HXLINE(1386)					::String _hx_switch_0 = activationType;
            					if (  (_hx_switch_0==HX_("Heal",48,55,e4,2f)) ){
HXLINE(1388)						if ((plr->hp >= plr->maxHP)) {
HXLINE(1389)							failedActivate = 1;
            						}
HXLINE(1390)						goto _hx_goto_43;
HXLINE(1387)						goto _hx_goto_44;
            					}
            					if (  (_hx_switch_0==HX_("Magic",0d,e1,46,96)) ){
HXLINE(1392)						bool _hx_tmp3;
HXDLIN(1392)						if ((plr->mp < plr->maxMP)) {
HXLINE(1392)							int plr1 = plr->objectType;
HXDLIN(1392)							_hx_tmp3 = ::hx::IsEq( plr1,::objects::ObjectLibrary_obj::idToType->get(HX_("Warlock",f3,18,cf,d5)) );
            						}
            						else {
HXLINE(1392)							_hx_tmp3 = true;
            						}
HXDLIN(1392)						if (_hx_tmp3) {
HXLINE(1393)							failedActivate = 1;
            						}
HXLINE(1394)						goto _hx_goto_43;
HXLINE(1391)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            				_hx_goto_43:;
            			}
HXLINE(1398)			if ((failedActivate >= totalActivate)) {
HXLINE(1399)				::sound::SoundEffectLibrary_obj::play(HX_("error",c8,cb,29,73),null(),null());
HXLINE(1400)				return false;
            			}
            		}
HXLINE(1404)		if (( (bool)(objectXML->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(1405)			 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("SlotType",f8,8f,63,7a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1405)			bool slotType;
HXDLIN(1405)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(1405)				slotType = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(1405)				slotType = false;
            			}
HXDLIN(1405)			if (slotType) {
HXLINE(1405)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN(1405)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(1405)			bool slotType1;
HXDLIN(1405)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(1405)				slotType1 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXLINE(1405)				slotType1 = true;
            			}
HXDLIN(1405)			if (slotType1) {
HXLINE(1405)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN(1405)			int slotType2 = ( (int)(::Std_obj::parseInt(_this1->nodeValue)) );
HXLINE(1406)			::Array< int > slotTypes = itemOwner->slotTypes->slice(0,4);
HXLINE(1407)			{
HXLINE(1407)				int _g = 0;
HXDLIN(1407)				int _g1 = slotTypes->length;
HXDLIN(1407)				while((_g < _g1)){
HXLINE(1407)					_g = (_g + 1);
HXDLIN(1407)					int i = (_g - 1);
HXLINE(1408)					if (::objects::ObjectLibrary_obj::slotsMatching(slotTypes->__get(i),slotType2)) {
HXLINE(1409)						::Array< int > equips = itemOwner->equipment;
HXLINE(1410)						::network::NetworkHandler_obj::invSwap(::hx::TCast<  ::objects::Player >::cast(itemOwner),itemOwner,i,equips->__get(i),itemOwner,slotId,equips->__get(slotId));
HXLINE(1411)						return true;
            					}
            				}
            			}
            		}
HXLINE(1415)		::sound::SoundEffectLibrary_obj::play(HX_("error",c8,cb,29,73),null(),null());
HXLINE(1417)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NetworkHandler_obj,useItem_new,return )

void NetworkHandler_obj::teleport(int objectId){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1420_teleport)
HXLINE(1421)		::network::NetworkHandler_obj::outgoingData->writeInt(objectId);
HXLINE(1422)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(9) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,teleport,(void))

void NetworkHandler_obj::usePortal(int objectId){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1429_usePortal)
HXLINE(1430)		if (::hx::IsNotNull( ::Global_obj::gameSprite )) {
HXLINE(1431)			::map::Camera_obj::mapX = (::Global_obj::gameSprite->map->player->mapX = ( (float)(-1) ));
HXLINE(1432)			::map::Camera_obj::mapY = (::Global_obj::gameSprite->map->player->mapY = ( (float)(-1) ));
HXLINE(1433)			::Global_obj::gameSprite->disconnect();
            		}
HXLINE(1436)		::network::NetworkHandler_obj::outgoingData->writeInt(objectId);
HXLINE(1437)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(10) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,usePortal,(void))

void NetworkHandler_obj::requestTrade(::String name){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1491_requestTrade)
HXLINE(1492)		::network::NetworkHandler_obj::outgoingData->writeUTF(name);
HXLINE(1493)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(24) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,requestTrade,(void))

void NetworkHandler_obj::escape(){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1532_escape)
HXLINE(1533)		if ((::network::NetworkHandler_obj::playerId == -1)) {
HXLINE(1534)			return;
            		}
HXLINE(1536)		if ((::Global_obj::gameSprite->map->mapName == HX_("Hub",95,08,37,00))) {
HXLINE(1540)			return;
            		}
HXLINE(1543)		if (::hx::IsNotNull( ::Global_obj::gameSprite )) {
HXLINE(1544)			::map::Camera_obj::mapX = (::Global_obj::gameSprite->map->player->mapX = ( (float)(-1) ));
HXLINE(1545)			::map::Camera_obj::mapY = (::Global_obj::gameSprite->map->player->mapY = ( (float)(-1) ));
HXLINE(1546)			::Global_obj::gameSprite->disconnect();
            		}
HXLINE(1549)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(28) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NetworkHandler_obj,escape,(void))

void NetworkHandler_obj::joinGuild(::String guildName){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1556_joinGuild)
HXLINE(1557)		::network::NetworkHandler_obj::outgoingData->writeUTF(guildName);
HXLINE(1558)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(29) )) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NetworkHandler_obj,joinGuild,(void))

void NetworkHandler_obj::setPlayerSkinTemplate( ::objects::Player player,int skinId){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1586_setPlayerSkinTemplate)
HXLINE(1587)		 ::objects::Player player1;
HXDLIN(1587)		if (::hx::IsNotNull( player )) {
HXLINE(1587)			player1 = player;
            		}
            		else {
HXLINE(1587)			player1 = ::Global_obj::gameSprite->map->player;
            		}
HXLINE(1590)		 ::classes::model::CharacterSkin skin = ::Global_obj::classModel->getCharacterClass(player1->objectType)->skins->getSkin(skinId);
HXLINE(1591)		player1->skinId = skinId;
HXLINE(1592)		player1->skin = ::assets::CharacterFactory_obj::makeCharacter(skin->_hx_template);
HXLINE(1593)		player1->isDefaultAnimatedChar = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NetworkHandler_obj,setPlayerSkinTemplate,(void))

void NetworkHandler_obj::move(int tickId, ::objects::Player player){
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_1596_move)
HXLINE(1597)		int len = 0;
HXLINE(1598)		Float x = ((Float)-1.0);
HXLINE(1599)		Float y = ((Float)-1.0);
HXLINE(1600)		if (::hx::IsNotNull( player )) {
HXLINE(1601)			x = ( (Float)(player->mapX) );
HXLINE(1602)			y = ( (Float)(player->mapY) );
            		}
HXLINE(1605)		::network::NetworkHandler_obj::outgoingData->writeByte(tickId);
HXLINE(1606)		::network::NetworkHandler_obj::outgoingData->writeInt(::Global_obj::gameSprite->lastFixedUpdate);
HXLINE(1607)		::network::NetworkHandler_obj::outgoingData->writeFloat(x);
HXLINE(1608)		::network::NetworkHandler_obj::outgoingData->writeFloat(y);
HXLINE(1610)		int lastMove = ::Global_obj::gameSprite->moveRecords->lastClearTime;
HXLINE(1611)		bool _hx_tmp;
HXDLIN(1611)		if ((lastMove >= 0)) {
HXLINE(1611)			_hx_tmp = ((::Global_obj::gameSprite->lastFixedUpdate - lastMove) > 125);
            		}
            		else {
HXLINE(1611)			_hx_tmp = false;
            		}
HXDLIN(1611)		if (_hx_tmp) {
HXLINE(1612)			len = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(10) ),( (Float)(::Global_obj::gameSprite->moveRecords->recordIdx) )));
HXLINE(1613)			unsigned short actualLen = ( (unsigned short)(0) );
HXLINE(1614)			{
HXLINE(1614)				int _g = 0;
HXDLIN(1614)				int _g1 = len;
HXDLIN(1614)				while((_g < _g1)){
HXLINE(1614)					_g = (_g + 1);
HXLINE(1615)					if ((::Global_obj::gameSprite->moveRecords->records->__get((_g - 1)).StaticCast<  ::game::MoveRecord >()->time < (::Global_obj::gameSprite->lastFixedUpdate - 25))) {
HXLINE(1616)						actualLen = (actualLen + 1);
            					}
            				}
            			}
HXLINE(1618)			::network::NetworkHandler_obj::outgoingData->writeShort(( (int)(actualLen) ));
HXLINE(1619)			{
HXLINE(1619)				int _g2 = 0;
HXDLIN(1619)				int _g3 = len;
HXDLIN(1619)				while((_g2 < _g3)){
HXLINE(1619)					_g2 = (_g2 + 1);
HXDLIN(1619)					int i = (_g2 - 1);
HXLINE(1620)					if ((::Global_obj::gameSprite->moveRecords->records->__get(i).StaticCast<  ::game::MoveRecord >()->time >= (::Global_obj::gameSprite->lastFixedUpdate - 25))) {
HXLINE(1621)						goto _hx_goto_54;
            					}
HXLINE(1623)					 ::game::MoveRecord rec = ::Global_obj::gameSprite->moveRecords->records->__get(i).StaticCast<  ::game::MoveRecord >();
HXLINE(1624)					::network::NetworkHandler_obj::outgoingData->writeInt(rec->time);
HXLINE(1625)					::network::NetworkHandler_obj::outgoingData->writeFloat(( (Float)(rec->x) ));
HXLINE(1626)					::network::NetworkHandler_obj::outgoingData->writeFloat(( (Float)(rec->y) ));
            				}
            				_hx_goto_54:;
            			}
            		}
            		else {
HXLINE(1629)			::network::NetworkHandler_obj::outgoingData->writeShort(0);
            		}
HXLINE(1631)		::Global_obj::gameSprite->moveRecords->clear(::Global_obj::gameSprite->lastFixedUpdate);
HXLINE(1632)		::network::NetworkHandler_obj::sendPacket(( (int)(( (signed char)(1) )) ));
HXLINE(1648)		if (::hx::IsNotNull( player )) {
HXLINE(1649)			if (::hx::IsNull( ::Global_obj::gameSprite->map )) {
HXLINE(1650)				return;
            			}
HXLINE(1652)			 ::map::Map square = ::Global_obj::gameSprite->map;
HXDLIN(1652)			int square1 = ::Std_obj::_hx_int(( (Float)(player->mapX) ));
HXDLIN(1652)			 ::map::Square square2 = square->lookupSquare(( (unsigned short)(square1) ),( (unsigned short)(::Std_obj::_hx_int(( (Float)(player->mapY) ))) ));
HXLINE(1653)			if (::hx::IsNull( square2 )) {
HXLINE(1654)				return;
            			}
HXLINE(1656)			if (square2->props->sinking) {
HXLINE(1657)				player->sinkLevel = ( (float)(::Math_obj::min((player->sinkLevel + ((Float)0.1)),((Float)1.8))) );
HXLINE(1658)				player->moveMultiplier = (((Float)0.1) + ((( (Float)(1) ) - (( (Float)(player->sinkLevel) ) / ((Float)1.8))) * (square2->props->speed - ((Float)0.1))));
            			}
            			else {
HXLINE(1660)				player->sinkLevel = ( (float)(0) );
HXLINE(1661)				player->moveMultiplier = square2->props->speed;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NetworkHandler_obj,move,(void))


NetworkHandler_obj::NetworkHandler_obj()
{
}

bool NetworkHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pong") ) { outValue = pong_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"move") ) { outValue = move_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fmMap") ) { outValue = ( fmMap ); return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { outValue = ( socket ); return true; }
		if (HX_FIELD_EQ(inName,"server") ) { outValue = ( server ); return true; }
		if (HX_FIELD_EQ(inName,"gameId") ) { outValue = ( gameId ); return true; }
		if (HX_FIELD_EQ(inName,"charId") ) { outValue = ( charId ); return true; }
		if (HX_FIELD_EQ(inName,"player") ) { outValue = ( player ); return true; }
		if (HX_FIELD_EQ(inName,"escape") ) { outValue = escape_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readLen") ) { outValue = ( readLen ); return true; }
		if (HX_FIELD_EQ(inName,"connect") ) { outValue = connect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onClose") ) { outValue = onClose_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gotoAck") ) { outValue = gotoAck_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invSwap") ) { outValue = invSwap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invDrop") ) { outValue = invDrop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"useItem") ) { outValue = useItem_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"playerId") ) { outValue = ( playerId ); return true; }
		if (HX_FIELD_EQ(inName,"enemyHit") ) { outValue = enemyHit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"teleport") ) { outValue = teleport_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onConnect") ) { outValue = onConnect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onIOError") ) { outValue = onIOError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateAck") ) { outValue = updateAck_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playerHit") ) { outValue = playerHit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"usePortal") ) { outValue = usePortal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"joinGuild") ) { outValue = joinGuild_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastTickId") ) { outValue = ( lastTickId ); return true; }
		if (HX_FIELD_EQ(inName,"disconnect") ) { outValue = disconnect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sendPacket") ) { outValue = sendPacket_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playerText") ) { outValue = playerText_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerShoot") ) { outValue = playerShoot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invSwapVial") ) { outValue = invSwapVial_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"useItem_new") ) { outValue = useItem_new_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"outgoingData") ) { outValue = ( outgoingData ); return true; }
		if (HX_FIELD_EQ(inName,"onSocketData") ) { outValue = onSocketData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"groundDamage") ) { outValue = groundDamage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"requestTrade") ) { outValue = requestTrade_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createCharacter") ) { outValue = ( createCharacter ); return true; }
		if (HX_FIELD_EQ(inName,"onSecurityError") ) { outValue = onSecurityError_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setPlayerSkinTemplate") ) { outValue = setPlayerSkinTemplate_dyn(); return true; }
	}
	return false;
}

bool NetworkHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fmMap") ) { fmMap=ioValue.Cast<  ::openfl::utils::ByteArrayData >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { socket=ioValue.Cast<  ::openfl::net::Socket >(); return true; }
		if (HX_FIELD_EQ(inName,"server") ) { server=ioValue.Cast<  ::servers::Server >(); return true; }
		if (HX_FIELD_EQ(inName,"gameId") ) { gameId=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"charId") ) { charId=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"player") ) { player=ioValue.Cast<  ::objects::Player >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readLen") ) { readLen=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"playerId") ) { playerId=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastTickId") ) { lastTickId=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"outgoingData") ) { outgoingData=ioValue.Cast<  ::openfl::utils::ByteArrayData >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createCharacter") ) { createCharacter=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *NetworkHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo NetworkHandler_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::Socket */ ,(void *) &NetworkHandler_obj::socket,HX_("socket",b3,8b,46,26)},
	{::hx::fsObject /*  ::servers::Server */ ,(void *) &NetworkHandler_obj::server,HX_("server",c3,4a,37,6e)},
	{::hx::fsInt,(void *) &NetworkHandler_obj::gameId,HX_("gameId",6d,94,f9,50)},
	{::hx::fsBool,(void *) &NetworkHandler_obj::createCharacter,HX_("createCharacter",0d,95,c6,e2)},
	{::hx::fsInt,(void *) &NetworkHandler_obj::charId,HX_("charId",51,80,75,b7)},
	{::hx::fsInt,(void *) &NetworkHandler_obj::lastTickId,HX_("lastTickId",8e,37,15,e3)},
	{::hx::fsObject /*  ::openfl::utils::ByteArrayData */ ,(void *) &NetworkHandler_obj::fmMap,HX_("fmMap",95,2f,26,03)},
	{::hx::fsInt,(void *) &NetworkHandler_obj::playerId,HX_("playerId",9c,85,53,48)},
	{::hx::fsObject /*  ::objects::Player */ ,(void *) &NetworkHandler_obj::player,HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::openfl::utils::ByteArrayData */ ,(void *) &NetworkHandler_obj::outgoingData,HX_("outgoingData",b6,40,78,ba)},
	{::hx::fsInt,(void *) &NetworkHandler_obj::readLen,HX_("readLen",1f,f2,cb,02)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void NetworkHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::socket,"socket");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::server,"server");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::gameId,"gameId");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::createCharacter,"createCharacter");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::charId,"charId");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::lastTickId,"lastTickId");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::fmMap,"fmMap");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::playerId,"playerId");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::player,"player");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::outgoingData,"outgoingData");
	HX_MARK_MEMBER_NAME(NetworkHandler_obj::readLen,"readLen");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NetworkHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::socket,"socket");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::server,"server");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::gameId,"gameId");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::createCharacter,"createCharacter");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::charId,"charId");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::lastTickId,"lastTickId");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::fmMap,"fmMap");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::playerId,"playerId");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::player,"player");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::outgoingData,"outgoingData");
	HX_VISIT_MEMBER_NAME(NetworkHandler_obj::readLen,"readLen");
};

#endif

::hx::Class NetworkHandler_obj::__mClass;

static ::String NetworkHandler_obj_sStaticFields[] = {
	HX_("socket",b3,8b,46,26),
	HX_("server",c3,4a,37,6e),
	HX_("gameId",6d,94,f9,50),
	HX_("createCharacter",0d,95,c6,e2),
	HX_("charId",51,80,75,b7),
	HX_("lastTickId",8e,37,15,e3),
	HX_("fmMap",95,2f,26,03),
	HX_("playerId",9c,85,53,48),
	HX_("player",61,eb,b8,37),
	HX_("outgoingData",b6,40,78,ba),
	HX_("readLen",1f,f2,cb,02),
	HX_("init",10,3b,bb,45),
	HX_("reset",cf,49,c8,e6),
	HX_("connect",ea,3b,80,15),
	HX_("disconnect",5c,64,44,69),
	HX_("sendPacket",f0,7e,ee,84),
	HX_("onConnect",8b,f4,2a,ed),
	HX_("onClose",19,b6,a0,de),
	HX_("onIOError",c3,2a,81,82),
	HX_("onSecurityError",49,90,00,2a),
	HX_("onSocketData",7c,05,22,8a),
	HX_("updateAck",c0,ce,d6,82),
	HX_("gotoAck",66,77,cb,30),
	HX_("pong",f8,7f,5c,4a),
	HX_("playerShoot",be,26,06,83),
	HX_("playerHit",72,a5,c0,00),
	HX_("enemyHit",eb,88,0a,e4),
	HX_("groundDamage",56,46,38,c4),
	HX_("playerText",ae,a8,bb,af),
	HX_("invSwap",24,30,0f,32),
	HX_("invSwapVial",22,6d,fc,14),
	HX_("invDrop",c0,3d,21,28),
	HX_("useItem",fa,4c,6b,54),
	HX_("useItem_new",5b,67,4d,0b),
	HX_("teleport",ab,a2,33,f3),
	HX_("usePortal",53,0a,b0,b3),
	HX_("requestTrade",95,41,f1,b1),
	HX_("escape",81,43,da,da),
	HX_("joinGuild",69,8d,7d,5d),
	HX_("setPlayerSkinTemplate",1a,95,47,f6),
	HX_("move",11,e3,60,48),
	::String(null())
};

void NetworkHandler_obj::__register()
{
	NetworkHandler_obj _hx_dummy;
	NetworkHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("network.NetworkHandler",9c,1c,1c,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NetworkHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &NetworkHandler_obj::__SetStatic;
	__mClass->mMarkFunc = NetworkHandler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NetworkHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< NetworkHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NetworkHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NetworkHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NetworkHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NetworkHandler_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_219_boot)
HXDLIN( 219)		socket =  ::openfl::net::Socket_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_222_boot)
HXDLIN( 222)		gameId = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_223_boot)
HXDLIN( 223)		createCharacter = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_224_boot)
HXDLIN( 224)		charId = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_225_boot)
HXDLIN( 225)		lastTickId = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_228_boot)
HXDLIN( 228)		playerId = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9fdca7b25a3f936a_232_boot)
HXDLIN( 232)		readLen = 65535;
            	}
}

} // end namespace network
