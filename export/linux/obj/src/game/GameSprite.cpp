// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_0e0693b5ce2fed3b
#define INCLUDED_0e0693b5ce2fed3b
#include "discord_register.h"
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_core_ScreensView
#include <core/ScreensView.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_InputHandler
#include <game/InputHandler.h>
#endif
#ifndef INCLUDED_game_MoveRecord
#include <game/MoveRecord.h>
#endif
#ifndef INCLUDED_game_MoveRecords
#include <game/MoveRecords.h>
#endif
#ifndef INCLUDED_game_view_CurrencyDisplay
#include <game/view/CurrencyDisplay.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_map_Camera
#include <map/Camera.h>
#endif
#ifndef INCLUDED_map_CharacterStatusText
#include <map/CharacterStatusText.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_mapeditor_MapEditor
#include <mapeditor/MapEditor.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_objects_ObjectProperties
#include <objects/ObjectProperties.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_objects_Projectile
#include <objects/Projectile.h>
#endif
#ifndef INCLUDED_objects_TextureData
#include <objects/TextureData.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_screens_CharacterSelectionScreen
#include <screens/CharacterSelectionScreen.h>
#endif
#ifndef INCLUDED_servers_Server
#include <servers/Server.h>
#endif
#ifndef INCLUDED_ui_GuildText
#include <ui/GuildText.h>
#endif
#ifndef INCLUDED_ui_MiniMap
#include <ui/MiniMap.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_TextBox
#include <ui/TextBox.h>
#endif
#ifndef INCLUDED_ui_dialogs_DialogsView
#include <ui/dialogs/DialogsView.h>
#endif
#ifndef INCLUDED_ui_menu_Menu
#include <ui/menu/Menu.h>
#endif
#ifndef INCLUDED_ui_menu_PlayerGroupMenu
#include <ui/menu/PlayerGroupMenu.h>
#endif
#ifndef INCLUDED_ui_panels_Panel
#include <ui/panels/Panel.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ContainerGrid
#include <ui/panels/itemgrids/ContainerGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_EquippedGrid
#include <ui/panels/itemgrids/EquippedGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_InventoryGrid
#include <ui/panels/itemgrids/InventoryGrid.h>
#endif
#ifndef INCLUDED_ui_panels_itemgrids_ItemGrid
#include <ui/panels/itemgrids/ItemGrid.h>
#endif
#ifndef INCLUDED_ui_tooltip_PlayerGroupToolTip
#include <ui/tooltip/PlayerGroupToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_ui_view_CharacterDetailsView
#include <ui/view/CharacterDetailsView.h>
#endif
#ifndef INCLUDED_ui_view_Inventory
#include <ui/view/Inventory.h>
#endif
#ifndef INCLUDED_ui_view_VialInventoryView
#include <ui/view/VialInventoryView.h>
#endif
#ifndef INCLUDED_ui_view_VialSlotView
#include <ui/view/VialSlotView.h>
#endif
#ifndef INCLUDED_util_GuildUtil
#include <util/GuildUtil.h>
#endif
#ifndef INCLUDED_util_StringUtils
#include <util/StringUtils.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a76b571c651f345b_36_new,"game.GameSprite","new",0x2f8d1325,"game.GameSprite.new","game/GameSprite.hx",36,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_75_onAdded,"game.GameSprite","onAdded",0x5273fc66,"game.GameSprite.onAdded","game/GameSprite.hx",75,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_80_close,"game.GameSprite","close",0xaa8655bd,"game.GameSprite.close","game/GameSprite.hx",80,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_94_setFocus,"game.GameSprite","setFocus",0x67035bf1,"game.GameSprite.setFocus","game/GameSprite.hx",94,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_99_addStatsView,"game.GameSprite","addStatsView",0x0dc3ae5e,"game.GameSprite.addStatsView","game/GameSprite.hx",99,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_114_updateStats,"game.GameSprite","updateStats",0x8ab4ef1b,"game.GameSprite.updateStats","game/GameSprite.hx",114,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_125_initialize,"game.GameSprite","initialize",0x0be0012b,"game.GameSprite.initialize","game/GameSprite.hx",125,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_176_connect,"game.GameSprite","connect",0xb572c52f,"game.GameSprite.connect","game/GameSprite.hx",176,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_187_disconnect,"game.GameSprite","disconnect",0x88693437,"game.GameSprite.disconnect","game/GameSprite.hx",187,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_198_onResize,"game.GameSprite","onResize",0x3c6de38e,"game.GameSprite.onResize","game/GameSprite.hx",198,0x4ef1ab4a)
HX_LOCAL_STACK_FRAME(_hx_pos_a76b571c651f345b_211_onEnterFrame,"game.GameSprite","onEnterFrame",0xa870628f,"game.GameSprite.onEnterFrame","game/GameSprite.hx",211,0x4ef1ab4a)
namespace game{

void GameSprite_obj::__construct( ::servers::Server server,int gameId,bool createCharacter,int charId, ::openfl::utils::ByteArrayData fmMap){
            	HX_GC_STACKFRAME(&_hx_pos_a76b571c651f345b_36_new)
HXLINE(  59)		this->fromEditor = false;
HXLINE(  58)		this->inited = false;
HXLINE(  57)		this->uiInited = false;
HXLINE(  55)		this->isGameStarted = false;
HXLINE(  50)		this->frames = 0;
HXLINE(  49)		this->lastFrameUpdate = 0;
HXLINE(  46)		this->lastFixedUpdate = 0;
HXLINE(  45)		this->lastUpdate = 0;
HXLINE(  62)		super::__construct();
HXLINE(  64)		this->moveRecords =  ::game::MoveRecords_obj::__alloc( HX_CTX );
HXLINE(  65)		this->map =  ::map::Map_obj::__alloc( HX_CTX );
HXLINE(  66)		int a;
HXDLIN(  66)		if (::hx::IsNotNull( fmMap )) {
HXLINE(  66)			a = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(fmMap);
            		}
            		else {
HXLINE(  66)			a = null();
            		}
HXDLIN(  66)		bool aNeg = (a < 0);
HXDLIN(  66)		bool _hx_tmp;
HXDLIN(  66)		if ((aNeg != false)) {
HXLINE(  66)			_hx_tmp = aNeg;
            		}
            		else {
HXLINE(  66)			_hx_tmp = (a > 0);
            		}
HXDLIN(  66)		this->fromEditor = _hx_tmp;
HXLINE(  67)		::network::NetworkHandler_obj::reset(server,gameId,createCharacter,charId,fmMap);
HXLINE(  68)		this->inputHandler =  ::game::InputHandler_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  69)		this->textBox =  ::ui::TextBox_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),400,250);
HXLINE(  70)		 ::ui::TextBox _hx_tmp1 = this->textBox;
HXDLIN(  70)		int _hx_tmp2 = ::Main_obj::stageHeight;
HXDLIN(  70)		_hx_tmp1->set_y(::Math_obj::max(( (Float)(0) ),(( (Float)(_hx_tmp2) ) - this->textBox->get_height())));
HXLINE(  71)		this->addChild(this->textBox);
HXLINE(  72)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic GameSprite_obj::__CreateEmpty() { return new GameSprite_obj; }

void *GameSprite_obj::_hx_vtable = 0;

Dynamic GameSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameSprite_obj > _hx_result = new GameSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool GameSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7c964c69;
		}
	}
}

void GameSprite_obj::onAdded( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_a76b571c651f345b_75_onAdded)
HXLINE(  76)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  77)		::network::NetworkHandler_obj::connect();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameSprite_obj,onAdded,(void))

void GameSprite_obj::close(){
            	HX_GC_STACKFRAME(&_hx_pos_a76b571c651f345b_80_close)
HXLINE(  81)		this->stage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null());
HXLINE(  82)		this->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),null());
HXLINE(  83)		if (this->contains(this->miniMap)) {
HXLINE(  84)			this->removeChild(this->miniMap);
            		}
HXLINE(  85)		if (::hx::IsNotNull( this->map )) {
HXLINE(  86)			this->map->dispose();
            		}
HXLINE(  87)		if (::hx::IsNotNull( this->miniMap )) {
HXLINE(  88)			this->miniMap->dispose();
            		}
HXLINE(  89)		::objects::Projectile_obj::objBullIdToObjId->clear();
HXLINE(  90)		::Global_obj::layers->dialogs->closeDialogs();
HXLINE(  91)		 ::core::ScreensView _hx_tmp = ::Global_obj::layers->screens;
HXDLIN(  91)		 ::openfl::display::Sprite _hx_tmp1;
HXDLIN(  91)		if (this->fromEditor) {
HXLINE(  91)			_hx_tmp1 = ::Global_obj::currentEditor;
            		}
            		else {
HXLINE(  91)			_hx_tmp1 =  ::screens::CharacterSelectionScreen_obj::__alloc( HX_CTX );
            		}
HXDLIN(  91)		_hx_tmp->setScreen(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameSprite_obj,close,(void))

void GameSprite_obj::setFocus( ::objects::Player focus){
            	HX_STACKFRAME(&_hx_pos_a76b571c651f345b_94_setFocus)
HXLINE(  95)		if (::hx::IsNull( focus )) {
HXLINE(  95)			focus = this->map->player;
            		}
HXLINE(  96)		this->focus = focus;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameSprite_obj,setFocus,(void))

void GameSprite_obj::addStatsView(){
            	HX_GC_STACKFRAME(&_hx_pos_a76b571c651f345b_99_addStatsView)
HXLINE( 100)		if (::hx::IsNotNull( this->statsView )) {
HXLINE( 101)			return;
            		}
HXLINE( 103)		this->statsView =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,null(),null(),null(),null());
HXLINE( 104)		this->statsView->set_cacheAsBitmap(true);
HXLINE( 105)		this->statsView->setText(HX_("FPS: -1\nMemory: -1 MB",f3,5d,a2,46));
HXLINE( 106)		 ::ui::SimpleText _hx_tmp = this->statsView;
HXDLIN( 106)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE( 107)		this->statsView->setBold(true);
HXLINE( 108)		this->statsView->updateMetrics();
HXLINE( 109)		this->statsView->set_x(( (Float)(510) ));
HXLINE( 110)		this->statsView->set_y(( (Float)(35) ));
HXLINE( 111)		this->addChild(this->statsView);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameSprite_obj,addStatsView,(void))

void GameSprite_obj::updateStats(int time){
            	HX_STACKFRAME(&_hx_pos_a76b571c651f345b_114_updateStats)
HXLINE( 115)		this->frames++;
HXLINE( 116)		int dt = (time - this->lastFrameUpdate);
HXLINE( 117)		if ((dt >= 1000)) {
HXLINE( 118)			this->lastFrameUpdate = time;
HXLINE( 119)			 ::ui::SimpleText _hx_tmp = this->statsView;
HXDLIN( 119)			::String _hx_tmp1 = ((HX_("FPS: ",af,da,2c,83) + ::Std_obj::string(this->frames)) + HX_("\nMemory: ",11,56,a9,a3));
HXDLIN( 119)			_hx_tmp->set_text(((_hx_tmp1 + ::Math_obj::round((( (Float)( ::__hxcpp_gc_used_bytes()) ) / ( (Float)(1048576) )))) + HX_(" MB",75,8b,18,00)));
HXLINE( 120)			this->statsView->updateMetrics();
HXLINE( 121)			this->frames = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameSprite_obj,updateStats,(void))

void GameSprite_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_a76b571c651f345b_125_initialize)
HXLINE( 126)		if (this->inited) {
HXLINE( 127)			this->miniMap->update();
HXLINE( 128)			{
HXLINE( 128)				int _g = 0;
HXDLIN( 128)				::Array< ::Dynamic> _g1 = this->map->gameObjects;
HXDLIN( 128)				while((_g < _g1->length)){
HXLINE( 128)					 ::objects::GameObject go = _g1->__get(_g).StaticCast<  ::objects::GameObject >();
HXDLIN( 128)					_g = (_g + 1);
HXLINE( 129)					go->dispose();
            				}
            			}
HXLINE( 130)			this->map->gameObjects->resize(0);
HXLINE( 131)			this->map->gameObjectsLen = 0;
HXLINE( 133)			this->map->speechBalloons->clear();
HXLINE( 134)			this->map->statusTexts->resize(0);
HXLINE( 135)			this->connect();
HXLINE( 136)			return;
            		}
HXLINE( 139)		this->connect();
HXLINE( 140)		this->map->initialize();
HXLINE( 142)		this->miniMap =  ::ui::MiniMap_obj::__alloc( HX_CTX ,200,200);
HXLINE( 143)		this->miniMap->set_x(( (Float)((::Main_obj::stageWidth - 120)) ));
HXLINE( 144)		this->miniMap->set_y(( (Float)(100) ));
HXLINE( 145)		this->addChild(this->miniMap);
HXLINE( 147)		this->characterDetails =  ::ui::view::CharacterDetailsView_obj::__alloc( HX_CTX ,null());
HXLINE( 148)		this->characterDetails->set_cacheAsBitmap(true);
HXLINE( 149)		 ::ui::view::CharacterDetailsView _hx_tmp = this->characterDetails;
HXDLIN( 149)		_hx_tmp->set_x(this->characterDetails->set_y(( (Float)(20) )));
HXLINE( 150)		this->addChild(this->characterDetails);
HXLINE( 152)		this->inventory =  ::ui::view::Inventory_obj::__alloc( HX_CTX );
HXLINE( 153)		this->inventory->set_cacheAsBitmap(true);
HXLINE( 154)		this->inventory->set_x(( (Float)((::Main_obj::stageWidth - 220)) ));
HXLINE( 155)		this->inventory->set_y(( (Float)((::Main_obj::stageHeight - 320)) ));
HXLINE( 156)		this->addChild(this->inventory);
HXLINE( 158)		this->currencyDisplay =  ::game::view::CurrencyDisplay_obj::__alloc( HX_CTX ,HX_("ltr",ea,58,52,00),::hx::ObjectPtr<OBJ_>(this));
HXLINE( 159)		this->currencyDisplay->set_cacheAsBitmap(true);
HXLINE( 160)		this->currencyDisplay->set_x(( (Float)(300) ));
HXLINE( 161)		this->currencyDisplay->set_y(( (Float)(90) ));
HXLINE( 162)		this->addChild(this->currencyDisplay);
HXLINE( 164)		this->guildText =  ::ui::GuildText_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),-1,null());
HXLINE( 165)		this->guildText->set_cacheAsBitmap(true);
HXLINE( 166)		this->guildText->set_x(( (Float)(64) ));
HXLINE( 167)		this->guildText->set_y(( (Float)(6) ));
HXLINE( 168)		this->addChild(this->guildText);
HXLINE( 170)		this->addStatsView();
HXLINE( 171)		this->lastFrameUpdate = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 172)		this->inited = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameSprite_obj,initialize,(void))

void GameSprite_obj::connect(){
            	HX_STACKFRAME(&_hx_pos_a76b571c651f345b_176_connect)
HXDLIN( 176)		if (!(this->isGameStarted)) {
HXLINE( 177)			this->isGameStarted = true;
HXLINE( 178)			this->lastFrameUpdate = -1;
HXLINE( 179)			this->frames = -1;
HXLINE( 180)			this->lastUpdate = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 181)			this->stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
HXLINE( 182)			this->stage->addEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameSprite_obj,connect,(void))

void GameSprite_obj::disconnect(){
            	HX_STACKFRAME(&_hx_pos_a76b571c651f345b_187_disconnect)
HXDLIN( 187)		if (this->isGameStarted) {
HXLINE( 188)			this->isGameStarted = false;
HXLINE( 189)			this->uiInited = false;
HXLINE( 190)			this->stage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null());
HXLINE( 191)			this->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),null());
HXLINE( 194)			::objects::Projectile_obj::objBullIdToObjId->clear();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameSprite_obj,disconnect,(void))

void GameSprite_obj::onResize( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_a76b571c651f345b_198_onResize)
HXLINE( 199)		if (::hx::IsNotNull( this->inventory )) {
HXLINE( 200)			this->inventory->set_x(( (Float)((::Main_obj::stageWidth - 220)) ));
HXLINE( 201)			this->inventory->set_y(( (Float)((::Main_obj::stageHeight - 320)) ));
            		}
HXLINE( 204)		if (::hx::IsNotNull( this->miniMap )) {
HXLINE( 205)			this->miniMap->set_x(( (Float)((::Main_obj::stageWidth - 120)) ));
            		}
HXLINE( 207)		if (::hx::IsNotNull( this->textBox )) {
HXLINE( 208)			 ::ui::TextBox _hx_tmp = this->textBox;
HXDLIN( 208)			int _hx_tmp1 = ::Main_obj::stageHeight;
HXDLIN( 208)			_hx_tmp->set_y(::Math_obj::max(( (Float)(0) ),(( (Float)(_hx_tmp1) ) - this->textBox->get_height())));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameSprite_obj,onResize,(void))

void GameSprite_obj::onEnterFrame( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_a76b571c651f345b_211_onEnterFrame)
HXLINE( 212)		if (!(this->isGameStarted)) {
HXLINE( 213)			return;
            		}
HXLINE( 215)		int time = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 216)		if (((time - this->lastFixedUpdate) > 33)) {
HXLINE( 217)			bool _hx_tmp;
HXDLIN( 217)			if (::hx::IsNotNull( this->map )) {
HXLINE( 217)				_hx_tmp = ::hx::IsNull( this->map->player );
            			}
            			else {
HXLINE( 217)				_hx_tmp = true;
            			}
HXDLIN( 217)			if (_hx_tmp) {
HXLINE( 218)				return;
            			}
HXLINE( 220)			Float minDist = ((Float)1.0);
HXLINE( 221)			int closestInteractive = -1;
HXLINE( 222)			float playerX = this->map->player->mapX;
HXLINE( 223)			float playerY = this->map->player->mapY;
HXLINE( 224)			{
HXLINE( 224)				int _g = 0;
HXDLIN( 224)				::Array< ::Dynamic> _g1 = this->map->gameObjects;
HXDLIN( 224)				while((_g < _g1->length)){
HXLINE( 224)					 ::objects::GameObject go = _g1->__get(_g).StaticCast<  ::objects::GameObject >();
HXDLIN( 224)					_g = (_g + 1);
HXLINE( 225)					bool _hx_tmp1;
HXDLIN( 225)					bool _hx_tmp2;
HXDLIN( 225)					 ::objects::ObjectProperties _hx_tmp3;
HXDLIN( 225)					if (::hx::IsNotNull( go )) {
HXLINE( 225)						_hx_tmp3 = go->props;
            					}
            					else {
HXLINE( 225)						_hx_tmp3 = null();
            					}
HXDLIN( 225)					if (::hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 225)						if ((go->objClass != HX_("Portal",cc,ee,b9,31))) {
HXLINE( 225)							_hx_tmp2 = (go->objClass == HX_("Container",21,55,46,61));
            						}
            						else {
HXLINE( 225)							_hx_tmp2 = true;
            						}
            					}
            					else {
HXLINE( 225)						_hx_tmp2 = false;
            					}
HXDLIN( 225)					if (_hx_tmp2) {
HXLINE( 225)						if (!((::Math_obj::abs(( (Float)((playerX - go->mapX)) )) < 1))) {
HXLINE( 225)							_hx_tmp1 = (::Math_obj::abs(( (Float)((playerY - go->mapY)) )) < 1);
            						}
            						else {
HXLINE( 225)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE( 225)						_hx_tmp1 = false;
            					}
HXDLIN( 225)					if (_hx_tmp1) {
HXLINE( 226)						Float dX = (( (Float)(playerX) ) - ( (Float)(go->mapX) ));
HXDLIN( 226)						Float dY = (( (Float)(playerY) ) - ( (Float)(go->mapY) ));
HXDLIN( 226)						Float dist = ::Math_obj::sqrt(((dX * dX) + (dY * dY)));
HXLINE( 227)						if ((dist < minDist)) {
HXLINE( 228)							minDist = dist;
HXLINE( 229)							closestInteractive = go->objectId;
            						}
            					}
            				}
            			}
HXLINE( 233)			::Global_obj::currentInteractiveTarget = closestInteractive;
HXLINE( 235)			 ::objects::Player player = this->map->player;
HXLINE( 236)			if (::hx::IsNotNull( player )) {
HXLINE( 237)				if (!(this->uiInited)) {
HXLINE( 238)					this->inventory->init(player);
HXLINE( 239)					this->characterDetails->init(player);
HXLINE( 241)					if (::Main_obj::rpcReady) {
HXLINE( 242)						::String className = player->props->displayId;
HXLINE( 243)						 DiscordRichPresence discordPresence = DiscordRichPresence();
HXLINE( 244)						discordPresence.state = (HX_("In ",7b,c4,37,00) + this->map->mapName).utf8_str();
HXLINE( 245)						discordPresence.details = HX_("",00,00,00,00).utf8_str();
HXLINE( 246)						discordPresence.largeImageKey = HX_("logo",6b,9f,b7,47).utf8_str();
HXLINE( 247)						discordPresence.largeImageText = (HX_("v",76,00,00,00) + HX_("0.5",77,94,24,00)).utf8_str();
HXLINE( 248)						discordPresence.smallImageKey = ::StringTools_obj::replace(className.toLowerCase(),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)).utf8_str();
HXLINE( 249)						discordPresence.smallImageText = (((HX_("Tier ",9e,28,5d,a3) + ::util::StringUtils_obj::toRoman(player->tier)) + HX_(" ",20,00,00,00)) + className).utf8_str();
HXLINE( 250)						discordPresence.startTimestamp = ( (::cpp::Int64)(::Main_obj::startTime) );
HXLINE( 251)						Discord_UpdatePresence(&(discordPresence));
            					}
HXLINE( 255)					this->uiInited = true;
            				}
HXLINE( 258)				{
HXLINE( 258)					 ::ui::MiniMap _this = this->miniMap;
HXDLIN( 258)					 ::openfl::display::Graphics g = null();
HXDLIN( 258)					int fillColor = 0;
HXDLIN( 258)					Float mmx = ((Float)0.0);
HXDLIN( 258)					Float mmy = ((Float)0.0);
HXDLIN( 258)					Float dx = ((Float)0.0);
HXDLIN( 258)					Float dy = ((Float)0.0);
HXDLIN( 258)					Float distSq = ((Float)0.0);
HXDLIN( 258)					_this->groundLayer->get_graphics()->clear();
HXDLIN( 258)					_this->characterLayer->get_graphics()->clear();
HXDLIN( 258)					_this->players->resize(0);
HXDLIN( 258)					 ::objects::Player focus = ::Global_obj::gameSprite->map->player;
HXDLIN( 258)					if (::hx::IsNotNull( focus )) {
HXLINE( 258)						Float zoom = _this->zoomLevels->__get(_this->zoomIndex);
HXDLIN( 258)						_this->mapMatrix->identity();
HXDLIN( 258)						_this->mapMatrix->translate(( (Float)(-(focus->mapX)) ),( (Float)(-(focus->mapY)) ));
HXDLIN( 258)						_this->mapMatrix->scale(zoom,zoom);
HXDLIN( 258)						 ::openfl::geom::Point upLeft = _this->mapMatrix->transformPoint( ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0));
HXDLIN( 258)						 ::openfl::geom::Point bottomRight = _this->mapMatrix->transformPoint(_this->maxWH);
HXDLIN( 258)						Float tx = ((Float)0.0);
HXDLIN( 258)						Float upLeft1 = upLeft->x;
HXDLIN( 258)						if ((upLeft1 > _this->windowRect->get_left())) {
HXLINE( 258)							Float tx1 = _this->windowRect->get_left();
HXDLIN( 258)							tx = (tx1 - upLeft->x);
            						}
            						else {
HXLINE( 258)							Float bottomRight1 = bottomRight->x;
HXDLIN( 258)							if ((bottomRight1 < _this->windowRect->get_right())) {
HXLINE( 258)								Float tx2 = _this->windowRect->get_right();
HXDLIN( 258)								tx = (tx2 - bottomRight->x);
            							}
            						}
HXDLIN( 258)						Float ty = ((Float)0.0);
HXDLIN( 258)						Float upLeft2 = upLeft->y;
HXDLIN( 258)						if ((upLeft2 > _this->windowRect->get_top())) {
HXLINE( 258)							Float ty1 = _this->windowRect->get_top();
HXDLIN( 258)							ty = (ty1 - upLeft->y);
            						}
            						else {
HXLINE( 258)							Float bottomRight2 = bottomRight->y;
HXDLIN( 258)							if ((bottomRight2 < _this->windowRect->get_bottom())) {
HXLINE( 258)								Float ty2 = _this->windowRect->get_bottom();
HXDLIN( 258)								ty = (ty2 - bottomRight->y);
            							}
            						}
HXDLIN( 258)						_this->mapMatrix->translate(tx,ty);
HXDLIN( 258)						g = _this->groundLayer->get_graphics();
HXDLIN( 258)						g->beginBitmapFill(_this->miniMapData,_this->mapMatrix,false,null());
HXDLIN( 258)						g->drawRect(((Float)-94.),((Float)-94.),( (Float)(188) ),( (Float)(188) ));
HXDLIN( 258)						g->endFill();
HXDLIN( 258)						g = _this->characterLayer->get_graphics();
HXDLIN( 258)						Float mX = _this->get_mouseX();
HXDLIN( 258)						Float mY = _this->get_mouseY();
HXDLIN( 258)						_this->players->removeRange(_this->players->length,0);
HXDLIN( 258)						{
HXLINE( 258)							int _g2 = 0;
HXDLIN( 258)							::Array< ::Dynamic> _g3 = _this->map->gameObjects;
HXDLIN( 258)							while((_g2 < _g3->length)){
HXLINE( 258)								 ::objects::GameObject go1 = _g3->__get(_g2).StaticCast<  ::objects::GameObject >();
HXDLIN( 258)								_g2 = (_g2 + 1);
HXDLIN( 258)								if (go1->props->isPlayer) {
HXLINE( 258)									 ::objects::Player player1 = ( ( ::objects::Player)(go1) );
HXDLIN( 258)									if (::hx::IsInstanceNotEq( player1,focus )) {
HXLINE( 258)										if (player1->isFellowGuild) {
HXLINE( 258)											fillColor = 65280;
            										}
            										else {
HXLINE( 258)											fillColor = 16776960;
            										}
HXDLIN( 258)										mmx = (((_this->mapMatrix->a * ( (Float)(player1->mapX) )) + (_this->mapMatrix->c * ( (Float)(player1->mapY) ))) + _this->mapMatrix->tx);
HXDLIN( 258)										mmy = (((_this->mapMatrix->b * ( (Float)(player1->mapX) )) + (_this->mapMatrix->d * ( (Float)(player1->mapY) ))) + _this->mapMatrix->ty);
HXDLIN( 258)										bool _hx_tmp4;
HXDLIN( 258)										bool _hx_tmp5;
HXDLIN( 258)										bool _hx_tmp6;
HXDLIN( 258)										if (!((mmx <= (( (Float)(-(_this->mapWidth)) ) / ( (Float)(2) ))))) {
HXLINE( 258)											_hx_tmp6 = (mmx >= (( (Float)(_this->mapWidth) ) / ( (Float)(2) )));
            										}
            										else {
HXLINE( 258)											_hx_tmp6 = true;
            										}
HXDLIN( 258)										if (!(_hx_tmp6)) {
HXLINE( 258)											_hx_tmp5 = (mmy <= (( (Float)(-(_this->mapHeight)) ) / ( (Float)(2) )));
            										}
            										else {
HXLINE( 258)											_hx_tmp5 = true;
            										}
HXDLIN( 258)										if (!(_hx_tmp5)) {
HXLINE( 258)											_hx_tmp4 = (mmy >= (( (Float)(_this->mapHeight) ) / ( (Float)(2) )));
            										}
            										else {
HXLINE( 258)											_hx_tmp4 = true;
            										}
HXDLIN( 258)										if (_hx_tmp4) {
HXLINE( 258)											::ui::MiniMap_obj::lineSegmentIntersectXY(_this->windowRect,( (Float)(0) ),( (Float)(0) ),mmx,mmy,_this->tempPoint);
HXDLIN( 258)											mmx = _this->tempPoint->x;
HXDLIN( 258)											mmy = _this->tempPoint->y;
            										}
HXDLIN( 258)										bool _hx_tmp7;
HXDLIN( 258)										if (_this->isMouseOver) {
HXLINE( 258)											if (::hx::IsNotNull( _this->menu )) {
HXLINE( 258)												_hx_tmp7 = ::hx::IsNull( _this->menu->parent );
            											}
            											else {
HXLINE( 258)												_hx_tmp7 = true;
            											}
            										}
            										else {
HXLINE( 258)											_hx_tmp7 = false;
            										}
HXDLIN( 258)										if (_hx_tmp7) {
HXLINE( 258)											dx = (mX - mmx);
HXDLIN( 258)											dy = (mY - mmy);
HXDLIN( 258)											distSq = ((dx * dx) + (dy * dy));
HXDLIN( 258)											if ((distSq < 25)) {
HXLINE( 258)												_this->players->push(player1);
            											}
            										}
HXDLIN( 258)										g->beginFill(fillColor,null());
HXDLIN( 258)										g->drawRect((mmx - ( (Float)(2) )),(mmy - ( (Float)(2) )),( (Float)(4) ),( (Float)(4) ));
HXDLIN( 258)										g->endFill();
            									}
            								}
            								else {
HXLINE( 258)									if (!(go1->props->noMiniMap)) {
HXLINE( 258)										if ((go1->objClass == HX_("Portal",cc,ee,b9,31))) {
HXLINE( 258)											fillColor = 255;
            										}
            										else {
HXLINE( 258)											if (go1->props->isEnemy) {
HXLINE( 258)												fillColor = 16711680;
            											}
            											else {
HXLINE( 258)												continue;
            											}
            										}
HXDLIN( 258)										mmx = (((_this->mapMatrix->a * ( (Float)(go1->mapX) )) + (_this->mapMatrix->c * ( (Float)(go1->mapY) ))) + _this->mapMatrix->tx);
HXDLIN( 258)										mmy = (((_this->mapMatrix->b * ( (Float)(go1->mapX) )) + (_this->mapMatrix->d * ( (Float)(go1->mapY) ))) + _this->mapMatrix->ty);
HXDLIN( 258)										bool _hx_tmp8;
HXDLIN( 258)										bool _hx_tmp9;
HXDLIN( 258)										bool _hx_tmp10;
HXDLIN( 258)										if (!((mmx <= (( (Float)(-(_this->mapWidth)) ) / ( (Float)(2) ))))) {
HXLINE( 258)											_hx_tmp10 = (mmx >= (( (Float)(_this->mapWidth) ) / ( (Float)(2) )));
            										}
            										else {
HXLINE( 258)											_hx_tmp10 = true;
            										}
HXDLIN( 258)										if (!(_hx_tmp10)) {
HXLINE( 258)											_hx_tmp9 = (mmy <= (( (Float)(-(_this->mapHeight)) ) / ( (Float)(2) )));
            										}
            										else {
HXLINE( 258)											_hx_tmp9 = true;
            										}
HXDLIN( 258)										if (!(_hx_tmp9)) {
HXLINE( 258)											_hx_tmp8 = (mmy >= (( (Float)(_this->mapHeight) ) / ( (Float)(2) )));
            										}
            										else {
HXLINE( 258)											_hx_tmp8 = true;
            										}
HXDLIN( 258)										if (_hx_tmp8) {
HXLINE( 258)											continue;
            										}
HXDLIN( 258)										g->beginFill(fillColor,null());
HXDLIN( 258)										g->drawRect((mmx - ( (Float)(2) )),(mmy - ( (Float)(2) )),( (Float)(4) ),( (Float)(4) ));
HXDLIN( 258)										g->endFill();
            									}
            								}
            							}
            						}
HXDLIN( 258)						if ((_this->players->length != 0)) {
HXLINE( 258)							if (::hx::IsNull( _this->tooltip )) {
HXLINE( 258)								_this->tooltip =  ::ui::tooltip::PlayerGroupToolTip_obj::__alloc( HX_CTX ,_this->players,null());
HXDLIN( 258)								_this->stage->addChild(_this->tooltip);
            							}
            							else {
HXLINE( 258)								if (!(::ui::MiniMap_obj::areSamePlayers(_this->tooltip->players,_this->players))) {
HXLINE( 258)									_this->tooltip->setPlayers(_this->players);
            								}
            							}
            						}
            						else {
HXLINE( 258)							if (::hx::IsNotNull( _this->tooltip )) {
HXLINE( 258)								if (::hx::IsNotNull( _this->tooltip->parent )) {
HXLINE( 258)									_this->tooltip->parent->removeChild(_this->tooltip);
            								}
HXDLIN( 258)								_this->tooltip = null();
            							}
            						}
HXDLIN( 258)						float px = focus->mapX;
HXDLIN( 258)						float py = focus->mapY;
HXDLIN( 258)						Float ppx = (((_this->mapMatrix->a * ( (Float)(px) )) + (_this->mapMatrix->c * ( (Float)(py) ))) + _this->mapMatrix->tx);
HXDLIN( 258)						Float ppy = (((_this->mapMatrix->b * ( (Float)(px) )) + (_this->mapMatrix->d * ( (Float)(py) ))) + _this->mapMatrix->ty);
HXDLIN( 258)						_this->arrowMatrix->identity();
HXDLIN( 258)						_this->arrowMatrix->translate(( (Float)(-4) ),( (Float)(-5) ));
HXDLIN( 258)						_this->arrowMatrix->scale((( (Float)(8) ) / ( (Float)(_this->blueArrow->width) )),(( (Float)(32) ) / ( (Float)(_this->blueArrow->height) )));
HXDLIN( 258)						_this->arrowMatrix->rotate(( (Float)(::map::Camera_obj::angleRad) ));
HXDLIN( 258)						_this->arrowMatrix->translate(ppx,ppy);
HXDLIN( 258)						g->beginBitmapFill(_this->blueArrow,_this->arrowMatrix,false,null());
HXDLIN( 258)						g->drawRect((ppx - ( (Float)(16) )),(ppy - ( (Float)(16) )),( (Float)(32) ),( (Float)(32) ));
HXDLIN( 258)						g->endFill();
            					}
            				}
HXLINE( 259)				{
HXLINE( 259)					 ::ui::view::Inventory _this1 = this->inventory;
HXDLIN( 259)					if ((::Global_obj::currentInteractiveTarget != -1)) {
HXLINE( 259)						 ::objects::GameObject go2 = player->map->getGameObject(::Global_obj::currentInteractiveTarget);
HXDLIN( 259)						if ((go2->objClass == HX_("Container",21,55,46,61))) {
HXLINE( 259)							if (::hx::IsNull( _this1->containerGrid )) {
HXLINE( 259)								_this1->containerGrid =  ::ui::panels::itemgrids::ContainerGrid_obj::__alloc( HX_CTX ,go2,player,true);
HXDLIN( 259)								_this1->containerGrid->set_cacheAsBitmap(true);
HXDLIN( 259)								 ::ui::panels::itemgrids::ContainerGrid _this2 = _this1->containerGrid;
HXDLIN( 259)								_this2->set_x((_this1->containerDecor->get_x() + 9));
HXDLIN( 259)								 ::ui::panels::itemgrids::ContainerGrid _this3 = _this1->containerGrid;
HXDLIN( 259)								_this3->set_y((_this1->containerDecor->get_y() + 9));
HXDLIN( 259)								_this1->addChild(_this1->containerGrid);
HXDLIN( 259)								 ::ui::SimpleText _this4 = _this1->containerName;
HXDLIN( 259)								 ::openfl::display::Bitmap _this5 = _this1->containerDecor;
HXDLIN( 259)								 ::openfl::display::Bitmap _this6 = _this1->containerBitmapLeft;
HXDLIN( 259)								_this4->set_visible(_this5->set_visible(_this6->set_visible(_this1->containerBitmapRight->set_visible(true))));
HXDLIN( 259)								_this1->containerName->setText(go2->props->displayId);
HXDLIN( 259)								_this1->containerName->updateMetrics();
HXDLIN( 259)								 ::objects::TextureData textureData = ( ( ::objects::TextureData)(::objects::ObjectLibrary_obj::typeToTextureData->get(go2->objectType)) );
HXDLIN( 259)								 ::openfl::display::BitmapData textureData1 = textureData->texture;
HXDLIN( 259)								 ::openfl::display::BitmapData tex = ::util::TextureRedrawer_obj::redraw(textureData1,::Std_obj::_hx_int((( (Float)(16) ) / (( (Float)(textureData->texture->width) ) / ( (Float)(16) )))),false,0,null(),null(),null());
HXDLIN( 259)								 ::openfl::display::Bitmap _this7 = _this1->containerBitmapLeft;
HXDLIN( 259)								_this7->set_bitmapData(_this1->containerBitmapRight->set_bitmapData(tex));
            							}
HXDLIN( 259)							_this1->containerGrid->draw();
            						}
            						else {
HXLINE( 259)							 ::ui::SimpleText _this8 = _this1->containerName;
HXDLIN( 259)							 ::openfl::display::Bitmap _this9 = _this1->containerDecor;
HXDLIN( 259)							 ::openfl::display::Bitmap _this10 = _this1->containerBitmapLeft;
HXDLIN( 259)							_this8->set_visible(_this9->set_visible(_this10->set_visible(_this1->containerBitmapRight->set_visible(false))));
HXDLIN( 259)							bool _hx_tmp11;
HXDLIN( 259)							if (::hx::IsNotNull( _this1->containerGrid )) {
HXLINE( 259)								_hx_tmp11 = _this1->contains(_this1->containerGrid);
            							}
            							else {
HXLINE( 259)								_hx_tmp11 = false;
            							}
HXDLIN( 259)							if (_hx_tmp11) {
HXLINE( 259)								_this1->removeChild(_this1->containerGrid);
HXDLIN( 259)								_this1->containerGrid = null();
            							}
            						}
            					}
            					else {
HXLINE( 259)						 ::ui::SimpleText _this11 = _this1->containerName;
HXDLIN( 259)						 ::openfl::display::Bitmap _this12 = _this1->containerDecor;
HXDLIN( 259)						 ::openfl::display::Bitmap _this13 = _this1->containerBitmapLeft;
HXDLIN( 259)						_this11->set_visible(_this12->set_visible(_this13->set_visible(_this1->containerBitmapRight->set_visible(false))));
HXDLIN( 259)						bool _hx_tmp12;
HXDLIN( 259)						if (::hx::IsNotNull( _this1->containerGrid )) {
HXLINE( 259)							_hx_tmp12 = _this1->contains(_this1->containerGrid);
            						}
            						else {
HXLINE( 259)							_hx_tmp12 = false;
            						}
HXDLIN( 259)						if (_hx_tmp12) {
HXLINE( 259)							_this1->removeChild(_this1->containerGrid);
HXDLIN( 259)							_this1->containerGrid = null();
            						}
            					}
HXDLIN( 259)					{
HXLINE( 259)						 ::ui::panels::itemgrids::EquippedGrid tmp = _this1->equippedGrid;
HXDLIN( 259)						if (::hx::IsNotNull( tmp )) {
HXLINE( 259)							tmp->draw();
            						}
            					}
HXDLIN( 259)					{
HXLINE( 259)						 ::ui::panels::itemgrids::InventoryGrid tmp1 = _this1->invGrid;
HXDLIN( 259)						if (::hx::IsNotNull( tmp1 )) {
HXLINE( 259)							tmp1->draw();
            						}
            					}
HXDLIN( 259)					{
HXLINE( 259)						 ::ui::view::VialInventoryView tmp2 = _this1->vialView;
HXDLIN( 259)						 ::ui::view::VialSlotView tmp3;
HXDLIN( 259)						if (::hx::IsNotNull( tmp2 )) {
HXLINE( 259)							tmp3 = tmp2->leftSlot;
            						}
            						else {
HXLINE( 259)							tmp3 = null();
            						}
HXDLIN( 259)						if (::hx::IsNotNull( tmp3 )) {
HXLINE( 259)							tmp3->draw(player);
            						}
            					}
HXDLIN( 259)					{
HXLINE( 259)						 ::ui::view::VialInventoryView tmp4 = _this1->vialView;
HXDLIN( 259)						 ::ui::view::VialSlotView tmp5;
HXDLIN( 259)						if (::hx::IsNotNull( tmp4 )) {
HXLINE( 259)							tmp5 = tmp4->rightSlot;
            						}
            						else {
HXLINE( 259)							tmp5 = null();
            						}
HXDLIN( 259)						if (::hx::IsNotNull( tmp5 )) {
HXLINE( 259)							tmp5->draw(player);
            						}
            					}
            				}
HXLINE( 260)				this->characterDetails->draw(player);
HXLINE( 261)				{
HXLINE( 261)					 ::game::view::CurrencyDisplay _this14 = this->currencyDisplay;
HXDLIN( 261)					int gems = player->gems;
HXDLIN( 261)					int gold = player->gold;
HXDLIN( 261)					int crowns = player->crowns;
HXDLIN( 261)					bool _hx_tmp13;
HXDLIN( 261)					bool _hx_tmp14;
HXDLIN( 261)					if ((gems == _this14->gems)) {
HXLINE( 261)						_hx_tmp14 = (gold == _this14->gold);
            					}
            					else {
HXLINE( 261)						_hx_tmp14 = false;
            					}
HXDLIN( 261)					if (_hx_tmp14) {
HXLINE( 261)						_hx_tmp13 = (crowns == _this14->crowns);
            					}
            					else {
HXLINE( 261)						_hx_tmp13 = false;
            					}
HXDLIN( 261)					if (!(_hx_tmp13)) {
HXLINE( 261)						_this14->gems = gems;
HXDLIN( 261)						_this14->gold = gold;
HXDLIN( 261)						_this14->crowns = crowns;
HXDLIN( 261)						::String _hx_switch_0 = _this14->orientation;
            						if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXLINE( 261)							 ::ui::SimpleText _this15 = _this14->gemText;
HXDLIN( 261)							_this15->set_text(::Std_obj::string(_this14->gems));
HXDLIN( 261)							_this14->gemText->updateMetrics();
HXDLIN( 261)							 ::ui::SimpleText _this16 = _this14->gemText;
HXDLIN( 261)							Float _hx_tmp15 = _this14->gemIcon->get_x();
HXDLIN( 261)							_this16->set_x((_hx_tmp15 + _this14->gemIcon->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this17 = _this14->gemText;
HXDLIN( 261)							Float _hx_tmp16 = (_this14->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN( 261)							_this17->set_y((_hx_tmp16 - (_this14->gemText->get_height() / ( (Float)(2) ))));
HXDLIN( 261)							 ::openfl::display::Bitmap _this18 = _this14->goldIcon;
HXDLIN( 261)							Float _hx_tmp17 = _this14->gemText->get_x();
HXDLIN( 261)							_this18->set_x((_hx_tmp17 + _this14->gemText->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this19 = _this14->goldText;
HXDLIN( 261)							_this19->set_text(::Std_obj::string(_this14->gold));
HXDLIN( 261)							_this14->goldText->updateMetrics();
HXDLIN( 261)							 ::ui::SimpleText _this20 = _this14->goldText;
HXDLIN( 261)							Float _hx_tmp18 = _this14->goldIcon->get_x();
HXDLIN( 261)							_this20->set_x((_hx_tmp18 + _this14->goldIcon->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this21 = _this14->goldText;
HXDLIN( 261)							Float _hx_tmp19 = (_this14->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN( 261)							_this21->set_y((_hx_tmp19 - (_this14->goldText->get_height() / ( (Float)(2) ))));
HXDLIN( 261)							 ::openfl::display::Bitmap _this22 = _this14->crownIcon;
HXDLIN( 261)							Float _hx_tmp20 = _this14->goldText->get_x();
HXDLIN( 261)							_this22->set_x((_hx_tmp20 + _this14->goldText->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this23 = _this14->crownText;
HXDLIN( 261)							_this23->set_text(::Std_obj::string(_this14->crowns));
HXDLIN( 261)							_this14->crownText->updateMetrics();
HXDLIN( 261)							 ::ui::SimpleText _this24 = _this14->crownText;
HXDLIN( 261)							Float _hx_tmp21 = _this14->crownIcon->get_x();
HXDLIN( 261)							_this24->set_x((_hx_tmp21 + _this14->crownIcon->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this25 = _this14->crownText;
HXDLIN( 261)							Float _hx_tmp22 = (_this14->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN( 261)							_this25->set_y((_hx_tmp22 - (_this14->crownText->get_height() / ( (Float)(2) ))));
HXDLIN( 261)							goto _hx_goto_13;
            						}
            						if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXLINE( 261)							 ::openfl::display::Bitmap _this26 = _this14->gemIcon;
HXDLIN( 261)							_this26->set_x(-(_this14->gemIcon->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this27 = _this14->gemText;
HXDLIN( 261)							_this27->set_text(::Std_obj::string(_this14->gems));
HXDLIN( 261)							_this14->gemText->updateMetrics();
HXDLIN( 261)							 ::ui::SimpleText _this28 = _this14->gemText;
HXDLIN( 261)							Float _hx_tmp23 = _this14->gemIcon->get_x();
HXDLIN( 261)							_this28->set_x((_hx_tmp23 - _this14->gemText->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this29 = _this14->gemText;
HXDLIN( 261)							Float _hx_tmp24 = (_this14->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN( 261)							_this29->set_y((_hx_tmp24 - (_this14->gemText->get_height() / ( (Float)(2) ))));
HXDLIN( 261)							 ::openfl::display::Bitmap _this30 = _this14->goldIcon;
HXDLIN( 261)							Float _hx_tmp25 = _this14->gemText->get_x();
HXDLIN( 261)							_this30->set_x((_hx_tmp25 - _this14->goldIcon->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this31 = _this14->goldText;
HXDLIN( 261)							_this31->set_text(::Std_obj::string(_this14->gold));
HXDLIN( 261)							_this14->goldText->updateMetrics();
HXDLIN( 261)							 ::ui::SimpleText _this32 = _this14->goldText;
HXDLIN( 261)							Float _hx_tmp26 = _this14->goldIcon->get_x();
HXDLIN( 261)							_this32->set_x((_hx_tmp26 - _this14->goldText->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this33 = _this14->goldText;
HXDLIN( 261)							Float _hx_tmp27 = (_this14->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN( 261)							_this33->set_y((_hx_tmp27 - (_this14->goldText->get_height() / ( (Float)(2) ))));
HXDLIN( 261)							 ::openfl::display::Bitmap _this34 = _this14->crownIcon;
HXDLIN( 261)							Float _hx_tmp28 = _this14->goldText->get_x();
HXDLIN( 261)							_this34->set_x((_hx_tmp28 - _this14->crownIcon->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this35 = _this14->crownText;
HXDLIN( 261)							_this35->set_text(::Std_obj::string(_this14->crowns));
HXDLIN( 261)							_this14->crownText->updateMetrics();
HXDLIN( 261)							 ::ui::SimpleText _this36 = _this14->crownText;
HXDLIN( 261)							Float _hx_tmp29 = _this14->crownIcon->get_x();
HXDLIN( 261)							_this36->set_x((_hx_tmp29 - _this14->crownText->get_width()));
HXDLIN( 261)							 ::ui::SimpleText _this37 = _this14->crownText;
HXDLIN( 261)							Float _hx_tmp30 = (_this14->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN( 261)							_this37->set_y((_hx_tmp30 - (_this14->crownText->get_height() / ( (Float)(2) ))));
HXDLIN( 261)							goto _hx_goto_13;
            						}
            						_hx_goto_13:;
            					}
            				}
HXLINE( 262)				if (this->map->showDisplays) {
HXLINE( 263)					 ::ui::GuildText _this38 = this->guildText;
HXDLIN( 263)					::String name = player->guildName;
HXDLIN( 263)					int rank = player->guildRank;
HXDLIN( 263)					bool _hx_tmp31;
HXDLIN( 263)					if ((_this38->guildName == name)) {
HXLINE( 263)						_hx_tmp31 = (rank == rank);
            					}
            					else {
HXLINE( 263)						_hx_tmp31 = false;
            					}
HXDLIN( 263)					if (!(_hx_tmp31)) {
HXLINE( 263)						_this38->guildName = name;
HXDLIN( 263)						_this38->rank = rank;
HXDLIN( 263)						bool _hx_tmp32;
HXDLIN( 263)						if (::hx::IsNotNull( _this38->guildName )) {
HXLINE( 263)							_hx_tmp32 = (_this38->guildName == HX_("",00,00,00,00));
            						}
            						else {
HXLINE( 263)							_hx_tmp32 = true;
            						}
HXDLIN( 263)						if (_hx_tmp32) {
HXLINE( 263)							bool _hx_tmp33;
HXDLIN( 263)							if (::hx::IsNotNull( _this38->icon )) {
HXLINE( 263)								_hx_tmp33 = _this38->contains(_this38->icon);
            							}
            							else {
HXLINE( 263)								_hx_tmp33 = false;
            							}
HXDLIN( 263)							if (_hx_tmp33) {
HXLINE( 263)								_this38->removeChild(_this38->icon);
            							}
HXDLIN( 263)							bool _hx_tmp34;
HXDLIN( 263)							if (::hx::IsNotNull( _this38->guildText )) {
HXLINE( 263)								_hx_tmp34 = _this38->contains(_this38->guildText);
            							}
            							else {
HXLINE( 263)								_hx_tmp34 = false;
            							}
HXDLIN( 263)							if (_hx_tmp34) {
HXLINE( 263)								_this38->removeChild(_this38->guildText);
            							}
            						}
            						else {
HXLINE( 263)							 ::openfl::display::Bitmap _this39 = _this38->icon;
HXDLIN( 263)							_this39->set_bitmapData(::util::GuildUtil_obj::rankToIcon(_this38->rank,20));
HXDLIN( 263)							bool _hx_tmp35;
HXDLIN( 263)							if (::hx::IsNotNull( _this38->icon )) {
HXLINE( 263)								_hx_tmp35 = !(_this38->contains(_this38->icon));
            							}
            							else {
HXLINE( 263)								_hx_tmp35 = false;
            							}
HXDLIN( 263)							if (_hx_tmp35) {
HXLINE( 263)								_this38->addChild(_this38->icon);
            							}
HXDLIN( 263)							_this38->guildText->set_text(_this38->guildName);
HXDLIN( 263)							_this38->guildText->useTextDimensions();
HXDLIN( 263)							bool _hx_tmp36;
HXDLIN( 263)							if (::hx::IsNotNull( _this38->guildText )) {
HXLINE( 263)								_hx_tmp36 = !(_this38->contains(_this38->guildText));
            							}
            							else {
HXLINE( 263)								_hx_tmp36 = false;
            							}
HXDLIN( 263)							if (_hx_tmp36) {
HXLINE( 263)								_this38->addChild(_this38->guildText);
            							}
            						}
            					}
            				}
HXLINE( 265)				{
HXLINE( 265)					 ::game::MoveRecords _this40 = this->moveRecords;
HXDLIN( 265)					Float x = ( (Float)(player->mapX) );
HXDLIN( 265)					Float y = ( (Float)(player->mapY) );
HXDLIN( 265)					if ((_this40->lastClearTime >= 0)) {
HXLINE( 265)						int id = _this40->getId(time);
HXDLIN( 265)						bool _hx_tmp37;
HXDLIN( 265)						if ((id >= 1)) {
HXLINE( 265)							_hx_tmp37 = (id > 10);
            						}
            						else {
HXLINE( 265)							_hx_tmp37 = true;
            						}
HXDLIN( 265)						if (!(_hx_tmp37)) {
HXLINE( 265)							if ((_this40->recordIdx == 0)) {
HXLINE( 265)								_this40->records->push( ::game::MoveRecord_obj::__alloc( HX_CTX ,time,( (float)(x) ),( (float)(y) )));
            							}
            							else {
HXLINE( 265)								 ::game::MoveRecord currRecord = _this40->records->__get((_this40->recordIdx - 1)).StaticCast<  ::game::MoveRecord >();
HXDLIN( 265)								if ((id != _this40->getId(currRecord->time))) {
HXLINE( 265)									_this40->records->push( ::game::MoveRecord_obj::__alloc( HX_CTX ,time,( (float)(x) ),( (float)(y) )));
            								}
            								else {
HXLINE( 265)									int score = _this40->getScore(id,time);
HXDLIN( 265)									if ((score < _this40->getScore(id,currRecord->time))) {
HXLINE( 265)										currRecord->time = time;
HXDLIN( 265)										currRecord->x = ( (float)(x) );
HXDLIN( 265)										currRecord->y = ( (float)(y) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 268)			this->lastFixedUpdate = time;
            		}
HXLINE( 271)		if (::hx::IsNotNull( this->statsView )) {
HXLINE( 272)			this->updateStats(time);
            		}
HXLINE( 274)		short dt = ( (short)((time - this->lastUpdate)) );
HXLINE( 275)		if ((dt < 1)) {
HXLINE( 276)			dt = ( (short)(1) );
            		}
HXLINE( 278)		this->map->update(time,dt);
HXLINE( 279)		::map::Camera_obj::update(dt);
HXLINE( 281)		if (::hx::IsNotNull( this->focus )) {
HXLINE( 282)			::map::Camera_obj::configureCamera(this->focus->mapX,this->focus->mapY);
HXLINE( 283)			this->map->draw(time);
            		}
HXLINE( 286)		this->lastUpdate = time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameSprite_obj,onEnterFrame,(void))


::hx::ObjectPtr< GameSprite_obj > GameSprite_obj::__new( ::servers::Server server,int gameId,bool createCharacter,int charId, ::openfl::utils::ByteArrayData fmMap) {
	::hx::ObjectPtr< GameSprite_obj > __this = new GameSprite_obj();
	__this->__construct(server,gameId,createCharacter,charId,fmMap);
	return __this;
}

::hx::ObjectPtr< GameSprite_obj > GameSprite_obj::__alloc(::hx::Ctx *_hx_ctx, ::servers::Server server,int gameId,bool createCharacter,int charId, ::openfl::utils::ByteArrayData fmMap) {
	GameSprite_obj *__this = (GameSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameSprite_obj), true, "game.GameSprite"));
	*(void **)__this = GameSprite_obj::_hx_vtable;
	__this->__construct(server,gameId,createCharacter,charId,fmMap);
	return __this;
}

GameSprite_obj::GameSprite_obj()
{
}

void GameSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameSprite);
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(inputHandler,"inputHandler");
	HX_MARK_MEMBER_NAME(textBox,"textBox");
	HX_MARK_MEMBER_NAME(miniMap,"miniMap");
	HX_MARK_MEMBER_NAME(characterDetails,"characterDetails");
	HX_MARK_MEMBER_NAME(inventory,"inventory");
	HX_MARK_MEMBER_NAME(guildText,"guildText");
	HX_MARK_MEMBER_NAME(currencyDisplay,"currencyDisplay");
	HX_MARK_MEMBER_NAME(lastUpdate,"lastUpdate");
	HX_MARK_MEMBER_NAME(lastFixedUpdate,"lastFixedUpdate");
	HX_MARK_MEMBER_NAME(moveRecords,"moveRecords");
	HX_MARK_MEMBER_NAME(statsView,"statsView");
	HX_MARK_MEMBER_NAME(lastFrameUpdate,"lastFrameUpdate");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_MEMBER_NAME(isGameStarted,"isGameStarted");
	HX_MARK_MEMBER_NAME(uiInited,"uiInited");
	HX_MARK_MEMBER_NAME(inited,"inited");
	HX_MARK_MEMBER_NAME(fromEditor,"fromEditor");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(inputHandler,"inputHandler");
	HX_VISIT_MEMBER_NAME(textBox,"textBox");
	HX_VISIT_MEMBER_NAME(miniMap,"miniMap");
	HX_VISIT_MEMBER_NAME(characterDetails,"characterDetails");
	HX_VISIT_MEMBER_NAME(inventory,"inventory");
	HX_VISIT_MEMBER_NAME(guildText,"guildText");
	HX_VISIT_MEMBER_NAME(currencyDisplay,"currencyDisplay");
	HX_VISIT_MEMBER_NAME(lastUpdate,"lastUpdate");
	HX_VISIT_MEMBER_NAME(lastFixedUpdate,"lastFixedUpdate");
	HX_VISIT_MEMBER_NAME(moveRecords,"moveRecords");
	HX_VISIT_MEMBER_NAME(statsView,"statsView");
	HX_VISIT_MEMBER_NAME(lastFrameUpdate,"lastFrameUpdate");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(focus,"focus");
	HX_VISIT_MEMBER_NAME(isGameStarted,"isGameStarted");
	HX_VISIT_MEMBER_NAME(uiInited,"uiInited");
	HX_VISIT_MEMBER_NAME(inited,"inited");
	HX_VISIT_MEMBER_NAME(fromEditor,"fromEditor");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GameSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return ::hx::Val( focus ); }
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { return ::hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"inited") ) { return ::hx::Val( inited ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textBox") ) { return ::hx::Val( textBox ); }
		if (HX_FIELD_EQ(inName,"miniMap") ) { return ::hx::Val( miniMap ); }
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		if (HX_FIELD_EQ(inName,"connect") ) { return ::hx::Val( connect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uiInited") ) { return ::hx::Val( uiInited ); }
		if (HX_FIELD_EQ(inName,"setFocus") ) { return ::hx::Val( setFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { return ::hx::Val( inventory ); }
		if (HX_FIELD_EQ(inName,"guildText") ) { return ::hx::Val( guildText ); }
		if (HX_FIELD_EQ(inName,"statsView") ) { return ::hx::Val( statsView ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastUpdate") ) { return ::hx::Val( lastUpdate ); }
		if (HX_FIELD_EQ(inName,"fromEditor") ) { return ::hx::Val( fromEditor ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"disconnect") ) { return ::hx::Val( disconnect_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"moveRecords") ) { return ::hx::Val( moveRecords ); }
		if (HX_FIELD_EQ(inName,"updateStats") ) { return ::hx::Val( updateStats_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inputHandler") ) { return ::hx::Val( inputHandler ); }
		if (HX_FIELD_EQ(inName,"addStatsView") ) { return ::hx::Val( addStatsView_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return ::hx::Val( onEnterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isGameStarted") ) { return ::hx::Val( isGameStarted ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currencyDisplay") ) { return ::hx::Val( currencyDisplay ); }
		if (HX_FIELD_EQ(inName,"lastFixedUpdate") ) { return ::hx::Val( lastFixedUpdate ); }
		if (HX_FIELD_EQ(inName,"lastFrameUpdate") ) { return ::hx::Val( lastFrameUpdate ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"characterDetails") ) { return ::hx::Val( characterDetails ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GameSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { focus=inValue.Cast<  ::objects::Player >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inited") ) { inited=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textBox") ) { textBox=inValue.Cast<  ::ui::TextBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"miniMap") ) { miniMap=inValue.Cast<  ::ui::MiniMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uiInited") ) { uiInited=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { inventory=inValue.Cast<  ::ui::view::Inventory >(); return inValue; }
		if (HX_FIELD_EQ(inName,"guildText") ) { guildText=inValue.Cast<  ::ui::GuildText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"statsView") ) { statsView=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastUpdate") ) { lastUpdate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fromEditor") ) { fromEditor=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"moveRecords") ) { moveRecords=inValue.Cast<  ::game::MoveRecords >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inputHandler") ) { inputHandler=inValue.Cast<  ::game::InputHandler >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isGameStarted") ) { isGameStarted=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currencyDisplay") ) { currencyDisplay=inValue.Cast<  ::game::view::CurrencyDisplay >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastFixedUpdate") ) { lastFixedUpdate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastFrameUpdate") ) { lastFrameUpdate=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"characterDetails") ) { characterDetails=inValue.Cast<  ::ui::view::CharacterDetailsView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("inputHandler",e0,08,02,de));
	outFields->push(HX_("textBox",5e,13,ba,9e));
	outFields->push(HX_("miniMap",45,6c,d2,4b));
	outFields->push(HX_("characterDetails",19,e0,e4,6c));
	outFields->push(HX_("inventory",9c,76,b6,48));
	outFields->push(HX_("guildText",00,10,ed,0b));
	outFields->push(HX_("currencyDisplay",f1,46,0b,8a));
	outFields->push(HX_("lastUpdate",ff,68,e0,51));
	outFields->push(HX_("lastFixedUpdate",e7,23,73,45));
	outFields->push(HX_("moveRecords",b1,81,77,09));
	outFields->push(HX_("statsView",24,d0,92,40));
	outFields->push(HX_("lastFrameUpdate",60,f3,89,07));
	outFields->push(HX_("frames",a6,af,85,ac));
	outFields->push(HX_("focus",d8,5f,89,04));
	outFields->push(HX_("isGameStarted",a5,ef,f5,22));
	outFields->push(HX_("uiInited",e3,c8,3c,fe));
	outFields->push(HX_("inited",6f,77,4c,97));
	outFields->push(HX_("fromEditor",b7,46,21,7f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::map::Map */ ,(int)offsetof(GameSprite_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::game::InputHandler */ ,(int)offsetof(GameSprite_obj,inputHandler),HX_("inputHandler",e0,08,02,de)},
	{::hx::fsObject /*  ::ui::TextBox */ ,(int)offsetof(GameSprite_obj,textBox),HX_("textBox",5e,13,ba,9e)},
	{::hx::fsObject /*  ::ui::MiniMap */ ,(int)offsetof(GameSprite_obj,miniMap),HX_("miniMap",45,6c,d2,4b)},
	{::hx::fsObject /*  ::ui::view::CharacterDetailsView */ ,(int)offsetof(GameSprite_obj,characterDetails),HX_("characterDetails",19,e0,e4,6c)},
	{::hx::fsObject /*  ::ui::view::Inventory */ ,(int)offsetof(GameSprite_obj,inventory),HX_("inventory",9c,76,b6,48)},
	{::hx::fsObject /*  ::ui::GuildText */ ,(int)offsetof(GameSprite_obj,guildText),HX_("guildText",00,10,ed,0b)},
	{::hx::fsObject /*  ::game::view::CurrencyDisplay */ ,(int)offsetof(GameSprite_obj,currencyDisplay),HX_("currencyDisplay",f1,46,0b,8a)},
	{::hx::fsInt,(int)offsetof(GameSprite_obj,lastUpdate),HX_("lastUpdate",ff,68,e0,51)},
	{::hx::fsInt,(int)offsetof(GameSprite_obj,lastFixedUpdate),HX_("lastFixedUpdate",e7,23,73,45)},
	{::hx::fsObject /*  ::game::MoveRecords */ ,(int)offsetof(GameSprite_obj,moveRecords),HX_("moveRecords",b1,81,77,09)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(GameSprite_obj,statsView),HX_("statsView",24,d0,92,40)},
	{::hx::fsInt,(int)offsetof(GameSprite_obj,lastFrameUpdate),HX_("lastFrameUpdate",60,f3,89,07)},
	{::hx::fsInt,(int)offsetof(GameSprite_obj,frames),HX_("frames",a6,af,85,ac)},
	{::hx::fsObject /*  ::objects::Player */ ,(int)offsetof(GameSprite_obj,focus),HX_("focus",d8,5f,89,04)},
	{::hx::fsBool,(int)offsetof(GameSprite_obj,isGameStarted),HX_("isGameStarted",a5,ef,f5,22)},
	{::hx::fsBool,(int)offsetof(GameSprite_obj,uiInited),HX_("uiInited",e3,c8,3c,fe)},
	{::hx::fsBool,(int)offsetof(GameSprite_obj,inited),HX_("inited",6f,77,4c,97)},
	{::hx::fsBool,(int)offsetof(GameSprite_obj,fromEditor),HX_("fromEditor",b7,46,21,7f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GameSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String GameSprite_obj_sMemberFields[] = {
	HX_("inputHandler",e0,08,02,de),
	HX_("textBox",5e,13,ba,9e),
	HX_("miniMap",45,6c,d2,4b),
	HX_("characterDetails",19,e0,e4,6c),
	HX_("inventory",9c,76,b6,48),
	HX_("guildText",00,10,ed,0b),
	HX_("currencyDisplay",f1,46,0b,8a),
	HX_("lastUpdate",ff,68,e0,51),
	HX_("lastFixedUpdate",e7,23,73,45),
	HX_("moveRecords",b1,81,77,09),
	HX_("statsView",24,d0,92,40),
	HX_("lastFrameUpdate",60,f3,89,07),
	HX_("frames",a6,af,85,ac),
	HX_("focus",d8,5f,89,04),
	HX_("isGameStarted",a5,ef,f5,22),
	HX_("uiInited",e3,c8,3c,fe),
	HX_("inited",6f,77,4c,97),
	HX_("fromEditor",b7,46,21,7f),
	HX_("onAdded",21,73,81,b2),
	HX_("close",b8,17,63,48),
	HX_("setFocus",d6,c8,bd,12),
	HX_("addStatsView",c3,f1,e6,3f),
	HX_("updateStats",56,df,a3,69),
	HX_("initialize",50,31,bb,ec),
	HX_("connect",ea,3b,80,15),
	HX_("disconnect",5c,64,44,69),
	HX_("onResize",73,50,28,e8),
	HX_("onEnterFrame",f4,a5,93,da),
	::String(null()) };

::hx::Class GameSprite_obj::__mClass;

void GameSprite_obj::__register()
{
	GameSprite_obj _hx_dummy;
	GameSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.GameSprite",b3,9c,19,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
