// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_InputHandler
#include <game/InputHandler.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_map_Camera
#include <map/Camera.h>
#endif
#ifndef INCLUDED_map_Map
#include <map/Map.h>
#endif
#ifndef INCLUDED_network_NetworkHandler
#include <network/NetworkHandler.h>
#endif
#ifndef INCLUDED_objects_GameObject
#include <objects/GameObject.h>
#endif
#ifndef INCLUDED_objects_Player
#include <objects/Player.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils__Object_Object_Impl_
#include <openfl/utils/_Object/Object_Impl_.h>
#endif
#ifndef INCLUDED_ui_MiniMap
#include <ui/MiniMap.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_model_TabStripModel
#include <ui/model/TabStripModel.h>
#endif
#ifndef INCLUDED_ui_options_Options
#include <ui/options/Options.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5c9d979151d5456d_18_new,"game.InputHandler","new",0x2605adee,"game.InputHandler.new","game/InputHandler.hx",18,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_34_clearInput,"game.InputHandler","clearInput",0x3c17136f,"game.InputHandler.clearInput","game/InputHandler.hx",34,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_42_setPlayerMovement,"game.InputHandler","setPlayerMovement",0xde4cb700,"game.InputHandler.setPlayerMovement","game/InputHandler.hx",42,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_45_useItem,"game.InputHandler","useItem",0xf7b60988,"game.InputHandler.useItem","game/InputHandler.hx",45,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_53_togglePerformanceStats,"game.InputHandler","togglePerformanceStats",0xf4f328f5,"game.InputHandler.togglePerformanceStats","game/InputHandler.hx",53,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_62_onAddedToStage,"game.InputHandler","onAddedToStage",0xb6049354,"game.InputHandler.onAddedToStage","game/InputHandler.hx",62,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_76_onRemovedFromStage,"game.InputHandler","onRemovedFromStage",0x0c2f5ea5,"game.InputHandler.onRemovedFromStage","game/InputHandler.hx",76,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_91_onDeactivate,"game.InputHandler","onDeactivate",0x233dfee5,"game.InputHandler.onDeactivate","game/InputHandler.hx",91,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_95_onMouseDown,"game.InputHandler","onMouseDown",0x3944af96,"game.InputHandler.onMouseDown","game/InputHandler.hx",95,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_101_onMouseUp,"game.InputHandler","onMouseUp",0xb0fb288f,"game.InputHandler.onMouseUp","game/InputHandler.hx",101,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_105_onRightMouseDown,"game.InputHandler","onRightMouseDown",0xd6f978dc,"game.InputHandler.onRightMouseDown","game/InputHandler.hx",105,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_111_onRightMouseUp,"game.InputHandler","onRightMouseUp",0x54d0f455,"game.InputHandler.onRightMouseUp","game/InputHandler.hx",111,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_115_onMiddleMouseDown,"game.InputHandler","onMiddleMouseDown",0xf6e126c1,"game.InputHandler.onMiddleMouseDown","game/InputHandler.hx",115,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_121_onMiddleMouseUp,"game.InputHandler","onMiddleMouseUp",0x0ac8eefa,"game.InputHandler.onMiddleMouseUp","game/InputHandler.hx",121,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_128_onEnterFrame,"game.InputHandler","onEnterFrame",0xe98ca6a6,"game.InputHandler.onEnterFrame","game/InputHandler.hx",128,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_135_onKeyDown,"game.InputHandler","onKeyDown",0x8ccf9e50,"game.InputHandler.onKeyDown","game/InputHandler.hx",135,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_142_onKeyUp,"game.InputHandler","onKeyUp",0x188714c9,"game.InputHandler.onKeyUp","game/InputHandler.hx",142,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_149_downAction,"game.InputHandler","downAction",0xfc392dea,"game.InputHandler.downAction","game/InputHandler.hx",149,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_220_upAction,"game.InputHandler","upAction",0xde670c23,"game.InputHandler.upAction","game/InputHandler.hx",220,0xbabb1261)
HX_LOCAL_STACK_FRAME(_hx_pos_5c9d979151d5456d_125_onMouseWheel,"game.InputHandler","onMouseWheel",0xcec3cae7,"game.InputHandler.onMouseWheel","game/InputHandler.hx",125,0xbabb1261)
namespace game{

void InputHandler_obj::__construct( ::game::GameSprite gs){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_18_new)
HXLINE(  27)		this->shootDown = false;
HXLINE(  26)		this->rotateRight = 0;
HXLINE(  25)		this->rotateLeft = 0;
HXLINE(  24)		this->moveDown = 0;
HXLINE(  23)		this->moveUp = 0;
HXLINE(  22)		this->moveRight = 0;
HXLINE(  21)		this->moveLeft = 0;
HXLINE(  19)		this->isWalking = false;
HXLINE(  30)		gs->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  31)		gs->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic InputHandler_obj::__CreateEmpty() { return new InputHandler_obj; }

void *InputHandler_obj::_hx_vtable = 0;

Dynamic InputHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InputHandler_obj > _hx_result = new InputHandler_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InputHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5000d6ba;
}

void InputHandler_obj::clearInput(){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_34_clearInput)
HXLINE(  35)		this->moveLeft = (this->moveRight = (this->moveUp = (this->moveDown = (this->rotateLeft = (this->rotateRight = 0)))));
HXLINE(  36)		this->shootDown = false;
HXLINE(  38)		this->setPlayerMovement();
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputHandler_obj,clearInput,(void))

void InputHandler_obj::setPlayerMovement(){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_42_setPlayerMovement)
HXDLIN(  42)		 ::objects::Player tmp = ::Global_obj::gameSprite->map->player;
HXDLIN(  42)		if (::hx::IsNotNull( tmp )) {
HXDLIN(  42)			tmp->setRelativeMovement(( (float)((this->rotateRight - this->rotateLeft)) ),( (float)((this->moveRight - this->moveLeft)) ),( (float)((this->moveDown - this->moveUp)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputHandler_obj,setPlayerMovement,(void))

void InputHandler_obj::useItem(int slotId){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_45_useItem)
HXLINE(  46)		if ((::Global_obj::tabStripModel->currentSelection == HX_("Backpack",a0,0c,2a,fc))) {
HXLINE(  47)			slotId = (slotId + 8);
            		}
HXLINE(  49)		::network::NetworkHandler_obj::useItem_new(::Global_obj::gameSprite->map->player,slotId);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,useItem,(void))

void InputHandler_obj::togglePerformanceStats(){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_53_togglePerformanceStats)
HXDLIN(  53)		if (::hx::IsNotNull( ::Global_obj::gameSprite->statsView )) {
HXLINE(  54)			::Global_obj::gameSprite->statsView->set_visible(false);
HXLINE(  55)			::Global_obj::gameSprite->statsView = null();
            		}
            		else {
HXLINE(  57)			::Global_obj::gameSprite->addStatsView();
HXLINE(  58)			::Global_obj::gameSprite->lastFrameUpdate = ::lime::_hx_system::System_obj::getTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputHandler_obj,togglePerformanceStats,(void))

void InputHandler_obj::onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_62_onAddedToStage)
HXLINE(  63)		::Main_obj::primaryStage->addEventListener(HX_("deactivate",34,5c,01,3c),this->onDeactivate_dyn(),null(),null(),null());
HXLINE(  64)		::Main_obj::primaryStage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null(),null(),null());
HXLINE(  65)		::Main_obj::primaryStage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyUp_dyn(),null(),null(),null());
HXLINE(  66)		::Main_obj::primaryStage->addEventListener(HX_("mouseWheel",36,28,87,e7),::game::InputHandler_obj::onMouseWheel_dyn(),null(),null(),null());
HXLINE(  67)		::Main_obj::primaryStage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE(  68)		::Main_obj::primaryStage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null(),null(),null());
HXLINE(  69)		::Main_obj::primaryStage->addEventListener(HX_("rightMouseDown",ab,29,d7,cd),this->onRightMouseDown_dyn(),null(),null(),null());
HXLINE(  70)		::Main_obj::primaryStage->addEventListener(HX_("rightMouseUp",64,83,21,ab),this->onRightMouseUp_dyn(),null(),null(),null());
HXLINE(  71)		::Main_obj::primaryStage->addEventListener(HX_("middleMouseDown",12,2b,fe,01),this->onMiddleMouseDown_dyn(),null(),null(),null());
HXLINE(  72)		::Main_obj::primaryStage->addEventListener(HX_("middleMouseUp",0b,8d,f5,3a),this->onMiddleMouseUp_dyn(),null(),null(),null());
HXLINE(  73)		::Main_obj::primaryStage->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onAddedToStage,(void))

void InputHandler_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_76_onRemovedFromStage)
HXLINE(  77)		::Main_obj::primaryStage->removeEventListener(HX_("deactivate",34,5c,01,3c),this->onDeactivate_dyn(),null());
HXLINE(  78)		::Main_obj::primaryStage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null());
HXLINE(  79)		::Main_obj::primaryStage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyUp_dyn(),null());
HXLINE(  80)		::Main_obj::primaryStage->removeEventListener(HX_("mouseWheel",36,28,87,e7),::game::InputHandler_obj::onMouseWheel_dyn(),null());
HXLINE(  81)		::Main_obj::primaryStage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null());
HXLINE(  82)		::Main_obj::primaryStage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null());
HXLINE(  83)		::Main_obj::primaryStage->removeEventListener(HX_("rightMouseDown",ab,29,d7,cd),this->onRightMouseDown_dyn(),null());
HXLINE(  84)		::Main_obj::primaryStage->removeEventListener(HX_("rightMouseUp",64,83,21,ab),this->onRightMouseUp_dyn(),null());
HXLINE(  85)		::Main_obj::primaryStage->removeEventListener(HX_("middleMouseDown",12,2b,fe,01),this->onMiddleMouseDown_dyn(),null());
HXLINE(  86)		::Main_obj::primaryStage->removeEventListener(HX_("middleMouseUp",0b,8d,f5,3a),this->onMiddleMouseUp_dyn(),null());
HXLINE(  87)		::Main_obj::primaryStage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onRemovedFromStage,(void))

void InputHandler_obj::onDeactivate( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_91_onDeactivate)
HXDLIN(  91)		this->clearInput();
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onDeactivate,(void))

void InputHandler_obj::onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_95_onMouseDown)
HXDLIN(  95)		bool _hx_tmp;
HXDLIN(  95)		bool _hx_tmp1;
HXDLIN(  95)		if (!(::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->currentTarget,event->target))) {
HXDLIN(  95)			_hx_tmp1 = ::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->target,::Global_obj::gameSprite->map);
            		}
            		else {
HXDLIN(  95)			_hx_tmp1 = true;
            		}
HXDLIN(  95)		if (!(_hx_tmp1)) {
HXDLIN(  95)			_hx_tmp = ::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->target,::Global_obj::gameSprite);
            		}
            		else {
HXDLIN(  95)			_hx_tmp = true;
            		}
HXDLIN(  95)		this->downAction(( (unsigned char)(223) ),_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onMouseDown,(void))

void InputHandler_obj::onMouseUp( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_101_onMouseUp)
HXDLIN( 101)		this->upAction(( (unsigned char)(223) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onMouseUp,(void))

void InputHandler_obj::onRightMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_105_onRightMouseDown)
HXDLIN( 105)		bool _hx_tmp;
HXDLIN( 105)		bool _hx_tmp1;
HXDLIN( 105)		if (!(::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->currentTarget,event->target))) {
HXDLIN( 105)			_hx_tmp1 = ::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->target,::Global_obj::gameSprite->map);
            		}
            		else {
HXDLIN( 105)			_hx_tmp1 = true;
            		}
HXDLIN( 105)		if (!(_hx_tmp1)) {
HXDLIN( 105)			_hx_tmp = ::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->target,::Global_obj::gameSprite);
            		}
            		else {
HXDLIN( 105)			_hx_tmp = true;
            		}
HXDLIN( 105)		this->downAction(( (unsigned char)(224) ),_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onRightMouseDown,(void))

void InputHandler_obj::onRightMouseUp( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_111_onRightMouseUp)
HXDLIN( 111)		this->upAction(( (unsigned char)(224) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onRightMouseUp,(void))

void InputHandler_obj::onMiddleMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_115_onMiddleMouseDown)
HXDLIN( 115)		bool _hx_tmp;
HXDLIN( 115)		bool _hx_tmp1;
HXDLIN( 115)		if (!(::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->currentTarget,event->target))) {
HXDLIN( 115)			_hx_tmp1 = ::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->target,::Global_obj::gameSprite->map);
            		}
            		else {
HXDLIN( 115)			_hx_tmp1 = true;
            		}
HXDLIN( 115)		if (!(_hx_tmp1)) {
HXDLIN( 115)			_hx_tmp = ::openfl::utils::_Object::Object_Impl__obj::_hx___eq(event->target,::Global_obj::gameSprite);
            		}
            		else {
HXDLIN( 115)			_hx_tmp = true;
            		}
HXDLIN( 115)		this->downAction(( (unsigned char)(225) ),_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onMiddleMouseDown,(void))

void InputHandler_obj::onMiddleMouseUp( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_121_onMiddleMouseUp)
HXDLIN( 121)		this->upAction(( (unsigned char)(225) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onMiddleMouseUp,(void))

void InputHandler_obj::onEnterFrame( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_128_onEnterFrame)
HXLINE( 129)		if (!(this->shootDown)) {
HXLINE( 130)			return;
            		}
HXLINE( 132)		{
HXLINE( 132)			 ::objects::Player tmp = ::Global_obj::gameSprite->map->player;
HXDLIN( 132)			if (::hx::IsNotNull( tmp )) {
HXLINE( 132)				Float _hx_tmp = ::Main_obj::primaryStage->get_mouseY();
HXDLIN( 132)				Float _hx_tmp1 = ((_hx_tmp - ( (Float)(::Main_obj::mouseYOffset) )) + 20);
HXDLIN( 132)				Float _hx_tmp2 = ::Main_obj::primaryStage->get_mouseX();
HXDLIN( 132)				tmp->attemptAttackAngle(( (float)(::Math_obj::atan2(_hx_tmp1,(_hx_tmp2 - ( (Float)(::Main_obj::mouseXOffset) )))) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onEnterFrame,(void))

void InputHandler_obj::onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_135_onKeyDown)
HXLINE( 136)		if (::hx::IsNotNull( ::Main_obj::primaryStage->get_focus() )) {
HXLINE( 137)			return;
            		}
HXLINE( 139)		this->downAction(( (unsigned char)(event->keyCode) ),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onKeyDown,(void))

void InputHandler_obj::onKeyUp( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_142_onKeyUp)
HXLINE( 143)		if (::hx::IsNotNull( ::Main_obj::primaryStage->get_focus() )) {
HXLINE( 144)			return;
            		}
HXLINE( 146)		this->upAction(( (unsigned char)(event->keyCode) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onKeyUp,(void))

void InputHandler_obj::downAction(unsigned char keyCode,::hx::Null< bool >  __o_shootCheck){
            		bool shootCheck = __o_shootCheck.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_5c9d979151d5456d_149_downAction)
HXLINE( 150)		 ::objects::Player player = ::Global_obj::gameSprite->map->player;
HXLINE( 152)		if ((keyCode == ::util::Settings_obj::shoot)) {
HXLINE( 153)			if (shootCheck) {
HXLINE( 154)				if (::hx::IsNotNull( player )) {
HXLINE( 154)					Float _hx_tmp = ::Main_obj::primaryStage->get_mouseY();
HXDLIN( 154)					Float _hx_tmp1 = ((_hx_tmp - ( (Float)(::Main_obj::mouseYOffset) )) + 20);
HXDLIN( 154)					Float _hx_tmp2 = ::Main_obj::primaryStage->get_mouseX();
HXDLIN( 154)					player->attemptAttackAngle(( (float)(::Math_obj::atan2(_hx_tmp1,(_hx_tmp2 - ( (Float)(::Main_obj::mouseXOffset) )))) ));
            				}
            			}
            			else {
HXLINE( 156)				return;
            			}
HXLINE( 158)			this->shootDown = true;
            		}
            		else {
HXLINE( 159)			if ((keyCode == ::util::Settings_obj::walk)) {
HXLINE( 160)				this->isWalking = true;
            			}
            			else {
HXLINE( 161)				if ((keyCode == ::util::Settings_obj::moveUp)) {
HXLINE( 162)					this->moveUp = 1;
            				}
            				else {
HXLINE( 163)					if ((keyCode == ::util::Settings_obj::moveDown)) {
HXLINE( 164)						this->moveDown = 1;
            					}
            					else {
HXLINE( 165)						if ((keyCode == ::util::Settings_obj::moveLeft)) {
HXLINE( 166)							this->moveLeft = 1;
            						}
            						else {
HXLINE( 167)							if ((keyCode == ::util::Settings_obj::moveRight)) {
HXLINE( 168)								this->moveRight = 1;
            							}
            							else {
HXLINE( 169)								if ((keyCode == ::util::Settings_obj::rotateLeft)) {
HXLINE( 170)									this->rotateLeft = 1;
            								}
            								else {
HXLINE( 171)									if ((keyCode == ::util::Settings_obj::rotateRight)) {
HXLINE( 172)										this->rotateRight = 1;
            									}
            									else {
HXLINE( 173)										if ((keyCode == ::util::Settings_obj::resetCamera)) {
HXLINE( 174)											::map::Camera_obj::angleRad = ( (float)(0) );
            										}
            										else {
HXLINE( 175)											if ((keyCode == ::util::Settings_obj::useAbility)) {
HXLINE( 176)												if (::hx::IsNotNull( player )) {
HXLINE( 176)													Float _hx_tmp3 = ::Main_obj::primaryStage->get_mouseX();
HXDLIN( 176)													Float _hx_tmp4 = (_hx_tmp3 - ( (Float)(::Main_obj::mouseXOffset) ));
HXDLIN( 176)													Float _hx_tmp5 = ::Main_obj::primaryStage->get_mouseY();
HXDLIN( 176)													player->useAltWeapon(( (float)(_hx_tmp4) ),( (float)((_hx_tmp5 - ( (Float)(::Main_obj::mouseYOffset) ))) ),1);
            												}
            											}
            											else {
HXLINE( 177)												if ((keyCode == ::util::Settings_obj::inv1)) {
HXLINE( 178)													this->useItem(4);
            												}
            												else {
HXLINE( 179)													if ((keyCode == ::util::Settings_obj::inv2)) {
HXLINE( 180)														this->useItem(5);
            													}
            													else {
HXLINE( 181)														if ((keyCode == ::util::Settings_obj::inv3)) {
HXLINE( 182)															this->useItem(6);
            														}
            														else {
HXLINE( 183)															if ((keyCode == ::util::Settings_obj::inv4)) {
HXLINE( 184)																this->useItem(7);
            															}
            															else {
HXLINE( 185)																if ((keyCode == ::util::Settings_obj::inv5)) {
HXLINE( 186)																	this->useItem(8);
            																}
            																else {
HXLINE( 187)																	if ((keyCode == ::util::Settings_obj::inv6)) {
HXLINE( 188)																		this->useItem(9);
            																	}
            																	else {
HXLINE( 189)																		if ((keyCode == ::util::Settings_obj::inv7)) {
HXLINE( 190)																			this->useItem(10);
            																		}
            																		else {
HXLINE( 191)																			if ((keyCode == ::util::Settings_obj::inv8)) {
HXLINE( 192)																				this->useItem(11);
            																			}
            																			else {
HXLINE( 193)																				if ((keyCode == ::util::Settings_obj::healthVial)) {
HXLINE( 194)																					bool _hx_tmp6;
HXDLIN( 194)																					bool _hx_tmp7;
HXDLIN( 194)																					if (::hx::IsNotNull( player )) {
HXLINE( 194)																						_hx_tmp7 = (player->healthVialCount > 0);
            																					}
            																					else {
HXLINE( 194)																						_hx_tmp7 = false;
            																					}
HXDLIN( 194)																					if (_hx_tmp7) {
HXLINE( 194)																						_hx_tmp6 = (player->hp < player->maxHP);
            																					}
            																					else {
HXLINE( 194)																						_hx_tmp6 = false;
            																					}
HXDLIN( 194)																					if (_hx_tmp6) {
HXLINE( 195)																						::Global_obj::useVial(2721);
            																					}
            																				}
            																				else {
HXLINE( 196)																					if ((keyCode == ::util::Settings_obj::magicVial)) {
HXLINE( 197)																						bool _hx_tmp8;
HXDLIN( 197)																						bool _hx_tmp9;
HXDLIN( 197)																						if (::hx::IsNotNull( player )) {
HXLINE( 197)																							_hx_tmp9 = (player->magicVialCount > 0);
            																						}
            																						else {
HXLINE( 197)																							_hx_tmp9 = false;
            																						}
HXDLIN( 197)																						if (_hx_tmp9) {
HXLINE( 197)																							_hx_tmp8 = (player->mp < player->maxMP);
            																						}
            																						else {
HXLINE( 197)																							_hx_tmp8 = false;
            																						}
HXDLIN( 197)																						if (_hx_tmp8) {
HXLINE( 198)																							::Global_obj::useVial(2722);
            																						}
            																					}
            																					else {
HXLINE( 199)																						if ((keyCode == ::util::Settings_obj::perfStats)) {
HXLINE( 200)																							this->togglePerformanceStats();
            																						}
            																						else {
HXLINE( 201)																							if ((keyCode == ::util::Settings_obj::goToHub)) {
HXLINE( 202)																								::network::NetworkHandler_obj::escape();
            																							}
            																							else {
HXLINE( 203)																								if ((keyCode == ::util::Settings_obj::options)) {
HXLINE( 204)																									this->clearInput();
HXLINE( 205)																									 ::ui::options::Options options =  ::ui::options::Options_obj::__alloc( HX_CTX ,::Global_obj::gameSprite);
HXLINE( 206)																									options->set_x((( (Float)((::Main_obj::stageWidth - 800)) ) / ( (Float)(2) )));
HXLINE( 207)																									options->set_y((( (Float)((::Main_obj::stageHeight - 600)) ) / ( (Float)(2) )));
HXLINE( 208)																									::Global_obj::layers->overlay->addChild(options);
            																								}
            																								else {
HXLINE( 209)																									if ((keyCode == ::util::Settings_obj::toggleCentering)) {
HXLINE( 210)																										::util::Settings_obj::centerCamera = !(::util::Settings_obj::centerCamera);
HXLINE( 211)																										::util::Settings_obj::save();
            																									}
            																									else {
HXLINE( 212)																										if ((keyCode == ::util::Settings_obj::interact)) {
HXLINE( 213)																											if ((::Global_obj::currentInteractiveTarget > 0)) {
HXLINE( 214)																												::network::NetworkHandler_obj::usePortal(::Global_obj::currentInteractiveTarget);
            																											}
            																										}
            																									}
            																								}
            																							}
            																						}
            																					}
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 217)		this->setPlayerMovement();
            	}


HX_DEFINE_DYNAMIC_FUNC2(InputHandler_obj,downAction,(void))

void InputHandler_obj::upAction(unsigned char keyCode){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_220_upAction)
HXLINE( 221)		if ((keyCode == ::util::Settings_obj::shoot)) {
HXLINE( 222)			this->shootDown = false;
            		}
            		else {
HXLINE( 223)			if ((keyCode == ::util::Settings_obj::walk)) {
HXLINE( 224)				this->isWalking = false;
            			}
            			else {
HXLINE( 225)				if ((keyCode == ::util::Settings_obj::moveUp)) {
HXLINE( 226)					this->moveUp = 0;
            				}
            				else {
HXLINE( 227)					if ((keyCode == ::util::Settings_obj::moveDown)) {
HXLINE( 228)						this->moveDown = 0;
            					}
            					else {
HXLINE( 229)						if ((keyCode == ::util::Settings_obj::moveLeft)) {
HXLINE( 230)							this->moveLeft = 0;
            						}
            						else {
HXLINE( 231)							if ((keyCode == ::util::Settings_obj::moveRight)) {
HXLINE( 232)								this->moveRight = 0;
            							}
            							else {
HXLINE( 233)								if ((keyCode == ::util::Settings_obj::rotateLeft)) {
HXLINE( 234)									this->rotateLeft = 0;
            								}
            								else {
HXLINE( 235)									if ((keyCode == ::util::Settings_obj::rotateRight)) {
HXLINE( 236)										this->rotateRight = 0;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 238)		this->setPlayerMovement();
            	}


HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,upAction,(void))

void InputHandler_obj::onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_5c9d979151d5456d_125_onMouseWheel)
HXDLIN( 125)		 ::game::GameSprite tmp = ::Global_obj::gameSprite;
HXDLIN( 125)		 ::ui::MiniMap tmp1;
HXDLIN( 125)		if (::hx::IsNotNull( tmp )) {
HXDLIN( 125)			tmp1 = tmp->miniMap;
            		}
            		else {
HXDLIN( 125)			tmp1 = null();
            		}
HXDLIN( 125)		if (::hx::IsNotNull( tmp1 )) {
HXDLIN( 125)			::String _hx_tmp;
HXDLIN( 125)			if ((event->delta > 0)) {
HXDLIN( 125)				_hx_tmp = HX_("in",e5,5b,00,00);
            			}
            			else {
HXDLIN( 125)				_hx_tmp = HX_("out",8e,a0,54,00);
            			}
HXDLIN( 125)			tmp1->onMiniMapZoom(_hx_tmp);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(InputHandler_obj,onMouseWheel,(void))


::hx::ObjectPtr< InputHandler_obj > InputHandler_obj::__new( ::game::GameSprite gs) {
	::hx::ObjectPtr< InputHandler_obj > __this = new InputHandler_obj();
	__this->__construct(gs);
	return __this;
}

::hx::ObjectPtr< InputHandler_obj > InputHandler_obj::__alloc(::hx::Ctx *_hx_ctx, ::game::GameSprite gs) {
	InputHandler_obj *__this = (InputHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InputHandler_obj), false, "game.InputHandler"));
	*(void **)__this = InputHandler_obj::_hx_vtable;
	__this->__construct(gs);
	return __this;
}

InputHandler_obj::InputHandler_obj()
{
}

::hx::Val InputHandler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"moveUp") ) { return ::hx::Val( moveUp ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"useItem") ) { return ::hx::Val( useItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return ::hx::Val( onKeyUp_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"moveLeft") ) { return ::hx::Val( moveLeft ); }
		if (HX_FIELD_EQ(inName,"moveDown") ) { return ::hx::Val( moveDown ); }
		if (HX_FIELD_EQ(inName,"upAction") ) { return ::hx::Val( upAction_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isWalking") ) { return ::hx::Val( isWalking ); }
		if (HX_FIELD_EQ(inName,"moveRight") ) { return ::hx::Val( moveRight ); }
		if (HX_FIELD_EQ(inName,"shootDown") ) { return ::hx::Val( shootDown ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return ::hx::Val( onKeyDown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rotateLeft") ) { return ::hx::Val( rotateLeft ); }
		if (HX_FIELD_EQ(inName,"clearInput") ) { return ::hx::Val( clearInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"downAction") ) { return ::hx::Val( downAction_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rotateRight") ) { return ::hx::Val( rotateRight ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onDeactivate") ) { return ::hx::Val( onDeactivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return ::hx::Val( onEnterFrame_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRightMouseUp") ) { return ::hx::Val( onRightMouseUp_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onMiddleMouseUp") ) { return ::hx::Val( onMiddleMouseUp_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onRightMouseDown") ) { return ::hx::Val( onRightMouseDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setPlayerMovement") ) { return ::hx::Val( setPlayerMovement_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMiddleMouseDown") ) { return ::hx::Val( onMiddleMouseDown_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"togglePerformanceStats") ) { return ::hx::Val( togglePerformanceStats_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool InputHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { outValue = onMouseWheel_dyn(); return true; }
	}
	return false;
}

::hx::Val InputHandler_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"moveUp") ) { moveUp=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"moveLeft") ) { moveLeft=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveDown") ) { moveDown=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isWalking") ) { isWalking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveRight") ) { moveRight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shootDown") ) { shootDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rotateLeft") ) { rotateLeft=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rotateRight") ) { rotateRight=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InputHandler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isWalking",af,38,67,97));
	outFields->push(HX_("moveLeft",b8,73,67,ea));
	outFields->push(HX_("moveRight",0b,db,2a,a7));
	outFields->push(HX_("moveUp",cc,d3,ac,cc));
	outFields->push(HX_("moveDown",13,64,25,e5));
	outFields->push(HX_("rotateLeft",02,44,bb,7f));
	outFields->push(HX_("rotateRight",81,4b,2d,bb));
	outFields->push(HX_("shootDown",e1,81,1e,60));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InputHandler_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(InputHandler_obj,isWalking),HX_("isWalking",af,38,67,97)},
	{::hx::fsInt,(int)offsetof(InputHandler_obj,moveLeft),HX_("moveLeft",b8,73,67,ea)},
	{::hx::fsInt,(int)offsetof(InputHandler_obj,moveRight),HX_("moveRight",0b,db,2a,a7)},
	{::hx::fsInt,(int)offsetof(InputHandler_obj,moveUp),HX_("moveUp",cc,d3,ac,cc)},
	{::hx::fsInt,(int)offsetof(InputHandler_obj,moveDown),HX_("moveDown",13,64,25,e5)},
	{::hx::fsInt,(int)offsetof(InputHandler_obj,rotateLeft),HX_("rotateLeft",02,44,bb,7f)},
	{::hx::fsInt,(int)offsetof(InputHandler_obj,rotateRight),HX_("rotateRight",81,4b,2d,bb)},
	{::hx::fsBool,(int)offsetof(InputHandler_obj,shootDown),HX_("shootDown",e1,81,1e,60)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InputHandler_obj_sStaticStorageInfo = 0;
#endif

static ::String InputHandler_obj_sMemberFields[] = {
	HX_("isWalking",af,38,67,97),
	HX_("moveLeft",b8,73,67,ea),
	HX_("moveRight",0b,db,2a,a7),
	HX_("moveUp",cc,d3,ac,cc),
	HX_("moveDown",13,64,25,e5),
	HX_("rotateLeft",02,44,bb,7f),
	HX_("rotateRight",81,4b,2d,bb),
	HX_("shootDown",e1,81,1e,60),
	HX_("clearInput",3d,03,28,93),
	HX_("setPlayerMovement",f2,7c,5f,a8),
	HX_("useItem",fa,4c,6b,54),
	HX_("togglePerformanceStats",c3,95,13,7a),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onDeactivate",33,fe,44,14),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onRightMouseDown",2a,37,2d,da),
	HX_("onRightMouseUp",23,e3,10,d5),
	HX_("onMiddleMouseDown",b3,ec,f3,c0),
	HX_("onMiddleMouseUp",6c,f4,79,c2),
	HX_("onEnterFrame",f4,a5,93,da),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onKeyUp",3b,58,3c,75),
	HX_("downAction",b8,1d,4a,53),
	HX_("upAction",71,cc,4c,a0),
	::String(null()) };

::hx::Class InputHandler_obj::__mClass;

static ::String InputHandler_obj_sStaticFields[] = {
	HX_("onMouseWheel",35,ca,ca,bf),
	::String(null())
};

void InputHandler_obj::__register()
{
	InputHandler_obj _hx_dummy;
	InputHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.InputHandler",fc,de,88,95);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InputHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(InputHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InputHandler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InputHandler_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
