// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_game_MoveRecord
#include <game/MoveRecord.h>
#endif
#ifndef INCLUDED_game_MoveRecords
#include <game/MoveRecords.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5023415e070d96b8_13_new,"game.MoveRecords","new",0x10d93287,"game.MoveRecords.new","game/MoveRecords.hx",13,0x110a5a8a)
HX_LOCAL_STACK_FRAME(_hx_pos_5023415e070d96b8_51_clear,"game.MoveRecords","clear",0x8e9aeb74,"game.MoveRecords.clear","game/MoveRecords.hx",51,0x110a5a8a)
HX_LOCAL_STACK_FRAME(_hx_pos_5023415e070d96b8_57_getId,"game.MoveRecords","getId",0xd7a00bf8,"game.MoveRecords.getId","game/MoveRecords.hx",57,0x110a5a8a)
HX_LOCAL_STACK_FRAME(_hx_pos_5023415e070d96b8_61_getScore,"game.MoveRecords","getScore",0x5752f355,"game.MoveRecords.getScore","game/MoveRecords.hx",61,0x110a5a8a)
namespace game{

void MoveRecords_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5023415e070d96b8_13_new)
HXLINE(  16)		this->recordIdx = 0;
HXLINE(  14)		this->lastClearTime = -1;
HXLINE(  19)		this->records = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic MoveRecords_obj::__CreateEmpty() { return new MoveRecords_obj; }

void *MoveRecords_obj::_hx_vtable = 0;

Dynamic MoveRecords_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MoveRecords_obj > _hx_result = new MoveRecords_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MoveRecords_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x571e10df;
}

void MoveRecords_obj::clear(int time){
            	HX_STACKFRAME(&_hx_pos_5023415e070d96b8_51_clear)
HXLINE(  52)		this->lastClearTime = time;
HXLINE(  53)		this->records->resize(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MoveRecords_obj,clear,(void))

int MoveRecords_obj::getId(int time){
            	HX_STACKFRAME(&_hx_pos_5023415e070d96b8_57_getId)
HXDLIN(  57)		return ::Std_obj::_hx_int((( (Float)(((time - this->lastClearTime) + 50)) ) / ( (Float)(100) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MoveRecords_obj,getId,return )

int MoveRecords_obj::getScore(int id,int time){
            	HX_STACKFRAME(&_hx_pos_5023415e070d96b8_61_getScore)
HXDLIN(  61)		return ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(((time - this->lastClearTime) - (id * 100))) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MoveRecords_obj,getScore,return )


::hx::ObjectPtr< MoveRecords_obj > MoveRecords_obj::__new() {
	::hx::ObjectPtr< MoveRecords_obj > __this = new MoveRecords_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MoveRecords_obj > MoveRecords_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MoveRecords_obj *__this = (MoveRecords_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MoveRecords_obj), true, "game.MoveRecords"));
	*(void **)__this = MoveRecords_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MoveRecords_obj::MoveRecords_obj()
{
}

void MoveRecords_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MoveRecords);
	HX_MARK_MEMBER_NAME(lastClearTime,"lastClearTime");
	HX_MARK_MEMBER_NAME(records,"records");
	HX_MARK_MEMBER_NAME(recordIdx,"recordIdx");
	HX_MARK_END_CLASS();
}

void MoveRecords_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lastClearTime,"lastClearTime");
	HX_VISIT_MEMBER_NAME(records,"records");
	HX_VISIT_MEMBER_NAME(recordIdx,"recordIdx");
}

::hx::Val MoveRecords_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"getId") ) { return ::hx::Val( getId_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"records") ) { return ::hx::Val( records ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getScore") ) { return ::hx::Val( getScore_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"recordIdx") ) { return ::hx::Val( recordIdx ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lastClearTime") ) { return ::hx::Val( lastClearTime ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MoveRecords_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"records") ) { records=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"recordIdx") ) { recordIdx=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lastClearTime") ) { lastClearTime=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MoveRecords_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lastClearTime",04,8f,f6,be));
	outFields->push(HX_("records",c2,48,fb,30));
	outFields->push(HX_("recordIdx",2c,f6,d0,dc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MoveRecords_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MoveRecords_obj,lastClearTime),HX_("lastClearTime",04,8f,f6,be)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MoveRecords_obj,records),HX_("records",c2,48,fb,30)},
	{::hx::fsInt,(int)offsetof(MoveRecords_obj,recordIdx),HX_("recordIdx",2c,f6,d0,dc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MoveRecords_obj_sStaticStorageInfo = 0;
#endif

static ::String MoveRecords_obj_sMemberFields[] = {
	HX_("lastClearTime",04,8f,f6,be),
	HX_("records",c2,48,fb,30),
	HX_("recordIdx",2c,f6,d0,dc),
	HX_("clear",8d,71,5b,48),
	HX_("getId",11,92,60,91),
	HX_("getScore",dc,82,b0,d8),
	::String(null()) };

::hx::Class MoveRecords_obj::__mClass;

void MoveRecords_obj::__register()
{
	MoveRecords_obj _hx_dummy;
	MoveRecords_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.MoveRecords",15,e3,85,be);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MoveRecords_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MoveRecords_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MoveRecords_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MoveRecords_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
