// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_appengine_SavedCharactersList
#include <appengine/SavedCharactersList.h>
#endif
#ifndef INCLUDED_core_PlayerModel
#include <core/PlayerModel.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_view_CurrencyDisplay
#include <game/view/CurrencyDisplay.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7a7a5e5371b47c4e_13_new,"game.view.CurrencyDisplay","new",0x9b73f7b6,"game.view.CurrencyDisplay.new","game/view/CurrencyDisplay.hx",13,0xd46ce4da)
HX_LOCAL_STACK_FRAME(_hx_pos_7a7a5e5371b47c4e_63_onAdded,"game.view.CurrencyDisplay","onAdded",0x82b6fd77,"game.view.CurrencyDisplay.onAdded","game/view/CurrencyDisplay.hx",63,0xd46ce4da)
HX_LOCAL_STACK_FRAME(_hx_pos_7a7a5e5371b47c4e_73_onRemoved,"game.view.CurrencyDisplay","onRemoved",0x3b182417,"game.view.CurrencyDisplay.onRemoved","game/view/CurrencyDisplay.hx",73,0xd46ce4da)
HX_LOCAL_STACK_FRAME(_hx_pos_7a7a5e5371b47c4e_82_onGemsChanged,"game.view.CurrencyDisplay","onGemsChanged",0x26885047,"game.view.CurrencyDisplay.onGemsChanged","game/view/CurrencyDisplay.hx",82,0xd46ce4da)
HX_LOCAL_STACK_FRAME(_hx_pos_7a7a5e5371b47c4e_86_onGoldChanged,"game.view.CurrencyDisplay","onGoldChanged",0x7c8ae62b,"game.view.CurrencyDisplay.onGoldChanged","game/view/CurrencyDisplay.hx",86,0xd46ce4da)
HX_LOCAL_STACK_FRAME(_hx_pos_7a7a5e5371b47c4e_90_onCrownsChanged,"game.view.CurrencyDisplay","onCrownsChanged",0x87ad066f,"game.view.CurrencyDisplay.onCrownsChanged","game/view/CurrencyDisplay.hx",90,0xd46ce4da)
namespace game{
namespace view{

void CurrencyDisplay_obj::__construct(::String orientation, ::game::GameSprite gs){
            	HX_GC_STACKFRAME(&_hx_pos_7a7a5e5371b47c4e_13_new)
HXLINE(  27)		this->orientation = HX_("",00,00,00,00);
HXLINE(  25)		this->crowns = -1;
HXLINE(  24)		this->gold = -1;
HXLINE(  23)		this->gems = -1;
HXLINE(  30)		super::__construct();
HXLINE(  32)		this->orientation = orientation;
HXLINE(  33)		this->gs = gs;
HXLINE(  35)		this->gemText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,false,0,0,null());
HXLINE(  36)		 ::ui::SimpleText _hx_tmp = this->gemText;
HXDLIN(  36)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,4,4,2,null(),null(),null(),null())));
HXLINE(  37)		this->addChild(this->gemText);
HXLINE(  39)		this->gemIcon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::TextureRedrawer_obj::redraw(::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),21),30,true,0,null(),null(),null()),null(),null());
HXLINE(  40)		this->addChild(this->gemIcon);
HXLINE(  42)		this->goldText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,false,0,0,null());
HXLINE(  43)		 ::ui::SimpleText _hx_tmp1 = this->goldText;
HXDLIN(  43)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,4,4,2,null(),null(),null(),null())));
HXLINE(  44)		this->addChild(this->goldText);
HXLINE(  46)		this->goldIcon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::TextureRedrawer_obj::redraw(::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),20),30,true,0,null(),null(),null()),null(),null());
HXLINE(  47)		this->addChild(this->goldIcon);
HXLINE(  49)		this->crownText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,false,0,0,null());
HXLINE(  50)		 ::ui::SimpleText _hx_tmp2 = this->crownText;
HXDLIN(  50)		_hx_tmp2->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,4,4,2,null(),null(),null(),null())));
HXLINE(  51)		this->addChild(this->crownText);
HXLINE(  53)		this->crownIcon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::TextureRedrawer_obj::redraw(::util::AssetLibrary_obj::getImageFromSet(HX_("misc16",d1,10,48,56),50),17,true,0,null(),null(),null()),null(),null());
HXLINE(  54)		this->addChild(this->crownIcon);
HXLINE(  56)		bool _hx_tmp3;
HXDLIN(  56)		bool _hx_tmp4;
HXDLIN(  56)		if ((0 == this->gems)) {
HXLINE(  56)			_hx_tmp4 = (0 == this->gold);
            		}
            		else {
HXLINE(  56)			_hx_tmp4 = false;
            		}
HXDLIN(  56)		if (_hx_tmp4) {
HXLINE(  56)			_hx_tmp3 = (0 == this->crowns);
            		}
            		else {
HXLINE(  56)			_hx_tmp3 = false;
            		}
HXDLIN(  56)		if (!(_hx_tmp3)) {
HXLINE(  56)			this->gems = 0;
HXDLIN(  56)			this->gold = 0;
HXDLIN(  56)			this->crowns = 0;
HXDLIN(  56)			::String _hx_switch_0 = this->orientation;
            			if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXLINE(  56)				 ::ui::SimpleText _hx_tmp5 = this->gemText;
HXDLIN(  56)				_hx_tmp5->set_text(::Std_obj::string(this->gems));
HXDLIN(  56)				this->gemText->updateMetrics();
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp6 = this->gemText;
HXDLIN(  56)				Float _hx_tmp7 = this->gemIcon->get_x();
HXDLIN(  56)				_hx_tmp6->set_x((_hx_tmp7 + this->gemIcon->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp8 = this->gemText;
HXDLIN(  56)				Float _hx_tmp9 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  56)				_hx_tmp8->set_y((_hx_tmp9 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  56)				 ::openfl::display::Bitmap _hx_tmp10 = this->goldIcon;
HXDLIN(  56)				Float _hx_tmp11 = this->gemText->get_x();
HXDLIN(  56)				_hx_tmp10->set_x((_hx_tmp11 + this->gemText->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp12 = this->goldText;
HXDLIN(  56)				_hx_tmp12->set_text(::Std_obj::string(this->gold));
HXDLIN(  56)				this->goldText->updateMetrics();
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp13 = this->goldText;
HXDLIN(  56)				Float _hx_tmp14 = this->goldIcon->get_x();
HXDLIN(  56)				_hx_tmp13->set_x((_hx_tmp14 + this->goldIcon->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp15 = this->goldText;
HXDLIN(  56)				Float _hx_tmp16 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  56)				_hx_tmp15->set_y((_hx_tmp16 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  56)				 ::openfl::display::Bitmap _hx_tmp17 = this->crownIcon;
HXDLIN(  56)				Float _hx_tmp18 = this->goldText->get_x();
HXDLIN(  56)				_hx_tmp17->set_x((_hx_tmp18 + this->goldText->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp19 = this->crownText;
HXDLIN(  56)				_hx_tmp19->set_text(::Std_obj::string(this->crowns));
HXDLIN(  56)				this->crownText->updateMetrics();
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp20 = this->crownText;
HXDLIN(  56)				Float _hx_tmp21 = this->crownIcon->get_x();
HXDLIN(  56)				_hx_tmp20->set_x((_hx_tmp21 + this->crownIcon->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp22 = this->crownText;
HXDLIN(  56)				Float _hx_tmp23 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  56)				_hx_tmp22->set_y((_hx_tmp23 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  56)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXLINE(  56)				 ::openfl::display::Bitmap _hx_tmp24 = this->gemIcon;
HXDLIN(  56)				_hx_tmp24->set_x(-(this->gemIcon->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp25 = this->gemText;
HXDLIN(  56)				_hx_tmp25->set_text(::Std_obj::string(this->gems));
HXDLIN(  56)				this->gemText->updateMetrics();
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp26 = this->gemText;
HXDLIN(  56)				Float _hx_tmp27 = this->gemIcon->get_x();
HXDLIN(  56)				_hx_tmp26->set_x((_hx_tmp27 - this->gemText->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp28 = this->gemText;
HXDLIN(  56)				Float _hx_tmp29 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  56)				_hx_tmp28->set_y((_hx_tmp29 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  56)				 ::openfl::display::Bitmap _hx_tmp30 = this->goldIcon;
HXDLIN(  56)				Float _hx_tmp31 = this->gemText->get_x();
HXDLIN(  56)				_hx_tmp30->set_x((_hx_tmp31 - this->goldIcon->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp32 = this->goldText;
HXDLIN(  56)				_hx_tmp32->set_text(::Std_obj::string(this->gold));
HXDLIN(  56)				this->goldText->updateMetrics();
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp33 = this->goldText;
HXDLIN(  56)				Float _hx_tmp34 = this->goldIcon->get_x();
HXDLIN(  56)				_hx_tmp33->set_x((_hx_tmp34 - this->goldText->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp35 = this->goldText;
HXDLIN(  56)				Float _hx_tmp36 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  56)				_hx_tmp35->set_y((_hx_tmp36 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  56)				 ::openfl::display::Bitmap _hx_tmp37 = this->crownIcon;
HXDLIN(  56)				Float _hx_tmp38 = this->goldText->get_x();
HXDLIN(  56)				_hx_tmp37->set_x((_hx_tmp38 - this->crownIcon->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp39 = this->crownText;
HXDLIN(  56)				_hx_tmp39->set_text(::Std_obj::string(this->crowns));
HXDLIN(  56)				this->crownText->updateMetrics();
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp40 = this->crownText;
HXDLIN(  56)				Float _hx_tmp41 = this->crownIcon->get_x();
HXDLIN(  56)				_hx_tmp40->set_x((_hx_tmp41 - this->crownText->get_width()));
HXDLIN(  56)				 ::ui::SimpleText _hx_tmp42 = this->crownText;
HXDLIN(  56)				Float _hx_tmp43 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  56)				_hx_tmp42->set_y((_hx_tmp43 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  56)				goto _hx_goto_0;
            			}
            			_hx_goto_0:;
            		}
HXLINE(  58)		this->mouseEnabled = false;
HXLINE(  59)		this->doubleClickEnabled = false;
HXLINE(  60)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic CurrencyDisplay_obj::__CreateEmpty() { return new CurrencyDisplay_obj; }

void *CurrencyDisplay_obj::_hx_vtable = 0;

Dynamic CurrencyDisplay_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CurrencyDisplay_obj > _hx_result = new CurrencyDisplay_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CurrencyDisplay_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1aba7712) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1aba7712;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void CurrencyDisplay_obj::onAdded( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_7a7a5e5371b47c4e_63_onAdded)
HXLINE(  64)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  65)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null(),null(),null());
HXLINE(  67)		::Global_obj::playerModel->gemsChanged->on(this->onGemsChanged_dyn());
HXLINE(  68)		::Global_obj::playerModel->goldChanged->on(this->onGoldChanged_dyn());
HXLINE(  69)		::Global_obj::playerModel->crownsChanged->on(this->onCrownsChanged_dyn());
HXLINE(  70)		{
HXLINE(  70)			int gems = ::Global_obj::playerModel->getGems();
HXDLIN(  70)			int gold = ::Global_obj::playerModel->getGold();
HXDLIN(  70)			int crowns = ::Global_obj::playerModel->getCrowns();
HXDLIN(  70)			bool _hx_tmp;
HXDLIN(  70)			bool _hx_tmp1;
HXDLIN(  70)			if ((gems == this->gems)) {
HXLINE(  70)				_hx_tmp1 = (gold == this->gold);
            			}
            			else {
HXLINE(  70)				_hx_tmp1 = false;
            			}
HXDLIN(  70)			if (_hx_tmp1) {
HXLINE(  70)				_hx_tmp = (crowns == this->crowns);
            			}
            			else {
HXLINE(  70)				_hx_tmp = false;
            			}
HXDLIN(  70)			if (!(_hx_tmp)) {
HXLINE(  70)				this->gems = gems;
HXDLIN(  70)				this->gold = gold;
HXDLIN(  70)				this->crowns = crowns;
HXDLIN(  70)				::String _hx_switch_0 = this->orientation;
            				if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXLINE(  70)					 ::ui::SimpleText _hx_tmp2 = this->gemText;
HXDLIN(  70)					_hx_tmp2->set_text(::Std_obj::string(this->gems));
HXDLIN(  70)					this->gemText->updateMetrics();
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp3 = this->gemText;
HXDLIN(  70)					Float _hx_tmp4 = this->gemIcon->get_x();
HXDLIN(  70)					_hx_tmp3->set_x((_hx_tmp4 + this->gemIcon->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp5 = this->gemText;
HXDLIN(  70)					Float _hx_tmp6 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  70)					_hx_tmp5->set_y((_hx_tmp6 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  70)					 ::openfl::display::Bitmap _hx_tmp7 = this->goldIcon;
HXDLIN(  70)					Float _hx_tmp8 = this->gemText->get_x();
HXDLIN(  70)					_hx_tmp7->set_x((_hx_tmp8 + this->gemText->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp9 = this->goldText;
HXDLIN(  70)					_hx_tmp9->set_text(::Std_obj::string(this->gold));
HXDLIN(  70)					this->goldText->updateMetrics();
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp10 = this->goldText;
HXDLIN(  70)					Float _hx_tmp11 = this->goldIcon->get_x();
HXDLIN(  70)					_hx_tmp10->set_x((_hx_tmp11 + this->goldIcon->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp12 = this->goldText;
HXDLIN(  70)					Float _hx_tmp13 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  70)					_hx_tmp12->set_y((_hx_tmp13 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  70)					 ::openfl::display::Bitmap _hx_tmp14 = this->crownIcon;
HXDLIN(  70)					Float _hx_tmp15 = this->goldText->get_x();
HXDLIN(  70)					_hx_tmp14->set_x((_hx_tmp15 + this->goldText->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp16 = this->crownText;
HXDLIN(  70)					_hx_tmp16->set_text(::Std_obj::string(this->crowns));
HXDLIN(  70)					this->crownText->updateMetrics();
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp17 = this->crownText;
HXDLIN(  70)					Float _hx_tmp18 = this->crownIcon->get_x();
HXDLIN(  70)					_hx_tmp17->set_x((_hx_tmp18 + this->crownIcon->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp19 = this->crownText;
HXDLIN(  70)					Float _hx_tmp20 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  70)					_hx_tmp19->set_y((_hx_tmp20 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  70)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXLINE(  70)					 ::openfl::display::Bitmap _hx_tmp21 = this->gemIcon;
HXDLIN(  70)					_hx_tmp21->set_x(-(this->gemIcon->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp22 = this->gemText;
HXDLIN(  70)					_hx_tmp22->set_text(::Std_obj::string(this->gems));
HXDLIN(  70)					this->gemText->updateMetrics();
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp23 = this->gemText;
HXDLIN(  70)					Float _hx_tmp24 = this->gemIcon->get_x();
HXDLIN(  70)					_hx_tmp23->set_x((_hx_tmp24 - this->gemText->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp25 = this->gemText;
HXDLIN(  70)					Float _hx_tmp26 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  70)					_hx_tmp25->set_y((_hx_tmp26 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  70)					 ::openfl::display::Bitmap _hx_tmp27 = this->goldIcon;
HXDLIN(  70)					Float _hx_tmp28 = this->gemText->get_x();
HXDLIN(  70)					_hx_tmp27->set_x((_hx_tmp28 - this->goldIcon->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp29 = this->goldText;
HXDLIN(  70)					_hx_tmp29->set_text(::Std_obj::string(this->gold));
HXDLIN(  70)					this->goldText->updateMetrics();
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp30 = this->goldText;
HXDLIN(  70)					Float _hx_tmp31 = this->goldIcon->get_x();
HXDLIN(  70)					_hx_tmp30->set_x((_hx_tmp31 - this->goldText->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp32 = this->goldText;
HXDLIN(  70)					Float _hx_tmp33 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  70)					_hx_tmp32->set_y((_hx_tmp33 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  70)					 ::openfl::display::Bitmap _hx_tmp34 = this->crownIcon;
HXDLIN(  70)					Float _hx_tmp35 = this->goldText->get_x();
HXDLIN(  70)					_hx_tmp34->set_x((_hx_tmp35 - this->crownIcon->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp36 = this->crownText;
HXDLIN(  70)					_hx_tmp36->set_text(::Std_obj::string(this->crowns));
HXDLIN(  70)					this->crownText->updateMetrics();
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp37 = this->crownText;
HXDLIN(  70)					Float _hx_tmp38 = this->crownIcon->get_x();
HXDLIN(  70)					_hx_tmp37->set_x((_hx_tmp38 - this->crownText->get_width()));
HXDLIN(  70)					 ::ui::SimpleText _hx_tmp39 = this->crownText;
HXDLIN(  70)					Float _hx_tmp40 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  70)					_hx_tmp39->set_y((_hx_tmp40 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  70)					goto _hx_goto_2;
            				}
            				_hx_goto_2:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CurrencyDisplay_obj,onAdded,(void))

void CurrencyDisplay_obj::onRemoved( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_7a7a5e5371b47c4e_73_onRemoved)
HXLINE(  74)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null());
HXLINE(  76)		::Global_obj::playerModel->gemsChanged->off(this->onGemsChanged_dyn());
HXLINE(  77)		::Global_obj::playerModel->goldChanged->off(this->onGoldChanged_dyn());
HXLINE(  78)		::Global_obj::playerModel->crownsChanged->off(this->onCrownsChanged_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CurrencyDisplay_obj,onRemoved,(void))

void CurrencyDisplay_obj::onGemsChanged(int gems){
            	HX_STACKFRAME(&_hx_pos_7a7a5e5371b47c4e_82_onGemsChanged)
HXDLIN(  82)		int gold = ::Global_obj::playerModel->charList->gold;
HXDLIN(  82)		int crowns = ::Global_obj::playerModel->charList->crowns;
HXDLIN(  82)		bool _hx_tmp;
HXDLIN(  82)		bool _hx_tmp1;
HXDLIN(  82)		if ((gems == this->gems)) {
HXDLIN(  82)			_hx_tmp1 = (gold == this->gold);
            		}
            		else {
HXDLIN(  82)			_hx_tmp1 = false;
            		}
HXDLIN(  82)		if (_hx_tmp1) {
HXDLIN(  82)			_hx_tmp = (crowns == this->crowns);
            		}
            		else {
HXDLIN(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (!(_hx_tmp)) {
HXDLIN(  82)			this->gems = gems;
HXDLIN(  82)			this->gold = gold;
HXDLIN(  82)			this->crowns = crowns;
HXDLIN(  82)			::String _hx_switch_0 = this->orientation;
            			if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp2 = this->gemText;
HXDLIN(  82)				_hx_tmp2->set_text(::Std_obj::string(this->gems));
HXDLIN(  82)				this->gemText->updateMetrics();
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp3 = this->gemText;
HXDLIN(  82)				Float _hx_tmp4 = this->gemIcon->get_x();
HXDLIN(  82)				_hx_tmp3->set_x((_hx_tmp4 + this->gemIcon->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp5 = this->gemText;
HXDLIN(  82)				Float _hx_tmp6 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  82)				_hx_tmp5->set_y((_hx_tmp6 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  82)				 ::openfl::display::Bitmap _hx_tmp7 = this->goldIcon;
HXDLIN(  82)				Float _hx_tmp8 = this->gemText->get_x();
HXDLIN(  82)				_hx_tmp7->set_x((_hx_tmp8 + this->gemText->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp9 = this->goldText;
HXDLIN(  82)				_hx_tmp9->set_text(::Std_obj::string(this->gold));
HXDLIN(  82)				this->goldText->updateMetrics();
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp10 = this->goldText;
HXDLIN(  82)				Float _hx_tmp11 = this->goldIcon->get_x();
HXDLIN(  82)				_hx_tmp10->set_x((_hx_tmp11 + this->goldIcon->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp12 = this->goldText;
HXDLIN(  82)				Float _hx_tmp13 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  82)				_hx_tmp12->set_y((_hx_tmp13 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  82)				 ::openfl::display::Bitmap _hx_tmp14 = this->crownIcon;
HXDLIN(  82)				Float _hx_tmp15 = this->goldText->get_x();
HXDLIN(  82)				_hx_tmp14->set_x((_hx_tmp15 + this->goldText->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp16 = this->crownText;
HXDLIN(  82)				_hx_tmp16->set_text(::Std_obj::string(this->crowns));
HXDLIN(  82)				this->crownText->updateMetrics();
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp17 = this->crownText;
HXDLIN(  82)				Float _hx_tmp18 = this->crownIcon->get_x();
HXDLIN(  82)				_hx_tmp17->set_x((_hx_tmp18 + this->crownIcon->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp19 = this->crownText;
HXDLIN(  82)				Float _hx_tmp20 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  82)				_hx_tmp19->set_y((_hx_tmp20 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  82)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXDLIN(  82)				 ::openfl::display::Bitmap _hx_tmp21 = this->gemIcon;
HXDLIN(  82)				_hx_tmp21->set_x(-(this->gemIcon->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp22 = this->gemText;
HXDLIN(  82)				_hx_tmp22->set_text(::Std_obj::string(this->gems));
HXDLIN(  82)				this->gemText->updateMetrics();
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp23 = this->gemText;
HXDLIN(  82)				Float _hx_tmp24 = this->gemIcon->get_x();
HXDLIN(  82)				_hx_tmp23->set_x((_hx_tmp24 - this->gemText->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp25 = this->gemText;
HXDLIN(  82)				Float _hx_tmp26 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  82)				_hx_tmp25->set_y((_hx_tmp26 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  82)				 ::openfl::display::Bitmap _hx_tmp27 = this->goldIcon;
HXDLIN(  82)				Float _hx_tmp28 = this->gemText->get_x();
HXDLIN(  82)				_hx_tmp27->set_x((_hx_tmp28 - this->goldIcon->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp29 = this->goldText;
HXDLIN(  82)				_hx_tmp29->set_text(::Std_obj::string(this->gold));
HXDLIN(  82)				this->goldText->updateMetrics();
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp30 = this->goldText;
HXDLIN(  82)				Float _hx_tmp31 = this->goldIcon->get_x();
HXDLIN(  82)				_hx_tmp30->set_x((_hx_tmp31 - this->goldText->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp32 = this->goldText;
HXDLIN(  82)				Float _hx_tmp33 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  82)				_hx_tmp32->set_y((_hx_tmp33 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  82)				 ::openfl::display::Bitmap _hx_tmp34 = this->crownIcon;
HXDLIN(  82)				Float _hx_tmp35 = this->goldText->get_x();
HXDLIN(  82)				_hx_tmp34->set_x((_hx_tmp35 - this->crownIcon->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp36 = this->crownText;
HXDLIN(  82)				_hx_tmp36->set_text(::Std_obj::string(this->crowns));
HXDLIN(  82)				this->crownText->updateMetrics();
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp37 = this->crownText;
HXDLIN(  82)				Float _hx_tmp38 = this->crownIcon->get_x();
HXDLIN(  82)				_hx_tmp37->set_x((_hx_tmp38 - this->crownText->get_width()));
HXDLIN(  82)				 ::ui::SimpleText _hx_tmp39 = this->crownText;
HXDLIN(  82)				Float _hx_tmp40 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  82)				_hx_tmp39->set_y((_hx_tmp40 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  82)				goto _hx_goto_5;
            			}
            			_hx_goto_5:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CurrencyDisplay_obj,onGemsChanged,(void))

void CurrencyDisplay_obj::onGoldChanged(int gold){
            	HX_STACKFRAME(&_hx_pos_7a7a5e5371b47c4e_86_onGoldChanged)
HXDLIN(  86)		int gems = ::Global_obj::playerModel->charList->gems;
HXDLIN(  86)		int crowns = ::Global_obj::playerModel->charList->crowns;
HXDLIN(  86)		bool _hx_tmp;
HXDLIN(  86)		bool _hx_tmp1;
HXDLIN(  86)		if ((gems == this->gems)) {
HXDLIN(  86)			_hx_tmp1 = (gold == this->gold);
            		}
            		else {
HXDLIN(  86)			_hx_tmp1 = false;
            		}
HXDLIN(  86)		if (_hx_tmp1) {
HXDLIN(  86)			_hx_tmp = (crowns == this->crowns);
            		}
            		else {
HXDLIN(  86)			_hx_tmp = false;
            		}
HXDLIN(  86)		if (!(_hx_tmp)) {
HXDLIN(  86)			this->gems = gems;
HXDLIN(  86)			this->gold = gold;
HXDLIN(  86)			this->crowns = crowns;
HXDLIN(  86)			::String _hx_switch_0 = this->orientation;
            			if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp2 = this->gemText;
HXDLIN(  86)				_hx_tmp2->set_text(::Std_obj::string(this->gems));
HXDLIN(  86)				this->gemText->updateMetrics();
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp3 = this->gemText;
HXDLIN(  86)				Float _hx_tmp4 = this->gemIcon->get_x();
HXDLIN(  86)				_hx_tmp3->set_x((_hx_tmp4 + this->gemIcon->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp5 = this->gemText;
HXDLIN(  86)				Float _hx_tmp6 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  86)				_hx_tmp5->set_y((_hx_tmp6 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  86)				 ::openfl::display::Bitmap _hx_tmp7 = this->goldIcon;
HXDLIN(  86)				Float _hx_tmp8 = this->gemText->get_x();
HXDLIN(  86)				_hx_tmp7->set_x((_hx_tmp8 + this->gemText->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp9 = this->goldText;
HXDLIN(  86)				_hx_tmp9->set_text(::Std_obj::string(this->gold));
HXDLIN(  86)				this->goldText->updateMetrics();
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp10 = this->goldText;
HXDLIN(  86)				Float _hx_tmp11 = this->goldIcon->get_x();
HXDLIN(  86)				_hx_tmp10->set_x((_hx_tmp11 + this->goldIcon->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp12 = this->goldText;
HXDLIN(  86)				Float _hx_tmp13 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  86)				_hx_tmp12->set_y((_hx_tmp13 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  86)				 ::openfl::display::Bitmap _hx_tmp14 = this->crownIcon;
HXDLIN(  86)				Float _hx_tmp15 = this->goldText->get_x();
HXDLIN(  86)				_hx_tmp14->set_x((_hx_tmp15 + this->goldText->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp16 = this->crownText;
HXDLIN(  86)				_hx_tmp16->set_text(::Std_obj::string(this->crowns));
HXDLIN(  86)				this->crownText->updateMetrics();
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp17 = this->crownText;
HXDLIN(  86)				Float _hx_tmp18 = this->crownIcon->get_x();
HXDLIN(  86)				_hx_tmp17->set_x((_hx_tmp18 + this->crownIcon->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp19 = this->crownText;
HXDLIN(  86)				Float _hx_tmp20 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  86)				_hx_tmp19->set_y((_hx_tmp20 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  86)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXDLIN(  86)				 ::openfl::display::Bitmap _hx_tmp21 = this->gemIcon;
HXDLIN(  86)				_hx_tmp21->set_x(-(this->gemIcon->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp22 = this->gemText;
HXDLIN(  86)				_hx_tmp22->set_text(::Std_obj::string(this->gems));
HXDLIN(  86)				this->gemText->updateMetrics();
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp23 = this->gemText;
HXDLIN(  86)				Float _hx_tmp24 = this->gemIcon->get_x();
HXDLIN(  86)				_hx_tmp23->set_x((_hx_tmp24 - this->gemText->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp25 = this->gemText;
HXDLIN(  86)				Float _hx_tmp26 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  86)				_hx_tmp25->set_y((_hx_tmp26 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  86)				 ::openfl::display::Bitmap _hx_tmp27 = this->goldIcon;
HXDLIN(  86)				Float _hx_tmp28 = this->gemText->get_x();
HXDLIN(  86)				_hx_tmp27->set_x((_hx_tmp28 - this->goldIcon->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp29 = this->goldText;
HXDLIN(  86)				_hx_tmp29->set_text(::Std_obj::string(this->gold));
HXDLIN(  86)				this->goldText->updateMetrics();
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp30 = this->goldText;
HXDLIN(  86)				Float _hx_tmp31 = this->goldIcon->get_x();
HXDLIN(  86)				_hx_tmp30->set_x((_hx_tmp31 - this->goldText->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp32 = this->goldText;
HXDLIN(  86)				Float _hx_tmp33 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  86)				_hx_tmp32->set_y((_hx_tmp33 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  86)				 ::openfl::display::Bitmap _hx_tmp34 = this->crownIcon;
HXDLIN(  86)				Float _hx_tmp35 = this->goldText->get_x();
HXDLIN(  86)				_hx_tmp34->set_x((_hx_tmp35 - this->crownIcon->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp36 = this->crownText;
HXDLIN(  86)				_hx_tmp36->set_text(::Std_obj::string(this->crowns));
HXDLIN(  86)				this->crownText->updateMetrics();
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp37 = this->crownText;
HXDLIN(  86)				Float _hx_tmp38 = this->crownIcon->get_x();
HXDLIN(  86)				_hx_tmp37->set_x((_hx_tmp38 - this->crownText->get_width()));
HXDLIN(  86)				 ::ui::SimpleText _hx_tmp39 = this->crownText;
HXDLIN(  86)				Float _hx_tmp40 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  86)				_hx_tmp39->set_y((_hx_tmp40 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  86)				goto _hx_goto_7;
            			}
            			_hx_goto_7:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CurrencyDisplay_obj,onGoldChanged,(void))

void CurrencyDisplay_obj::onCrownsChanged(int crowns){
            	HX_STACKFRAME(&_hx_pos_7a7a5e5371b47c4e_90_onCrownsChanged)
HXDLIN(  90)		int gems = ::Global_obj::playerModel->charList->gems;
HXDLIN(  90)		int gold = ::Global_obj::playerModel->charList->gold;
HXDLIN(  90)		bool _hx_tmp;
HXDLIN(  90)		bool _hx_tmp1;
HXDLIN(  90)		if ((gems == this->gems)) {
HXDLIN(  90)			_hx_tmp1 = (gold == this->gold);
            		}
            		else {
HXDLIN(  90)			_hx_tmp1 = false;
            		}
HXDLIN(  90)		if (_hx_tmp1) {
HXDLIN(  90)			_hx_tmp = (crowns == this->crowns);
            		}
            		else {
HXDLIN(  90)			_hx_tmp = false;
            		}
HXDLIN(  90)		if (!(_hx_tmp)) {
HXDLIN(  90)			this->gems = gems;
HXDLIN(  90)			this->gold = gold;
HXDLIN(  90)			this->crowns = crowns;
HXDLIN(  90)			::String _hx_switch_0 = this->orientation;
            			if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp2 = this->gemText;
HXDLIN(  90)				_hx_tmp2->set_text(::Std_obj::string(this->gems));
HXDLIN(  90)				this->gemText->updateMetrics();
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp3 = this->gemText;
HXDLIN(  90)				Float _hx_tmp4 = this->gemIcon->get_x();
HXDLIN(  90)				_hx_tmp3->set_x((_hx_tmp4 + this->gemIcon->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp5 = this->gemText;
HXDLIN(  90)				Float _hx_tmp6 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  90)				_hx_tmp5->set_y((_hx_tmp6 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  90)				 ::openfl::display::Bitmap _hx_tmp7 = this->goldIcon;
HXDLIN(  90)				Float _hx_tmp8 = this->gemText->get_x();
HXDLIN(  90)				_hx_tmp7->set_x((_hx_tmp8 + this->gemText->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp9 = this->goldText;
HXDLIN(  90)				_hx_tmp9->set_text(::Std_obj::string(this->gold));
HXDLIN(  90)				this->goldText->updateMetrics();
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp10 = this->goldText;
HXDLIN(  90)				Float _hx_tmp11 = this->goldIcon->get_x();
HXDLIN(  90)				_hx_tmp10->set_x((_hx_tmp11 + this->goldIcon->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp12 = this->goldText;
HXDLIN(  90)				Float _hx_tmp13 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  90)				_hx_tmp12->set_y((_hx_tmp13 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  90)				 ::openfl::display::Bitmap _hx_tmp14 = this->crownIcon;
HXDLIN(  90)				Float _hx_tmp15 = this->goldText->get_x();
HXDLIN(  90)				_hx_tmp14->set_x((_hx_tmp15 + this->goldText->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp16 = this->crownText;
HXDLIN(  90)				_hx_tmp16->set_text(::Std_obj::string(this->crowns));
HXDLIN(  90)				this->crownText->updateMetrics();
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp17 = this->crownText;
HXDLIN(  90)				Float _hx_tmp18 = this->crownIcon->get_x();
HXDLIN(  90)				_hx_tmp17->set_x((_hx_tmp18 + this->crownIcon->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp19 = this->crownText;
HXDLIN(  90)				Float _hx_tmp20 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  90)				_hx_tmp19->set_y((_hx_tmp20 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  90)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXDLIN(  90)				 ::openfl::display::Bitmap _hx_tmp21 = this->gemIcon;
HXDLIN(  90)				_hx_tmp21->set_x(-(this->gemIcon->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp22 = this->gemText;
HXDLIN(  90)				_hx_tmp22->set_text(::Std_obj::string(this->gems));
HXDLIN(  90)				this->gemText->updateMetrics();
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp23 = this->gemText;
HXDLIN(  90)				Float _hx_tmp24 = this->gemIcon->get_x();
HXDLIN(  90)				_hx_tmp23->set_x((_hx_tmp24 - this->gemText->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp25 = this->gemText;
HXDLIN(  90)				Float _hx_tmp26 = (this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  90)				_hx_tmp25->set_y((_hx_tmp26 - (this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  90)				 ::openfl::display::Bitmap _hx_tmp27 = this->goldIcon;
HXDLIN(  90)				Float _hx_tmp28 = this->gemText->get_x();
HXDLIN(  90)				_hx_tmp27->set_x((_hx_tmp28 - this->goldIcon->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp29 = this->goldText;
HXDLIN(  90)				_hx_tmp29->set_text(::Std_obj::string(this->gold));
HXDLIN(  90)				this->goldText->updateMetrics();
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp30 = this->goldText;
HXDLIN(  90)				Float _hx_tmp31 = this->goldIcon->get_x();
HXDLIN(  90)				_hx_tmp30->set_x((_hx_tmp31 - this->goldText->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp32 = this->goldText;
HXDLIN(  90)				Float _hx_tmp33 = (this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  90)				_hx_tmp32->set_y((_hx_tmp33 - (this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  90)				 ::openfl::display::Bitmap _hx_tmp34 = this->crownIcon;
HXDLIN(  90)				Float _hx_tmp35 = this->goldText->get_x();
HXDLIN(  90)				_hx_tmp34->set_x((_hx_tmp35 - this->crownIcon->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp36 = this->crownText;
HXDLIN(  90)				_hx_tmp36->set_text(::Std_obj::string(this->crowns));
HXDLIN(  90)				this->crownText->updateMetrics();
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp37 = this->crownText;
HXDLIN(  90)				Float _hx_tmp38 = this->crownIcon->get_x();
HXDLIN(  90)				_hx_tmp37->set_x((_hx_tmp38 - this->crownText->get_width()));
HXDLIN(  90)				 ::ui::SimpleText _hx_tmp39 = this->crownText;
HXDLIN(  90)				Float _hx_tmp40 = (this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  90)				_hx_tmp39->set_y((_hx_tmp40 - (this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  90)				goto _hx_goto_9;
            			}
            			_hx_goto_9:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CurrencyDisplay_obj,onCrownsChanged,(void))


::hx::ObjectPtr< CurrencyDisplay_obj > CurrencyDisplay_obj::__new(::String orientation, ::game::GameSprite gs) {
	::hx::ObjectPtr< CurrencyDisplay_obj > __this = new CurrencyDisplay_obj();
	__this->__construct(orientation,gs);
	return __this;
}

::hx::ObjectPtr< CurrencyDisplay_obj > CurrencyDisplay_obj::__alloc(::hx::Ctx *_hx_ctx,::String orientation, ::game::GameSprite gs) {
	CurrencyDisplay_obj *__this = (CurrencyDisplay_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CurrencyDisplay_obj), true, "game.view.CurrencyDisplay"));
	*(void **)__this = CurrencyDisplay_obj::_hx_vtable;
	__this->__construct(orientation,gs);
	return __this;
}

CurrencyDisplay_obj::CurrencyDisplay_obj()
{
}

void CurrencyDisplay_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CurrencyDisplay);
	HX_MARK_MEMBER_NAME(gemText,"gemText");
	HX_MARK_MEMBER_NAME(goldText,"goldText");
	HX_MARK_MEMBER_NAME(crownText,"crownText");
	HX_MARK_MEMBER_NAME(gemIcon,"gemIcon");
	HX_MARK_MEMBER_NAME(goldIcon,"goldIcon");
	HX_MARK_MEMBER_NAME(crownIcon,"crownIcon");
	HX_MARK_MEMBER_NAME(gems,"gems");
	HX_MARK_MEMBER_NAME(gold,"gold");
	HX_MARK_MEMBER_NAME(crowns,"crowns");
	HX_MARK_MEMBER_NAME(gs,"gs");
	HX_MARK_MEMBER_NAME(orientation,"orientation");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CurrencyDisplay_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gemText,"gemText");
	HX_VISIT_MEMBER_NAME(goldText,"goldText");
	HX_VISIT_MEMBER_NAME(crownText,"crownText");
	HX_VISIT_MEMBER_NAME(gemIcon,"gemIcon");
	HX_VISIT_MEMBER_NAME(goldIcon,"goldIcon");
	HX_VISIT_MEMBER_NAME(crownIcon,"crownIcon");
	HX_VISIT_MEMBER_NAME(gems,"gems");
	HX_VISIT_MEMBER_NAME(gold,"gold");
	HX_VISIT_MEMBER_NAME(crowns,"crowns");
	HX_VISIT_MEMBER_NAME(gs,"gs");
	HX_VISIT_MEMBER_NAME(orientation,"orientation");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CurrencyDisplay_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gs") ) { return ::hx::Val( gs ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"gems") ) { return ::hx::Val( gems ); }
		if (HX_FIELD_EQ(inName,"gold") ) { return ::hx::Val( gold ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"crowns") ) { return ::hx::Val( crowns ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gemText") ) { return ::hx::Val( gemText ); }
		if (HX_FIELD_EQ(inName,"gemIcon") ) { return ::hx::Val( gemIcon ); }
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"goldText") ) { return ::hx::Val( goldText ); }
		if (HX_FIELD_EQ(inName,"goldIcon") ) { return ::hx::Val( goldIcon ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"crownText") ) { return ::hx::Val( crownText ); }
		if (HX_FIELD_EQ(inName,"crownIcon") ) { return ::hx::Val( crownIcon ); }
		if (HX_FIELD_EQ(inName,"onRemoved") ) { return ::hx::Val( onRemoved_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"orientation") ) { return ::hx::Val( orientation ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onGemsChanged") ) { return ::hx::Val( onGemsChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGoldChanged") ) { return ::hx::Val( onGoldChanged_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onCrownsChanged") ) { return ::hx::Val( onCrownsChanged_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CurrencyDisplay_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gs") ) { gs=inValue.Cast<  ::game::GameSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"gems") ) { gems=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gold") ) { gold=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"crowns") ) { crowns=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gemText") ) { gemText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gemIcon") ) { gemIcon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"goldText") ) { goldText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goldIcon") ) { goldIcon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"crownText") ) { crownText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"crownIcon") ) { crownIcon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"orientation") ) { orientation=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CurrencyDisplay_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gemText",dc,6c,ae,17));
	outFields->push(HX_("goldText",6d,5b,8a,05));
	outFields->push(HX_("crownText",44,a3,ff,35));
	outFields->push(HX_("gemIcon",a8,87,67,10));
	outFields->push(HX_("goldIcon",39,76,43,fe));
	outFields->push(HX_("crownIcon",10,be,b8,2e));
	outFields->push(HX_("gems",04,fd,61,44));
	outFields->push(HX_("gold",a0,92,69,44));
	outFields->push(HX_("crowns",9c,35,bc,82));
	outFields->push(HX_("gs",2c,5a,00,00));
	outFields->push(HX_("orientation",d0,ee,fe,fd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CurrencyDisplay_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CurrencyDisplay_obj,gemText),HX_("gemText",dc,6c,ae,17)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CurrencyDisplay_obj,goldText),HX_("goldText",6d,5b,8a,05)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CurrencyDisplay_obj,crownText),HX_("crownText",44,a3,ff,35)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CurrencyDisplay_obj,gemIcon),HX_("gemIcon",a8,87,67,10)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CurrencyDisplay_obj,goldIcon),HX_("goldIcon",39,76,43,fe)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CurrencyDisplay_obj,crownIcon),HX_("crownIcon",10,be,b8,2e)},
	{::hx::fsInt,(int)offsetof(CurrencyDisplay_obj,gems),HX_("gems",04,fd,61,44)},
	{::hx::fsInt,(int)offsetof(CurrencyDisplay_obj,gold),HX_("gold",a0,92,69,44)},
	{::hx::fsInt,(int)offsetof(CurrencyDisplay_obj,crowns),HX_("crowns",9c,35,bc,82)},
	{::hx::fsObject /*  ::game::GameSprite */ ,(int)offsetof(CurrencyDisplay_obj,gs),HX_("gs",2c,5a,00,00)},
	{::hx::fsString,(int)offsetof(CurrencyDisplay_obj,orientation),HX_("orientation",d0,ee,fe,fd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CurrencyDisplay_obj_sStaticStorageInfo = 0;
#endif

static ::String CurrencyDisplay_obj_sMemberFields[] = {
	HX_("gemText",dc,6c,ae,17),
	HX_("goldText",6d,5b,8a,05),
	HX_("crownText",44,a3,ff,35),
	HX_("gemIcon",a8,87,67,10),
	HX_("goldIcon",39,76,43,fe),
	HX_("crownIcon",10,be,b8,2e),
	HX_("gems",04,fd,61,44),
	HX_("gold",a0,92,69,44),
	HX_("crowns",9c,35,bc,82),
	HX_("gs",2c,5a,00,00),
	HX_("orientation",d0,ee,fe,fd),
	HX_("onAdded",21,73,81,b2),
	HX_("onRemoved",41,d8,aa,ca),
	HX_("onGemsChanged",71,61,59,36),
	HX_("onGoldChanged",55,f7,5b,8c),
	HX_("onCrownsChanged",19,36,c4,fa),
	::String(null()) };

::hx::Class CurrencyDisplay_obj::__mClass;

void CurrencyDisplay_obj::__register()
{
	CurrencyDisplay_obj _hx_dummy;
	CurrencyDisplay_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.view.CurrencyDisplay",c4,a4,0c,75);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CurrencyDisplay_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CurrencyDisplay_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CurrencyDisplay_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CurrencyDisplay_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
} // end namespace view
