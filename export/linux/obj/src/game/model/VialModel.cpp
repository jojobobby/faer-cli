// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_game_model_VialModel
#include <game/model/VialModel.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_ui_model_VialData
#include <ui/model/VialData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a12bc264e2cd4d48_15_getVialSlot,"game.model.VialModel","getVialSlot",0x6ee6728e,"game.model.VialModel.getVialSlot","game/model/VialModel.hx",15,0x8342a876)
HX_LOCAL_STACK_FRAME(_hx_pos_a12bc264e2cd4d48_25_init,"game.model.VialModel","init",0x119127b4,"game.model.VialModel.init","game/model/VialModel.hx",25,0x8342a876)
HX_LOCAL_STACK_FRAME(_hx_pos_a12bc264e2cd4d48_39_getVialData,"game.model.VialModel","getVialData",0x64f3eaba,"game.model.VialModel.getVialData","game/model/VialModel.hx",39,0x8342a876)
HX_LOCAL_STACK_FRAME(_hx_pos_a12bc264e2cd4d48_12_boot,"game.model.VialModel","boot",0x0cf170d6,"game.model.VialModel.boot","game/model/VialModel.hx",12,0x8342a876)
namespace game{
namespace model{

void VialModel_obj::__construct() { }

Dynamic VialModel_obj::__CreateEmpty() { return new VialModel_obj; }

void *VialModel_obj::_hx_vtable = 0;

Dynamic VialModel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VialModel_obj > _hx_result = new VialModel_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VialModel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2766fdf4;
}

 ::haxe::ds::IntMap VialModel_obj::vialData;

int VialModel_obj::getVialSlot(int objectType){
            	HX_STACKFRAME(&_hx_pos_a12bc264e2cd4d48_15_getVialSlot)
HXDLIN(  15)		switch((int)(objectType)){
            			case (int)2721: {
HXLINE(  17)				return 254;
            			}
            			break;
            			case (int)2722: {
HXLINE(  19)				return 255;
            			}
            			break;
            			default:{
HXLINE(  21)				return -1;
            			}
            		}
HXLINE(  15)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VialModel_obj,getVialSlot,return )

void VialModel_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_a12bc264e2cd4d48_25_init)
HXLINE(  26)		 ::ui::model::VialData data =  ::ui::model::VialData_obj::__alloc( HX_CTX );
HXLINE(  27)		data->maxVialCount = 4;
HXLINE(  28)		data->objectId = 2721;
HXLINE(  29)		data->position = 0;
HXLINE(  30)		::game::model::VialModel_obj::vialData->set(data->position,data);
HXLINE(  32)		 ::ui::model::VialData data1 =  ::ui::model::VialData_obj::__alloc( HX_CTX );
HXLINE(  33)		data1->maxVialCount = 4;
HXLINE(  34)		data1->objectId = 2722;
HXLINE(  35)		data1->position = 1;
HXLINE(  36)		::game::model::VialModel_obj::vialData->set(data1->position,data1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(VialModel_obj,init,(void))

 ::ui::model::VialData VialModel_obj::getVialData(int objectId){
            	HX_STACKFRAME(&_hx_pos_a12bc264e2cd4d48_39_getVialData)
HXLINE(  40)		{
HXLINE(  40)			 ::Dynamic vial = ::game::model::VialModel_obj::vialData->iterator();
HXDLIN(  40)			while(( (bool)(vial->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  40)				 ::ui::model::VialData vial1 = ( ( ::ui::model::VialData)(vial->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  41)				if ((vial1->objectId == objectId)) {
HXLINE(  42)					return vial1;
            				}
            			}
            		}
HXLINE(  44)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VialModel_obj,getVialData,return )


VialModel_obj::VialModel_obj()
{
}

bool VialModel_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vialData") ) { outValue = ( vialData ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getVialSlot") ) { outValue = getVialSlot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVialData") ) { outValue = getVialData_dyn(); return true; }
	}
	return false;
}

bool VialModel_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"vialData") ) { vialData=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *VialModel_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo VialModel_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &VialModel_obj::vialData,HX_("vialData",28,78,af,90)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void VialModel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VialModel_obj::vialData,"vialData");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VialModel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VialModel_obj::vialData,"vialData");
};

#endif

::hx::Class VialModel_obj::__mClass;

static ::String VialModel_obj_sStaticFields[] = {
	HX_("vialData",28,78,af,90),
	HX_("getVialSlot",b2,c2,95,c0),
	HX_("init",10,3b,bb,45),
	HX_("getVialData",de,3a,a3,b6),
	::String(null())
};

void VialModel_obj::__register()
{
	VialModel_obj _hx_dummy;
	VialModel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.model.VialModel",4a,b6,8d,3b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VialModel_obj::__GetStatic;
	__mClass->mSetStaticField = &VialModel_obj::__SetStatic;
	__mClass->mMarkFunc = VialModel_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(VialModel_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< VialModel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VialModel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VialModel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VialModel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VialModel_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_a12bc264e2cd4d48_12_boot)
HXDLIN(  12)		vialData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace game
} // end namespace model
