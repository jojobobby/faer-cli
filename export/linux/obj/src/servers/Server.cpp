// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_servers_LatLong
#include <servers/LatLong.h>
#endif
#ifndef INCLUDED_servers_Server
#include <servers/Server.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_55a6c72b5eada840_3_new,"servers.Server","new",0x34c774b3,"servers.Server.new","servers/Server.hx",3,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_13_setName,"servers.Server","setName",0x79db7ce0,"servers.Server.setName","servers/Server.hx",13,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_18_setAddress,"servers.Server","setAddress",0x5c4e723f,"servers.Server.setAddress","servers/Server.hx",18,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_23_setPort,"servers.Server","setPort",0x7b388e16,"servers.Server.setPort","servers/Server.hx",23,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_28_setLatLong,"servers.Server","setLatLong",0x0ffb3606,"servers.Server.setLatLong","servers/Server.hx",28,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_33_setUsage,"servers.Server","setUsage",0x39dc94ec,"servers.Server.setUsage","servers/Server.hx",33,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_38_setIsAdminOnly,"servers.Server","setIsAdminOnly",0x83dfaa5c,"servers.Server.setIsAdminOnly","servers/Server.hx",38,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_43_priority,"servers.Server","priority",0x3cb74a31,"servers.Server.priority","servers/Server.hx",43,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_54_isCrowded,"servers.Server","isCrowded",0xae25b255,"servers.Server.isCrowded","servers/Server.hx",54,0x960d59fc)
HX_LOCAL_STACK_FRAME(_hx_pos_55a6c72b5eada840_58_isFull,"servers.Server","isFull",0xd4734026,"servers.Server.isFull","servers/Server.hx",58,0x960d59fc)
namespace servers{

void Server_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_3_new)
HXLINE(   9)		this->isAdminOnly = false;
HXLINE(   8)		this->usage = ((Float)0.0);
HXLINE(   6)		this->port = 0;
HXLINE(   5)		this->address = HX_("",00,00,00,00);
HXLINE(   4)		this->name = HX_("",00,00,00,00);
            	}

Dynamic Server_obj::__CreateEmpty() { return new Server_obj; }

void *Server_obj::_hx_vtable = 0;

Dynamic Server_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Server_obj > _hx_result = new Server_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Server_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24f85733;
}

 ::servers::Server Server_obj::setName(::String name){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_13_setName)
HXLINE(  14)		this->name = name;
HXLINE(  15)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,setName,return )

 ::servers::Server Server_obj::setAddress(::String address){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_18_setAddress)
HXLINE(  19)		this->address = address;
HXLINE(  20)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,setAddress,return )

 ::servers::Server Server_obj::setPort(int port){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_23_setPort)
HXLINE(  24)		this->port = port;
HXLINE(  25)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,setPort,return )

 ::servers::Server Server_obj::setLatLong(Float latitude,Float longitude){
            	HX_GC_STACKFRAME(&_hx_pos_55a6c72b5eada840_28_setLatLong)
HXLINE(  29)		this->latLong =  ::servers::LatLong_obj::__alloc( HX_CTX ,latitude,longitude);
HXLINE(  30)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Server_obj,setLatLong,return )

 ::servers::Server Server_obj::setUsage(Float usage){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_33_setUsage)
HXLINE(  34)		this->usage = usage;
HXLINE(  35)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,setUsage,return )

 ::servers::Server Server_obj::setIsAdminOnly(bool isAdminOnly){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_38_setIsAdminOnly)
HXLINE(  39)		this->isAdminOnly = isAdminOnly;
HXLINE(  40)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,setIsAdminOnly,return )

int Server_obj::priority(){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_43_priority)
HXLINE(  44)		if (this->isAdminOnly) {
HXLINE(  45)			return 2;
            		}
HXLINE(  47)		if (this->isCrowded()) {
HXLINE(  48)			return 1;
            		}
HXLINE(  50)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Server_obj,priority,return )

bool Server_obj::isCrowded(){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_54_isCrowded)
HXDLIN(  54)		return (this->usage >= ((Float)0.66));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Server_obj,isCrowded,return )

bool Server_obj::isFull(){
            	HX_STACKFRAME(&_hx_pos_55a6c72b5eada840_58_isFull)
HXDLIN(  58)		return (this->usage >= 1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Server_obj,isFull,return )


::hx::ObjectPtr< Server_obj > Server_obj::__new() {
	::hx::ObjectPtr< Server_obj > __this = new Server_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Server_obj > Server_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Server_obj *__this = (Server_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Server_obj), true, "servers.Server"));
	*(void **)__this = Server_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Server_obj::Server_obj()
{
}

void Server_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Server);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(address,"address");
	HX_MARK_MEMBER_NAME(port,"port");
	HX_MARK_MEMBER_NAME(latLong,"latLong");
	HX_MARK_MEMBER_NAME(usage,"usage");
	HX_MARK_MEMBER_NAME(isAdminOnly,"isAdminOnly");
	HX_MARK_END_CLASS();
}

void Server_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(address,"address");
	HX_VISIT_MEMBER_NAME(port,"port");
	HX_VISIT_MEMBER_NAME(latLong,"latLong");
	HX_VISIT_MEMBER_NAME(usage,"usage");
	HX_VISIT_MEMBER_NAME(isAdminOnly,"isAdminOnly");
}

::hx::Val Server_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"port") ) { return ::hx::Val( port ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"usage") ) { return ::hx::Val( usage ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isFull") ) { return ::hx::Val( isFull_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"address") ) { return ::hx::Val( address ); }
		if (HX_FIELD_EQ(inName,"latLong") ) { return ::hx::Val( latLong ); }
		if (HX_FIELD_EQ(inName,"setName") ) { return ::hx::Val( setName_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPort") ) { return ::hx::Val( setPort_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setUsage") ) { return ::hx::Val( setUsage_dyn() ); }
		if (HX_FIELD_EQ(inName,"priority") ) { return ::hx::Val( priority_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isCrowded") ) { return ::hx::Val( isCrowded_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setAddress") ) { return ::hx::Val( setAddress_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLatLong") ) { return ::hx::Val( setLatLong_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isAdminOnly") ) { return ::hx::Val( isAdminOnly ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setIsAdminOnly") ) { return ::hx::Val( setIsAdminOnly_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Server_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"port") ) { port=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"usage") ) { usage=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"address") ) { address=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"latLong") ) { latLong=inValue.Cast<  ::servers::LatLong >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isAdminOnly") ) { isAdminOnly=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Server_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("address",b4,71,0b,9d));
	outFields->push(HX_("port",81,83,5c,4a));
	outFields->push(HX_("latLong",7b,35,b8,50));
	outFields->push(HX_("usage",21,5d,2f,aa));
	outFields->push(HX_("isAdminOnly",51,08,6a,5e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Server_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Server_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(Server_obj,address),HX_("address",b4,71,0b,9d)},
	{::hx::fsInt,(int)offsetof(Server_obj,port),HX_("port",81,83,5c,4a)},
	{::hx::fsObject /*  ::servers::LatLong */ ,(int)offsetof(Server_obj,latLong),HX_("latLong",7b,35,b8,50)},
	{::hx::fsFloat,(int)offsetof(Server_obj,usage),HX_("usage",21,5d,2f,aa)},
	{::hx::fsBool,(int)offsetof(Server_obj,isAdminOnly),HX_("isAdminOnly",51,08,6a,5e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Server_obj_sStaticStorageInfo = 0;
#endif

static ::String Server_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("address",b4,71,0b,9d),
	HX_("port",81,83,5c,4a),
	HX_("latLong",7b,35,b8,50),
	HX_("usage",21,5d,2f,aa),
	HX_("isAdminOnly",51,08,6a,5e),
	HX_("setName",0d,b3,83,0e),
	HX_("setAddress",32,96,ea,ef),
	HX_("setPort",43,c4,e0,0f),
	HX_("setLatLong",f9,59,97,a3),
	HX_("setUsage",1f,c6,63,b8),
	HX_("setIsAdminOnly",cf,43,28,06),
	HX_("priority",64,7b,3e,bb),
	HX_("isCrowded",c2,8d,e9,e5),
	HX_("isFull",99,ae,2b,61),
	::String(null()) };

::hx::Class Server_obj::__mClass;

void Server_obj::__register()
{
	Server_obj _hx_dummy;
	Server_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("servers.Server",41,9f,c4,40);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Server_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Server_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Server_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Server_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace servers
