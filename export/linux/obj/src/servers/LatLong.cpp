// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_servers_LatLong
#include <servers/LatLong.h>
#endif
#ifndef INCLUDED_util_MathUtil
#include <util/MathUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4621c6e54d674bf5_5_new,"servers.LatLong","new",0x641552af,"servers.LatLong.new","servers/LatLong.hx",5,0x9f2a42e2)
HX_LOCAL_STACK_FRAME(_hx_pos_4621c6e54d674bf5_11_distance,"servers.LatLong","distance",0xc7b25286,"servers.LatLong.distance","servers/LatLong.hx",11,0x9f2a42e2)
namespace servers{

void LatLong_obj::__construct(Float latitude,Float longitude){
            	HX_STACKFRAME(&_hx_pos_4621c6e54d674bf5_5_new)
HXLINE(   9)		this->longitude = ((Float)0.0);
HXLINE(   8)		this->latitude = ((Float)0.0);
HXLINE(  21)		this->latitude = latitude;
HXLINE(  22)		this->longitude = longitude;
            	}

Dynamic LatLong_obj::__CreateEmpty() { return new LatLong_obj; }

void *LatLong_obj::_hx_vtable = 0;

Dynamic LatLong_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LatLong_obj > _hx_result = new LatLong_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LatLong_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7bfdf46f;
}

float LatLong_obj::distance( ::servers::LatLong a, ::servers::LatLong b){
            	HX_STACKFRAME(&_hx_pos_4621c6e54d674bf5_11_distance)
HXLINE(  13)		Float lat1 = (( (Float)(( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(180) ))) )) ) * a->latitude);
HXLINE(  14)		Float lat2 = (( (Float)(( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(180) ))) )) ) * b->latitude);
HXLINE(  15)		float dist = ((::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((lat1 * ((Float)10430.3783504704534))) & 65535)] * ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((lat2 * ((Float)10430.3783504704534))) & 65535)]) + ((::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((lat1 + ((Float)1.57079632679489656)) * ((Float)10430.3783504704534))) & 65535)] * ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round(((lat2 + ((Float)1.57079632679489656)) * ((Float)10430.3783504704534))) & 65535)]) * ::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((((( (Float)(( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(180) ))) )) ) * (a->longitude - b->longitude)) + ((Float)1.57079632679489656)) * ((Float)10430.3783504704534))) & 65535)]));
HXLINE(  16)		dist = ( (float)(((( (Float)(( (float)((( (Float)(180) ) / ( (Float)(( (float)(((Float)3.141592653589793)) )) ))) )) ) * ::Math_obj::acos(( (Float)(dist) ))) * ((Float)111189.57696))) );
HXLINE(  17)		return dist;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LatLong_obj,distance,return )


LatLong_obj::LatLong_obj()
{
}

::hx::Val LatLong_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"latitude") ) { return ::hx::Val( latitude ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"longitude") ) { return ::hx::Val( longitude ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LatLong_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
	}
	return false;
}

::hx::Val LatLong_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"latitude") ) { latitude=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"longitude") ) { longitude=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LatLong_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("latitude",6c,c7,68,06));
	outFields->push(HX_("longitude",2f,c1,cb,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LatLong_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(LatLong_obj,latitude),HX_("latitude",6c,c7,68,06)},
	{::hx::fsFloat,(int)offsetof(LatLong_obj,longitude),HX_("longitude",2f,c1,cb,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LatLong_obj_sStaticStorageInfo = 0;
#endif

static ::String LatLong_obj_sMemberFields[] = {
	HX_("latitude",6c,c7,68,06),
	HX_("longitude",2f,c1,cb,99),
	::String(null()) };

::hx::Class LatLong_obj::__mClass;

static ::String LatLong_obj_sStaticFields[] = {
	HX_("distance",35,93,f9,6b),
	::String(null())
};

void LatLong_obj::__register()
{
	LatLong_obj _hx_dummy;
	LatLong_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("servers.LatLong",3d,cf,d4,b9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LatLong_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LatLong_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LatLong_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LatLong_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LatLong_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LatLong_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace servers
