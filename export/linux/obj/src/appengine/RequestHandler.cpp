// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_appengine_CompletionData
#include <appengine/CompletionData.h>
#endif
#ifndef INCLUDED_appengine_RequestHandler
#include <appengine/RequestHandler.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_21_init,"appengine.RequestHandler","init",0xee61a738,"appengine.RequestHandler.init","appengine/RequestHandler.hx",21,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_29_init,"appengine.RequestHandler","init",0xee61a738,"appengine.RequestHandler.init","appengine/RequestHandler.hx",29,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_20_init,"appengine.RequestHandler","init",0xee61a738,"appengine.RequestHandler.init","appengine/RequestHandler.hx",20,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_42_sendRequest,"appengine.RequestHandler","sendRequest",0x5eb21bbf,"appengine.RequestHandler.sendRequest","appengine/RequestHandler.hx",42,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_49_retryOrReportError,"appengine.RequestHandler","retryOrReportError",0x1b695fb1,"appengine.RequestHandler.retryOrReportError","appengine/RequestHandler.hx",49,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_55_cleanUpAndComplete,"appengine.RequestHandler","cleanUpAndComplete",0xbe190ef4,"appengine.RequestHandler.cleanUpAndComplete","appengine/RequestHandler.hx",55,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_15_boot,"appengine.RequestHandler","boot",0xe9c1f05a,"appengine.RequestHandler.boot","appengine/RequestHandler.hx",15,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_16_boot,"appengine.RequestHandler","boot",0xe9c1f05a,"appengine.RequestHandler.boot","appengine/RequestHandler.hx",16,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_17_boot,"appengine.RequestHandler","boot",0xe9c1f05a,"appengine.RequestHandler.boot","appengine/RequestHandler.hx",17,0x0e63dc17)
HX_LOCAL_STACK_FRAME(_hx_pos_83f87b8ad13b0837_18_boot,"appengine.RequestHandler","boot",0xe9c1f05a,"appengine.RequestHandler.boot","appengine/RequestHandler.hx",18,0x0e63dc17)
namespace appengine{

void RequestHandler_obj::__construct() { }

Dynamic RequestHandler_obj::__CreateEmpty() { return new RequestHandler_obj; }

void *RequestHandler_obj::_hx_vtable = 0;

Dynamic RequestHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RequestHandler_obj > _hx_result = new RequestHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RequestHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2daec57e;
}

 ::util::Signal RequestHandler_obj::complete;

int RequestHandler_obj::maxRetries;

 ::sys::Http RequestHandler_obj::http;

int RequestHandler_obj::retriesLeft;

void RequestHandler_obj::init(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String text){
            			HX_STACKFRAME(&_hx_pos_83f87b8ad13b0837_21_init)
HXLINE(  22)			if ((text.length == 0)) {
HXLINE(  23)				text = HX_("Unable to contact server",7b,96,19,24);
            			}
HXLINE(  25)			::appengine::RequestHandler_obj::retryOrReportError(text);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(::String text){
            			HX_STACKFRAME(&_hx_pos_83f87b8ad13b0837_29_init)
HXLINE(  29)			if ((text.substring(0,7) == HX_("<Error>",d2,cc,04,45))) {
HXLINE(  30)				::appengine::RequestHandler_obj::retryOrReportError(text);
            			}
            			else {
HXLINE(  31)				if ((text.substring(0,12) == HX_("<FatalError>",be,53,72,d4))) {
HXLINE(  32)					::appengine::RequestHandler_obj::cleanUpAndComplete(false,text);
            				}
            				else {
HXLINE(  34)					::appengine::RequestHandler_obj::cleanUpAndComplete(true,text);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_83f87b8ad13b0837_20_init)
HXLINE(  21)		::appengine::RequestHandler_obj::http->onError =  ::Dynamic(new _hx_Closure_0());
HXLINE(  28)		::appengine::RequestHandler_obj::http->onData =  ::Dynamic(new _hx_Closure_1());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(RequestHandler_obj,init,(void))

void RequestHandler_obj::sendRequest(::String url){
            	HX_STACKFRAME(&_hx_pos_83f87b8ad13b0837_42_sendRequest)
HXLINE(  43)		::appengine::RequestHandler_obj::http->url = (HX_("http://127.0.0.1:8080",df,a3,91,f4) + url);
HXLINE(  44)		::appengine::RequestHandler_obj::retriesLeft = ::appengine::RequestHandler_obj::maxRetries;
HXLINE(  45)		::appengine::RequestHandler_obj::http->request(true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RequestHandler_obj,sendRequest,(void))

void RequestHandler_obj::retryOrReportError(::String error){
            	HX_STACKFRAME(&_hx_pos_83f87b8ad13b0837_49_retryOrReportError)
HXDLIN(  49)		if ((--::appengine::RequestHandler_obj::retriesLeft > 0)) {
HXLINE(  50)			::appengine::RequestHandler_obj::http->request(true);
            		}
            		else {
HXLINE(  52)			::appengine::RequestHandler_obj::cleanUpAndComplete(true,error);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RequestHandler_obj,retryOrReportError,(void))

void RequestHandler_obj::cleanUpAndComplete(bool isOK,::String data){
            	HX_GC_STACKFRAME(&_hx_pos_83f87b8ad13b0837_55_cleanUpAndComplete)
HXLINE(  56)		if (!(isOK)) {
HXLINE(  57)			::Array< ::String > match =  ::EReg_obj::__alloc( HX_CTX ,HX_("<\\.*>(.*)<\\.*>",5b,a4,a6,75),HX_("",00,00,00,00))->split(data);
HXLINE(  58)			 ::Dynamic data1;
HXDLIN(  58)			if (::hx::IsNotNull( match )) {
HXLINE(  58)				data1 = match->length;
            			}
            			else {
HXLINE(  58)				data1 = null();
            			}
HXDLIN(  58)			if (::hx::IsGreater( data1,1 )) {
HXLINE(  58)				data = match->__get(1);
            			}
            		}
HXLINE(  61)		::appengine::RequestHandler_obj::complete->emit( ::appengine::CompletionData_obj::__alloc( HX_CTX ,isOK,data));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RequestHandler_obj,cleanUpAndComplete,(void))


RequestHandler_obj::RequestHandler_obj()
{
}

bool RequestHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"http") ) { outValue = ( http ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"complete") ) { outValue = ( complete ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxRetries") ) { outValue = ( maxRetries ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"retriesLeft") ) { outValue = ( retriesLeft ); return true; }
		if (HX_FIELD_EQ(inName,"sendRequest") ) { outValue = sendRequest_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"retryOrReportError") ) { outValue = retryOrReportError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cleanUpAndComplete") ) { outValue = cleanUpAndComplete_dyn(); return true; }
	}
	return false;
}

bool RequestHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"http") ) { http=ioValue.Cast<  ::sys::Http >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"complete") ) { complete=ioValue.Cast<  ::util::Signal >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxRetries") ) { maxRetries=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"retriesLeft") ) { retriesLeft=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RequestHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo RequestHandler_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::util::Signal */ ,(void *) &RequestHandler_obj::complete,HX_("complete",b9,00,c8,7f)},
	{::hx::fsInt,(void *) &RequestHandler_obj::maxRetries,HX_("maxRetries",82,6f,e4,66)},
	{::hx::fsObject /*  ::sys::Http */ ,(void *) &RequestHandler_obj::http,HX_("http",88,9b,16,45)},
	{::hx::fsInt,(void *) &RequestHandler_obj::retriesLeft,HX_("retriesLeft",ed,84,3e,28)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void RequestHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RequestHandler_obj::complete,"complete");
	HX_MARK_MEMBER_NAME(RequestHandler_obj::maxRetries,"maxRetries");
	HX_MARK_MEMBER_NAME(RequestHandler_obj::http,"http");
	HX_MARK_MEMBER_NAME(RequestHandler_obj::retriesLeft,"retriesLeft");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RequestHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RequestHandler_obj::complete,"complete");
	HX_VISIT_MEMBER_NAME(RequestHandler_obj::maxRetries,"maxRetries");
	HX_VISIT_MEMBER_NAME(RequestHandler_obj::http,"http");
	HX_VISIT_MEMBER_NAME(RequestHandler_obj::retriesLeft,"retriesLeft");
};

#endif

::hx::Class RequestHandler_obj::__mClass;

static ::String RequestHandler_obj_sStaticFields[] = {
	HX_("complete",b9,00,c8,7f),
	HX_("maxRetries",82,6f,e4,66),
	HX_("http",88,9b,16,45),
	HX_("retriesLeft",ed,84,3e,28),
	HX_("init",10,3b,bb,45),
	HX_("sendRequest",e7,32,91,ce),
	HX_("retryOrReportError",89,fd,8c,6d),
	HX_("cleanUpAndComplete",cc,ac,3c,10),
	::String(null())
};

void RequestHandler_obj::__register()
{
	RequestHandler_obj _hx_dummy;
	RequestHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("appengine.RequestHandler",46,65,15,70);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RequestHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &RequestHandler_obj::__SetStatic;
	__mClass->mMarkFunc = RequestHandler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RequestHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< RequestHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RequestHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RequestHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RequestHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RequestHandler_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_83f87b8ad13b0837_15_boot)
HXDLIN(  15)		complete =  ::util::Signal_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_83f87b8ad13b0837_16_boot)
HXDLIN(  16)		maxRetries = 0;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_83f87b8ad13b0837_17_boot)
HXDLIN(  17)		http =  ::sys::Http_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_83f87b8ad13b0837_18_boot)
HXDLIN(  18)		retriesLeft = 0;
            	}
}

} // end namespace appengine
