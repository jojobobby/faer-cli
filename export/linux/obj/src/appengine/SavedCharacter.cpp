// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_appengine_SavedCharacter
#include <appengine/SavedCharacter.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif
#ifndef INCLUDED_util_AnimatedChars
#include <util/AnimatedChars.h>
#endif
#ifndef INCLUDED_util_CachingColorTransformer
#include <util/CachingColorTransformer.h>
#endif
#ifndef INCLUDED_util_GlowRedrawer
#include <util/GlowRedrawer.h>
#endif
#ifndef INCLUDED_util_MaskedImage
#include <util/MaskedImage.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_952c825e8c1c0aca_13_new,"appengine.SavedCharacter","new",0xeae2f89f,"appengine.SavedCharacter.new","appengine/SavedCharacter.hx",13,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_44_charId,"appengine.SavedCharacter","charId",0x2a73c972,"appengine.SavedCharacter.charId","appengine/SavedCharacter.hx",44,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_48_name,"appengine.SavedCharacter","name",0x9bb3812c,"appengine.SavedCharacter.name","appengine/SavedCharacter.hx",48,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_52_objectType,"appengine.SavedCharacter","objectType",0xd9d156ba,"appengine.SavedCharacter.objectType","appengine/SavedCharacter.hx",52,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_56_skinType,"appengine.SavedCharacter","skinType",0x828c4b38,"appengine.SavedCharacter.skinType","appengine/SavedCharacter.hx",56,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_60_tier,"appengine.SavedCharacter","tier",0x9fb0d403,"appengine.SavedCharacter.tier","appengine/SavedCharacter.hx",60,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_64_displayId,"appengine.SavedCharacter","displayId",0x1800603c,"appengine.SavedCharacter.displayId","appengine/SavedCharacter.hx",64,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_20_getImage,"appengine.SavedCharacter","getImage",0x033bc246,"appengine.SavedCharacter.getImage","appengine/SavedCharacter.hx",20,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_35_compare,"appengine.SavedCharacter","compare",0xaeeacc64,"appengine.SavedCharacter.compare","appengine/SavedCharacter.hx",35,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_14_boot,"appengine.SavedCharacter","boot",0x93cf9313,"appengine.SavedCharacter.boot","appengine/SavedCharacter.hx",14,0x799d2e90)
HX_LOCAL_STACK_FRAME(_hx_pos_952c825e8c1c0aca_15_boot,"appengine.SavedCharacter","boot",0x93cf9313,"appengine.SavedCharacter.boot","appengine/SavedCharacter.hx",15,0x799d2e90)
namespace appengine{

void SavedCharacter_obj::__construct( ::Xml charXML,::String name){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_13_new)
HXLINE(  18)		this->_name = null();
HXLINE(  39)		this->charXML = charXML;
HXLINE(  40)		this->_name = name;
            	}

Dynamic SavedCharacter_obj::__CreateEmpty() { return new SavedCharacter_obj; }

void *SavedCharacter_obj::_hx_vtable = 0;

Dynamic SavedCharacter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SavedCharacter_obj > _hx_result = new SavedCharacter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SavedCharacter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x77161d65;
}

 ::Dynamic SavedCharacter_obj::charId(){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_44_charId)
HXDLIN(  44)		return ::Std_obj::parseInt(this->charXML->get(HX_("id",db,5b,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SavedCharacter_obj,charId,return )

::String SavedCharacter_obj::name(){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_48_name)
HXDLIN(  48)		return this->_name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SavedCharacter_obj,name,return )

 ::Dynamic SavedCharacter_obj::objectType(){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_52_objectType)
HXDLIN(  52)		 ::Xml _this = ( ( ::Xml)(this->charXML->elementsNamed(HX_("ObjectType",39,6d,f2,c5))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  52)		bool _hx_tmp;
HXDLIN(  52)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXDLIN(  52)			_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXDLIN(  52)			_hx_tmp = false;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXDLIN(  52)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(  52)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  52)		bool _hx_tmp1;
HXDLIN(  52)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXDLIN(  52)			_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXDLIN(  52)			_hx_tmp1 = true;
            		}
HXDLIN(  52)		if (_hx_tmp1) {
HXDLIN(  52)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN(  52)		return ::Std_obj::parseInt(_this1->nodeValue);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SavedCharacter_obj,objectType,return )

 ::Dynamic SavedCharacter_obj::skinType(){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_56_skinType)
HXDLIN(  56)		 ::Xml _this = ( ( ::Xml)(this->charXML->elementsNamed(HX_("Texture",bb,f0,31,6c))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  56)		bool _hx_tmp;
HXDLIN(  56)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXDLIN(  56)			_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXDLIN(  56)			_hx_tmp = false;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXDLIN(  56)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(  56)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  56)		bool _hx_tmp1;
HXDLIN(  56)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXDLIN(  56)			_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXDLIN(  56)			_hx_tmp1 = true;
            		}
HXDLIN(  56)		if (_hx_tmp1) {
HXDLIN(  56)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN(  56)		return ::Std_obj::parseInt(_this1->nodeValue);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SavedCharacter_obj,skinType,return )

 ::Dynamic SavedCharacter_obj::tier(){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_60_tier)
HXDLIN(  60)		if (( (bool)(this->charXML->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXDLIN(  60)			 ::Xml _this = ( ( ::Xml)(this->charXML->elementsNamed(HX_("Tier",42,f1,d5,37))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  60)			bool _hx_tmp;
HXDLIN(  60)			if ((_this->nodeType != ::Xml_obj::Document)) {
HXDLIN(  60)				_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXDLIN(  60)				_hx_tmp = false;
            			}
HXDLIN(  60)			if (_hx_tmp) {
HXDLIN(  60)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            			}
HXDLIN(  60)			 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  60)			bool _hx_tmp1;
HXDLIN(  60)			if ((_this1->nodeType != ::Xml_obj::Document)) {
HXDLIN(  60)				_hx_tmp1 = (_this1->nodeType == ::Xml_obj::Element);
            			}
            			else {
HXDLIN(  60)				_hx_tmp1 = true;
            			}
HXDLIN(  60)			if (_hx_tmp1) {
HXDLIN(  60)				HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            			}
HXDLIN(  60)			return ::Std_obj::parseInt(_this1->nodeValue);
            		}
            		else {
HXDLIN(  60)			return 0;
            		}
HXDLIN(  60)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SavedCharacter_obj,tier,return )

::String SavedCharacter_obj::displayId(){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_64_displayId)
HXDLIN(  64)		 ::haxe::ds::IntMap _hx_tmp = ::objects::ObjectLibrary_obj::typeToDisplayId;
HXDLIN(  64)		return _hx_tmp->get_string(this->objectType());
            	}


HX_DEFINE_DYNAMIC_FUNC0(SavedCharacter_obj,displayId,return )

 ::openfl::geom::ColorTransform SavedCharacter_obj::notAvailableCT;

 ::openfl::geom::ColorTransform SavedCharacter_obj::dimCT;

 ::openfl::display::BitmapData SavedCharacter_obj::getImage( ::appengine::SavedCharacter savedChar, ::Xml playerXML,int dir,int action,Float p,bool available,bool selected){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_20_getImage)
HXLINE(  21)		 ::Xml animXML = ( ( ::Xml)(playerXML->elementsNamed(HX_("AnimatedTexture",58,70,fc,07))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  22)		 ::Xml _this = ( ( ::Xml)(animXML->elementsNamed(HX_("Sheet",7f,52,4d,0f))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  22)		bool animatedChar;
HXDLIN(  22)		if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  22)			animatedChar = (_this->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  22)			animatedChar = false;
            		}
HXDLIN(  22)		if (animatedChar) {
HXLINE(  22)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            		}
HXDLIN(  22)		 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  22)		bool animatedChar1;
HXDLIN(  22)		if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  22)			animatedChar1 = (_this1->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  22)			animatedChar1 = true;
            		}
HXDLIN(  22)		if (animatedChar1) {
HXLINE(  22)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            		}
HXDLIN(  22)		::String animatedChar2 = _this1->nodeValue;
HXLINE(  23)		 ::Xml _this2 = ( ( ::Xml)(animXML->elementsNamed(HX_("Index",f2,0a,42,51))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  23)		bool animatedChar3;
HXDLIN(  23)		if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE(  23)			animatedChar3 = (_this2->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(  23)			animatedChar3 = false;
            		}
HXDLIN(  23)		if (animatedChar3) {
HXLINE(  23)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            		}
HXDLIN(  23)		 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  23)		bool animatedChar4;
HXDLIN(  23)		if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE(  23)			animatedChar4 = (_this3->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE(  23)			animatedChar4 = true;
            		}
HXDLIN(  23)		if (animatedChar4) {
HXLINE(  23)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            		}
HXLINE(  25)		 ::openfl::display::BitmapData bd = ::util::GlowRedrawer_obj::outlineGlow(::util::TextureRedrawer_obj::resize(::util::AnimatedChars_obj::getAnimatedChar(animatedChar2,( (int)(::Std_obj::parseInt(_this3->nodeValue)) ))->imageFromDir(dir,action,p)->image,100,false,null()),0,null(),null(),null());
HXLINE(  26)		if (!(available)) {
HXLINE(  27)			bd = ::util::CachingColorTransformer_obj::transformBitmapData(bd,::appengine::SavedCharacter_obj::notAvailableCT);
            		}
            		else {
HXLINE(  28)			if (!(selected)) {
HXLINE(  29)				bd = ::util::CachingColorTransformer_obj::transformBitmapData(bd,::appengine::SavedCharacter_obj::dimCT);
            			}
            		}
HXLINE(  31)		return bd;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(SavedCharacter_obj,getImage,return )

int SavedCharacter_obj::compare( ::appengine::SavedCharacter char1, ::appengine::SavedCharacter char2){
            	HX_STACKFRAME(&_hx_pos_952c825e8c1c0aca_35_compare)
HXDLIN(  35)		 ::Dynamic _hx_tmp = char2->tier();
HXDLIN(  35)		return (( (int)(_hx_tmp) ) - ( (int)(char1->tier()) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SavedCharacter_obj,compare,return )


::hx::ObjectPtr< SavedCharacter_obj > SavedCharacter_obj::__new( ::Xml charXML,::String name) {
	::hx::ObjectPtr< SavedCharacter_obj > __this = new SavedCharacter_obj();
	__this->__construct(charXML,name);
	return __this;
}

::hx::ObjectPtr< SavedCharacter_obj > SavedCharacter_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml charXML,::String name) {
	SavedCharacter_obj *__this = (SavedCharacter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SavedCharacter_obj), true, "appengine.SavedCharacter"));
	*(void **)__this = SavedCharacter_obj::_hx_vtable;
	__this->__construct(charXML,name);
	return __this;
}

SavedCharacter_obj::SavedCharacter_obj()
{
}

void SavedCharacter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SavedCharacter);
	HX_MARK_MEMBER_NAME(charXML,"charXML");
	HX_MARK_MEMBER_NAME(_name,"_name");
	HX_MARK_END_CLASS();
}

void SavedCharacter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(charXML,"charXML");
	HX_VISIT_MEMBER_NAME(_name,"_name");
}

::hx::Val SavedCharacter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name_dyn() ); }
		if (HX_FIELD_EQ(inName,"tier") ) { return ::hx::Val( tier_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_name") ) { return ::hx::Val( _name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"charId") ) { return ::hx::Val( charId_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charXML") ) { return ::hx::Val( charXML ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"skinType") ) { return ::hx::Val( skinType_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"displayId") ) { return ::hx::Val( displayId_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objectType") ) { return ::hx::Val( objectType_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SavedCharacter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"dimCT") ) { outValue = ( dimCT ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"notAvailableCT") ) { outValue = ( notAvailableCT ); return true; }
	}
	return false;
}

::hx::Val SavedCharacter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_name") ) { _name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charXML") ) { charXML=inValue.Cast<  ::Xml >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SavedCharacter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"dimCT") ) { dimCT=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"notAvailableCT") ) { notAvailableCT=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

void SavedCharacter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("charXML",a1,14,66,cf));
	outFields->push(HX_("_name",2a,8e,10,fc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SavedCharacter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(SavedCharacter_obj,charXML),HX_("charXML",a1,14,66,cf)},
	{::hx::fsString,(int)offsetof(SavedCharacter_obj,_name),HX_("_name",2a,8e,10,fc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo SavedCharacter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &SavedCharacter_obj::notAvailableCT,HX_("notAvailableCT",67,da,44,76)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &SavedCharacter_obj::dimCT,HX_("dimCT",f9,59,cc,d9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String SavedCharacter_obj_sMemberFields[] = {
	HX_("charXML",a1,14,66,cf),
	HX_("_name",2a,8e,10,fc),
	HX_("charId",51,80,75,b7),
	HX_("name",4b,72,ff,48),
	HX_("objectType",19,69,41,cf),
	HX_("skinType",d7,b7,90,9c),
	HX_("tier",22,c5,fc,4c),
	HX_("displayId",bd,fe,da,c1),
	::String(null()) };

static void SavedCharacter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SavedCharacter_obj::notAvailableCT,"notAvailableCT");
	HX_MARK_MEMBER_NAME(SavedCharacter_obj::dimCT,"dimCT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SavedCharacter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SavedCharacter_obj::notAvailableCT,"notAvailableCT");
	HX_VISIT_MEMBER_NAME(SavedCharacter_obj::dimCT,"dimCT");
};

#endif

::hx::Class SavedCharacter_obj::__mClass;

static ::String SavedCharacter_obj_sStaticFields[] = {
	HX_("notAvailableCT",67,da,44,76),
	HX_("dimCT",f9,59,cc,d9),
	HX_("getImage",e5,2e,40,1d),
	HX_("compare",a5,18,69,83),
	::String(null())
};

void SavedCharacter_obj::__register()
{
	SavedCharacter_obj _hx_dummy;
	SavedCharacter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("appengine.SavedCharacter",2d,bd,7c,b9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SavedCharacter_obj::__GetStatic;
	__mClass->mSetStaticField = &SavedCharacter_obj::__SetStatic;
	__mClass->mMarkFunc = SavedCharacter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SavedCharacter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SavedCharacter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SavedCharacter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SavedCharacter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SavedCharacter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SavedCharacter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SavedCharacter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_952c825e8c1c0aca_14_boot)
HXDLIN(  14)		notAvailableCT =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),0,0,0,0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_952c825e8c1c0aca_15_boot)
HXDLIN(  15)		dimCT =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,((Float)0.75),((Float)0.75),((Float)0.75),1,0,0,0,0);
            	}
}

} // end namespace appengine
