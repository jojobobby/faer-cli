// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_appengine_SavedCharacter
#include <appengine/SavedCharacter.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_core_PlayerModel
#include <core/PlayerModel.h>
#endif
#ifndef INCLUDED_core_ScreensView
#include <core/ScreensView.h>
#endif
#ifndef INCLUDED_game_model_GameInitData
#include <game/model/GameInitData.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_map_RegionLibrary
#include <map/RegionLibrary.h>
#endif
#ifndef INCLUDED_mapeditor_BigBitmapData
#include <mapeditor/BigBitmapData.h>
#endif
#ifndef INCLUDED_mapeditor_Chooser
#include <mapeditor/Chooser.h>
#endif
#ifndef INCLUDED_mapeditor_Command
#include <mapeditor/Command.h>
#endif
#ifndef INCLUDED_mapeditor_CommandEvent
#include <mapeditor/CommandEvent.h>
#endif
#ifndef INCLUDED_mapeditor_CommandList
#include <mapeditor/CommandList.h>
#endif
#ifndef INCLUDED_mapeditor_CommandMenu
#include <mapeditor/CommandMenu.h>
#endif
#ifndef INCLUDED_mapeditor_CommandQueue
#include <mapeditor/CommandQueue.h>
#endif
#ifndef INCLUDED_mapeditor_EditingScreen
#include <mapeditor/EditingScreen.h>
#endif
#ifndef INCLUDED_mapeditor_FillData
#include <mapeditor/FillData.h>
#endif
#ifndef INCLUDED_mapeditor_GroundChooser
#include <mapeditor/GroundChooser.h>
#endif
#ifndef INCLUDED_mapeditor_InfoPane
#include <mapeditor/InfoPane.h>
#endif
#ifndef INCLUDED_mapeditor_IntPoint
#include <mapeditor/IntPoint.h>
#endif
#ifndef INCLUDED_mapeditor_MEClearCommand
#include <mapeditor/MEClearCommand.h>
#endif
#ifndef INCLUDED_mapeditor_MECommandMenu
#include <mapeditor/MECommandMenu.h>
#endif
#ifndef INCLUDED_mapeditor_MEMap
#include <mapeditor/MEMap.h>
#endif
#ifndef INCLUDED_mapeditor_MEModifyCommand
#include <mapeditor/MEModifyCommand.h>
#endif
#ifndef INCLUDED_mapeditor_METile
#include <mapeditor/METile.h>
#endif
#ifndef INCLUDED_mapeditor_ObjectChooser
#include <mapeditor/ObjectChooser.h>
#endif
#ifndef INCLUDED_mapeditor_RegionChooser
#include <mapeditor/RegionChooser.h>
#endif
#ifndef INCLUDED_mapeditor_Tile
#include <mapeditor/Tile.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_FileFilter
#include <openfl/net/FileFilter.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Object_Object_Impl_
#include <openfl/utils/_Object/Object_Impl_.h>
#endif
#ifndef INCLUDED_screens_AccountScreen
#include <screens/AccountScreen.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_TextInputField
#include <ui/TextInputField.h>
#endif
#ifndef INCLUDED_ui_dialogs_Dialog
#include <ui/dialogs/Dialog.h>
#endif
#ifndef INCLUDED_ui_dialogs_DialogsView
#include <ui/dialogs/DialogsView.h>
#endif
#ifndef INCLUDED_ui_dropdown_DropDown
#include <ui/dropdown/DropDown.h>
#endif
#ifndef INCLUDED_ui_tooltip_TooltipsView
#include <ui/tooltip/TooltipsView.h>
#endif
#ifndef INCLUDED_ui_view_ScreenBase
#include <ui/view/ScreenBase.h>
#endif
#ifndef INCLUDED_ui_view_TitleView
#include <ui/view/TitleView.h>
#endif
#ifndef INCLUDED_util_Cell
#include <util/Cell.h>
#endif
#ifndef INCLUDED_util_Stack
#include <util/Stack.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4d50749e2c3cb994_56_new,"mapeditor.EditingScreen","new",0x2fd7d511,"mapeditor.EditingScreen.new","mapeditor/EditingScreen.hx",56,0x58b10980)
static const ::String _hx_array_data_ec09f89f_1[] = {
	HX_("Ground",a7,96,bc,50),HX_("Objects",b4,90,a0,4f),HX_("Regions",df,3c,ed,47),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_141_onKeyDown,"mapeditor.EditingScreen","onKeyDown",0x34a841b3,"mapeditor.EditingScreen.onKeyDown","mapeditor/EditingScreen.hx",141,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_156_ipArrContains,"mapeditor.EditingScreen","ipArrContains",0x7efd10ea,"mapeditor.EditingScreen.ipArrContains","mapeditor/EditingScreen.hx",156,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_164_inRadius,"mapeditor.EditingScreen","inRadius",0x7e0d73c6,"mapeditor.EditingScreen.inRadius","mapeditor/EditingScreen.hx",164,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_169_editTiles,"mapeditor.EditingScreen","editTiles",0x64bf1e8c,"mapeditor.EditingScreen.editTiles","mapeditor/EditingScreen.hx",169,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_311_addModifyCommandList,"mapeditor.EditingScreen","addModifyCommandList",0xcb23f9bd,"mapeditor.EditingScreen.addModifyCommandList","mapeditor/EditingScreen.hx",311,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_342_onDropDownChange,"mapeditor.EditingScreen","onDropDownChange",0xb3598eaf,"mapeditor.EditingScreen.onDropDownChange","mapeditor/EditingScreen.hx",342,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_370_onUndo,"mapeditor.EditingScreen","onUndo",0x65090ed2,"mapeditor.EditingScreen.onUndo","mapeditor/EditingScreen.hx",370,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_375_onRedo,"mapeditor.EditingScreen","onRedo",0x630696ac,"mapeditor.EditingScreen.onRedo","mapeditor/EditingScreen.hx",375,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_380_onClear,"mapeditor.EditingScreen","onClear",0xa45bc11f,"mapeditor.EditingScreen.onClear","mapeditor/EditingScreen.hx",380,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_397_tilesContains,"mapeditor.EditingScreen","tilesContains",0x668bccb5,"mapeditor.EditingScreen.tilesContains","mapeditor/EditingScreen.hx",397,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_405_tilesIndexOf,"mapeditor.EditingScreen","tilesIndexOf",0x3bb2baf3,"mapeditor.EditingScreen.tilesIndexOf","mapeditor/EditingScreen.hx",405,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_416_createMap,"mapeditor.EditingScreen","createMap",0x0a970071,"mapeditor.EditingScreen.createMap","mapeditor/EditingScreen.hx",416,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_462_onSave,"mapeditor.EditingScreen","onSave",0x63acd3eb,"mapeditor.EditingScreen.onSave","mapeditor/EditingScreen.hx",462,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_470_onLoad,"mapeditor.EditingScreen","onLoad",0x5f16e2d4,"mapeditor.EditingScreen.onLoad","mapeditor/EditingScreen.hx",470,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_476_onFileBrowseSelect,"mapeditor.EditingScreen","onFileBrowseSelect",0x51c6aa70,"mapeditor.EditingScreen.onFileBrowseSelect","mapeditor/EditingScreen.hx",476,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_485_onFileBrowseSelect,"mapeditor.EditingScreen","onFileBrowseSelect",0x51c6aa70,"mapeditor.EditingScreen.onFileBrowseSelect","mapeditor/EditingScreen.hx",485,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_492_onFileLoadComplete,"mapeditor.EditingScreen","onFileLoadComplete",0xd5b96749,"mapeditor.EditingScreen.onFileLoadComplete","mapeditor/EditingScreen.hx",492,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_549_onFileLoadComplete,"mapeditor.EditingScreen","onFileLoadComplete",0xd5b96749,"mapeditor.EditingScreen.onFileLoadComplete","mapeditor/EditingScreen.hx",549,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_592_onFileLoadIOError,"mapeditor.EditingScreen","onFileLoadIOError",0x70ad0d92,"mapeditor.EditingScreen.onFileLoadIOError","mapeditor/EditingScreen.hx",592,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_595_onTest,"mapeditor.EditingScreen","onTest",0x64591100,"mapeditor.EditingScreen.onTest","mapeditor/EditingScreen.hx",595,0x58b10980)
HX_LOCAL_STACK_FRAME(_hx_pos_4d50749e2c3cb994_608_onQuit,"mapeditor.EditingScreen","onQuit",0x6269887d,"mapeditor.EditingScreen.onQuit","mapeditor/EditingScreen.hx",608,0x58b10980)
namespace mapeditor{

void EditingScreen_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_56_new)
HXLINE(  70)		this->loadedFile = null();
HXLINE(  73)		super::__construct();
HXLINE(  75)		this->addChild( ::ui::view::ScreenBase_obj::__alloc( HX_CTX ));
HXLINE(  76)		this->addChild( ::screens::AccountScreen_obj::__alloc( HX_CTX ));
HXLINE(  78)		this->brushSize =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("Brush Size",67,0e,03,8e),false,HX_("",00,00,00,00));
HXLINE(  79)		this->brushSize->inputText->set_text(HX_("0.5",77,94,24,00));
HXLINE(  80)		this->brushSize->set_x(((( (Float)(::Main_obj::stageWidth) ) / ( (Float)(2) )) - ((Float)320.)));
HXLINE(  81)		this->brushSize->set_y(( (Float)((((::Main_obj::stageHeight - 640) - 10) - 70)) ));
HXLINE(  82)		this->addChild(this->brushSize);
HXLINE(  84)		this->randomChance =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("Random Chance",71,9e,b6,ad),false,HX_("",00,00,00,00));
HXLINE(  85)		this->randomChance->inputText->set_text(HX_("0.05",83,4f,dd,1f));
HXLINE(  86)		this->randomChance->set_x((((( (Float)(::Main_obj::stageWidth) ) / ( (Float)(2) )) - ((Float)320.)) + 250));
HXLINE(  87)		this->randomChance->set_y(( (Float)((((::Main_obj::stageHeight - 640) - 10) - 70)) ));
HXLINE(  88)		this->addChild(this->randomChance);
HXLINE(  90)		this->searchBar =  ::ui::TextInputField_obj::__alloc( HX_CTX ,HX_("Search",88,13,8c,97),false,HX_("",00,00,00,00));
HXLINE(  91)		this->searchBar->set_x((((( (Float)(::Main_obj::stageWidth) ) / ( (Float)(2) )) - ((Float)320.)) + 500));
HXLINE(  92)		this->searchBar->set_y(( (Float)((((::Main_obj::stageHeight - 640) - 10) - 70)) ));
HXLINE(  93)		this->searchBar->inputText->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null(),null(),null());
HXLINE(  94)		this->addChild(this->searchBar);
HXLINE(  96)		this->commandMenu =  ::mapeditor::MECommandMenu_obj::__alloc( HX_CTX );
HXLINE(  97)		this->commandMenu->set_x(( (Float)(15) ));
HXLINE(  98)		this->commandMenu->set_y(( (Float)(((::Main_obj::stageHeight - 640) - 10)) ));
HXLINE(  99)		this->commandMenu->addEventListener(HX_("UNDO_COMMAND_EVENT",0b,b4,f3,3e),this->onUndo_dyn(),null(),null(),null());
HXLINE( 100)		this->commandMenu->addEventListener(HX_("REDO_COMMAND_EVENT",65,85,35,6d),this->onRedo_dyn(),null(),null(),null());
HXLINE( 101)		this->commandMenu->addEventListener(HX_("CLEAR_COMMAND_EVENT",14,9d,ac,ba),this->onClear_dyn(),null(),null(),null());
HXLINE( 102)		this->commandMenu->addEventListener(HX_("LOAD_COMMAND_EVENT",8d,c7,03,60),this->onLoad_dyn(),null(),null(),null());
HXLINE( 103)		this->commandMenu->addEventListener(HX_("SAVE_COMMAND_EVENT",e4,d2,58,a3),this->onSave_dyn(),null(),null(),null());
HXLINE( 104)		this->commandMenu->addEventListener(HX_("TEST_COMMAND_EVENT",b9,ea,b9,26),this->onTest_dyn(),null(),null(),null());
HXLINE( 105)		this->commandMenu->addEventListener(HX_("QUIT_COMMAND_EVENT",f6,a2,e9,56),this->onQuit_dyn(),null(),null(),null());
HXLINE( 106)		this->addChild(this->commandMenu);
HXLINE( 108)		this->commandQueue =  ::mapeditor::CommandQueue_obj::__alloc( HX_CTX );
HXLINE( 109)		this->meMap =  ::mapeditor::MEMap_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 110)		this->meMap->addEventListener(HX_("TILES_EVENT",60,16,8b,93),this->editTiles_dyn(),null(),null(),null());
HXLINE( 111)		this->meMap->set_x(((( (Float)(::Main_obj::stageWidth) ) / ( (Float)(2) )) - ((Float)320.)));
HXLINE( 112)		this->meMap->set_y(( (Float)(((::Main_obj::stageHeight - 640) - 10)) ));
HXLINE( 113)		this->addChild(this->meMap);
HXLINE( 115)		this->infoPane =  ::mapeditor::InfoPane_obj::__alloc( HX_CTX ,this->meMap);
HXLINE( 116)		this->infoPane->set_x(( (Float)(4) ));
HXLINE( 117)		this->infoPane->set_y(( (Float)(((::Main_obj::stageHeight - 150) - 10)) ));
HXLINE( 118)		this->addChild(this->infoPane);
HXLINE( 120)		this->chooserDropDown =  ::ui::dropdown::DropDown_obj::__alloc( HX_CTX ,::Array_obj< ::String >::fromData( _hx_array_data_ec09f89f_1,3),136,26,null());
HXLINE( 121)		 ::ui::dropdown::DropDown _hx_tmp = this->chooserDropDown;
HXDLIN( 121)		_hx_tmp->set_x(((this->meMap->get_x() + 640) + 4));
HXLINE( 122)		this->chooserDropDown->set_y(( (Float)(((::Main_obj::stageHeight - 640) - 10)) ));
HXLINE( 123)		this->chooserDropDown->addEventListener(HX_("change",70,91,72,b7),this->onDropDownChange_dyn(),null(),null(),null());
HXLINE( 124)		this->addChild(this->chooserDropDown);
HXLINE( 126)		this->groundChooser =  ::mapeditor::GroundChooser_obj::__alloc( HX_CTX );
HXLINE( 127)		 ::mapeditor::GroundChooser _hx_tmp1 = this->groundChooser;
HXDLIN( 127)		_hx_tmp1->set_x(this->chooserDropDown->get_x());
HXLINE( 128)		 ::mapeditor::GroundChooser _hx_tmp2 = this->groundChooser;
HXDLIN( 128)		Float _hx_tmp3 = this->chooserDropDown->get_y();
HXDLIN( 128)		_hx_tmp2->set_y(((_hx_tmp3 + this->chooserDropDown->get_height()) + 4));
HXLINE( 129)		this->chooser = this->groundChooser;
HXLINE( 130)		this->addChild(this->groundChooser);
HXLINE( 132)		this->objChooser =  ::mapeditor::ObjectChooser_obj::__alloc( HX_CTX );
HXLINE( 133)		 ::mapeditor::ObjectChooser _hx_tmp4 = this->objChooser;
HXDLIN( 133)		_hx_tmp4->set_x(this->chooserDropDown->get_x());
HXLINE( 134)		 ::mapeditor::ObjectChooser _hx_tmp5 = this->objChooser;
HXDLIN( 134)		Float _hx_tmp6 = this->chooserDropDown->get_y();
HXDLIN( 134)		_hx_tmp5->set_y(((_hx_tmp6 + this->chooserDropDown->get_height()) + 4));
HXLINE( 136)		this->regionChooser =  ::mapeditor::RegionChooser_obj::__alloc( HX_CTX );
HXLINE( 137)		 ::mapeditor::RegionChooser _hx_tmp7 = this->regionChooser;
HXDLIN( 137)		_hx_tmp7->set_x(this->chooserDropDown->get_x());
HXLINE( 138)		 ::mapeditor::RegionChooser _hx_tmp8 = this->regionChooser;
HXDLIN( 138)		Float _hx_tmp9 = this->chooserDropDown->get_y();
HXDLIN( 138)		_hx_tmp8->set_y(((_hx_tmp9 + this->chooserDropDown->get_height()) + 4));
            	}

Dynamic EditingScreen_obj::__CreateEmpty() { return new EditingScreen_obj; }

void *EditingScreen_obj::_hx_vtable = 0;

Dynamic EditingScreen_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EditingScreen_obj > _hx_result = new EditingScreen_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EditingScreen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c9bf5b) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x19c9bf5b;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void EditingScreen_obj::onKeyDown( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_141_onKeyDown)
HXLINE( 142)		if ((e->keyCode != ( (unsigned char)(13) ))) {
HXLINE( 143)			return;
            		}
HXLINE( 145)		::String search = this->searchBar->text();
HXLINE( 146)		::String _hx_switch_0 = this->chooserDropDown->getValue();
            		if (  (_hx_switch_0==HX_("Ground",a7,96,bc,50)) ){
HXLINE( 148)			this->groundChooser->reloadObjects(search);
HXDLIN( 148)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Objects",b4,90,a0,4f)) ){
HXLINE( 150)			this->objChooser->reloadObjects(search);
HXDLIN( 150)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Regions",df,3c,ed,47)) ){
HXLINE( 152)			this->regionChooser->reloadObjects(search);
HXDLIN( 152)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onKeyDown,(void))

bool EditingScreen_obj::ipArrContains(::Array< ::Dynamic> arr,int x,int y){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_156_ipArrContains)
HXLINE( 157)		{
HXLINE( 157)			int _g = 0;
HXDLIN( 157)			while((_g < arr->length)){
HXLINE( 157)				 ::mapeditor::IntPoint ip = arr->__get(_g).StaticCast<  ::mapeditor::IntPoint >();
HXDLIN( 157)				_g = (_g + 1);
HXLINE( 158)				bool _hx_tmp;
HXDLIN( 158)				if ((ip->x == x)) {
HXLINE( 158)					_hx_tmp = (ip->y == y);
            				}
            				else {
HXLINE( 158)					_hx_tmp = false;
            				}
HXDLIN( 158)				if (_hx_tmp) {
HXLINE( 159)					return true;
            				}
            			}
            		}
HXLINE( 161)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(EditingScreen_obj,ipArrContains,return )

bool EditingScreen_obj::inRadius(Float cX,Float cY,Float x,Float y,Float radius){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_164_inRadius)
HXLINE( 165)		Float dx = (cX - x);
HXDLIN( 165)		Float dy = (cY - y);
HXLINE( 166)		return (::Math_obj::sqrt(((dx * dx) + (dy * dy))) <= radius);
            	}


HX_DEFINE_DYNAMIC_FUNC5(EditingScreen_obj,inRadius,return )

void EditingScreen_obj::editTiles(::Array< ::Dynamic> tiles){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_169_editTiles)
HXLINE( 170)		switch((int)(this->commandMenu->getCommand())){
            			case (int)1: {
HXLINE( 268)				if ((tiles->length == 1)) {
HXLINE( 269)					::Array< ::Dynamic> modTiles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 270)					int cX = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >()->x;
HXDLIN( 270)					int cY = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >()->y;
HXLINE( 271)					Float radius = ::Std_obj::parseFloat(this->brushSize->text());
HXLINE( 272)					{
HXLINE( 272)						int _g = ::Math_obj::floor((( (Float)(cY) ) - radius));
HXDLIN( 272)						int _g1 = ::Math_obj::ceil((cY + radius));
HXDLIN( 272)						while((_g < _g1)){
HXLINE( 272)							_g = (_g + 1);
HXDLIN( 272)							int y = (_g - 1);
HXLINE( 273)							{
HXLINE( 273)								int _g2 = ::Math_obj::floor((( (Float)(cX) ) - radius));
HXDLIN( 273)								int _g3 = ::Math_obj::ceil((cX + radius));
HXDLIN( 273)								while((_g2 < _g3)){
HXLINE( 273)									_g2 = (_g2 + 1);
HXDLIN( 273)									int x = (_g2 - 1);
HXLINE( 274)									if (this->inRadius(( (Float)(cX) ),( (Float)(cY) ),( (Float)(x) ),( (Float)(y) ),radius)) {
HXLINE( 275)										modTiles->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,x,y));
            									}
            								}
            							}
            						}
            					}
HXLINE( 276)					int _hx_tmp = this->chooser->layer;
HXDLIN( 276)					this->addModifyCommandList(modTiles,_hx_tmp,this->chooser->selectedType());
            				}
            				else {
HXLINE( 278)					int _hx_tmp1 = this->chooser->layer;
HXDLIN( 278)					this->addModifyCommandList(tiles,_hx_tmp1,this->chooser->selectedType());
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 280)				if ((tiles->length == 1)) {
HXLINE( 281)					::Array< ::Dynamic> modTiles1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 282)					int cX1 = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >()->x;
HXDLIN( 282)					int cY1 = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >()->y;
HXLINE( 283)					Float radius1 = ::Std_obj::parseFloat(this->brushSize->text());
HXLINE( 284)					{
HXLINE( 284)						int _g4 = ::Math_obj::floor((( (Float)(cY1) ) - radius1));
HXDLIN( 284)						int _g5 = ::Math_obj::ceil((cY1 + radius1));
HXDLIN( 284)						while((_g4 < _g5)){
HXLINE( 284)							_g4 = (_g4 + 1);
HXDLIN( 284)							int y1 = (_g4 - 1);
HXLINE( 285)							{
HXLINE( 285)								int _g6 = ::Math_obj::floor((( (Float)(cX1) ) - radius1));
HXDLIN( 285)								int _g7 = ::Math_obj::ceil((cX1 + radius1));
HXDLIN( 285)								while((_g6 < _g7)){
HXLINE( 285)									_g6 = (_g6 + 1);
HXDLIN( 285)									int x1 = (_g6 - 1);
HXLINE( 286)									if (this->inRadius(( (Float)(cX1) ),( (Float)(cY1) ),( (Float)(x1) ),( (Float)(y1) ),radius1)) {
HXLINE( 287)										modTiles1->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,x1,y1));
            									}
            								}
            							}
            						}
            					}
HXLINE( 288)					int _hx_tmp2;
HXDLIN( 288)					if ((this->chooser->layer == 2)) {
HXLINE( 288)						_hx_tmp2 = 255;
            					}
            					else {
HXLINE( 288)						_hx_tmp2 = 65535;
            					}
HXDLIN( 288)					this->addModifyCommandList(modTiles1,this->chooser->layer,_hx_tmp2);
            				}
            				else {
HXLINE( 290)					int _hx_tmp3;
HXDLIN( 290)					if ((this->chooser->layer == 2)) {
HXLINE( 290)						_hx_tmp3 = 255;
            					}
            					else {
HXLINE( 290)						_hx_tmp3 = 65535;
            					}
HXDLIN( 290)					this->addModifyCommandList(tiles,this->chooser->layer,_hx_tmp3);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 292)				 ::mapeditor::IntPoint tile = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >();
HXLINE( 293)				int layer = this->chooser->layer;
HXDLIN( 293)				 ::Dynamic type;
HXDLIN( 293)				 ::mapeditor::METile tmp = this->meMap->getTile(tile->x,tile->y);
HXDLIN( 293)				 ::Dynamic tmp1;
HXDLIN( 293)				if (::hx::IsNotNull( tmp )) {
HXLINE( 293)					tmp1 = tmp->types->__get(layer);
            				}
            				else {
HXLINE( 293)					tmp1 = null();
            				}
HXDLIN( 293)				if (::hx::IsNotNull( tmp1 )) {
HXLINE( 293)					type = tmp1;
            				}
            				else {
HXLINE( 293)					if ((layer == 2)) {
HXLINE( 293)						type = 255;
            					}
            					else {
HXLINE( 293)						type = 65535;
            					}
            				}
HXLINE( 294)				bool _hx_tmp4;
HXDLIN( 294)				bool _hx_tmp5;
HXDLIN( 294)				bool _hx_tmp6;
HXDLIN( 294)				if ((this->chooser->layer != 0)) {
HXLINE( 294)					_hx_tmp6 = (this->chooser->layer == 1);
            				}
            				else {
HXLINE( 294)					_hx_tmp6 = true;
            				}
HXDLIN( 294)				if (_hx_tmp6) {
HXLINE( 294)					_hx_tmp5 = ::hx::IsEq( type,65535 );
            				}
            				else {
HXLINE( 294)					_hx_tmp5 = false;
            				}
HXDLIN( 294)				if (!(_hx_tmp5)) {
HXLINE( 296)					if ((this->chooser->layer == 2)) {
HXLINE( 294)						_hx_tmp4 = ::hx::IsEq( type,255 );
            					}
            					else {
HXLINE( 294)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 294)					_hx_tmp4 = true;
            				}
HXDLIN( 294)				if (_hx_tmp4) {
HXLINE( 298)					return;
            				}
HXLINE( 300)				this->chooser->setSelectedType(( (int)(type) ));
HXLINE( 301)				this->commandMenu->setCommand(1);
            			}
            			break;
            			case (int)4: {
HXLINE( 172)				 ::mapeditor::IntPoint tile1 = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >();
HXLINE( 173)				int layer1 = this->chooser->layer;
HXDLIN( 173)				 ::Dynamic currType;
HXDLIN( 173)				 ::mapeditor::METile tmp2 = this->meMap->getTile(tile1->x,tile1->y);
HXDLIN( 173)				 ::Dynamic tmp3;
HXDLIN( 173)				if (::hx::IsNotNull( tmp2 )) {
HXLINE( 173)					tmp3 = tmp2->types->__get(layer1);
            				}
            				else {
HXLINE( 173)					tmp3 = null();
            				}
HXDLIN( 173)				if (::hx::IsNotNull( tmp3 )) {
HXLINE( 173)					currType = tmp3;
            				}
            				else {
HXLINE( 173)					if ((layer1 == 2)) {
HXLINE( 173)						currType = 255;
            					}
            					else {
HXLINE( 173)						currType = 65535;
            					}
            				}
HXLINE( 174)				int selType = this->chooser->selectedType();
HXLINE( 175)				bool _hx_tmp7;
HXDLIN( 175)				bool _hx_tmp8;
HXDLIN( 175)				bool _hx_tmp9;
HXDLIN( 175)				bool _hx_tmp10;
HXDLIN( 175)				if ((this->chooser->layer != 0)) {
HXLINE( 175)					_hx_tmp10 = (this->chooser->layer == 1);
            				}
            				else {
HXLINE( 175)					_hx_tmp10 = true;
            				}
HXDLIN( 175)				if (_hx_tmp10) {
HXLINE( 175)					_hx_tmp9 = (selType == 65535);
            				}
            				else {
HXLINE( 175)					_hx_tmp9 = false;
            				}
HXDLIN( 175)				if (!(_hx_tmp9)) {
HXLINE( 177)					if ((this->chooser->layer == 2)) {
HXLINE( 175)						_hx_tmp8 = (selType == 255);
            					}
            					else {
HXLINE( 175)						_hx_tmp8 = false;
            					}
            				}
            				else {
HXLINE( 175)					_hx_tmp8 = true;
            				}
HXDLIN( 175)				if (!(_hx_tmp8)) {
HXLINE( 175)					_hx_tmp7 = ::hx::IsEq( selType,currType );
            				}
            				else {
HXLINE( 175)					_hx_tmp7 = true;
            				}
HXDLIN( 175)				if (_hx_tmp7) {
HXLINE( 180)					return;
            				}
HXLINE( 182)				::Array< ::Dynamic> tiles1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 183)				 ::util::Stack stack =  ::util::Stack_obj::__alloc( HX_CTX );
HXLINE( 184)				stack->head =  ::util::Cell_obj::__alloc( HX_CTX , ::mapeditor::FillData_obj::__alloc( HX_CTX ,tile1->x,tile1->x,tile1->y,1),stack->head);
HXLINE( 190)				stack->head =  ::util::Cell_obj::__alloc( HX_CTX , ::mapeditor::FillData_obj::__alloc( HX_CTX ,tile1->x,tile1->x,(tile1->y - 1),-1),stack->head);
HXLINE( 196)				while(::hx::IsNotNull( stack->head )){
HXLINE( 197)					 ::util::Cell k = stack->head;
HXDLIN( 197)					 ::mapeditor::FillData pop;
HXDLIN( 197)					if (::hx::IsNull( k )) {
HXLINE( 197)						pop = null();
            					}
            					else {
HXLINE( 197)						stack->head = k->next;
HXDLIN( 197)						pop = ( ( ::mapeditor::FillData)(k->elt) );
            					}
HXDLIN( 197)					 ::mapeditor::FillData pop1 = pop;
HXLINE( 198)					int x2 = pop1->x1;
HXLINE( 199)					int y2 = pop1->y;
HXLINE( 200)					bool _hx_tmp11;
HXDLIN( 200)					if (!(this->ipArrContains(tiles1,x2,y2))) {
HXLINE( 200)						int layer2 = this->chooser->layer;
HXDLIN( 200)						 ::Dynamic _hx_tmp12;
HXDLIN( 200)						 ::mapeditor::METile tmp4 = this->meMap->getTile(x2,y2);
HXDLIN( 200)						 ::Dynamic tmp5;
HXDLIN( 200)						if (::hx::IsNotNull( tmp4 )) {
HXLINE( 200)							tmp5 = tmp4->types->__get(layer2);
            						}
            						else {
HXLINE( 200)							tmp5 = null();
            						}
HXDLIN( 200)						if (::hx::IsNotNull( tmp5 )) {
HXLINE( 200)							_hx_tmp12 = tmp5;
            						}
            						else {
HXLINE( 200)							if ((layer2 == 2)) {
HXLINE( 200)								_hx_tmp12 = 255;
            							}
            							else {
HXLINE( 200)								_hx_tmp12 = 65535;
            							}
            						}
HXDLIN( 200)						_hx_tmp11 = ::hx::IsEq( _hx_tmp12,currType );
            					}
            					else {
HXLINE( 200)						_hx_tmp11 = false;
            					}
HXDLIN( 200)					if (_hx_tmp11) {
HXLINE( 201)						while(true){
HXLINE( 201)							bool _hx_tmp13;
HXDLIN( 201)							if (!(this->ipArrContains(tiles1,(x2 - 1),y2))) {
HXLINE( 201)								int layer3 = this->chooser->layer;
HXDLIN( 201)								 ::Dynamic _hx_tmp14;
HXDLIN( 201)								 ::mapeditor::METile tmp6 = this->meMap->getTile((x2 - 1),y2);
HXDLIN( 201)								 ::Dynamic tmp7;
HXDLIN( 201)								if (::hx::IsNotNull( tmp6 )) {
HXLINE( 201)									tmp7 = tmp6->types->__get(layer3);
            								}
            								else {
HXLINE( 201)									tmp7 = null();
            								}
HXDLIN( 201)								if (::hx::IsNotNull( tmp7 )) {
HXLINE( 201)									_hx_tmp14 = tmp7;
            								}
            								else {
HXLINE( 201)									if ((layer3 == 2)) {
HXLINE( 201)										_hx_tmp14 = 255;
            									}
            									else {
HXLINE( 201)										_hx_tmp14 = 65535;
            									}
            								}
HXDLIN( 201)								_hx_tmp13 = ::hx::IsEq( _hx_tmp14,currType );
            							}
            							else {
HXLINE( 201)								_hx_tmp13 = false;
            							}
HXDLIN( 201)							if (!(_hx_tmp13)) {
HXLINE( 201)								goto _hx_goto_12;
            							}
HXLINE( 202)							tiles1->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,(x2 - 1),y2));
HXLINE( 203)							x2 = (x2 - 1);
            						}
            						_hx_goto_12:;
            					}
HXLINE( 206)					if ((x2 < pop1->x1)) {
HXLINE( 207)						stack->head =  ::util::Cell_obj::__alloc( HX_CTX , ::mapeditor::FillData_obj::__alloc( HX_CTX ,x2,(pop1->x1 - 1),(y2 - pop1->dy),-(pop1->dy)),stack->head);
            					}
HXLINE( 214)					int x11 = pop1->x1;
HXLINE( 215)					int x21 = pop1->x2;
HXLINE( 216)					while((x11 <= x21)){
HXLINE( 217)						while(true){
HXLINE( 217)							bool _hx_tmp15;
HXDLIN( 217)							if (!(this->ipArrContains(tiles1,x11,y2))) {
HXLINE( 217)								int layer4 = this->chooser->layer;
HXDLIN( 217)								 ::Dynamic _hx_tmp16;
HXDLIN( 217)								 ::mapeditor::METile tmp8 = this->meMap->getTile(x11,y2);
HXDLIN( 217)								 ::Dynamic tmp9;
HXDLIN( 217)								if (::hx::IsNotNull( tmp8 )) {
HXLINE( 217)									tmp9 = tmp8->types->__get(layer4);
            								}
            								else {
HXLINE( 217)									tmp9 = null();
            								}
HXDLIN( 217)								if (::hx::IsNotNull( tmp9 )) {
HXLINE( 217)									_hx_tmp16 = tmp9;
            								}
            								else {
HXLINE( 217)									if ((layer4 == 2)) {
HXLINE( 217)										_hx_tmp16 = 255;
            									}
            									else {
HXLINE( 217)										_hx_tmp16 = 65535;
            									}
            								}
HXDLIN( 217)								_hx_tmp15 = ::hx::IsEq( _hx_tmp16,currType );
            							}
            							else {
HXLINE( 217)								_hx_tmp15 = false;
            							}
HXDLIN( 217)							if (!(_hx_tmp15)) {
HXLINE( 217)								goto _hx_goto_14;
            							}
HXLINE( 218)							tiles1->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,x11,y2));
HXLINE( 219)							x11 = (x11 + 1);
HXLINE( 220)							stack->head =  ::util::Cell_obj::__alloc( HX_CTX , ::mapeditor::FillData_obj::__alloc( HX_CTX ,x2,(x11 - 1),(y2 + pop1->dy),pop1->dy),stack->head);
HXLINE( 226)							if (((x11 - 1) > pop1->dy)) {
HXLINE( 227)								stack->head =  ::util::Cell_obj::__alloc( HX_CTX , ::mapeditor::FillData_obj::__alloc( HX_CTX ,(x21 + 1),(x11 - 1),(y2 - pop1->dy),-(pop1->dy)),stack->head);
            							}
            						}
            						_hx_goto_14:;
HXLINE( 234)						x11 = (x11 + 1);
HXLINE( 235)						while(true){
HXLINE( 235)							bool _hx_tmp17;
HXDLIN( 235)							bool _hx_tmp18;
HXDLIN( 235)							if ((x11 < x21)) {
HXLINE( 235)								_hx_tmp18 = !(this->ipArrContains(tiles1,x11,y2));
            							}
            							else {
HXLINE( 235)								_hx_tmp18 = false;
            							}
HXDLIN( 235)							if (_hx_tmp18) {
HXLINE( 235)								int layer5 = this->chooser->layer;
HXDLIN( 235)								 ::Dynamic _hx_tmp19;
HXDLIN( 235)								 ::mapeditor::METile tmp10 = this->meMap->getTile(x11,y2);
HXDLIN( 235)								 ::Dynamic tmp11;
HXDLIN( 235)								if (::hx::IsNotNull( tmp10 )) {
HXLINE( 235)									tmp11 = tmp10->types->__get(layer5);
            								}
            								else {
HXLINE( 235)									tmp11 = null();
            								}
HXDLIN( 235)								if (::hx::IsNotNull( tmp11 )) {
HXLINE( 235)									_hx_tmp19 = tmp11;
            								}
            								else {
HXLINE( 235)									if ((layer5 == 2)) {
HXLINE( 235)										_hx_tmp19 = 255;
            									}
            									else {
HXLINE( 235)										_hx_tmp19 = 65535;
            									}
            								}
HXDLIN( 235)								_hx_tmp17 = ::hx::IsNotEq( _hx_tmp19,currType );
            							}
            							else {
HXLINE( 235)								_hx_tmp17 = false;
            							}
HXDLIN( 235)							if (!(_hx_tmp17)) {
HXLINE( 235)								goto _hx_goto_15;
            							}
HXLINE( 236)							x11 = (x11 + 1);
            						}
            						_hx_goto_15:;
HXLINE( 237)						x2 = x11;
            					}
            				}
HXLINE( 241)				this->addModifyCommandList(tiles1,this->chooser->layer,selType);
            			}
            			break;
            			case (int)5: {
HXLINE( 243)				if ((tiles->length == 1)) {
HXLINE( 244)					::Array< ::Dynamic> finalTiles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 245)					::Array< ::Dynamic> modTiles2 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 246)					int cX2 = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >()->x;
HXDLIN( 246)					int cY2 = tiles->__get(0).StaticCast<  ::mapeditor::IntPoint >()->y;
HXLINE( 247)					Float radius2 = ::Std_obj::parseFloat(this->brushSize->text());
HXLINE( 248)					{
HXLINE( 248)						int _g8 = ::Math_obj::floor((( (Float)(cY2) ) - radius2));
HXDLIN( 248)						int _g9 = ::Math_obj::ceil((cY2 + radius2));
HXDLIN( 248)						while((_g8 < _g9)){
HXLINE( 248)							_g8 = (_g8 + 1);
HXDLIN( 248)							int y3 = (_g8 - 1);
HXLINE( 249)							{
HXLINE( 249)								int _g10 = ::Math_obj::floor((( (Float)(cX2) ) - radius2));
HXDLIN( 249)								int _g11 = ::Math_obj::ceil((cX2 + radius2));
HXDLIN( 249)								while((_g10 < _g11)){
HXLINE( 249)									_g10 = (_g10 + 1);
HXDLIN( 249)									int x3 = (_g10 - 1);
HXLINE( 250)									if (this->inRadius(( (Float)(cX2) ),( (Float)(cY2) ),( (Float)(x3) ),( (Float)(y3) ),radius2)) {
HXLINE( 251)										modTiles2->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,x3,y3));
            									}
            								}
            							}
            						}
            					}
HXLINE( 253)					Float chance = ::Std_obj::parseFloat(this->randomChance->text());
HXLINE( 254)					{
HXLINE( 254)						int _g12 = 0;
HXDLIN( 254)						while((_g12 < modTiles2->length)){
HXLINE( 254)							 ::mapeditor::IntPoint ip = modTiles2->__get(_g12).StaticCast<  ::mapeditor::IntPoint >();
HXDLIN( 254)							_g12 = (_g12 + 1);
HXLINE( 255)							if ((::Math_obj::random() < chance)) {
HXLINE( 256)								finalTiles->push(ip);
            							}
            						}
            					}
HXLINE( 257)					int _hx_tmp20 = this->chooser->layer;
HXDLIN( 257)					this->addModifyCommandList(finalTiles,_hx_tmp20,this->chooser->selectedType());
            				}
            				else {
HXLINE( 259)					::Array< ::Dynamic> modTiles3 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 260)					Float chance1 = ::Std_obj::parseFloat(this->randomChance->text());
HXLINE( 261)					{
HXLINE( 261)						int _g13 = 0;
HXDLIN( 261)						while((_g13 < tiles->length)){
HXLINE( 261)							 ::mapeditor::IntPoint ip1 = tiles->__get(_g13).StaticCast<  ::mapeditor::IntPoint >();
HXDLIN( 261)							_g13 = (_g13 + 1);
HXLINE( 262)							if ((::Math_obj::random() < chance1)) {
HXLINE( 263)								modTiles3->push(ip1);
            							}
            						}
            					}
HXLINE( 264)					int _hx_tmp21 = this->chooser->layer;
HXDLIN( 264)					this->addModifyCommandList(modTiles3,_hx_tmp21,this->chooser->selectedType());
            				}
            			}
            			break;
            		}
HXLINE( 303)		this->meMap->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,editTiles,(void))

void EditingScreen_obj::addModifyCommandList(::Array< ::Dynamic> tiles,int layer,int type){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_311_addModifyCommandList)
HXLINE( 312)		int oldType = 0;
HXLINE( 313)		 ::mapeditor::CommandList commandList =  ::mapeditor::CommandList_obj::__alloc( HX_CTX );
HXLINE( 314)		{
HXLINE( 314)			int _g = 0;
HXDLIN( 314)			while((_g < tiles->length)){
HXLINE( 314)				 ::mapeditor::IntPoint tile = tiles->__get(_g).StaticCast<  ::mapeditor::IntPoint >();
HXDLIN( 314)				_g = (_g + 1);
HXLINE( 315)				 ::mapeditor::METile tmp = this->meMap->getTile(tile->x,tile->y);
HXDLIN( 315)				 ::Dynamic tmp1;
HXDLIN( 315)				if (::hx::IsNotNull( tmp )) {
HXLINE( 315)					tmp1 = tmp->types->__get(layer);
            				}
            				else {
HXLINE( 315)					tmp1 = null();
            				}
HXDLIN( 315)				if (::hx::IsNotNull( tmp1 )) {
HXLINE( 315)					oldType = ( (int)(tmp1) );
            				}
            				else {
HXLINE( 315)					if ((layer == 2)) {
HXLINE( 315)						oldType = 255;
            					}
            					else {
HXLINE( 315)						oldType = 65535;
            					}
            				}
HXLINE( 316)				if ((oldType != type)) {
HXLINE( 317)					commandList->addCommand( ::mapeditor::MEModifyCommand_obj::__alloc( HX_CTX ,this->meMap,tile->x,tile->y,layer,oldType,type));
            				}
            			}
            		}
HXLINE( 320)		if (commandList->empty()) {
HXLINE( 321)			return;
            		}
HXLINE( 323)		this->commandQueue->addCommandList(commandList);
            	}


HX_DEFINE_DYNAMIC_FUNC3(EditingScreen_obj,addModifyCommandList,(void))

void EditingScreen_obj::onDropDownChange( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_342_onDropDownChange)
HXDLIN( 342)		::String _hx_switch_0 = this->chooserDropDown->getValue();
            		if (  (_hx_switch_0==HX_("Ground",a7,96,bc,50)) ){
HXLINE( 344)			if (!(this->contains(this->groundChooser))) {
HXLINE( 345)				this->addChild(this->groundChooser);
            			}
HXLINE( 346)			if (this->contains(this->objChooser)) {
HXLINE( 347)				this->removeChild(this->objChooser);
            			}
HXLINE( 348)			if (this->contains(this->regionChooser)) {
HXLINE( 349)				this->removeChild(this->regionChooser);
            			}
HXLINE( 350)			this->chooser = this->groundChooser;
HXLINE( 343)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("Objects",b4,90,a0,4f)) ){
HXLINE( 352)			if (!(this->contains(this->objChooser))) {
HXLINE( 353)				this->addChild(this->objChooser);
            			}
HXLINE( 354)			if (this->contains(this->groundChooser)) {
HXLINE( 355)				this->removeChild(this->groundChooser);
            			}
HXLINE( 356)			if (this->contains(this->regionChooser)) {
HXLINE( 357)				this->removeChild(this->regionChooser);
            			}
HXLINE( 358)			this->chooser = this->objChooser;
HXLINE( 351)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("Regions",df,3c,ed,47)) ){
HXLINE( 360)			if (!(this->contains(this->regionChooser))) {
HXLINE( 361)				this->addChild(this->regionChooser);
            			}
HXLINE( 362)			if (this->contains(this->groundChooser)) {
HXLINE( 363)				this->removeChild(this->groundChooser);
            			}
HXLINE( 364)			if (this->contains(this->objChooser)) {
HXLINE( 365)				this->removeChild(this->objChooser);
            			}
HXLINE( 366)			this->chooser = this->regionChooser;
HXLINE( 359)			goto _hx_goto_23;
            		}
            		_hx_goto_23:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onDropDownChange,(void))

void EditingScreen_obj::onUndo( ::mapeditor::CommandEvent event){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_370_onUndo)
HXLINE( 371)		this->commandQueue->undo();
HXLINE( 372)		this->meMap->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onUndo,(void))

void EditingScreen_obj::onRedo( ::mapeditor::CommandEvent event){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_375_onRedo)
HXLINE( 376)		this->commandQueue->redo();
HXLINE( 377)		this->meMap->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onRedo,(void))

void EditingScreen_obj::onClear( ::mapeditor::CommandEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_380_onClear)
HXLINE( 381)		 ::mapeditor::METile oldTile = null();
HXLINE( 382)		::Array< ::Dynamic> tiles = this->meMap->getAllTiles();
HXLINE( 383)		 ::mapeditor::CommandList commandList =  ::mapeditor::CommandList_obj::__alloc( HX_CTX );
HXLINE( 384)		{
HXLINE( 384)			int _g = 0;
HXDLIN( 384)			while((_g < tiles->length)){
HXLINE( 384)				 ::mapeditor::IntPoint tile = tiles->__get(_g).StaticCast<  ::mapeditor::IntPoint >();
HXDLIN( 384)				_g = (_g + 1);
HXLINE( 385)				oldTile = this->meMap->getTile(tile->x,tile->y);
HXLINE( 386)				if (::hx::IsNotNull( oldTile )) {
HXLINE( 387)					commandList->addCommand( ::mapeditor::MEClearCommand_obj::__alloc( HX_CTX ,this->meMap,tile->x,tile->y,oldTile));
            				}
            			}
            		}
HXLINE( 390)		if (commandList->empty()) {
HXLINE( 391)			return;
            		}
HXLINE( 393)		this->commandQueue->addCommandList(commandList);
HXLINE( 394)		this->meMap->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onClear,(void))

bool EditingScreen_obj::tilesContains(::Array< ::Dynamic> arr, ::mapeditor::Tile tile){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_397_tilesContains)
HXLINE( 398)		{
HXLINE( 398)			int _g = 0;
HXDLIN( 398)			while((_g < arr->length)){
HXLINE( 398)				 ::mapeditor::Tile t = arr->__get(_g).StaticCast<  ::mapeditor::Tile >();
HXDLIN( 398)				_g = (_g + 1);
HXLINE( 399)				bool _hx_tmp;
HXDLIN( 399)				bool _hx_tmp1;
HXDLIN( 399)				if ((t->objType == tile->objType)) {
HXLINE( 399)					_hx_tmp1 = (t->tileType == tile->tileType);
            				}
            				else {
HXLINE( 399)					_hx_tmp1 = false;
            				}
HXDLIN( 399)				if (_hx_tmp1) {
HXLINE( 399)					_hx_tmp = (t->regionType == tile->regionType);
            				}
            				else {
HXLINE( 399)					_hx_tmp = false;
            				}
HXDLIN( 399)				if (_hx_tmp) {
HXLINE( 400)					return true;
            				}
            			}
            		}
HXLINE( 402)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(EditingScreen_obj,tilesContains,return )

unsigned short EditingScreen_obj::tilesIndexOf(::Array< ::Dynamic> arr, ::mapeditor::Tile tile){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_405_tilesIndexOf)
HXLINE( 406)		{
HXLINE( 406)			int _g = 0;
HXDLIN( 406)			int _g1 = arr->length;
HXDLIN( 406)			while((_g < _g1)){
HXLINE( 406)				_g = (_g + 1);
HXDLIN( 406)				int i = (_g - 1);
HXLINE( 407)				 ::mapeditor::Tile t = arr->__get(i).StaticCast<  ::mapeditor::Tile >();
HXLINE( 408)				bool _hx_tmp;
HXDLIN( 408)				bool _hx_tmp1;
HXDLIN( 408)				if ((t->objType == tile->objType)) {
HXLINE( 408)					_hx_tmp1 = (t->tileType == tile->tileType);
            				}
            				else {
HXLINE( 408)					_hx_tmp1 = false;
            				}
HXDLIN( 408)				if (_hx_tmp1) {
HXLINE( 408)					_hx_tmp = (t->regionType == tile->regionType);
            				}
            				else {
HXLINE( 408)					_hx_tmp = false;
            				}
HXDLIN( 408)				if (_hx_tmp) {
HXLINE( 409)					return ( (unsigned short)(i) );
            				}
            			}
            		}
HXLINE( 413)		return ( (unsigned short)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(EditingScreen_obj,tilesIndexOf,return )

 ::openfl::utils::ByteArrayData EditingScreen_obj::createMap(){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_416_createMap)
HXLINE( 417)		 ::openfl::geom::Rectangle bounds = this->meMap->getTileBounds();
HXLINE( 418)		if (::hx::IsNull( bounds )) {
HXLINE( 419)			return null();
            		}
HXLINE( 421)		 ::openfl::utils::ByteArrayData byteArray =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 422)		byteArray->writeByte(2);
HXLINE( 423)		byteArray->writeShort(::Std_obj::_hx_int(bounds->x));
HXLINE( 424)		byteArray->writeShort(::Std_obj::_hx_int(bounds->y));
HXLINE( 425)		byteArray->writeShort(::Std_obj::_hx_int(bounds->width));
HXLINE( 426)		byteArray->writeShort(::Std_obj::_hx_int(bounds->height));
HXLINE( 427)		int lenPos = byteArray->position;
HXLINE( 428)		byteArray->writeShort(0);
HXLINE( 429)		::Array< ::Dynamic> tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE( 430)		{
HXLINE( 430)			int _g = ::Std_obj::_hx_int(bounds->y);
HXDLIN( 430)			int _g1 = ::Std_obj::_hx_int(bounds->get_bottom());
HXDLIN( 430)			while((_g < _g1)){
HXLINE( 430)				_g = (_g + 1);
HXDLIN( 430)				int yi = (_g - 1);
HXLINE( 431)				{
HXLINE( 431)					int _g2 = ::Std_obj::_hx_int(bounds->x);
HXDLIN( 431)					int _g3 = ::Std_obj::_hx_int(bounds->get_right());
HXDLIN( 431)					while((_g2 < _g3)){
HXLINE( 431)						_g2 = (_g2 + 1);
HXLINE( 432)						 ::mapeditor::METile meTile = this->meMap->getTile((_g2 - 1),yi);
HXLINE( 433)						 ::mapeditor::Tile tile;
HXDLIN( 433)						::Array< int > tile1;
HXDLIN( 433)						if (::hx::IsNotNull( meTile )) {
HXLINE( 433)							tile1 = meTile->types;
            						}
            						else {
HXLINE( 433)							tile1 = null();
            						}
HXDLIN( 433)						if (::hx::IsNull( tile1 )) {
HXLINE( 433)							tile =  ::mapeditor::Tile_obj::__alloc( HX_CTX ,( (unsigned short)(65535) ),( (unsigned short)(65535) ),( (unsigned char)(255) ));
            						}
            						else {
HXLINE( 433)							tile =  ::mapeditor::Tile_obj::__alloc( HX_CTX ,( (unsigned short)(meTile->types->__get(0)) ),( (unsigned short)(meTile->types->__get(1)) ),( (unsigned char)(meTile->types->__get(2)) ));
            						}
HXLINE( 435)						if (!(this->tilesContains(tiles,tile))) {
HXLINE( 436)							tiles->push(tile);
HXLINE( 437)							byteArray->writeShort(( (int)(tile->tileType) ));
HXLINE( 438)							byteArray->writeShort(( (int)(tile->objType) ));
HXLINE( 439)							byteArray->writeByte(( (int)(tile->regionType) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 442)		int prevPos = byteArray->position;
HXLINE( 443)		byteArray->position = lenPos;
HXLINE( 444)		byteArray->writeShort(tiles->length);
HXLINE( 445)		byteArray->position = prevPos;
HXLINE( 446)		bool byteWrite = (tiles->length <= 256);
HXLINE( 447)		{
HXLINE( 447)			int _g4 = ::Std_obj::_hx_int(bounds->y);
HXDLIN( 447)			int _g5 = ::Std_obj::_hx_int(bounds->get_bottom());
HXDLIN( 447)			while((_g4 < _g5)){
HXLINE( 447)				_g4 = (_g4 + 1);
HXDLIN( 447)				int yi1 = (_g4 - 1);
HXLINE( 448)				{
HXLINE( 448)					int _g6 = ::Std_obj::_hx_int(bounds->x);
HXDLIN( 448)					int _g7 = ::Std_obj::_hx_int(bounds->get_right());
HXDLIN( 448)					while((_g6 < _g7)){
HXLINE( 448)						_g6 = (_g6 + 1);
HXLINE( 449)						 ::mapeditor::METile meTile1 = this->meMap->getTile((_g6 - 1),yi1);
HXLINE( 450)						 ::mapeditor::Tile tile2;
HXDLIN( 450)						::Array< int > tile3;
HXDLIN( 450)						if (::hx::IsNotNull( meTile1 )) {
HXLINE( 450)							tile3 = meTile1->types;
            						}
            						else {
HXLINE( 450)							tile3 = null();
            						}
HXDLIN( 450)						if (::hx::IsNull( tile3 )) {
HXLINE( 450)							tile2 =  ::mapeditor::Tile_obj::__alloc( HX_CTX ,( (unsigned short)(65535) ),( (unsigned short)(65535) ),( (unsigned char)(255) ));
            						}
            						else {
HXLINE( 450)							tile2 =  ::mapeditor::Tile_obj::__alloc( HX_CTX ,( (unsigned short)(meTile1->types->__get(0)) ),( (unsigned short)(meTile1->types->__get(1)) ),( (unsigned char)(meTile1->types->__get(2)) ));
            						}
HXLINE( 452)						unsigned short idx = this->tilesIndexOf(tiles,tile2);
HXLINE( 453)						if (byteWrite) {
HXLINE( 454)							byteArray->writeByte(( (int)(idx) ));
            						}
            						else {
HXLINE( 456)							byteArray->writeShort(( (int)(idx) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 458)		{
HXLINE( 458)			 ::Dynamic algorithm = null();
HXDLIN( 458)			byteArray->compress(algorithm);
            		}
HXLINE( 459)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditingScreen_obj,createMap,return )

void EditingScreen_obj::onSave( ::mapeditor::CommandEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_462_onSave)
HXLINE( 463)		 ::openfl::utils::ByteArrayData mapJSON = this->createMap();
HXLINE( 464)		if (::hx::IsNull( mapJSON )) {
HXLINE( 465)			return;
            		}
HXLINE( 467)		 ::openfl::net::FileReference_obj::__alloc( HX_CTX )->save(mapJSON,HX_("map.fm",d9,bf,ef,b8));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onSave,(void))

void EditingScreen_obj::onLoad( ::mapeditor::CommandEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_470_onLoad)
HXLINE( 471)		this->loadedFile =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE( 472)		this->loadedFile->addEventListener(HX_("select",fc,1a,33,6a),this->onFileBrowseSelect_dyn(),null(),null(),null());
HXLINE( 473)		this->loadedFile->browse(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("Faer Map (*.fm) or JSON Map (*.jm)",c7,e3,71,a4),HX_("*.fm;*.jm",57,d5,a9,1d),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onLoad,(void))

void EditingScreen_obj::onFileBrowseSelect( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_476_onFileBrowseSelect)
HXLINE( 477)		 ::openfl::net::FileReference loadedFile = ::hx::TCast<  ::openfl::net::FileReference >::cast(event->target);
HXLINE( 478)		loadedFile->addEventListener(HX_("complete",b9,00,c8,7f),this->onFileLoadComplete_dyn(),null(),null(),null());
HXLINE( 479)		loadedFile->addEventListener(HX_("ioError",02,fe,41,76),this->onFileLoadIOError_dyn(),null(),null(),null());
HXLINE( 480)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 481)			loadedFile->load();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 482)				 ::haxe::Exception _g1 = ::haxe::Exception_obj::caught(_g);
HXDLIN( 482)				{
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            					void _hx_run( ::openfl::events::Event _){
            						HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_485_onFileBrowseSelect)
HXLINE( 485)						::Global_obj::layers->dialogs->closeDialogs();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 483)					 ::ui::dialogs::Dialog dialog =  ::ui::dialogs::Dialog_obj::__alloc( HX_CTX ,(HX_("",00,00,00,00) + _g1->details()),HX_("File Load Error",52,01,78,58),HX_("Close",98,87,90,db),null());
HXLINE( 484)					dialog->addEventListener(HX_("DIALOG_BUTTON1",48,38,81,e9), ::Dynamic(new _hx_Closure_0()),null(),null(),null());
HXLINE( 487)					::Global_obj::layers->dialogs->openDialog(dialog);
HXLINE( 488)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 488)					::String _hx_tmp1 = ((HX_("File load error: ",78,38,15,d2) + _g1->details()) + HX_(", stack trace: ",9f,40,6c,1b));
HXDLIN( 488)					::Array< ::Dynamic> tmp = _g1->get_stack();
HXDLIN( 488)					::String _hx_tmp2;
HXDLIN( 488)					if (::hx::IsNull( tmp )) {
HXLINE( 488)						_hx_tmp2 = HX_("null",87,9e,0e,49);
            					}
            					else {
HXLINE( 488)						_hx_tmp2 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            					}
HXDLIN( 488)					_hx_tmp((_hx_tmp1 + _hx_tmp2),::hx::SourceInfo(HX_("src/mapeditor/EditingScreen.hx",0b,7c,1d,9b),488,HX_("mapeditor.EditingScreen",9f,f8,09,ec),HX_("onFileBrowseSelect",01,c0,d9,f3)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onFileBrowseSelect,(void))

void EditingScreen_obj::onFileLoadComplete( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_492_onFileLoadComplete)
HXLINE( 493)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 494)			 ::openfl::net::FileReference fileRef = ( ( ::openfl::net::FileReference)(event->target) );
HXLINE( 495)			 ::openfl::utils::ByteArrayData data = fileRef->data;
HXLINE( 497)			::Array< ::String > split = fileRef->get_name().split(HX_(".",2e,00,00,00));
HXLINE( 498)			if ((split->length < 2)) {
HXLINE( 499)				return;
            			}
HXLINE( 501)			this->meMap->clear();
HXLINE( 502)			this->commandQueue->clear();
HXLINE( 504)			::String ext = split->__get(1);
HXLINE( 505)			if ((ext == HX_("fm",47,59,00,00))) {
HXLINE( 506)				{
HXLINE( 506)					 ::Dynamic algorithm = null();
HXDLIN( 506)					data->uncompress(algorithm);
            				}
HXLINE( 508)				unsigned char _hx_switch_0 = ( (unsigned char)(data->readUnsignedByte()) );
            				if (  (_hx_switch_0==( (unsigned char)(1) )) ){
HXLINE( 510)					unsigned short xStart = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE( 511)					unsigned short yStart = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE( 512)					unsigned short w = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE( 515)					{
HXLINE( 515)						int _g = ( (int)(yStart) );
HXDLIN( 515)						int _g1 = ( (int)((yStart + ( (unsigned short)(data->readUnsignedShort()) ))) );
HXDLIN( 515)						while((_g < _g1)){
HXLINE( 515)							_g = (_g + 1);
HXDLIN( 515)							int y = (_g - 1);
HXLINE( 516)							{
HXLINE( 516)								int _g2 = ( (int)(xStart) );
HXDLIN( 516)								int _g3 = ( (int)((xStart + w)) );
HXDLIN( 516)								while((_g2 < _g3)){
HXLINE( 516)									_g2 = (_g2 + 1);
HXDLIN( 516)									int x = (_g2 - 1);
HXLINE( 517)									 ::mapeditor::MEMap _hx_tmp = this->meMap;
HXDLIN( 517)									_hx_tmp->modifyTile(x,y,0,data->readUnsignedShort());
HXLINE( 518)									 ::mapeditor::MEMap _hx_tmp1 = this->meMap;
HXDLIN( 518)									_hx_tmp1->modifyTile(x,y,1,data->readUnsignedShort());
HXLINE( 519)									 ::mapeditor::MEMap _hx_tmp2 = this->meMap;
HXDLIN( 519)									_hx_tmp2->modifyTile(x,y,2,data->readUnsignedByte());
            								}
            							}
            						}
            					}
HXLINE( 509)					goto _hx_goto_42;
            				}
            				if (  (_hx_switch_0==( (unsigned char)(2) )) ){
HXLINE( 522)					unsigned short xStart1 = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE( 523)					unsigned short yStart1 = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE( 524)					unsigned short w1 = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE( 525)					unsigned short h = ( (unsigned short)(data->readUnsignedShort()) );
HXLINE( 526)					::Array< ::Dynamic> tiles = ::Array_obj< ::Dynamic>::__new(data->readUnsignedShort());
HXLINE( 527)					{
HXLINE( 527)						int _g4 = 0;
HXDLIN( 527)						int _g5 = tiles->length;
HXDLIN( 527)						while((_g4 < _g5)){
HXLINE( 527)							_g4 = (_g4 + 1);
HXLINE( 528)							{
HXLINE( 528)								int val = data->readUnsignedShort();
HXDLIN( 528)								int val1 = data->readUnsignedShort();
HXDLIN( 528)								 ::mapeditor::Tile val2 =  ::mapeditor::Tile_obj::__alloc( HX_CTX ,( (unsigned short)(val) ),( (unsigned short)(val1) ),( (unsigned char)(data->readUnsignedByte()) ));
HXDLIN( 528)								tiles->__unsafe_set((_g4 - 1),val2);
            							}
            						}
            					}
HXLINE( 530)					bool byteLength = (tiles->length <= 256);
HXLINE( 531)					{
HXLINE( 531)						int _g6 = ( (int)(yStart1) );
HXDLIN( 531)						int _g7 = ( (int)((yStart1 + h)) );
HXDLIN( 531)						while((_g6 < _g7)){
HXLINE( 531)							_g6 = (_g6 + 1);
HXDLIN( 531)							int y1 = (_g6 - 1);
HXLINE( 532)							{
HXLINE( 532)								int _g8 = ( (int)(xStart1) );
HXDLIN( 532)								int _g9 = ( (int)((xStart1 + w1)) );
HXDLIN( 532)								while((_g8 < _g9)){
HXLINE( 532)									_g8 = (_g8 + 1);
HXDLIN( 532)									int x1 = (_g8 - 1);
HXLINE( 533)									int idx;
HXDLIN( 533)									if (byteLength) {
HXLINE( 533)										idx = data->readUnsignedByte();
            									}
            									else {
HXLINE( 533)										idx = data->readUnsignedShort();
            									}
HXLINE( 534)									 ::mapeditor::Tile tile = ( ( ::mapeditor::Tile)(_hx_array_unsafe_get(tiles,idx)) );
HXLINE( 535)									this->meMap->modifyTile(x1,y1,0,( (int)(tile->tileType) ));
HXLINE( 536)									this->meMap->modifyTile(x1,y1,1,( (int)(tile->objType) ));
HXLINE( 537)									this->meMap->modifyTile(x1,y1,2,( (int)(tile->regionType) ));
            								}
            							}
            						}
            					}
HXLINE( 521)					goto _hx_goto_42;
            				}
            				/* default */{
HXLINE( 540)					HX_STACK_DO_THROW( ::haxe::ValueException_obj::__alloc( HX_CTX ,HX_("Version not supported",b9,8d,84,03),null(),null()));
            				}
            				_hx_goto_42:;
            			}
            			else {
HXLINE( 542)				if ((ext == HX_("jm",c3,5c,00,00))) {
HXLINE( 543)					 ::Dynamic jm;
HXLINE( 544)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 545)						jm =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data->toString())->doParse();
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g10 = _hx_e;
HXLINE( 546)							 ::haxe::Exception _g11 = ::haxe::Exception_obj::caught(_g10);
HXDLIN( 546)							{
            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            								void _hx_run( ::openfl::events::Event _){
            									HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_549_onFileLoadComplete)
HXLINE( 549)									::Global_obj::layers->dialogs->closeDialogs();
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 547)								 ::ui::dialogs::Dialog dialog =  ::ui::dialogs::Dialog_obj::__alloc( HX_CTX ,(HX_("",00,00,00,00) + _g11->details()),HX_("JM Load Error",8b,2e,10,55),HX_("Close",98,87,90,db),null());
HXLINE( 548)								dialog->addEventListener(HX_("DIALOG_BUTTON1",48,38,81,e9), ::Dynamic(new _hx_Closure_0()),null(),null(),null());
HXLINE( 551)								::Global_obj::layers->dialogs->openDialog(dialog);
HXLINE( 552)								 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 552)								::String _hx_tmp4 = ((HX_("JM Load Error: ",f1,59,61,dc) + _g11->details()) + HX_(" ",20,00,00,00));
HXDLIN( 552)								::Array< ::Dynamic> tmp = _g11->get_stack();
HXDLIN( 552)								::String _hx_tmp5;
HXDLIN( 552)								if (::hx::IsNull( tmp )) {
HXLINE( 552)									_hx_tmp5 = HX_("null",87,9e,0e,49);
            								}
            								else {
HXLINE( 552)									_hx_tmp5 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            								}
HXDLIN( 552)								_hx_tmp3((_hx_tmp4 + _hx_tmp5),::hx::SourceInfo(HX_("src/mapeditor/EditingScreen.hx",0b,7c,1d,9b),552,HX_("mapeditor.EditingScreen",9f,f8,09,ec),HX_("onFileLoadComplete",da,7c,cc,77)));
HXLINE( 553)								return;
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 556)					 ::openfl::utils::ByteArrayData bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::crypto::Base64_obj::decode(( (::String)(jm->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic)) ),null()));
HXLINE( 557)					{
HXLINE( 557)						 ::Dynamic algorithm1 = null();
HXDLIN( 557)						bytes->uncompress(algorithm1);
            					}
HXLINE( 558)					{
HXLINE( 558)						int _g12 = 0;
HXDLIN( 558)						int _g13 = ( (int)(jm->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
HXDLIN( 558)						while((_g12 < _g13)){
HXLINE( 558)							_g12 = (_g12 + 1);
HXDLIN( 558)							int yi = (_g12 - 1);
HXLINE( 559)							{
HXLINE( 559)								int _g14 = 0;
HXDLIN( 559)								int _g15 = ( (int)(jm->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
HXDLIN( 559)								while((_g14 < _g15)){
HXLINE( 559)									_g14 = (_g14 + 1);
HXDLIN( 559)									int xi = (_g14 - 1);
HXLINE( 560)									int bas = bytes->readShort();
HXLINE( 561)									 ::Dynamic entry =  ::Dynamic(jm->__Field(HX_("dict",76,59,69,42),::hx::paccDynamic))->__GetItem(bas);
HXLINE( 562)									bool _hx_tmp6;
HXDLIN( 562)									bool _hx_tmp7;
HXDLIN( 562)									bool _hx_tmp8;
HXDLIN( 562)									if ((xi >= 0)) {
HXLINE( 562)										_hx_tmp8 = (xi >= 256);
            									}
            									else {
HXLINE( 562)										_hx_tmp8 = true;
            									}
HXDLIN( 562)									if (!(_hx_tmp8)) {
HXLINE( 562)										_hx_tmp7 = (yi < 0);
            									}
            									else {
HXLINE( 562)										_hx_tmp7 = true;
            									}
HXDLIN( 562)									if (!(_hx_tmp7)) {
HXLINE( 562)										_hx_tmp6 = (yi >= 256);
            									}
            									else {
HXLINE( 562)										_hx_tmp6 = true;
            									}
HXDLIN( 562)									if (!(_hx_tmp6)) {
HXLINE( 563)										 ::Dynamic this1 = entry;
HXDLIN( 563)										bool _hx_tmp9;
HXDLIN( 563)										if (::hx::IsNotNull( this1 )) {
HXLINE( 563)											_hx_tmp9 = ::Reflect_obj::hasField(this1,HX_("ground",87,22,28,1c));
            										}
            										else {
HXLINE( 563)											_hx_tmp9 = false;
            										}
HXDLIN( 563)										if (_hx_tmp9) {
HXLINE( 564)											 ::mapeditor::MEMap _hx_tmp10 = this->meMap;
HXDLIN( 564)											 ::haxe::ds::StringMap tmp1 = ::map::GroundLibrary_obj::idToType;
HXDLIN( 564)											 ::Dynamic this2 = ::openfl::utils::_Object::Object_Impl__obj::__get(entry,HX_("ground",87,22,28,1c));
HXDLIN( 564)											::String tmp2;
HXDLIN( 564)											if (::hx::IsNull( this2 )) {
HXLINE( 564)												tmp2 = null();
            											}
            											else {
HXLINE( 564)												tmp2 = ::Std_obj::string(this2);
            											}
HXDLIN( 564)											 ::Dynamic tmp3 = tmp1->get(tmp2);
HXDLIN( 564)											int _hx_tmp11;
HXDLIN( 564)											if (::hx::IsNotNull( tmp3 )) {
HXLINE( 564)												_hx_tmp11 = ( (int)(tmp3) );
            											}
            											else {
HXLINE( 564)												_hx_tmp11 = 65535;
            											}
HXDLIN( 564)											_hx_tmp10->modifyTile(xi,yi,0,_hx_tmp11);
            										}
            										else {
HXLINE( 566)											this->meMap->modifyTile(xi,yi,0,65535);
            										}
HXLINE( 568)										 ::Dynamic this3 = entry;
HXDLIN( 568)										bool _hx_tmp12;
HXDLIN( 568)										if (::hx::IsNotNull( this3 )) {
HXLINE( 568)											_hx_tmp12 = ::Reflect_obj::hasField(this3,HX_("objs",9c,68,a9,49));
            										}
            										else {
HXLINE( 568)											_hx_tmp12 = false;
            										}
HXDLIN( 568)										if (_hx_tmp12) {
HXLINE( 569)											::cpp::VirtualArray objs = ( (::cpp::VirtualArray)(::openfl::utils::_Object::Object_Impl__obj::__get(entry,HX_("objs",9c,68,a9,49))) );
HXLINE( 570)											{
HXLINE( 570)												int _g16 = 0;
HXDLIN( 570)												while((_g16 < objs->get_length())){
HXLINE( 570)													 ::Dynamic obj = objs->__get(_g16);
HXDLIN( 570)													_g16 = (_g16 + 1);
HXLINE( 571)													 ::mapeditor::MEMap _hx_tmp13 = this->meMap;
HXDLIN( 571)													 ::haxe::ds::StringMap tmp4 = ::objects::ObjectLibrary_obj::idToType;
HXDLIN( 571)													 ::Dynamic this4 = ::openfl::utils::_Object::Object_Impl__obj::__get(obj,HX_("id",db,5b,00,00));
HXDLIN( 571)													::String tmp5;
HXDLIN( 571)													if (::hx::IsNull( this4 )) {
HXLINE( 571)														tmp5 = null();
            													}
            													else {
HXLINE( 571)														tmp5 = ::Std_obj::string(this4);
            													}
HXDLIN( 571)													 ::Dynamic tmp6 = tmp4->get(tmp5);
HXDLIN( 571)													int _hx_tmp14;
HXDLIN( 571)													if (::hx::IsNotNull( tmp6 )) {
HXLINE( 571)														_hx_tmp14 = ( (int)(tmp6) );
            													}
            													else {
HXLINE( 571)														_hx_tmp14 = 65535;
            													}
HXDLIN( 571)													_hx_tmp13->modifyTile(xi,yi,1,_hx_tmp14);
            												}
            											}
            										}
            										else {
HXLINE( 573)											this->meMap->modifyTile(xi,yi,1,65535);
            										}
HXLINE( 575)										 ::Dynamic this5 = entry;
HXDLIN( 575)										bool _hx_tmp15;
HXDLIN( 575)										if (::hx::IsNotNull( this5 )) {
HXLINE( 575)											_hx_tmp15 = ::Reflect_obj::hasField(this5,HX_("regions",ff,14,9c,7a));
            										}
            										else {
HXLINE( 575)											_hx_tmp15 = false;
            										}
HXDLIN( 575)										if (_hx_tmp15) {
HXLINE( 576)											::cpp::VirtualArray regions = ( (::cpp::VirtualArray)(::openfl::utils::_Object::Object_Impl__obj::__get(entry,HX_("regions",ff,14,9c,7a))) );
HXLINE( 577)											{
HXLINE( 577)												int _g17 = 0;
HXDLIN( 577)												while((_g17 < regions->get_length())){
HXLINE( 577)													 ::Dynamic region = regions->__get(_g17);
HXDLIN( 577)													_g17 = (_g17 + 1);
HXLINE( 578)													 ::mapeditor::MEMap _hx_tmp16 = this->meMap;
HXDLIN( 578)													 ::haxe::ds::StringMap tmp7 = ::map::RegionLibrary_obj::idToType;
HXDLIN( 578)													 ::Dynamic this6 = ::openfl::utils::_Object::Object_Impl__obj::__get(region,HX_("id",db,5b,00,00));
HXDLIN( 578)													::String tmp8;
HXDLIN( 578)													if (::hx::IsNull( this6 )) {
HXLINE( 578)														tmp8 = null();
            													}
            													else {
HXLINE( 578)														tmp8 = ::Std_obj::string(this6);
            													}
HXDLIN( 578)													 ::Dynamic tmp9 = tmp7->get(tmp8);
HXDLIN( 578)													int _hx_tmp17;
HXDLIN( 578)													if (::hx::IsNotNull( tmp9 )) {
HXLINE( 578)														_hx_tmp17 = ( (int)(tmp9) );
            													}
            													else {
HXLINE( 578)														_hx_tmp17 = 255;
            													}
HXDLIN( 578)													_hx_tmp16->modifyTile(xi,yi,2,_hx_tmp17);
            												}
            											}
            										}
            										else {
HXLINE( 580)											this->meMap->modifyTile(xi,yi,2,255);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g18 = _hx_e;
HXLINE( 584)				 ::haxe::Exception _g19 = ::haxe::Exception_obj::caught(_g18);
HXLINE( 585)				{
HXLINE( 585)					 ::Dynamic _hx_tmp18 = ::haxe::Log_obj::trace;
HXDLIN( 585)					::String _hx_tmp19 = ((HX_("Error: ",4e,a8,5b,b7) + ::Std_obj::string(_g19)) + HX_(", stack trace: ",9f,40,6c,1b));
HXDLIN( 585)					::Array< ::Dynamic> tmp10 = _g19->get_stack();
HXDLIN( 585)					::String _hx_tmp20;
HXDLIN( 585)					if (::hx::IsNull( tmp10 )) {
HXLINE( 585)						_hx_tmp20 = HX_("null",87,9e,0e,49);
            					}
            					else {
HXLINE( 585)						_hx_tmp20 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp10);
            					}
HXDLIN( 585)					_hx_tmp18((_hx_tmp19 + _hx_tmp20),::hx::SourceInfo(HX_("src/mapeditor/EditingScreen.hx",0b,7c,1d,9b),585,HX_("mapeditor.EditingScreen",9f,f8,09,ec),HX_("onFileLoadComplete",da,7c,cc,77)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 588)		this->meMap->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onFileLoadComplete,(void))

void EditingScreen_obj::onFileLoadIOError( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4d50749e2c3cb994_592_onFileLoadIOError)
HXDLIN( 592)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 592)		::String _hx_tmp1 = (HX_("error: ",6e,80,0a,ea) + ::Std_obj::string(event));
HXDLIN( 592)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/mapeditor/EditingScreen.hx",0b,7c,1d,9b),592,HX_("mapeditor.EditingScreen",9f,f8,09,ec),HX_("onFileLoadIOError",21,95,b0,b1)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onFileLoadIOError,(void))

void EditingScreen_obj::onTest( ::openfl::events::Event _){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_595_onTest)
HXLINE( 596)		::Array< ::Dynamic> savedChars = ::Global_obj::playerModel->getSavedCharacters();
HXLINE( 597)		bool _hx_tmp;
HXDLIN( 597)		if (::hx::IsNotNull( savedChars )) {
HXLINE( 597)			_hx_tmp = (savedChars->length == 0);
            		}
            		else {
HXLINE( 597)			_hx_tmp = true;
            		}
HXDLIN( 597)		if (_hx_tmp) {
HXLINE( 598)			return;
            		}
HXLINE( 600)		::Global_obj::layers->tooltips->hide();
HXLINE( 602)		 ::game::model::GameInitData data =  ::game::model::GameInitData_obj::__alloc( HX_CTX );
HXLINE( 603)		data->charId = ( (int)(savedChars->__get(0).StaticCast<  ::appengine::SavedCharacter >()->charId()) );
HXLINE( 604)		data->fmMap = this->createMap();
HXLINE( 605)		::Global_obj::playGame(data);
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onTest,(void))

void EditingScreen_obj::onQuit( ::openfl::events::Event _){
            	HX_GC_STACKFRAME(&_hx_pos_4d50749e2c3cb994_608_onQuit)
HXLINE( 609)		::Global_obj::layers->tooltips->hide();
HXLINE( 611)		this->meMap->fullMap->dispose();
HXLINE( 612)		this->meMap->map->dispose();
HXLINE( 613)		this->meMap->regionMap->dispose();
HXLINE( 614)		this->meMap->invisibleTexture->dispose();
HXLINE( 615)		this->meMap->replaceTexture->dispose();
HXLINE( 617)		 ::core::ScreensView _hx_tmp = ::Global_obj::layers->screens;
HXDLIN( 617)		_hx_tmp->setScreen( ::ui::view::TitleView_obj::__alloc( HX_CTX ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditingScreen_obj,onQuit,(void))


::hx::ObjectPtr< EditingScreen_obj > EditingScreen_obj::__new() {
	::hx::ObjectPtr< EditingScreen_obj > __this = new EditingScreen_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< EditingScreen_obj > EditingScreen_obj::__alloc(::hx::Ctx *_hx_ctx) {
	EditingScreen_obj *__this = (EditingScreen_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EditingScreen_obj), true, "mapeditor.EditingScreen"));
	*(void **)__this = EditingScreen_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EditingScreen_obj::EditingScreen_obj()
{
}

void EditingScreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EditingScreen);
	HX_MARK_MEMBER_NAME(commandMenu,"commandMenu");
	HX_MARK_MEMBER_NAME(meMap,"meMap");
	HX_MARK_MEMBER_NAME(infoPane,"infoPane");
	HX_MARK_MEMBER_NAME(brushSize,"brushSize");
	HX_MARK_MEMBER_NAME(randomChance,"randomChance");
	HX_MARK_MEMBER_NAME(searchBar,"searchBar");
	HX_MARK_MEMBER_NAME(chooserDropDown,"chooserDropDown");
	HX_MARK_MEMBER_NAME(groundChooser,"groundChooser");
	HX_MARK_MEMBER_NAME(objChooser,"objChooser");
	HX_MARK_MEMBER_NAME(regionChooser,"regionChooser");
	HX_MARK_MEMBER_NAME(chooser,"chooser");
	HX_MARK_MEMBER_NAME(commandQueue,"commandQueue");
	HX_MARK_MEMBER_NAME(loadedFile,"loadedFile");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EditingScreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(commandMenu,"commandMenu");
	HX_VISIT_MEMBER_NAME(meMap,"meMap");
	HX_VISIT_MEMBER_NAME(infoPane,"infoPane");
	HX_VISIT_MEMBER_NAME(brushSize,"brushSize");
	HX_VISIT_MEMBER_NAME(randomChance,"randomChance");
	HX_VISIT_MEMBER_NAME(searchBar,"searchBar");
	HX_VISIT_MEMBER_NAME(chooserDropDown,"chooserDropDown");
	HX_VISIT_MEMBER_NAME(groundChooser,"groundChooser");
	HX_VISIT_MEMBER_NAME(objChooser,"objChooser");
	HX_VISIT_MEMBER_NAME(regionChooser,"regionChooser");
	HX_VISIT_MEMBER_NAME(chooser,"chooser");
	HX_VISIT_MEMBER_NAME(commandQueue,"commandQueue");
	HX_VISIT_MEMBER_NAME(loadedFile,"loadedFile");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EditingScreen_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"meMap") ) { return ::hx::Val( meMap ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onUndo") ) { return ::hx::Val( onUndo_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRedo") ) { return ::hx::Val( onRedo_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSave") ) { return ::hx::Val( onSave_dyn() ); }
		if (HX_FIELD_EQ(inName,"onLoad") ) { return ::hx::Val( onLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTest") ) { return ::hx::Val( onTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"onQuit") ) { return ::hx::Val( onQuit_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"chooser") ) { return ::hx::Val( chooser ); }
		if (HX_FIELD_EQ(inName,"onClear") ) { return ::hx::Val( onClear_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoPane") ) { return ::hx::Val( infoPane ); }
		if (HX_FIELD_EQ(inName,"inRadius") ) { return ::hx::Val( inRadius_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"brushSize") ) { return ::hx::Val( brushSize ); }
		if (HX_FIELD_EQ(inName,"searchBar") ) { return ::hx::Val( searchBar ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return ::hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"editTiles") ) { return ::hx::Val( editTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"createMap") ) { return ::hx::Val( createMap_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objChooser") ) { return ::hx::Val( objChooser ); }
		if (HX_FIELD_EQ(inName,"loadedFile") ) { return ::hx::Val( loadedFile ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"commandMenu") ) { return ::hx::Val( commandMenu ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"randomChance") ) { return ::hx::Val( randomChance ); }
		if (HX_FIELD_EQ(inName,"commandQueue") ) { return ::hx::Val( commandQueue ); }
		if (HX_FIELD_EQ(inName,"tilesIndexOf") ) { return ::hx::Val( tilesIndexOf_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"groundChooser") ) { return ::hx::Val( groundChooser ); }
		if (HX_FIELD_EQ(inName,"regionChooser") ) { return ::hx::Val( regionChooser ); }
		if (HX_FIELD_EQ(inName,"ipArrContains") ) { return ::hx::Val( ipArrContains_dyn() ); }
		if (HX_FIELD_EQ(inName,"tilesContains") ) { return ::hx::Val( tilesContains_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"chooserDropDown") ) { return ::hx::Val( chooserDropDown ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onDropDownChange") ) { return ::hx::Val( onDropDownChange_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onFileLoadIOError") ) { return ::hx::Val( onFileLoadIOError_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onFileBrowseSelect") ) { return ::hx::Val( onFileBrowseSelect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFileLoadComplete") ) { return ::hx::Val( onFileLoadComplete_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"addModifyCommandList") ) { return ::hx::Val( addModifyCommandList_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EditingScreen_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"meMap") ) { meMap=inValue.Cast<  ::mapeditor::MEMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"chooser") ) { chooser=inValue.Cast<  ::mapeditor::Chooser >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoPane") ) { infoPane=inValue.Cast<  ::mapeditor::InfoPane >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"brushSize") ) { brushSize=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"searchBar") ) { searchBar=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objChooser") ) { objChooser=inValue.Cast<  ::mapeditor::ObjectChooser >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loadedFile") ) { loadedFile=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"commandMenu") ) { commandMenu=inValue.Cast<  ::mapeditor::MECommandMenu >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"randomChance") ) { randomChance=inValue.Cast<  ::ui::TextInputField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"commandQueue") ) { commandQueue=inValue.Cast<  ::mapeditor::CommandQueue >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"groundChooser") ) { groundChooser=inValue.Cast<  ::mapeditor::GroundChooser >(); return inValue; }
		if (HX_FIELD_EQ(inName,"regionChooser") ) { regionChooser=inValue.Cast<  ::mapeditor::RegionChooser >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"chooserDropDown") ) { chooserDropDown=inValue.Cast<  ::ui::dropdown::DropDown >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EditingScreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("commandMenu",8a,e4,b9,e5));
	outFields->push(HX_("meMap",24,8a,aa,05));
	outFields->push(HX_("infoPane",f6,13,f6,3a));
	outFields->push(HX_("brushSize",5b,ea,13,4e));
	outFields->push(HX_("randomChance",57,08,5c,8f));
	outFields->push(HX_("searchBar",4b,5b,46,ef));
	outFields->push(HX_("chooserDropDown",0c,31,b6,e6));
	outFields->push(HX_("groundChooser",f4,95,06,c0));
	outFields->push(HX_("objChooser",84,b6,03,7a));
	outFields->push(HX_("regionChooser",27,4f,0c,6d));
	outFields->push(HX_("chooser",bb,21,1b,dd));
	outFields->push(HX_("commandQueue",46,fc,14,75));
	outFields->push(HX_("loadedFile",21,29,49,a5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EditingScreen_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::mapeditor::MECommandMenu */ ,(int)offsetof(EditingScreen_obj,commandMenu),HX_("commandMenu",8a,e4,b9,e5)},
	{::hx::fsObject /*  ::mapeditor::MEMap */ ,(int)offsetof(EditingScreen_obj,meMap),HX_("meMap",24,8a,aa,05)},
	{::hx::fsObject /*  ::mapeditor::InfoPane */ ,(int)offsetof(EditingScreen_obj,infoPane),HX_("infoPane",f6,13,f6,3a)},
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(EditingScreen_obj,brushSize),HX_("brushSize",5b,ea,13,4e)},
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(EditingScreen_obj,randomChance),HX_("randomChance",57,08,5c,8f)},
	{::hx::fsObject /*  ::ui::TextInputField */ ,(int)offsetof(EditingScreen_obj,searchBar),HX_("searchBar",4b,5b,46,ef)},
	{::hx::fsObject /*  ::ui::dropdown::DropDown */ ,(int)offsetof(EditingScreen_obj,chooserDropDown),HX_("chooserDropDown",0c,31,b6,e6)},
	{::hx::fsObject /*  ::mapeditor::GroundChooser */ ,(int)offsetof(EditingScreen_obj,groundChooser),HX_("groundChooser",f4,95,06,c0)},
	{::hx::fsObject /*  ::mapeditor::ObjectChooser */ ,(int)offsetof(EditingScreen_obj,objChooser),HX_("objChooser",84,b6,03,7a)},
	{::hx::fsObject /*  ::mapeditor::RegionChooser */ ,(int)offsetof(EditingScreen_obj,regionChooser),HX_("regionChooser",27,4f,0c,6d)},
	{::hx::fsObject /*  ::mapeditor::Chooser */ ,(int)offsetof(EditingScreen_obj,chooser),HX_("chooser",bb,21,1b,dd)},
	{::hx::fsObject /*  ::mapeditor::CommandQueue */ ,(int)offsetof(EditingScreen_obj,commandQueue),HX_("commandQueue",46,fc,14,75)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(EditingScreen_obj,loadedFile),HX_("loadedFile",21,29,49,a5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EditingScreen_obj_sStaticStorageInfo = 0;
#endif

static ::String EditingScreen_obj_sMemberFields[] = {
	HX_("commandMenu",8a,e4,b9,e5),
	HX_("meMap",24,8a,aa,05),
	HX_("infoPane",f6,13,f6,3a),
	HX_("brushSize",5b,ea,13,4e),
	HX_("randomChance",57,08,5c,8f),
	HX_("searchBar",4b,5b,46,ef),
	HX_("chooserDropDown",0c,31,b6,e6),
	HX_("groundChooser",f4,95,06,c0),
	HX_("objChooser",84,b6,03,7a),
	HX_("regionChooser",27,4f,0c,6d),
	HX_("chooser",bb,21,1b,dd),
	HX_("commandQueue",46,fc,14,75),
	HX_("loadedFile",21,29,49,a5),
	HX_("onKeyDown",42,22,f2,73),
	HX_("ipArrContains",f9,e4,03,af),
	HX_("inRadius",17,1a,75,39),
	HX_("editTiles",1b,ff,08,a4),
	HX_("addModifyCommandList",8e,55,54,68),
	HX_("onDropDownChange",00,6e,39,f6),
	HX_("onUndo",e3,ce,33,f0),
	HX_("onRedo",bd,56,31,ee),
	HX_("onClear",ee,0f,99,de),
	HX_("tilesContains",c4,a0,92,96),
	HX_("tilesIndexOf",c4,5d,5a,5e),
	HX_("createMap",00,e1,e0,49),
	HX_("onSave",fc,93,d7,ee),
	HX_("onLoad",e5,a2,41,ea),
	HX_("onFileBrowseSelect",01,c0,d9,f3),
	HX_("onFileLoadComplete",da,7c,cc,77),
	HX_("onFileLoadIOError",21,95,b0,b1),
	HX_("onTest",11,d1,83,ef),
	HX_("onQuit",8e,48,94,ed),
	::String(null()) };

::hx::Class EditingScreen_obj::__mClass;

void EditingScreen_obj::__register()
{
	EditingScreen_obj _hx_dummy;
	EditingScreen_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.EditingScreen",9f,f8,09,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EditingScreen_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EditingScreen_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EditingScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EditingScreen_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
