// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_0e0693b5ce2fed3b
#define INCLUDED_0e0693b5ce2fed3b
#include "discord_register.h"
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_mapeditor_EditingScreen
#include <mapeditor/EditingScreen.h>
#endif
#ifndef INCLUDED_mapeditor_MapEditor
#include <mapeditor/MapEditor.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_04a0ac6eb1cab669_17_new,"mapeditor.MapEditor","new",0x153168d6,"mapeditor.MapEditor.new","mapeditor/MapEditor.hx",17,0x83d680db)
namespace mapeditor{

void MapEditor_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_04a0ac6eb1cab669_17_new)
HXLINE(  18)		super::__construct();
HXLINE(  20)		this->editingScreen =  ::mapeditor::EditingScreen_obj::__alloc( HX_CTX );
HXLINE(  21)		this->addChild(this->editingScreen);
HXLINE(  24)		if (::Main_obj::rpcReady) {
HXLINE(  25)			 DiscordRichPresence discordPresence = DiscordRichPresence();
HXLINE(  26)			discordPresence.state = HX_("Map Editor",f1,52,11,6d).utf8_str();
HXLINE(  27)			discordPresence.details = HX_("",00,00,00,00).utf8_str();
HXLINE(  28)			discordPresence.largeImageKey = HX_("logo",6b,9f,b7,47).utf8_str();
HXLINE(  29)			discordPresence.largeImageText = (HX_("v",76,00,00,00) + HX_("0.5",77,94,24,00)).utf8_str();
HXLINE(  30)			discordPresence.startTimestamp = ( (::cpp::Int64)(::Main_obj::startTime) );
HXLINE(  31)			Discord_UpdatePresence(&(discordPresence));
            		}
            	}

Dynamic MapEditor_obj::__CreateEmpty() { return new MapEditor_obj; }

void *MapEditor_obj::_hx_vtable = 0;

Dynamic MapEditor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MapEditor_obj > _hx_result = new MapEditor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MapEditor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d61bea0) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1d61bea0;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}


::hx::ObjectPtr< MapEditor_obj > MapEditor_obj::__new() {
	::hx::ObjectPtr< MapEditor_obj > __this = new MapEditor_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MapEditor_obj > MapEditor_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MapEditor_obj *__this = (MapEditor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MapEditor_obj), true, "mapeditor.MapEditor"));
	*(void **)__this = MapEditor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MapEditor_obj::MapEditor_obj()
{
}

void MapEditor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MapEditor);
	HX_MARK_MEMBER_NAME(editingScreen,"editingScreen");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MapEditor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(editingScreen,"editingScreen");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MapEditor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"editingScreen") ) { return ::hx::Val( editingScreen ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MapEditor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"editingScreen") ) { editingScreen=inValue.Cast<  ::mapeditor::EditingScreen >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MapEditor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("editingScreen",a4,36,76,80));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MapEditor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::mapeditor::EditingScreen */ ,(int)offsetof(MapEditor_obj,editingScreen),HX_("editingScreen",a4,36,76,80)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MapEditor_obj_sStaticStorageInfo = 0;
#endif

static ::String MapEditor_obj_sMemberFields[] = {
	HX_("editingScreen",a4,36,76,80),
	::String(null()) };

::hx::Class MapEditor_obj::__mClass;

void MapEditor_obj::__register()
{
	MapEditor_obj _hx_dummy;
	MapEditor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.MapEditor",e4,05,b3,d8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MapEditor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MapEditor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MapEditor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MapEditor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
