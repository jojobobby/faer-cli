// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_mapeditor_METile
#include <mapeditor/METile.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff88314400e0a6ad_3_new,"mapeditor.METile","new",0x0005b19d,"mapeditor.METile.new","mapeditor/METile.hx",3,0xc853a852)
static const int _hx_array_data_c3539f2b_1[] = {
	(int)65535,(int)65535,(int)255,
};
HX_LOCAL_STACK_FRAME(_hx_pos_ff88314400e0a6ad_11_clone,"mapeditor.METile","clone",0x013d7dda,"mapeditor.METile.clone","mapeditor/METile.hx",11,0xc853a852)
HX_LOCAL_STACK_FRAME(_hx_pos_ff88314400e0a6ad_19_isEmpty,"mapeditor.METile","isEmpty",0x8087a200,"mapeditor.METile.isEmpty","mapeditor/METile.hx",19,0xc853a852)
namespace mapeditor{

void METile_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ff88314400e0a6ad_3_new)
HXLINE(   5)		this->objName = HX_("",00,00,00,00);
HXLINE(   8)		this->types = ::Array_obj< int >::fromData( _hx_array_data_c3539f2b_1,3);
            	}

Dynamic METile_obj::__CreateEmpty() { return new METile_obj; }

void *METile_obj::_hx_vtable = 0;

Dynamic METile_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< METile_obj > _hx_result = new METile_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool METile_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fe35d73;
}

 ::mapeditor::METile METile_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_ff88314400e0a6ad_11_clone)
HXLINE(  12)		 ::mapeditor::METile tile =  ::mapeditor::METile_obj::__alloc( HX_CTX );
HXLINE(  13)		if ((this->types->length > 0)) {
HXLINE(  14)			tile->types = this->types->copy();
            		}
HXLINE(  15)		tile->objName = this->objName;
HXLINE(  16)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC0(METile_obj,clone,return )

bool METile_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_ff88314400e0a6ad_19_isEmpty)
HXLINE(  20)		if ((this->types->__get(0) != 65535)) {
HXLINE(  21)			return false;
            		}
HXLINE(  22)		if ((this->types->__get(1) != 65535)) {
HXLINE(  23)			return false;
            		}
HXLINE(  24)		if ((this->types->__get(2) != 255)) {
HXLINE(  25)			return false;
            		}
HXLINE(  27)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(METile_obj,isEmpty,return )


::hx::ObjectPtr< METile_obj > METile_obj::__new() {
	::hx::ObjectPtr< METile_obj > __this = new METile_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< METile_obj > METile_obj::__alloc(::hx::Ctx *_hx_ctx) {
	METile_obj *__this = (METile_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(METile_obj), true, "mapeditor.METile"));
	*(void **)__this = METile_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

METile_obj::METile_obj()
{
}

void METile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(METile);
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_MEMBER_NAME(objName,"objName");
	HX_MARK_END_CLASS();
}

void METile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(types,"types");
	HX_VISIT_MEMBER_NAME(objName,"objName");
}

::hx::Val METile_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { return ::hx::Val( types ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objName") ) { return ::hx::Val( objName ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return ::hx::Val( isEmpty_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val METile_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objName") ) { objName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void METile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("types",79,70,cb,1a));
	outFields->push(HX_("objName",e2,f5,19,73));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo METile_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(METile_obj,types),HX_("types",79,70,cb,1a)},
	{::hx::fsString,(int)offsetof(METile_obj,objName),HX_("objName",e2,f5,19,73)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *METile_obj_sStaticStorageInfo = 0;
#endif

static ::String METile_obj_sMemberFields[] = {
	HX_("types",79,70,cb,1a),
	HX_("objName",e2,f5,19,73),
	HX_("clone",5d,13,63,48),
	HX_("isEmpty",43,de,5f,0c),
	::String(null()) };

::hx::Class METile_obj::__mClass;

void METile_obj::__register()
{
	METile_obj _hx_dummy;
	METile_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.METile",2b,9f,53,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(METile_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< METile_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = METile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = METile_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
