// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_map_RegionLibrary
#include <map/RegionLibrary.h>
#endif
#ifndef INCLUDED_mapeditor_Chooser
#include <mapeditor/Chooser.h>
#endif
#ifndef INCLUDED_mapeditor_Element
#include <mapeditor/Element.h>
#endif
#ifndef INCLUDED_mapeditor_RegionChooser
#include <mapeditor/RegionChooser.h>
#endif
#ifndef INCLUDED_mapeditor_RegionElement
#include <mapeditor/RegionElement.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b41853f9ae614f62_8_new,"mapeditor.RegionChooser","new",0x2ad7eb14,"mapeditor.RegionChooser.new","mapeditor/RegionChooser.hx",8,0x2190e4dd)
HX_LOCAL_STACK_FRAME(_hx_pos_b41853f9ae614f62_14_reloadObjects,"mapeditor.RegionChooser","reloadObjects",0x7df74e2f,"mapeditor.RegionChooser.reloadObjects","mapeditor/RegionChooser.hx",14,0x2190e4dd)
namespace mapeditor{

void RegionChooser_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b41853f9ae614f62_8_new)
HXLINE(   9)		super::__construct(2);
HXLINE(  10)		{
HXLINE(  10)			 ::Dynamic regionXML = ::map::RegionLibrary_obj::xmlLibrary->iterator();
HXDLIN(  10)			while(( (bool)(regionXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  11)				this->addElement( ::mapeditor::RegionElement_obj::__alloc( HX_CTX ,( ( ::Xml)(regionXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) )));
            			}
            		}
            	}

Dynamic RegionChooser_obj::__CreateEmpty() { return new RegionChooser_obj; }

void *RegionChooser_obj::_hx_vtable = 0;

Dynamic RegionChooser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RegionChooser_obj > _hx_result = new RegionChooser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RegionChooser_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1596b732) {
		if (inClassId<=(int)0x065fd7de) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x065fd7de;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1596b732;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void RegionChooser_obj::reloadObjects(::String search){
            	HX_GC_STACKFRAME(&_hx_pos_b41853f9ae614f62_14_reloadObjects)
HXLINE(  15)		this->removeElements();
HXLINE(  17)		{
HXLINE(  17)			 ::Dynamic regionXML = ::map::RegionLibrary_obj::xmlLibrary->iterator();
HXDLIN(  17)			while(( (bool)(regionXML->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  17)				 ::Xml regionXML1 = ( ( ::Xml)(regionXML->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  18)				bool _hx_tmp;
HXDLIN(  18)				if ((search != HX_("",00,00,00,00))) {
HXLINE(  18)					::String tmp = regionXML1->get(HX_("id",db,5b,00,00));
HXDLIN(  18)					::String _hx_tmp1;
HXDLIN(  18)					if (::hx::IsNotNull( tmp )) {
HXLINE(  18)						_hx_tmp1 = tmp;
            					}
            					else {
HXLINE(  18)						_hx_tmp1 = HX_("",00,00,00,00);
            					}
HXDLIN(  18)					_hx_tmp = (_hx_tmp1.toLowerCase().indexOf(search,null()) != -1);
            				}
            				else {
HXLINE(  18)					_hx_tmp = true;
            				}
HXDLIN(  18)				if (_hx_tmp) {
HXLINE(  19)					this->addElement( ::mapeditor::RegionElement_obj::__alloc( HX_CTX ,regionXML1));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegionChooser_obj,reloadObjects,(void))


::hx::ObjectPtr< RegionChooser_obj > RegionChooser_obj::__new() {
	::hx::ObjectPtr< RegionChooser_obj > __this = new RegionChooser_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< RegionChooser_obj > RegionChooser_obj::__alloc(::hx::Ctx *_hx_ctx) {
	RegionChooser_obj *__this = (RegionChooser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RegionChooser_obj), true, "mapeditor.RegionChooser"));
	*(void **)__this = RegionChooser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RegionChooser_obj::RegionChooser_obj()
{
}

::hx::Val RegionChooser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"reloadObjects") ) { return ::hx::Val( reloadObjects_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RegionChooser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *RegionChooser_obj_sStaticStorageInfo = 0;
#endif

static ::String RegionChooser_obj_sMemberFields[] = {
	HX_("reloadObjects",7b,4a,2b,53),
	::String(null()) };

::hx::Class RegionChooser_obj::__mClass;

void RegionChooser_obj::__register()
{
	RegionChooser_obj _hx_dummy;
	RegionChooser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.RegionChooser",22,11,a0,d8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RegionChooser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RegionChooser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegionChooser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegionChooser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
