// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_mapeditor_Element
#include <mapeditor/Element.h>
#endif
#ifndef INCLUDED_mapeditor_ObjectElement
#include <mapeditor/ObjectElement.h>
#endif
#ifndef INCLUDED_mapeditor_ObjectTypeToolTip
#include <mapeditor/ObjectTypeToolTip.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_59f8956619894790_11_new,"mapeditor.ObjectElement","new",0x130adcaa,"mapeditor.ObjectElement.new","mapeditor/ObjectElement.hx",11,0x0276b807)
HX_LOCAL_STACK_FRAME(_hx_pos_59f8956619894790_24_getToolTip,"mapeditor.ObjectElement","getToolTip",0x61ed5be3,"mapeditor.ObjectElement.getToolTip","mapeditor/ObjectElement.hx",24,0x0276b807)
namespace mapeditor{

void ObjectElement_obj::__construct( ::Xml objXML){
            	HX_GC_STACKFRAME(&_hx_pos_59f8956619894790_11_new)
HXLINE(  12)		int _hx_tmp;
HXDLIN(  12)		if (::hx::IsNotNull( objXML->get(HX_("type",ba,f2,08,4d)) )) {
HXLINE(  12)			_hx_tmp = ( (int)(::Std_obj::parseInt(objXML->get(HX_("type",ba,f2,08,4d)))) );
            		}
            		else {
HXLINE(  12)			_hx_tmp = 0;
            		}
HXDLIN(  12)		super::__construct(_hx_tmp);
HXLINE(  13)		this->objXML = objXML;
HXLINE(  15)		 ::openfl::display::Bitmap bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::objects::ObjectLibrary_obj::getRedrawnTextureFromType(this->type,100,true,false,null()),null(),null());
HXLINE(  16)		Float scale = bitmap->get_width();
HXLINE(  17)		bitmap->set_scaleX(bitmap->set_scaleY((( (Float)(46) ) / ::Math_obj::max(scale,bitmap->get_height()))));
HXLINE(  18)		bitmap->set_x((((Float)25.) - (bitmap->get_width() / ( (Float)(2) ))));
HXLINE(  19)		bitmap->set_y((((Float)25.) - (bitmap->get_height() / ( (Float)(2) ))));
HXLINE(  20)		this->addChild(bitmap);
            	}

Dynamic ObjectElement_obj::__CreateEmpty() { return new ObjectElement_obj; }

void *ObjectElement_obj::_hx_vtable = 0;

Dynamic ObjectElement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ObjectElement_obj > _hx_result = new ObjectElement_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ObjectElement_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x0f568ea0 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3ed04433 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::ui::tooltip::ToolTip ObjectElement_obj::getToolTip(){
            	HX_GC_STACKFRAME(&_hx_pos_59f8956619894790_24_getToolTip)
HXDLIN(  24)		return  ::mapeditor::ObjectTypeToolTip_obj::__alloc( HX_CTX ,this->objXML);
            	}



::hx::ObjectPtr< ObjectElement_obj > ObjectElement_obj::__new( ::Xml objXML) {
	::hx::ObjectPtr< ObjectElement_obj > __this = new ObjectElement_obj();
	__this->__construct(objXML);
	return __this;
}

::hx::ObjectPtr< ObjectElement_obj > ObjectElement_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml objXML) {
	ObjectElement_obj *__this = (ObjectElement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ObjectElement_obj), true, "mapeditor.ObjectElement"));
	*(void **)__this = ObjectElement_obj::_hx_vtable;
	__this->__construct(objXML);
	return __this;
}

ObjectElement_obj::ObjectElement_obj()
{
}

void ObjectElement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectElement);
	HX_MARK_MEMBER_NAME(objXML,"objXML");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ObjectElement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objXML,"objXML");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ObjectElement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"objXML") ) { return ::hx::Val( objXML ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getToolTip") ) { return ::hx::Val( getToolTip_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ObjectElement_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"objXML") ) { objXML=inValue.Cast<  ::Xml >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectElement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("objXML",20,8e,35,15));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ObjectElement_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(ObjectElement_obj,objXML),HX_("objXML",20,8e,35,15)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ObjectElement_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectElement_obj_sMemberFields[] = {
	HX_("objXML",20,8e,35,15),
	HX_("getToolTip",ed,ea,d5,b9),
	::String(null()) };

::hx::Class ObjectElement_obj::__mClass;

void ObjectElement_obj::__register()
{
	ObjectElement_obj _hx_dummy;
	ObjectElement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.ObjectElement",b8,ff,a8,60);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ObjectElement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ObjectElement_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectElement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectElement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
