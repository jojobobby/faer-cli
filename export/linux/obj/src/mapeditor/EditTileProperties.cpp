// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_mapeditor_EditTileProperties
#include <mapeditor/EditTileProperties.h>
#endif
#ifndef INCLUDED_mapeditor_EditTilePropertiesFrame
#include <mapeditor/EditTilePropertiesFrame.h>
#endif
#ifndef INCLUDED_mapeditor_IntPoint
#include <mapeditor/IntPoint.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_Frame
#include <ui/Frame.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1a7ac7524f255c81_14_new,"mapeditor.EditTileProperties","new",0x2ff74582,"mapeditor.EditTileProperties.new","mapeditor/EditTileProperties.hx",14,0x2d8faa8d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a7ac7524f255c81_37_onComplete,"mapeditor.EditTileProperties","onComplete",0x5f172816,"mapeditor.EditTileProperties.onComplete","mapeditor/EditTileProperties.hx",37,0x2d8faa8d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a7ac7524f255c81_43_onCancel,"mapeditor.EditTileProperties","onCancel",0x32b79397,"mapeditor.EditTileProperties.onCancel","mapeditor/EditTileProperties.hx",43,0x2d8faa8d)
namespace mapeditor{

void EditTileProperties_obj::__construct(::Array< ::Dynamic> tiles,::String oldName){
            	HX_GC_STACKFRAME(&_hx_pos_1a7ac7524f255c81_14_new)
HXLINE(  15)		super::__construct();
HXLINE(  16)		this->tiles = tiles;
HXLINE(  17)		this->darkBox =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  18)		 ::openfl::display::Graphics g = this->darkBox->get_graphics();
HXLINE(  19)		g->clear();
HXLINE(  20)		g->beginFill(0,((Float)0.8));
HXLINE(  21)		g->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(800) ),( (Float)(600) ));
HXLINE(  22)		g->endFill();
HXLINE(  23)		this->addChild(this->darkBox);
HXLINE(  24)		this->frame =  ::mapeditor::EditTilePropertiesFrame_obj::__alloc( HX_CTX ,oldName);
HXLINE(  25)		this->frame->addEventListener(HX_("complete",b9,00,c8,7f),this->onComplete_dyn(),null(),null(),null());
HXLINE(  26)		this->frame->addEventListener(HX_("cancel",7a,ed,33,b8),this->onCancel_dyn(),null(),null(),null());
HXLINE(  27)		this->addChild(this->frame);
            	}

Dynamic EditTileProperties_obj::__CreateEmpty() { return new EditTileProperties_obj; }

void *EditTileProperties_obj::_hx_vtable = 0;

Dynamic EditTileProperties_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EditTileProperties_obj > _hx_result = new EditTileProperties_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool EditTileProperties_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x74b46c54;
		}
	}
}

void EditTileProperties_obj::onComplete( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_1a7ac7524f255c81_37_onComplete)
HXLINE(  38)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
HXLINE(  39)		this->parent->removeChild(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditTileProperties_obj,onComplete,(void))

void EditTileProperties_obj::onCancel( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_1a7ac7524f255c81_43_onCancel)
HXDLIN(  43)		this->parent->removeChild(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditTileProperties_obj,onCancel,(void))


::hx::ObjectPtr< EditTileProperties_obj > EditTileProperties_obj::__new(::Array< ::Dynamic> tiles,::String oldName) {
	::hx::ObjectPtr< EditTileProperties_obj > __this = new EditTileProperties_obj();
	__this->__construct(tiles,oldName);
	return __this;
}

::hx::ObjectPtr< EditTileProperties_obj > EditTileProperties_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> tiles,::String oldName) {
	EditTileProperties_obj *__this = (EditTileProperties_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EditTileProperties_obj), true, "mapeditor.EditTileProperties"));
	*(void **)__this = EditTileProperties_obj::_hx_vtable;
	__this->__construct(tiles,oldName);
	return __this;
}

EditTileProperties_obj::EditTileProperties_obj()
{
}

void EditTileProperties_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EditTileProperties);
	HX_MARK_MEMBER_NAME(tiles,"tiles");
	HX_MARK_MEMBER_NAME(darkBox,"darkBox");
	HX_MARK_MEMBER_NAME(frame,"frame");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EditTileProperties_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tiles,"tiles");
	HX_VISIT_MEMBER_NAME(darkBox,"darkBox");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EditTileProperties_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { return ::hx::Val( tiles ); }
		if (HX_FIELD_EQ(inName,"frame") ) { return ::hx::Val( frame ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"darkBox") ) { return ::hx::Val( darkBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onCancel") ) { return ::hx::Val( onCancel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return ::hx::Val( onComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EditTileProperties_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast<  ::mapeditor::EditTilePropertiesFrame >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"darkBox") ) { darkBox=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EditTileProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tiles",85,fd,34,10));
	outFields->push(HX_("darkBox",35,cf,9a,f1));
	outFields->push(HX_("frame",2d,78,83,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EditTileProperties_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditTileProperties_obj,tiles),HX_("tiles",85,fd,34,10)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(EditTileProperties_obj,darkBox),HX_("darkBox",35,cf,9a,f1)},
	{::hx::fsObject /*  ::mapeditor::EditTilePropertiesFrame */ ,(int)offsetof(EditTileProperties_obj,frame),HX_("frame",2d,78,83,06)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EditTileProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String EditTileProperties_obj_sMemberFields[] = {
	HX_("tiles",85,fd,34,10),
	HX_("darkBox",35,cf,9a,f1),
	HX_("frame",2d,78,83,06),
	HX_("onComplete",f8,d4,7e,5d),
	HX_("onCancel",f9,e3,e0,97),
	::String(null()) };

::hx::Class EditTileProperties_obj::__mClass;

void EditTileProperties_obj::__register()
{
	EditTileProperties_obj _hx_dummy;
	EditTileProperties_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.EditTileProperties",90,1c,4a,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EditTileProperties_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EditTileProperties_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EditTileProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EditTileProperties_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
