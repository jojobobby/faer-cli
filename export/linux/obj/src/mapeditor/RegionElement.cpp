// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_map_RegionLibrary
#include <map/RegionLibrary.h>
#endif
#ifndef INCLUDED_mapeditor_Element
#include <mapeditor/Element.h>
#endif
#ifndef INCLUDED_mapeditor_RegionElement
#include <mapeditor/RegionElement.h>
#endif
#ifndef INCLUDED_mapeditor_RegionTypeToolTip
#include <mapeditor/RegionTypeToolTip.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_54a90055a53d3667_11_new,"mapeditor.RegionElement","new",0xf7c28c95,"mapeditor.RegionElement.new","mapeditor/RegionElement.hx",11,0xf5b6ae7c)
HX_LOCAL_STACK_FRAME(_hx_pos_54a90055a53d3667_24_getToolTip,"mapeditor.RegionElement","getToolTip",0x8f684f58,"mapeditor.RegionElement.getToolTip","mapeditor/RegionElement.hx",24,0xf5b6ae7c)
namespace mapeditor{

void RegionElement_obj::__construct( ::Xml regionXML){
            	HX_GC_STACKFRAME(&_hx_pos_54a90055a53d3667_11_new)
HXLINE(  12)		int _hx_tmp;
HXDLIN(  12)		if (::hx::IsNotNull( regionXML->get(HX_("type",ba,f2,08,4d)) )) {
HXLINE(  12)			_hx_tmp = ( (int)(::Std_obj::parseInt(regionXML->get(HX_("type",ba,f2,08,4d)))) );
            		}
            		else {
HXLINE(  12)			_hx_tmp = 0;
            		}
HXDLIN(  12)		super::__construct(_hx_tmp);
HXLINE(  13)		this->regionXML = regionXML;
HXLINE(  14)		 ::openfl::display::Shape shape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  15)		 ::openfl::display::Graphics _hx_tmp1 = shape->get_graphics();
HXDLIN(  15)		_hx_tmp1->beginFill(::map::RegionLibrary_obj::getColor(this->type),((Float)0.5));
HXLINE(  16)		shape->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(42) ),( (Float)(42) ));
HXLINE(  17)		shape->get_graphics()->endFill();
HXLINE(  18)		shape->set_x((((Float)25.) - (shape->get_width() / ( (Float)(2) ))));
HXLINE(  19)		shape->set_y((((Float)25.) - (shape->get_height() / ( (Float)(2) ))));
HXLINE(  20)		this->addChild(shape);
            	}

Dynamic RegionElement_obj::__CreateEmpty() { return new RegionElement_obj; }

void *RegionElement_obj::_hx_vtable = 0;

Dynamic RegionElement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RegionElement_obj > _hx_result = new RegionElement_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RegionElement_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f9964df) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2f9964df;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3ed04433 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::ui::tooltip::ToolTip RegionElement_obj::getToolTip(){
            	HX_GC_STACKFRAME(&_hx_pos_54a90055a53d3667_24_getToolTip)
HXDLIN(  24)		return  ::mapeditor::RegionTypeToolTip_obj::__alloc( HX_CTX ,this->regionXML);
            	}



::hx::ObjectPtr< RegionElement_obj > RegionElement_obj::__new( ::Xml regionXML) {
	::hx::ObjectPtr< RegionElement_obj > __this = new RegionElement_obj();
	__this->__construct(regionXML);
	return __this;
}

::hx::ObjectPtr< RegionElement_obj > RegionElement_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml regionXML) {
	RegionElement_obj *__this = (RegionElement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RegionElement_obj), true, "mapeditor.RegionElement"));
	*(void **)__this = RegionElement_obj::_hx_vtable;
	__this->__construct(regionXML);
	return __this;
}

RegionElement_obj::RegionElement_obj()
{
}

void RegionElement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RegionElement);
	HX_MARK_MEMBER_NAME(regionXML,"regionXML");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RegionElement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(regionXML,"regionXML");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val RegionElement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"regionXML") ) { return ::hx::Val( regionXML ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getToolTip") ) { return ::hx::Val( getToolTip_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RegionElement_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"regionXML") ) { regionXML=inValue.Cast<  ::Xml >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RegionElement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("regionXML",43,59,76,69));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RegionElement_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(RegionElement_obj,regionXML),HX_("regionXML",43,59,76,69)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RegionElement_obj_sStaticStorageInfo = 0;
#endif

static ::String RegionElement_obj_sMemberFields[] = {
	HX_("regionXML",43,59,76,69),
	HX_("getToolTip",ed,ea,d5,b9),
	::String(null()) };

::hx::Class RegionElement_obj::__mClass;

void RegionElement_obj::__register()
{
	RegionElement_obj _hx_dummy;
	RegionElement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.RegionElement",23,9e,d9,01);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RegionElement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RegionElement_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegionElement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegionElement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
