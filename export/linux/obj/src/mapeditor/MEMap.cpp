// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_map_RegionLibrary
#include <map/RegionLibrary.h>
#endif
#ifndef INCLUDED_mapeditor_BigBitmapData
#include <mapeditor/BigBitmapData.h>
#endif
#ifndef INCLUDED_mapeditor_EditingScreen
#include <mapeditor/EditingScreen.h>
#endif
#ifndef INCLUDED_mapeditor_IntPoint
#include <mapeditor/IntPoint.h>
#endif
#ifndef INCLUDED_mapeditor_MEMap
#include <mapeditor/MEMap.h>
#endif
#ifndef INCLUDED_mapeditor_METile
#include <mapeditor/METile.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_22_new,"mapeditor.MEMap","new",0xdb8831b1,"mapeditor.MEMap.new","mapeditor/MEMap.hx",22,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_71_getTile,"mapeditor.MEMap","getTile",0x266d58b5,"mapeditor.MEMap.getTile","mapeditor/MEMap.hx",71,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_74_modifyTile,"mapeditor.MEMap","modifyTile",0x519cab97,"mapeditor.MEMap.modifyTile","mapeditor/MEMap.hx",74,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_96_getAllTiles,"mapeditor.MEMap","getAllTiles",0x956c19ab,"mapeditor.MEMap.getAllTiles","mapeditor/MEMap.hx",96,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_103_setTile,"mapeditor.MEMap","setTile",0x196ee9c1,"mapeditor.MEMap.setTile","mapeditor/MEMap.hx",103,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_109_eraseTile,"mapeditor.MEMap","eraseTile",0xd22dff45,"mapeditor.MEMap.eraseTile","mapeditor/MEMap.hx",109,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_115_clear,"mapeditor.MEMap","clear",0xa267891e,"mapeditor.MEMap.clear","mapeditor/MEMap.hx",115,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_119_getTileBounds,"mapeditor.MEMap","getTileBounds",0x985e490a,"mapeditor.MEMap.getTileBounds","mapeditor/MEMap.hx",119,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_146_sizeInTiles,"mapeditor.MEMap","sizeInTiles",0xbb0afef0,"mapeditor.MEMap.sizeInTiles","mapeditor/MEMap.hx",146,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_149_modifyZoom,"mapeditor.MEMap","modifyZoom",0x5598837c,"mapeditor.MEMap.modifyZoom","mapeditor/MEMap.hx",149,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_160_canMove,"mapeditor.MEMap","canMove",0x6da6a912,"mapeditor.MEMap.canMove","mapeditor/MEMap.hx",160,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_163_increaseZoom,"mapeditor.MEMap","increaseZoom",0x81888084,"mapeditor.MEMap.increaseZoom","mapeditor/MEMap.hx",163,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_171_decreaseZoom,"mapeditor.MEMap","decreaseZoom",0xb0f99720,"mapeditor.MEMap.decreaseZoom","mapeditor/MEMap.hx",171,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_179_moveLeft,"mapeditor.MEMap","moveLeft",0xf39bacc7,"mapeditor.MEMap.moveLeft","mapeditor/MEMap.hx",179,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_187_moveRight,"mapeditor.MEMap","moveRight",0xaba88f1c,"mapeditor.MEMap.moveRight","mapeditor/MEMap.hx",187,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_195_moveUp,"mapeditor.MEMap","moveUp",0x3d355b1b,"mapeditor.MEMap.moveUp","mapeditor/MEMap.hx",195,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_203_moveDown,"mapeditor.MEMap","moveDown",0xee599d22,"mapeditor.MEMap.moveDown","mapeditor/MEMap.hx",203,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_211_movePosT,"mapeditor.MEMap","movePosT",0xf6482900,"mapeditor.MEMap.movePosT","mapeditor/MEMap.hx",211,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_216_mousePosT,"mapeditor.MEMap","mousePosT",0xfb2ef116,"mapeditor.MEMap.mousePosT","mapeditor/MEMap.hx",216,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_222_mouseRectT,"mapeditor.MEMap","mouseRectT",0xee09011a,"mapeditor.MEMap.mouseRectT","mapeditor/MEMap.hx",222,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_232_posTToPosP,"mapeditor.MEMap","posTToPosP",0x8c1f7286,"mapeditor.MEMap.posTToPosP","mapeditor/MEMap.hx",232,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_236_sizeTToSizeP,"mapeditor.MEMap","sizeTToSizeP",0x49772550,"mapeditor.MEMap.sizeTToSizeP","mapeditor/MEMap.hx",236,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_239_mouseRectP,"mapeditor.MEMap","mouseRectP",0xee090116,"mapeditor.MEMap.mouseRectP","mapeditor/MEMap.hx",239,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_249_onAddedToStage,"mapeditor.MEMap","onAddedToStage",0xd5ab7071,"mapeditor.MEMap.onAddedToStage","mapeditor/MEMap.hx",249,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_259_onRemovedFromStage,"mapeditor.MEMap","onRemovedFromStage",0x37a78e42,"mapeditor.MEMap.onRemovedFromStage","mapeditor/MEMap.hx",259,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_269_onKeyDown,"mapeditor.MEMap","onKeyDown",0x786fd653,"mapeditor.MEMap.onKeyDown","mapeditor/MEMap.hx",269,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_302_onKeyUp,"mapeditor.MEMap","onKeyUp",0x7c2a360c,"mapeditor.MEMap.onKeyUp","mapeditor/MEMap.hx",302,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_314_onMouseWheel,"mapeditor.MEMap","onMouseWheel",0xed1236c4,"mapeditor.MEMap.onMouseWheel","mapeditor/MEMap.hx",314,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_320_onMouseDown,"mapeditor.MEMap","onMouseDown",0x77652e59,"mapeditor.MEMap.onMouseDown","mapeditor/MEMap.hx",320,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_331_onMouseUp,"mapeditor.MEMap","onMouseUp",0x9c9b6092,"mapeditor.MEMap.onMouseUp","mapeditor/MEMap.hx",331,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_343_onEnterFrame,"mapeditor.MEMap","onEnterFrame",0x07db1283,"mapeditor.MEMap.onEnterFrame","mapeditor/MEMap.hx",343,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_347_onMouseMove,"mapeditor.MEMap","onMouseMove",0x7d581908,"mapeditor.MEMap.onMouseMove","mapeditor/MEMap.hx",347,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_367_getOrCreateTile,"mapeditor.MEMap","getOrCreateTile",0x38dbc7d4,"mapeditor.MEMap.getOrCreateTile","mapeditor/MEMap.hx",367,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_378_clearTile,"mapeditor.MEMap","clearTile",0xc53b676c,"mapeditor.MEMap.clearTile","mapeditor/MEMap.hx",378,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_381_drawTile,"mapeditor.MEMap","drawTile",0x6a9aae61,"mapeditor.MEMap.drawTile","mapeditor/MEMap.hx",381,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_410_drawOverlay,"mapeditor.MEMap","drawOverlay",0x58b8223d,"mapeditor.MEMap.drawOverlay","mapeditor/MEMap.hx",410,0x6492b7e0)
HX_LOCAL_STACK_FRAME(_hx_pos_65ee80d6f049e2a8_421_draw,"mapeditor.MEMap","draw",0x3510f193,"mapeditor.MEMap.draw","mapeditor/MEMap.hx",421,0x6492b7e0)
namespace mapeditor{

void MEMap_obj::__construct( ::mapeditor::EditingScreen editScreen){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_22_new)
HXLINE(  43)		this->mouseDown = false;
HXLINE(  42)		this->mouseMoveAnchorT = null();
HXLINE(  41)		this->mouseRectAnchorT = null();
HXLINE(  37)		this->zoom = ((Float)1);
HXLINE(  47)		this->editScreen = editScreen;
HXLINE(  48)		this->tileDict =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  49)		this->fullMap =  ::mapeditor::BigBitmapData_obj::__alloc( HX_CTX ,8192,8192,true,0);
HXLINE(  50)		this->regionMap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,512,512,true,0);
HXLINE(  51)		this->map =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,640,640,true,0);
HXLINE(  52)		this->overlay =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  53)		super::__construct();
HXLINE(  54)		 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN(  54)		_hx_tmp->beginBitmapFill(::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/TransBG.png",f9,bf,9c,b1),null()),null(),true,null());
HXLINE(  55)		this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(640) ),( (Float)(640) ));
HXLINE(  56)		this->addChild( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->map,null(),null()));
HXLINE(  57)		this->addChild(this->overlay);
HXLINE(  58)		int _hx_tmp1 = ::Std_obj::_hx_int((((Float)256.) - (this->sizeInTiles() / ( (Float)(2) ))));
HXDLIN(  58)		this->posT =  ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,_hx_tmp1,::Std_obj::_hx_int((((Float)256.) - (this->sizeInTiles() / ( (Float)(2) )))));
HXLINE(  59)		this->invisibleTexture = ::util::AssetLibrary_obj::getImageFromSet(HX_("invisible",2d,93,d5,bb),0);
HXLINE(  60)		this->replaceTexture = ::util::AssetLibrary_obj::getImageFromSet(HX_("lofiObj3",02,ee,12,9b),255);
HXLINE(  61)		this->draw();
HXLINE(  62)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  63)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic MEMap_obj::__CreateEmpty() { return new MEMap_obj; }

void *MEMap_obj::_hx_vtable = 0;

Dynamic MEMap_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MEMap_obj > _hx_result = new MEMap_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MEMap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x7dc0195f;
		}
	}
}

 ::mapeditor::METile MEMap_obj::getTile(int x,int y){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_71_getTile)
HXDLIN(  71)		return ( ( ::mapeditor::METile)(this->tileDict->get((x + (y * 512)))) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(MEMap_obj,getTile,return )

void MEMap_obj::modifyTile(int x,int y,int layer,int type){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_74_modifyTile)
HXLINE(  75)		 ::mapeditor::METile tile = this->getOrCreateTile(x,y);
HXLINE(  76)		if ((tile->types->__get(layer) == type)) {
HXLINE(  77)			return;
            		}
HXLINE(  79)		tile->types[layer] = type;
HXLINE(  80)		this->drawTile(x,y,tile);
            	}


HX_DEFINE_DYNAMIC_FUNC4(MEMap_obj,modifyTile,(void))

::Array< ::Dynamic> MEMap_obj::getAllTiles(){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_96_getAllTiles)
HXLINE(  97)		::Array< ::Dynamic> tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE(  98)		{
HXLINE(  98)			 ::Dynamic index = this->tileDict->keys();
HXDLIN(  98)			while(( (bool)(index->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  98)				int index1 = ( (int)(index->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  99)				tiles->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,::hx::Mod(index1,512),::Std_obj::_hx_int((( (Float)(index1) ) / ( (Float)(512) )))));
            			}
            		}
HXLINE( 100)		return tiles;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,getAllTiles,return )

void MEMap_obj::setTile(int x,int y, ::mapeditor::METile tile){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_103_setTile)
HXLINE( 104)		tile = tile->clone();
HXLINE( 105)		this->tileDict->set((x + (y * 512)),tile);
HXLINE( 106)		this->drawTile(x,y,tile);
            	}


HX_DEFINE_DYNAMIC_FUNC3(MEMap_obj,setTile,(void))

void MEMap_obj::eraseTile(int x,int y){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_109_eraseTile)
HXLINE( 110)		this->clearTile(x,y);
HXLINE( 111)		this->drawTile(x,y,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(MEMap_obj,eraseTile,(void))

void MEMap_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_115_clear)
HXDLIN( 115)		 ::Dynamic index = this->tileDict->keys();
HXDLIN( 115)		while(( (bool)(index->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 115)			int index1 = ( (int)(index->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 116)			this->eraseTile(::hx::Mod(index1,512),::Std_obj::_hx_int((( (Float)(index1) ) / ( (Float)(512) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,clear,(void))

 ::openfl::geom::Rectangle MEMap_obj::getTileBounds(){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_119_getTileBounds)
HXLINE( 120)		Float minX = ( (Float)(512) );
HXDLIN( 120)		Float minY = ( (Float)(512) );
HXLINE( 121)		Float maxX = ((Float)0.0);
HXDLIN( 121)		Float maxY = ((Float)0.0);
HXLINE( 122)		{
HXLINE( 122)			::Dynamic map = this->tileDict;
HXDLIN( 122)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 122)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 122)				int key = ( (int)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 123)				if (!(( ( ::mapeditor::METile)(::haxe::IMap_obj::get(map,key)) )->isEmpty())) {
HXLINE( 124)					int x = ::hx::Mod(key,512);
HXLINE( 125)					Float y = (( (Float)(key) ) / ( (Float)(512) ));
HXLINE( 126)					if ((x < minX)) {
HXLINE( 127)						minX = ( (Float)(x) );
            					}
HXLINE( 129)					if ((y < minY)) {
HXLINE( 130)						minY = y;
            					}
HXLINE( 132)					if (((x + 1) > maxX)) {
HXLINE( 133)						maxX = ( (Float)((x + 1)) );
            					}
HXLINE( 135)					if (((y + 1) > maxY)) {
HXLINE( 136)						maxY = (y + 1);
            					}
            				}
            			}
            		}
HXLINE( 139)		if ((minX > maxX)) {
HXLINE( 140)			return null();
            		}
HXLINE( 142)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,minX,minY,(maxX - minX),(maxY - minY));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,getTileBounds,return )

Float MEMap_obj::sizeInTiles(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_146_sizeInTiles)
HXDLIN( 146)		return (::Math_obj::max(( (Float)(640) ),( (Float)(640) )) / (( (Float)(16) ) * this->zoom));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,sizeInTiles,return )

void MEMap_obj::modifyZoom(Float mult){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_149_modifyZoom)
HXLINE( 150)		bool _hx_tmp;
HXDLIN( 150)		bool _hx_tmp1;
HXDLIN( 150)		if ((mult > 1)) {
HXLINE( 150)			_hx_tmp1 = (this->zoom >= 16);
            		}
            		else {
HXLINE( 150)			_hx_tmp1 = false;
            		}
HXDLIN( 150)		if (!(_hx_tmp1)) {
HXLINE( 150)			if ((mult < 1)) {
HXLINE( 150)				_hx_tmp = (this->zoom <= ((Float)0.0625));
            			}
            			else {
HXLINE( 150)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 150)			_hx_tmp = true;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 151)			return;
            		}
HXLINE( 153)		 ::mapeditor::IntPoint tempMousePosT = this->mousePosT();
HXLINE( 154)		this->zoom = (this->zoom * mult);
HXLINE( 155)		 ::mapeditor::IntPoint newMousePosT = this->mousePosT();
HXLINE( 156)		this->movePosT((tempMousePosT->x - newMousePosT->x),(tempMousePosT->y - newMousePosT->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,modifyZoom,(void))

bool MEMap_obj::canMove(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_160_canMove)
HXDLIN( 160)		if (::hx::IsNull( this->mouseRectAnchorT )) {
HXDLIN( 160)			return ::hx::IsNull( this->mouseMoveAnchorT );
            		}
            		else {
HXDLIN( 160)			return false;
            		}
HXDLIN( 160)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,canMove,return )

void MEMap_obj::increaseZoom(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_163_increaseZoom)
HXLINE( 164)		if (!(this->canMove())) {
HXLINE( 165)			return;
            		}
HXLINE( 167)		this->modifyZoom(( (Float)(2) ));
HXLINE( 168)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,increaseZoom,(void))

void MEMap_obj::decreaseZoom(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_171_decreaseZoom)
HXLINE( 172)		if (!(this->canMove())) {
HXLINE( 173)			return;
            		}
HXLINE( 175)		this->modifyZoom(((Float)0.5));
HXLINE( 176)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,decreaseZoom,(void))

void MEMap_obj::moveLeft(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_179_moveLeft)
HXLINE( 180)		if (!(this->canMove())) {
HXLINE( 181)			return;
            		}
HXLINE( 183)		this->movePosT(-1,0);
HXLINE( 184)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,moveLeft,(void))

void MEMap_obj::moveRight(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_187_moveRight)
HXLINE( 188)		if (!(this->canMove())) {
HXLINE( 189)			return;
            		}
HXLINE( 191)		this->movePosT(1,0);
HXLINE( 192)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,moveRight,(void))

void MEMap_obj::moveUp(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_195_moveUp)
HXLINE( 196)		if (!(this->canMove())) {
HXLINE( 197)			return;
            		}
HXLINE( 199)		this->movePosT(0,-1);
HXLINE( 200)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,moveUp,(void))

void MEMap_obj::moveDown(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_203_moveDown)
HXLINE( 204)		if (!(this->canMove())) {
HXLINE( 205)			return;
            		}
HXLINE( 207)		this->movePosT(0,1);
HXLINE( 208)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,moveDown,(void))

void MEMap_obj::movePosT(int dX,int dY){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_211_movePosT)
HXLINE( 212)		this->posT->x = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min((( (Float)(512) ) - (( (Float)(640) ) / (( (Float)(16) ) * this->zoom))),( (Float)((this->posT->x + dX)) ))));
HXLINE( 213)		this->posT->y = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min((( (Float)(512) ) - (( (Float)(640) ) / (( (Float)(16) ) * this->zoom))),( (Float)((this->posT->y + dY)) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MEMap_obj,movePosT,(void))

 ::mapeditor::IntPoint MEMap_obj::mousePosT(){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_216_mousePosT)
HXLINE( 217)		Float mX = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(639) ),this->get_mouseX()));
HXLINE( 218)		Float mY = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(639) ),this->get_mouseY()));
HXLINE( 219)		int _hx_tmp = ::Std_obj::_hx_int((this->posT->x + (mX / (( (Float)(16) ) * this->zoom))));
HXDLIN( 219)		return  ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((this->posT->y + (mY / (( (Float)(16) ) * this->zoom)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,mousePosT,return )

 ::openfl::geom::Rectangle MEMap_obj::mouseRectT(){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_222_mouseRectT)
HXLINE( 223)		 ::mapeditor::IntPoint mpT = this->mousePosT();
HXLINE( 224)		if (::hx::IsNull( this->mouseRectAnchorT )) {
HXLINE( 225)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,mpT->x,mpT->y,1,1);
            		}
HXLINE( 227)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,::Math_obj::min(( (Float)(mpT->x) ),( (Float)(this->mouseRectAnchorT->x) )),::Math_obj::min(( (Float)(mpT->y) ),( (Float)(this->mouseRectAnchorT->y) )),(::Math_obj::abs(( (Float)((mpT->x - this->mouseRectAnchorT->x)) )) + 1),(::Math_obj::abs(( (Float)((mpT->y - this->mouseRectAnchorT->y)) )) + 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,mouseRectT,return )

 ::mapeditor::IntPoint MEMap_obj::posTToPosP( ::mapeditor::IntPoint pT){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_232_posTToPosP)
HXDLIN( 232)		int _hx_tmp = ::Std_obj::_hx_int((( (Float)(((pT->x - this->posT->x) * 16)) ) * this->zoom));
HXDLIN( 232)		return  ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((( (Float)(((pT->y - this->posT->y) * 16)) ) * this->zoom)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,posTToPosP,return )

Float MEMap_obj::sizeTToSizeP(int sizeT){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_236_sizeTToSizeP)
HXDLIN( 236)		return ((( (Float)(sizeT) ) * this->zoom) * ( (Float)(16) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,sizeTToSizeP,return )

 ::openfl::geom::Rectangle MEMap_obj::mouseRectP(){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_239_mouseRectP)
HXLINE( 240)		 ::openfl::geom::Rectangle rect = this->mouseRectT();
HXLINE( 241)		int xyP = ::Std_obj::_hx_int(rect->x);
HXDLIN( 241)		 ::mapeditor::IntPoint xyP1 = this->posTToPosP( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,xyP,::Std_obj::_hx_int(rect->y)));
HXLINE( 242)		rect->x = ( (Float)(xyP1->x) );
HXLINE( 243)		rect->y = ( (Float)(xyP1->y) );
HXLINE( 244)		rect->width = (this->sizeTToSizeP(::Std_obj::_hx_int(rect->width)) - ( (Float)(1) ));
HXLINE( 245)		rect->height = (this->sizeTToSizeP(::Std_obj::_hx_int(rect->height)) - ( (Float)(1) ));
HXLINE( 246)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,mouseRectP,return )

void MEMap_obj::onAddedToStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_249_onAddedToStage)
HXLINE( 250)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null(),null(),null());
HXLINE( 251)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE( 252)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null(),null(),null());
HXLINE( 253)		this->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMove_dyn(),null(),null(),null());
HXLINE( 254)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
HXLINE( 255)		this->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null(),null(),null());
HXLINE( 256)		this->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onAddedToStage,(void))

void MEMap_obj::onRemovedFromStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_259_onRemovedFromStage)
HXLINE( 260)		this->removeEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null());
HXLINE( 261)		this->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null());
HXLINE( 262)		this->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null());
HXLINE( 263)		this->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMove_dyn(),null());
HXLINE( 264)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null());
HXLINE( 265)		this->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null());
HXLINE( 266)		this->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyUp_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onRemovedFromStage,(void))

void MEMap_obj::onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_269_onKeyDown)
HXLINE( 270)		switch((int)(event->keyCode)){
            			case (int)16: {
HXLINE( 272)				if (::hx::IsNotNull( this->mouseRectAnchorT )) {
HXLINE( 273)					this->draw();
HXLINE( 274)					return;
            				}
HXLINE( 277)				this->mouseRectAnchorT = this->mousePosT();
            			}
            			break;
            			case (int)17: {
HXLINE( 279)				if (::hx::IsNotNull( this->mouseMoveAnchorT )) {
HXLINE( 280)					this->draw();
HXLINE( 281)					return;
            				}
HXLINE( 284)				this->mouseMoveAnchorT = this->mousePosT();
            			}
            			break;
            			case (int)37: {
HXLINE( 286)				this->moveLeft();
            			}
            			break;
            			case (int)38: {
HXLINE( 290)				this->moveUp();
            			}
            			break;
            			case (int)39: {
HXLINE( 288)				this->moveRight();
            			}
            			break;
            			case (int)40: {
HXLINE( 292)				this->moveDown();
            			}
            			break;
            			case (int)187: {
HXLINE( 296)				this->increaseZoom();
            			}
            			break;
            			case (int)189: {
HXLINE( 294)				this->decreaseZoom();
            			}
            			break;
            		}
HXLINE( 299)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onKeyDown,(void))

void MEMap_obj::onKeyUp( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_302_onKeyUp)
HXLINE( 303)		switch((int)(event->keyCode)){
            			case (int)16: {
HXLINE( 305)				this->mouseRectAnchorT = null();
            			}
            			break;
            			case (int)17: {
HXLINE( 307)				this->mouseMoveAnchorT = null();
            			}
            			break;
            		}
HXLINE( 310)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onKeyUp,(void))

void MEMap_obj::onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_314_onMouseWheel)
HXDLIN( 314)		if ((event->delta > 0)) {
HXLINE( 315)			this->increaseZoom();
            		}
            		else {
HXLINE( 316)			if ((event->delta < 0)) {
HXLINE( 317)				this->decreaseZoom();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onMouseWheel,(void))

void MEMap_obj::onMouseDown( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_320_onMouseDown)
HXLINE( 321)		 ::openfl::geom::Rectangle rectT = this->mouseRectT();
HXLINE( 322)		::Array< ::Dynamic> tilesT = ::Array_obj< ::Dynamic>::__new();
HXLINE( 323)		{
HXLINE( 323)			int _g = ::Std_obj::_hx_int(rectT->x);
HXDLIN( 323)			int _g1 = ::Std_obj::_hx_int(rectT->get_right());
HXDLIN( 323)			while((_g < _g1)){
HXLINE( 323)				_g = (_g + 1);
HXDLIN( 323)				int xT = (_g - 1);
HXLINE( 324)				{
HXLINE( 324)					int _g2 = ::Std_obj::_hx_int(rectT->y);
HXDLIN( 324)					int _g3 = ::Std_obj::_hx_int(rectT->get_bottom());
HXDLIN( 324)					while((_g2 < _g3)){
HXLINE( 324)						_g2 = (_g2 + 1);
HXLINE( 325)						tilesT->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,xT,(_g2 - 1)));
            					}
            				}
            			}
            		}
HXLINE( 327)		this->mouseDown = true;
HXLINE( 328)		this->editScreen->editTiles(tilesT);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onMouseDown,(void))

void MEMap_obj::onMouseUp( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_331_onMouseUp)
HXLINE( 332)		 ::openfl::geom::Rectangle rectT = this->mouseRectT();
HXLINE( 333)		::Array< ::Dynamic> tilesT = ::Array_obj< ::Dynamic>::__new();
HXLINE( 334)		{
HXLINE( 334)			int _g = ::Std_obj::_hx_int(rectT->x);
HXDLIN( 334)			int _g1 = ::Std_obj::_hx_int(rectT->get_right());
HXDLIN( 334)			while((_g < _g1)){
HXLINE( 334)				_g = (_g + 1);
HXDLIN( 334)				int xT = (_g - 1);
HXLINE( 335)				{
HXLINE( 335)					int _g2 = ::Std_obj::_hx_int(rectT->y);
HXDLIN( 335)					int _g3 = ::Std_obj::_hx_int(rectT->get_bottom());
HXDLIN( 335)					while((_g2 < _g3)){
HXLINE( 335)						_g2 = (_g2 + 1);
HXLINE( 336)						tilesT->push( ::mapeditor::IntPoint_obj::__alloc( HX_CTX ,xT,(_g2 - 1)));
            					}
            				}
            			}
            		}
HXLINE( 338)		this->mouseDown = false;
HXLINE( 339)		this->editScreen->editTiles(tilesT);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onMouseUp,(void))

void MEMap_obj::onEnterFrame( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_343_onEnterFrame)
HXDLIN( 343)		if (this->mouseDown) {
HXLINE( 344)			 ::mapeditor::EditingScreen _hx_tmp = this->editScreen;
HXDLIN( 344)			_hx_tmp->editTiles(::Array_obj< ::Dynamic>::__new(1)->init(0,this->mousePosT()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onEnterFrame,(void))

void MEMap_obj::onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_347_onMouseMove)
HXLINE( 348)		 ::mapeditor::IntPoint mpT = null();
HXLINE( 349)		if (!(event->shiftKey)) {
HXLINE( 350)			this->mouseRectAnchorT = null();
            		}
            		else {
HXLINE( 351)			if (::hx::IsNull( this->mouseRectAnchorT )) {
HXLINE( 352)				this->mouseRectAnchorT = this->mousePosT();
            			}
            		}
HXLINE( 354)		if (!(event->ctrlKey)) {
HXLINE( 355)			this->mouseMoveAnchorT = null();
            		}
            		else {
HXLINE( 356)			if (::hx::IsNull( this->mouseMoveAnchorT )) {
HXLINE( 357)				this->mouseMoveAnchorT = this->mousePosT();
            			}
            		}
HXLINE( 359)		if (::hx::IsNotNull( this->mouseMoveAnchorT )) {
HXLINE( 360)			mpT = this->mousePosT();
HXLINE( 361)			this->movePosT((this->mouseMoveAnchorT->x - mpT->x),(this->mouseMoveAnchorT->y - mpT->y));
HXLINE( 362)			this->draw();
            		}
            		else {
HXLINE( 364)			this->drawOverlay();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MEMap_obj,onMouseMove,(void))

 ::mapeditor::METile MEMap_obj::getOrCreateTile(int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_367_getOrCreateTile)
HXLINE( 368)		int index = (x + (y * 512));
HXLINE( 369)		 ::mapeditor::METile tile = ( ( ::mapeditor::METile)(this->tileDict->get(index)) );
HXLINE( 370)		if (::hx::IsNotNull( tile )) {
HXLINE( 371)			return tile;
            		}
HXLINE( 373)		tile =  ::mapeditor::METile_obj::__alloc( HX_CTX );
HXDLIN( 373)		this->tileDict->set(index,tile);
HXLINE( 374)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MEMap_obj,getOrCreateTile,return )

void MEMap_obj::clearTile(int x,int y){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_378_clearTile)
HXDLIN( 378)		this->tileDict->remove((x + (y * 512)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MEMap_obj,clearTile,(void))

void MEMap_obj::drawTile(int x,int y, ::mapeditor::METile tile){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_381_drawTile)
HXLINE( 382)		 ::openfl::display::BitmapData goundBD = null();
HXLINE( 383)		 ::openfl::display::BitmapData objBD = null();
HXLINE( 384)		int regionColor = 0;
HXLINE( 385)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(x * 16),(y * 16),16,16);
HXLINE( 386)		this->fullMap->erase(rect);
HXLINE( 387)		this->regionMap->setPixel32(x,y,0);
HXLINE( 388)		if (::hx::IsNull( tile )) {
HXLINE( 389)			return;
            		}
HXLINE( 391)		if ((tile->types->__get(0) != 65535)) {
HXLINE( 392)			goundBD = ::map::GroundLibrary_obj::getBitmapData(tile->types->__get(0),null());
HXLINE( 393)			this->fullMap->copyTo(goundBD,goundBD->rect,rect);
            		}
HXLINE( 396)		if ((tile->types->__get(1) != 65535)) {
HXLINE( 397)			objBD = ::objects::ObjectLibrary_obj::getTextureFromType(tile->types->__get(1));
HXLINE( 398)			bool _hx_tmp;
HXDLIN( 398)			if (::hx::IsNotNull( objBD )) {
HXLINE( 398)				_hx_tmp = ::hx::IsInstanceEq( objBD,this->invisibleTexture );
            			}
            			else {
HXLINE( 398)				_hx_tmp = true;
            			}
HXDLIN( 398)			if (_hx_tmp) {
HXLINE( 399)				this->fullMap->copyTo(this->replaceTexture,this->replaceTexture->rect,rect);
            			}
            			else {
HXLINE( 401)				this->fullMap->copyTo(objBD,objBD->rect,rect);
            			}
            		}
HXLINE( 404)		if ((tile->types->__get(2) != 255)) {
HXLINE( 405)			regionColor = ::map::RegionLibrary_obj::getColor(tile->types->__get(2));
HXLINE( 406)			this->regionMap->setPixel32(x,y,((int)1593835520 | regionColor));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MEMap_obj,drawTile,(void))

void MEMap_obj::drawOverlay(){
            	HX_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_410_drawOverlay)
HXLINE( 411)		 ::openfl::geom::Rectangle mrP = this->mouseRectP();
HXLINE( 412)		 ::openfl::display::Graphics g = this->overlay->get_graphics();
HXLINE( 413)		g->clear();
HXLINE( 414)		g->lineStyle(1,16777215,null(),null(),null(),null(),null(),null());
HXLINE( 415)		g->beginFill(16777215,((Float)0.1));
HXLINE( 416)		g->drawRect(mrP->x,mrP->y,mrP->width,mrP->height);
HXLINE( 417)		g->endFill();
HXLINE( 418)		g->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,drawOverlay,(void))

void MEMap_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_65ee80d6f049e2a8_421_draw)
HXLINE( 422)		 ::openfl::geom::Matrix m = null();
HXLINE( 423)		Float ss = ((Float)0.0);
HXLINE( 424)		 ::openfl::display::BitmapData temp = null();
HXLINE( 425)		Float s = (::Math_obj::max(( (Float)(640) ),( (Float)(640) )) / this->zoom);
HXLINE( 426)		this->map->fillRect(this->map->rect,0);
HXLINE( 427)		this->fullMap->copyFrom( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(this->posT->x * 16),(this->posT->y * 16),s,s),this->map,this->map->rect);
HXLINE( 428)		m =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 429)		m->identity();
HXLINE( 430)		ss = (( (Float)(16) ) * this->zoom);
HXLINE( 431)		if ((this->zoom > 2)) {
HXLINE( 432)			int temp1 = ::Std_obj::_hx_int((::Math_obj::max(( (Float)(640) ),( (Float)(640) )) / ss));
HXDLIN( 432)			temp =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,temp1,::Std_obj::_hx_int((::Math_obj::max(( (Float)(640) ),( (Float)(640) )) / ss)),null(),null());
HXLINE( 433)			temp->copyPixels(this->regionMap, ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,this->posT->x,this->posT->y,s,s), ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0),null(),null(),null());
HXLINE( 434)			m->scale(ss,ss);
HXLINE( 435)			this->map->draw(temp,m,null(),null(),null(),null());
            		}
            		else {
HXLINE( 437)			m->translate(( (Float)(-(this->posT->x)) ),( (Float)(-(this->posT->y)) ));
HXLINE( 438)			m->scale(ss,ss);
HXLINE( 439)			this->map->draw(this->regionMap,m,null(),null(),this->map->rect,null());
            		}
HXLINE( 442)		this->drawOverlay();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MEMap_obj,draw,(void))


::hx::ObjectPtr< MEMap_obj > MEMap_obj::__new( ::mapeditor::EditingScreen editScreen) {
	::hx::ObjectPtr< MEMap_obj > __this = new MEMap_obj();
	__this->__construct(editScreen);
	return __this;
}

::hx::ObjectPtr< MEMap_obj > MEMap_obj::__alloc(::hx::Ctx *_hx_ctx, ::mapeditor::EditingScreen editScreen) {
	MEMap_obj *__this = (MEMap_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MEMap_obj), true, "mapeditor.MEMap"));
	*(void **)__this = MEMap_obj::_hx_vtable;
	__this->__construct(editScreen);
	return __this;
}

MEMap_obj::MEMap_obj()
{
}

void MEMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MEMap);
	HX_MARK_MEMBER_NAME(tileDict,"tileDict");
	HX_MARK_MEMBER_NAME(fullMap,"fullMap");
	HX_MARK_MEMBER_NAME(regionMap,"regionMap");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(overlay,"overlay");
	HX_MARK_MEMBER_NAME(posT,"posT");
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(invisibleTexture,"invisibleTexture");
	HX_MARK_MEMBER_NAME(replaceTexture,"replaceTexture");
	HX_MARK_MEMBER_NAME(mouseRectAnchorT,"mouseRectAnchorT");
	HX_MARK_MEMBER_NAME(mouseMoveAnchorT,"mouseMoveAnchorT");
	HX_MARK_MEMBER_NAME(mouseDown,"mouseDown");
	HX_MARK_MEMBER_NAME(editScreen,"editScreen");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MEMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tileDict,"tileDict");
	HX_VISIT_MEMBER_NAME(fullMap,"fullMap");
	HX_VISIT_MEMBER_NAME(regionMap,"regionMap");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(overlay,"overlay");
	HX_VISIT_MEMBER_NAME(posT,"posT");
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(invisibleTexture,"invisibleTexture");
	HX_VISIT_MEMBER_NAME(replaceTexture,"replaceTexture");
	HX_VISIT_MEMBER_NAME(mouseRectAnchorT,"mouseRectAnchorT");
	HX_VISIT_MEMBER_NAME(mouseMoveAnchorT,"mouseMoveAnchorT");
	HX_VISIT_MEMBER_NAME(mouseDown,"mouseDown");
	HX_VISIT_MEMBER_NAME(editScreen,"editScreen");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MEMap_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"posT") ) { return ::hx::Val( posT ); }
		if (HX_FIELD_EQ(inName,"zoom") ) { return ::hx::Val( zoom ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"moveUp") ) { return ::hx::Val( moveUp_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fullMap") ) { return ::hx::Val( fullMap ); }
		if (HX_FIELD_EQ(inName,"overlay") ) { return ::hx::Val( overlay ); }
		if (HX_FIELD_EQ(inName,"getTile") ) { return ::hx::Val( getTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTile") ) { return ::hx::Val( setTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"canMove") ) { return ::hx::Val( canMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return ::hx::Val( onKeyUp_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileDict") ) { return ::hx::Val( tileDict ); }
		if (HX_FIELD_EQ(inName,"moveLeft") ) { return ::hx::Val( moveLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveDown") ) { return ::hx::Val( moveDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"movePosT") ) { return ::hx::Val( movePosT_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTile") ) { return ::hx::Val( drawTile_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"regionMap") ) { return ::hx::Val( regionMap ); }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { return ::hx::Val( mouseDown ); }
		if (HX_FIELD_EQ(inName,"eraseTile") ) { return ::hx::Val( eraseTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveRight") ) { return ::hx::Val( moveRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousePosT") ) { return ::hx::Val( mousePosT_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return ::hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearTile") ) { return ::hx::Val( clearTile_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"editScreen") ) { return ::hx::Val( editScreen ); }
		if (HX_FIELD_EQ(inName,"modifyTile") ) { return ::hx::Val( modifyTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"modifyZoom") ) { return ::hx::Val( modifyZoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseRectT") ) { return ::hx::Val( mouseRectT_dyn() ); }
		if (HX_FIELD_EQ(inName,"posTToPosP") ) { return ::hx::Val( posTToPosP_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseRectP") ) { return ::hx::Val( mouseRectP_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getAllTiles") ) { return ::hx::Val( getAllTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"sizeInTiles") ) { return ::hx::Val( sizeInTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return ::hx::Val( onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawOverlay") ) { return ::hx::Val( drawOverlay_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"increaseZoom") ) { return ::hx::Val( increaseZoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"decreaseZoom") ) { return ::hx::Val( decreaseZoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"sizeTToSizeP") ) { return ::hx::Val( sizeTToSizeP_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return ::hx::Val( onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return ::hx::Val( onEnterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getTileBounds") ) { return ::hx::Val( getTileBounds_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"replaceTexture") ) { return ::hx::Val( replaceTexture ); }
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getOrCreateTile") ) { return ::hx::Val( getOrCreateTile_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"invisibleTexture") ) { return ::hx::Val( invisibleTexture ); }
		if (HX_FIELD_EQ(inName,"mouseRectAnchorT") ) { return ::hx::Val( mouseRectAnchorT ); }
		if (HX_FIELD_EQ(inName,"mouseMoveAnchorT") ) { return ::hx::Val( mouseMoveAnchorT ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MEMap_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"posT") ) { posT=inValue.Cast<  ::mapeditor::IntPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoom") ) { zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fullMap") ) { fullMap=inValue.Cast<  ::mapeditor::BigBitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overlay") ) { overlay=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileDict") ) { tileDict=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"regionMap") ) { regionMap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { mouseDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"editScreen") ) { editScreen=inValue.Cast<  ::mapeditor::EditingScreen >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"replaceTexture") ) { replaceTexture=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"invisibleTexture") ) { invisibleTexture=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseRectAnchorT") ) { mouseRectAnchorT=inValue.Cast<  ::mapeditor::IntPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseMoveAnchorT") ) { mouseMoveAnchorT=inValue.Cast<  ::mapeditor::IntPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MEMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tileDict",c4,7f,6f,7c));
	outFields->push(HX_("fullMap",4d,fc,32,d0));
	outFields->push(HX_("regionMap",08,12,6e,69));
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("overlay",90,43,10,a9));
	outFields->push(HX_("posT",40,84,5c,4a));
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("invisibleTexture",2e,cd,62,0a));
	outFields->push(HX_("replaceTexture",07,d7,61,c4));
	outFields->push(HX_("mouseRectAnchorT",56,8d,9b,1a));
	outFields->push(HX_("mouseMoveAnchorT",09,3f,22,67));
	outFields->push(HX_("mouseDown",27,b1,c2,ee));
	outFields->push(HX_("editScreen",16,9d,0a,0d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MEMap_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(MEMap_obj,tileDict),HX_("tileDict",c4,7f,6f,7c)},
	{::hx::fsObject /*  ::mapeditor::BigBitmapData */ ,(int)offsetof(MEMap_obj,fullMap),HX_("fullMap",4d,fc,32,d0)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MEMap_obj,regionMap),HX_("regionMap",08,12,6e,69)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MEMap_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(MEMap_obj,overlay),HX_("overlay",90,43,10,a9)},
	{::hx::fsObject /*  ::mapeditor::IntPoint */ ,(int)offsetof(MEMap_obj,posT),HX_("posT",40,84,5c,4a)},
	{::hx::fsFloat,(int)offsetof(MEMap_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MEMap_obj,invisibleTexture),HX_("invisibleTexture",2e,cd,62,0a)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MEMap_obj,replaceTexture),HX_("replaceTexture",07,d7,61,c4)},
	{::hx::fsObject /*  ::mapeditor::IntPoint */ ,(int)offsetof(MEMap_obj,mouseRectAnchorT),HX_("mouseRectAnchorT",56,8d,9b,1a)},
	{::hx::fsObject /*  ::mapeditor::IntPoint */ ,(int)offsetof(MEMap_obj,mouseMoveAnchorT),HX_("mouseMoveAnchorT",09,3f,22,67)},
	{::hx::fsBool,(int)offsetof(MEMap_obj,mouseDown),HX_("mouseDown",27,b1,c2,ee)},
	{::hx::fsObject /*  ::mapeditor::EditingScreen */ ,(int)offsetof(MEMap_obj,editScreen),HX_("editScreen",16,9d,0a,0d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MEMap_obj_sStaticStorageInfo = 0;
#endif

static ::String MEMap_obj_sMemberFields[] = {
	HX_("tileDict",c4,7f,6f,7c),
	HX_("fullMap",4d,fc,32,d0),
	HX_("regionMap",08,12,6e,69),
	HX_("map",9c,0a,53,00),
	HX_("overlay",90,43,10,a9),
	HX_("posT",40,84,5c,4a),
	HX_("zoom",13,a3,f8,50),
	HX_("invisibleTexture",2e,cd,62,0a),
	HX_("replaceTexture",07,d7,61,c4),
	HX_("mouseRectAnchorT",56,8d,9b,1a),
	HX_("mouseMoveAnchorT",09,3f,22,67),
	HX_("mouseDown",27,b1,c2,ee),
	HX_("editScreen",16,9d,0a,0d),
	HX_("getTile",e4,7a,7f,1f),
	HX_("modifyTile",c8,d0,1c,68),
	HX_("getAllTiles",5a,7f,0c,2f),
	HX_("setTile",f0,0b,81,12),
	HX_("eraseTile",34,4b,b0,cd),
	HX_("clear",8d,71,5b,48),
	HX_("getTileBounds",79,b8,26,27),
	HX_("sizeInTiles",9f,64,ab,54),
	HX_("modifyZoom",ad,a8,18,6c),
	HX_("canMove",41,cb,b8,66),
	HX_("increaseZoom",f5,13,41,54),
	HX_("decreaseZoom",91,2a,b2,83),
	HX_("moveLeft",b8,73,67,ea),
	HX_("moveRight",0b,db,2a,a7),
	HX_("moveUp",cc,d3,ac,cc),
	HX_("moveDown",13,64,25,e5),
	HX_("movePosT",f1,ef,13,ed),
	HX_("mousePosT",05,3d,b1,f6),
	HX_("mouseRectT",4b,26,89,04),
	HX_("posTToPosP",b7,97,9f,a2),
	HX_("sizeTToSizeP",c1,b8,2f,1c),
	HX_("mouseRectP",47,26,89,04),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onKeyUp",3b,58,3c,75),
	HX_("onMouseWheel",35,ca,ca,bf),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onEnterFrame",f4,a5,93,da),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("getOrCreateTile",03,31,32,5e),
	HX_("clearTile",5b,b3,bd,c0),
	HX_("drawTile",52,75,66,61),
	HX_("drawOverlay",ec,87,58,f2),
	HX_("draw",04,2c,70,42),
	::String(null()) };

::hx::Class MEMap_obj::__mClass;

void MEMap_obj::__register()
{
	MEMap_obj _hx_dummy;
	MEMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.MEMap",3f,85,e7,ab);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MEMap_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MEMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MEMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MEMap_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
