// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_mapeditor_Command
#include <mapeditor/Command.h>
#endif
#ifndef INCLUDED_mapeditor_MEClearCommand
#include <mapeditor/MEClearCommand.h>
#endif
#ifndef INCLUDED_mapeditor_MEMap
#include <mapeditor/MEMap.h>
#endif
#ifndef INCLUDED_mapeditor_METile
#include <mapeditor/METile.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_afa3273815470174_8_new,"mapeditor.MEClearCommand","new",0x50d096ad,"mapeditor.MEClearCommand.new","mapeditor/MEClearCommand.hx",8,0xbb818c42)
HX_LOCAL_STACK_FRAME(_hx_pos_afa3273815470174_17_execute,"mapeditor.MEClearCommand","execute",0xb73f7b02,"mapeditor.MEClearCommand.execute","mapeditor/MEClearCommand.hx",17,0xbb818c42)
HX_LOCAL_STACK_FRAME(_hx_pos_afa3273815470174_21_unexecute,"mapeditor.MEClearCommand","unexecute",0xb9590f09,"mapeditor.MEClearCommand.unexecute","mapeditor/MEClearCommand.hx",21,0xbb818c42)
namespace mapeditor{

void MEClearCommand_obj::__construct( ::mapeditor::MEMap map,int x,int y, ::mapeditor::METile oldTile){
            	HX_STACKFRAME(&_hx_pos_afa3273815470174_8_new)
HXLINE(   9)		super::__construct();
HXLINE(  10)		this->map = map;
HXLINE(  11)		this->x = x;
HXLINE(  12)		this->y = y;
HXLINE(  13)		this->oldTile = oldTile->clone();
            	}

Dynamic MEClearCommand_obj::__CreateEmpty() { return new MEClearCommand_obj; }

void *MEClearCommand_obj::_hx_vtable = 0;

Dynamic MEClearCommand_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MEClearCommand_obj > _hx_result = new MEClearCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool MEClearCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20dd1126) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20dd1126;
	} else {
		return inClassId==(int)0x6570d9ff;
	}
}

void MEClearCommand_obj::execute(){
            	HX_STACKFRAME(&_hx_pos_afa3273815470174_17_execute)
HXDLIN(  17)		this->map->eraseTile(this->x,this->y);
            	}


void MEClearCommand_obj::unexecute(){
            	HX_STACKFRAME(&_hx_pos_afa3273815470174_21_unexecute)
HXDLIN(  21)		this->map->setTile(this->x,this->y,this->oldTile);
            	}



::hx::ObjectPtr< MEClearCommand_obj > MEClearCommand_obj::__new( ::mapeditor::MEMap map,int x,int y, ::mapeditor::METile oldTile) {
	::hx::ObjectPtr< MEClearCommand_obj > __this = new MEClearCommand_obj();
	__this->__construct(map,x,y,oldTile);
	return __this;
}

::hx::ObjectPtr< MEClearCommand_obj > MEClearCommand_obj::__alloc(::hx::Ctx *_hx_ctx, ::mapeditor::MEMap map,int x,int y, ::mapeditor::METile oldTile) {
	MEClearCommand_obj *__this = (MEClearCommand_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MEClearCommand_obj), true, "mapeditor.MEClearCommand"));
	*(void **)__this = MEClearCommand_obj::_hx_vtable;
	__this->__construct(map,x,y,oldTile);
	return __this;
}

MEClearCommand_obj::MEClearCommand_obj()
{
}

void MEClearCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MEClearCommand);
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(oldTile,"oldTile");
	HX_MARK_END_CLASS();
}

void MEClearCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(oldTile,"oldTile");
}

::hx::Val MEClearCommand_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oldTile") ) { return ::hx::Val( oldTile ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"unexecute") ) { return ::hx::Val( unexecute_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MEClearCommand_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::mapeditor::MEMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oldTile") ) { oldTile=inValue.Cast<  ::mapeditor::METile >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MEClearCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("oldTile",75,6f,41,02));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MEClearCommand_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::mapeditor::MEMap */ ,(int)offsetof(MEClearCommand_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsInt,(int)offsetof(MEClearCommand_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(MEClearCommand_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsObject /*  ::mapeditor::METile */ ,(int)offsetof(MEClearCommand_obj,oldTile),HX_("oldTile",75,6f,41,02)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MEClearCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String MEClearCommand_obj_sMemberFields[] = {
	HX_("map",9c,0a,53,00),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("oldTile",75,6f,41,02),
	HX_("execute",35,0a,0d,cc),
	HX_("unexecute",fc,10,0f,c8),
	::String(null()) };

::hx::Class MEClearCommand_obj::__mClass;

void MEClearCommand_obj::__register()
{
	MEClearCommand_obj _hx_dummy;
	MEClearCommand_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.MEClearCommand",3b,bc,62,8b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MEClearCommand_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MEClearCommand_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MEClearCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MEClearCommand_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
