// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_mapeditor_Command
#include <mapeditor/Command.h>
#endif
#ifndef INCLUDED_mapeditor_MEMap
#include <mapeditor/MEMap.h>
#endif
#ifndef INCLUDED_mapeditor_MEModifyCommand
#include <mapeditor/MEModifyCommand.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_874ddb50eb839f79_10_new,"mapeditor.MEModifyCommand","new",0xcba30746,"mapeditor.MEModifyCommand.new","mapeditor/MEModifyCommand.hx",10,0xa0f1172b)
HX_LOCAL_STACK_FRAME(_hx_pos_874ddb50eb839f79_21_execute,"mapeditor.MEModifyCommand","execute",0xfc58ac1b,"mapeditor.MEModifyCommand.execute","mapeditor/MEModifyCommand.hx",21,0xa0f1172b)
HX_LOCAL_STACK_FRAME(_hx_pos_874ddb50eb839f79_25_unexecute,"mapeditor.MEModifyCommand","unexecute",0x5bf37862,"mapeditor.MEModifyCommand.unexecute","mapeditor/MEModifyCommand.hx",25,0xa0f1172b)
namespace mapeditor{

void MEModifyCommand_obj::__construct( ::mapeditor::MEMap map,int x,int y,int layer,int oldType,int type){
            	HX_STACKFRAME(&_hx_pos_874ddb50eb839f79_10_new)
HXLINE(  11)		super::__construct();
HXLINE(  12)		this->map = map;
HXLINE(  13)		this->x = x;
HXLINE(  14)		this->y = y;
HXLINE(  15)		this->layer = layer;
HXLINE(  16)		this->oldType = oldType;
HXLINE(  17)		this->newType = type;
            	}

Dynamic MEModifyCommand_obj::__CreateEmpty() { return new MEModifyCommand_obj; }

void *MEModifyCommand_obj::_hx_vtable = 0;

Dynamic MEModifyCommand_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MEModifyCommand_obj > _hx_result = new MEModifyCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool MEModifyCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20dd1126) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20dd1126;
	} else {
		return inClassId==(int)0x39c49a10;
	}
}

void MEModifyCommand_obj::execute(){
            	HX_STACKFRAME(&_hx_pos_874ddb50eb839f79_21_execute)
HXDLIN(  21)		this->map->modifyTile(this->x,this->y,this->layer,this->newType);
            	}


void MEModifyCommand_obj::unexecute(){
            	HX_STACKFRAME(&_hx_pos_874ddb50eb839f79_25_unexecute)
HXDLIN(  25)		this->map->modifyTile(this->x,this->y,this->layer,this->oldType);
            	}



::hx::ObjectPtr< MEModifyCommand_obj > MEModifyCommand_obj::__new( ::mapeditor::MEMap map,int x,int y,int layer,int oldType,int type) {
	::hx::ObjectPtr< MEModifyCommand_obj > __this = new MEModifyCommand_obj();
	__this->__construct(map,x,y,layer,oldType,type);
	return __this;
}

::hx::ObjectPtr< MEModifyCommand_obj > MEModifyCommand_obj::__alloc(::hx::Ctx *_hx_ctx, ::mapeditor::MEMap map,int x,int y,int layer,int oldType,int type) {
	MEModifyCommand_obj *__this = (MEModifyCommand_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MEModifyCommand_obj), true, "mapeditor.MEModifyCommand"));
	*(void **)__this = MEModifyCommand_obj::_hx_vtable;
	__this->__construct(map,x,y,layer,oldType,type);
	return __this;
}

MEModifyCommand_obj::MEModifyCommand_obj()
{
}

void MEModifyCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MEModifyCommand);
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(layer,"layer");
	HX_MARK_MEMBER_NAME(oldType,"oldType");
	HX_MARK_MEMBER_NAME(newType,"newType");
	HX_MARK_END_CLASS();
}

void MEModifyCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(layer,"layer");
	HX_VISIT_MEMBER_NAME(oldType,"oldType");
	HX_VISIT_MEMBER_NAME(newType,"newType");
}

::hx::Val MEModifyCommand_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"layer") ) { return ::hx::Val( layer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oldType") ) { return ::hx::Val( oldType ); }
		if (HX_FIELD_EQ(inName,"newType") ) { return ::hx::Val( newType ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"unexecute") ) { return ::hx::Val( unexecute_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MEModifyCommand_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::mapeditor::MEMap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"layer") ) { layer=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oldType") ) { oldType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newType") ) { newType=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MEModifyCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("layer",d1,81,c0,6f));
	outFields->push(HX_("oldType",01,97,4d,02));
	outFields->push(HX_("newType",3a,9f,d5,fc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MEModifyCommand_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::mapeditor::MEMap */ ,(int)offsetof(MEModifyCommand_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsInt,(int)offsetof(MEModifyCommand_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(MEModifyCommand_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(MEModifyCommand_obj,layer),HX_("layer",d1,81,c0,6f)},
	{::hx::fsInt,(int)offsetof(MEModifyCommand_obj,oldType),HX_("oldType",01,97,4d,02)},
	{::hx::fsInt,(int)offsetof(MEModifyCommand_obj,newType),HX_("newType",3a,9f,d5,fc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MEModifyCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String MEModifyCommand_obj_sMemberFields[] = {
	HX_("map",9c,0a,53,00),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("layer",d1,81,c0,6f),
	HX_("oldType",01,97,4d,02),
	HX_("newType",3a,9f,d5,fc),
	HX_("execute",35,0a,0d,cc),
	HX_("unexecute",fc,10,0f,c8),
	::String(null()) };

::hx::Class MEModifyCommand_obj::__mClass;

void MEModifyCommand_obj::__register()
{
	MEModifyCommand_obj _hx_dummy;
	MEModifyCommand_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.MEModifyCommand",54,ac,78,47);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MEModifyCommand_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MEModifyCommand_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MEModifyCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MEModifyCommand_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
