// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_mapeditor_CommandList
#include <mapeditor/CommandList.h>
#endif
#ifndef INCLUDED_mapeditor_CommandQueue
#include <mapeditor/CommandQueue.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ffea79cefcc2c183_2_new,"mapeditor.CommandQueue","new",0x006ea51d,"mapeditor.CommandQueue.new","mapeditor/CommandQueue.hx",2,0xc04d5612)
HX_LOCAL_STACK_FRAME(_hx_pos_ffea79cefcc2c183_10_addCommandList,"mapeditor.CommandQueue","addCommandList",0xae2c5d0b,"mapeditor.CommandQueue.addCommandList","mapeditor/CommandQueue.hx",10,0xc04d5612)
HX_LOCAL_STACK_FRAME(_hx_pos_ffea79cefcc2c183_17_undo,"mapeditor.CommandQueue","undo",0x650916c7,"mapeditor.CommandQueue.undo","mapeditor/CommandQueue.hx",17,0xc04d5612)
HX_LOCAL_STACK_FRAME(_hx_pos_ffea79cefcc2c183_24_redo,"mapeditor.CommandQueue","redo",0x63069ea1,"mapeditor.CommandQueue.redo","mapeditor/CommandQueue.hx",24,0xc04d5612)
HX_LOCAL_STACK_FRAME(_hx_pos_ffea79cefcc2c183_31_clear,"mapeditor.CommandQueue","clear",0xa462af8a,"mapeditor.CommandQueue.clear","mapeditor/CommandQueue.hx",31,0xc04d5612)
namespace mapeditor{

void CommandQueue_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ffea79cefcc2c183_2_new)
HXLINE(   4)		this->currPos = 0;
HXLINE(   7)		this->list = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic CommandQueue_obj::__CreateEmpty() { return new CommandQueue_obj; }

void *CommandQueue_obj::_hx_vtable = 0;

Dynamic CommandQueue_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CommandQueue_obj > _hx_result = new CommandQueue_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CommandQueue_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5ff5376f;
}

void CommandQueue_obj::addCommandList( ::mapeditor::CommandList commandList){
            	HX_STACKFRAME(&_hx_pos_ffea79cefcc2c183_10_addCommandList)
HXLINE(  11)		this->list->resize(this->currPos);
HXLINE(  12)		commandList->execute();
HXLINE(  13)		this->list->push(commandList);
HXLINE(  14)		this->currPos++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CommandQueue_obj,addCommandList,(void))

void CommandQueue_obj::undo(){
            	HX_STACKFRAME(&_hx_pos_ffea79cefcc2c183_17_undo)
HXLINE(  18)		if ((this->currPos == 0)) {
HXLINE(  19)			return;
            		}
HXLINE(  21)		this->list->__get(--this->currPos).StaticCast<  ::mapeditor::CommandList >()->unexecute();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandQueue_obj,undo,(void))

void CommandQueue_obj::redo(){
            	HX_STACKFRAME(&_hx_pos_ffea79cefcc2c183_24_redo)
HXLINE(  25)		if ((this->currPos == this->list->length)) {
HXLINE(  26)			return;
            		}
HXLINE(  28)		this->list->__get(this->currPos++).StaticCast<  ::mapeditor::CommandList >()->execute();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandQueue_obj,redo,(void))

void CommandQueue_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_ffea79cefcc2c183_31_clear)
HXLINE(  32)		this->currPos = 0;
HXLINE(  33)		this->list->resize(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandQueue_obj,clear,(void))


::hx::ObjectPtr< CommandQueue_obj > CommandQueue_obj::__new() {
	::hx::ObjectPtr< CommandQueue_obj > __this = new CommandQueue_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CommandQueue_obj > CommandQueue_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CommandQueue_obj *__this = (CommandQueue_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CommandQueue_obj), true, "mapeditor.CommandQueue"));
	*(void **)__this = CommandQueue_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CommandQueue_obj::CommandQueue_obj()
{
}

void CommandQueue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CommandQueue);
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(currPos,"currPos");
	HX_MARK_END_CLASS();
}

void CommandQueue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(currPos,"currPos");
}

::hx::Val CommandQueue_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return ::hx::Val( list ); }
		if (HX_FIELD_EQ(inName,"undo") ) { return ::hx::Val( undo_dyn() ); }
		if (HX_FIELD_EQ(inName,"redo") ) { return ::hx::Val( redo_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"currPos") ) { return ::hx::Val( currPos ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addCommandList") ) { return ::hx::Val( addCommandList_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CommandQueue_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"currPos") ) { currPos=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CommandQueue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("list",5e,1c,b3,47));
	outFields->push(HX_("currPos",c2,ad,d3,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CommandQueue_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CommandQueue_obj,list),HX_("list",5e,1c,b3,47)},
	{::hx::fsInt,(int)offsetof(CommandQueue_obj,currPos),HX_("currPos",c2,ad,d3,cb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CommandQueue_obj_sStaticStorageInfo = 0;
#endif

static ::String CommandQueue_obj_sMemberFields[] = {
	HX_("list",5e,1c,b3,47),
	HX_("currPos",c2,ad,d3,cb),
	HX_("addCommandList",a8,c2,ea,7a),
	HX_("undo",24,c6,a9,4d),
	HX_("redo",fe,4d,a7,4b),
	HX_("clear",8d,71,5b,48),
	::String(null()) };

::hx::Class CommandQueue_obj::__mClass;

void CommandQueue_obj::__register()
{
	CommandQueue_obj _hx_dummy;
	CommandQueue_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.CommandQueue",ab,d2,5c,e8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CommandQueue_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CommandQueue_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CommandQueue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CommandQueue_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
