// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_map_RegionLibrary
#include <map/RegionLibrary.h>
#endif
#ifndef INCLUDED_mapeditor_InfoPane
#include <mapeditor/InfoPane.h>
#endif
#ifndef INCLUDED_mapeditor_Layer
#include <mapeditor/Layer.h>
#endif
#ifndef INCLUDED_mapeditor_MEMap
#include <mapeditor/MEMap.h>
#endif
#ifndef INCLUDED_mapeditor_METile
#include <mapeditor/METile.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_StyleSheet
#include <openfl/text/StyleSheet.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_83b8f819afbdce9b_33_new,"mapeditor.InfoPane","new",0xc191be4d,"mapeditor.InfoPane.new","mapeditor/InfoPane.hx",33,0xe912b762)
HX_LOCAL_STACK_FRAME(_hx_pos_83b8f819afbdce9b_66_onAddedToStage,"mapeditor.InfoPane","onAddedToStage",0x4adc3155,"mapeditor.InfoPane.onAddedToStage","mapeditor/InfoPane.hx",66,0xe912b762)
HX_LOCAL_STACK_FRAME(_hx_pos_83b8f819afbdce9b_70_onRemovedFromStage,"mapeditor.InfoPane","onRemovedFromStage",0x3b949126,"mapeditor.InfoPane.onRemovedFromStage","mapeditor/InfoPane.hx",70,0xe912b762)
HX_LOCAL_STACK_FRAME(_hx_pos_83b8f819afbdce9b_73_onEnterFrame,"mapeditor.InfoPane","onEnterFrame",0x7fa11267,"mapeditor.InfoPane.onEnterFrame","mapeditor/InfoPane.hx",73,0xe912b762)
HX_LOCAL_STACK_FRAME(_hx_pos_83b8f819afbdce9b_96_drawBackground,"mapeditor.InfoPane","drawBackground",0x1dbf2045,"mapeditor.InfoPane.drawBackground","mapeditor/InfoPane.hx",96,0xe912b762)
static const int _hx_array_data_4f4f93db_5[] = {
	(int)1,(int)1,(int)1,(int)1,
};
namespace mapeditor{

void InfoPane_obj::__construct( ::mapeditor::MEMap meMap){
            	HX_GC_STACKFRAME(&_hx_pos_83b8f819afbdce9b_33_new)
HXLINE(  34)		super::__construct();
HXLINE(  36)		this->path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  37)		this->graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(5)->init(0, ::openfl::display::GraphicsStroke_obj::__alloc( HX_CTX ,1,false,2,0,2,3, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,16777215,1)))->init(1, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,3552822,1))->init(2, ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null()))->init(3,::util::GraphicsUtil_obj::END_FILL)->init(4,::util::GraphicsUtil_obj::END_STROKE),true);
HXLINE(  45)		this->meMap = meMap;
HXLINE(  46)		this->drawBackground();
HXLINE(  47)		this->rectText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,16777215,false,124,0,null());
HXLINE(  48)		 ::ui::SimpleText _hx_tmp = this->rectText;
HXDLIN(  48)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  49)		this->rectText->set_y(( (Float)(4) ));
HXLINE(  50)		this->rectText->set_x(( (Float)(4) ));
HXLINE(  51)		this->addChild(this->rectText);
HXLINE(  52)		 ::openfl::text::StyleSheet sheet =  ::openfl::text::StyleSheet_obj::__alloc( HX_CTX );
HXLINE(  53)		sheet->parseCSS(HX_(".in { margin-left:10px; text-indent: -10px; }",64,41,ae,a5));
HXLINE(  54)		this->typeText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,12,16777215,false,124,0,null());
HXLINE(  55)		this->typeText->set_styleSheet(sheet);
HXLINE(  56)		this->typeText->set_wordWrap(true);
HXLINE(  57)		 ::ui::SimpleText _hx_tmp1 = this->typeText;
HXDLIN(  57)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  58)		this->typeText->set_x(( (Float)(4) ));
HXLINE(  59)		this->typeText->set_y(( (Float)(36) ));
HXLINE(  60)		this->addChild(this->typeText);
HXLINE(  61)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  62)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic InfoPane_obj::__CreateEmpty() { return new InfoPane_obj; }

void *InfoPane_obj::_hx_vtable = 0;

Dynamic InfoPane_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InfoPane_obj > _hx_result = new InfoPane_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InfoPane_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x6e9d469f;
		}
	}
}

void InfoPane_obj::onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_83b8f819afbdce9b_66_onAddedToStage)
HXDLIN(  66)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(InfoPane_obj,onAddedToStage,(void))

void InfoPane_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_83b8f819afbdce9b_70_onRemovedFromStage)
HXDLIN(  70)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(InfoPane_obj,onRemovedFromStage,(void))

void InfoPane_obj::onEnterFrame( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_83b8f819afbdce9b_73_onEnterFrame)
HXLINE(  74)		 ::openfl::geom::Rectangle mouseRectT = this->meMap->mouseRectT();
HXLINE(  75)		this->rectText->set_text((((HX_("Position: ",af,13,14,6e) + mouseRectT->x) + HX_(", ",74,26,00,00)) + mouseRectT->y));
HXLINE(  76)		bool _hx_tmp;
HXDLIN(  76)		if (!((mouseRectT->width > 1))) {
HXLINE(  76)			_hx_tmp = (mouseRectT->height > 1);
            		}
            		else {
HXLINE(  76)			_hx_tmp = true;
            		}
HXDLIN(  76)		if (_hx_tmp) {
HXLINE(  77)			 ::ui::SimpleText fh = this->rectText;
HXDLIN(  77)			::String _hx_tmp1 = fh->get_text();
HXDLIN(  77)			fh->set_text((_hx_tmp1 + (((HX_("\nRect: ",74,28,5b,d2) + mouseRectT->width) + HX_(", ",74,26,00,00)) + mouseRectT->height)));
            		}
HXLINE(  79)		this->rectText->useTextDimensions();
HXLINE(  80)		 ::mapeditor::MEMap tile = this->meMap;
HXDLIN(  80)		int tile1 = ::Std_obj::_hx_int(mouseRectT->x);
HXDLIN(  80)		 ::mapeditor::METile tile2 = tile->getTile(tile1,::Std_obj::_hx_int(mouseRectT->y));
HXLINE(  81)		::Array< int > types;
HXDLIN(  81)		if (::hx::IsNull( tile2 )) {
HXLINE(  81)			types = ::mapeditor::Layer_obj::EMPTY_TILE;
            		}
            		else {
HXLINE(  81)			types = tile2->types;
            		}
HXLINE(  82)		::String groundId;
HXDLIN(  82)		if ((types->__get(0) == 65535)) {
HXLINE(  82)			groundId = HX_("None",d8,3e,e3,33);
            		}
            		else {
HXLINE(  82)			groundId = ::map::GroundLibrary_obj::getIdFromType(types->__get(0));
            		}
HXLINE(  83)		::String objectId;
HXDLIN(  83)		if ((types->__get(1) == 65535)) {
HXLINE(  83)			objectId = HX_("None",d8,3e,e3,33);
            		}
            		else {
HXLINE(  83)			objectId = ::objects::ObjectLibrary_obj::getIdFromType(types->__get(1));
            		}
HXLINE(  84)		::String regionId;
HXDLIN(  84)		if ((types->__get(2) == 255)) {
HXLINE(  84)			regionId = HX_("None",d8,3e,e3,33);
            		}
            		else {
HXLINE(  84)			regionId = ::map::RegionLibrary_obj::getIdFromType(types->__get(2));
            		}
HXLINE(  85)		this->typeText->set_text((((((((HX_("<span class='in'>",c4,e3,02,af) + HX_("Ground: ",0d,01,0d,6a)) + groundId) + HX_("\nObject: ",4f,f5,4b,9a)) + objectId) + HX_("\nRegion: ",c4,ee,15,e5)) + regionId) + HX_("</span>",e1,60,34,0b)));
HXLINE(  93)		this->typeText->useTextDimensions();
            	}


HX_DEFINE_DYNAMIC_FUNC1(InfoPane_obj,onEnterFrame,(void))

void InfoPane_obj::drawBackground(){
            	HX_STACKFRAME(&_hx_pos_83b8f819afbdce9b_96_drawBackground)
HXLINE(  97)		::util::GraphicsUtil_obj::clearPath(this->path);
HXLINE(  98)		::util::GraphicsUtil_obj::drawCutEdgeRect(0,0,134,150,4,::Array_obj< int >::fromData( _hx_array_data_4f4f93db_5,4),this->path);
HXLINE(  99)		this->graphicsData->set(2,this->path);
HXLINE( 100)		this->get_graphics()->drawGraphicsData(this->graphicsData);
            	}


HX_DEFINE_DYNAMIC_FUNC0(InfoPane_obj,drawBackground,(void))


::hx::ObjectPtr< InfoPane_obj > InfoPane_obj::__new( ::mapeditor::MEMap meMap) {
	::hx::ObjectPtr< InfoPane_obj > __this = new InfoPane_obj();
	__this->__construct(meMap);
	return __this;
}

::hx::ObjectPtr< InfoPane_obj > InfoPane_obj::__alloc(::hx::Ctx *_hx_ctx, ::mapeditor::MEMap meMap) {
	InfoPane_obj *__this = (InfoPane_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InfoPane_obj), true, "mapeditor.InfoPane"));
	*(void **)__this = InfoPane_obj::_hx_vtable;
	__this->__construct(meMap);
	return __this;
}

InfoPane_obj::InfoPane_obj()
{
}

void InfoPane_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InfoPane);
	HX_MARK_MEMBER_NAME(meMap,"meMap");
	HX_MARK_MEMBER_NAME(rectText,"rectText");
	HX_MARK_MEMBER_NAME(typeText,"typeText");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void InfoPane_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(meMap,"meMap");
	HX_VISIT_MEMBER_NAME(rectText,"rectText");
	HX_VISIT_MEMBER_NAME(typeText,"typeText");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val InfoPane_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { return ::hx::Val( path ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"meMap") ) { return ::hx::Val( meMap ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rectText") ) { return ::hx::Val( rectText ); }
		if (HX_FIELD_EQ(inName,"typeText") ) { return ::hx::Val( typeText ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { return ::hx::Val( graphicsData ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return ::hx::Val( onEnterFrame_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawBackground") ) { return ::hx::Val( drawBackground_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InfoPane_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast<  ::openfl::display::GraphicsPath >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"meMap") ) { meMap=inValue.Cast<  ::mapeditor::MEMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rectText") ) { rectText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typeText") ) { typeText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { graphicsData=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InfoPane_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("meMap",24,8a,aa,05));
	outFields->push(HX_("rectText",f1,a7,11,78));
	outFields->push(HX_("typeText",87,d0,c4,b9));
	outFields->push(HX_("path",a5,e5,51,4a));
	outFields->push(HX_("graphicsData",95,3c,58,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InfoPane_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::mapeditor::MEMap */ ,(int)offsetof(InfoPane_obj,meMap),HX_("meMap",24,8a,aa,05)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(InfoPane_obj,rectText),HX_("rectText",f1,a7,11,78)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(InfoPane_obj,typeText),HX_("typeText",87,d0,c4,b9)},
	{::hx::fsObject /*  ::openfl::display::GraphicsPath */ ,(int)offsetof(InfoPane_obj,path),HX_("path",a5,e5,51,4a)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(InfoPane_obj,graphicsData),HX_("graphicsData",95,3c,58,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InfoPane_obj_sStaticStorageInfo = 0;
#endif

static ::String InfoPane_obj_sMemberFields[] = {
	HX_("meMap",24,8a,aa,05),
	HX_("rectText",f1,a7,11,78),
	HX_("typeText",87,d0,c4,b9),
	HX_("path",a5,e5,51,4a),
	HX_("graphicsData",95,3c,58,41),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onEnterFrame",f4,a5,93,da),
	HX_("drawBackground",12,71,27,09),
	::String(null()) };

::hx::Class InfoPane_obj::__mClass;

void InfoPane_obj::__register()
{
	InfoPane_obj _hx_dummy;
	InfoPane_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.InfoPane",db,93,4f,4f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InfoPane_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InfoPane_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InfoPane_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InfoPane_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
