// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_mapeditor_Chooser
#include <mapeditor/Chooser.h>
#endif
#ifndef INCLUDED_mapeditor_Element
#include <mapeditor/Element.h>
#endif
#ifndef INCLUDED_mapeditor_ObjectChooser
#include <mapeditor/ObjectChooser.h>
#endif
#ifndef INCLUDED_mapeditor_ObjectElement
#include <mapeditor/ObjectElement.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d743eae1731c4a40_14_new,"mapeditor.ObjectChooser","new",0x46203b29,"mapeditor.ObjectChooser.new","mapeditor/ObjectChooser.hx",14,0x2e50ee68)
HX_DEFINE_STACK_FRAME(_hx_pos_d743eae1731c4a40_8_new,"mapeditor.ObjectChooser","new",0x46203b29,"mapeditor.ObjectChooser.new","mapeditor/ObjectChooser.hx",8,0x2e50ee68)
HX_LOCAL_STACK_FRAME(_hx_pos_d743eae1731c4a40_39_reloadObjects,"mapeditor.ObjectChooser","reloadObjects",0x97026a84,"mapeditor.ObjectChooser.reloadObjects","mapeditor/ObjectChooser.hx",39,0x2e50ee68)
HX_LOCAL_STACK_FRAME(_hx_pos_d743eae1731c4a40_31_reloadObjects,"mapeditor.ObjectChooser","reloadObjects",0x97026a84,"mapeditor.ObjectChooser.reloadObjects","mapeditor/ObjectChooser.hx",31,0x2e50ee68)
namespace mapeditor{

void ObjectChooser_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(::String s1,::String s2){
            			HX_STACKFRAME(&_hx_pos_d743eae1731c4a40_14_new)
HXLINE(  15)			::String a = s1.toLowerCase();
HXLINE(  16)			::String b = s2.toLowerCase();
HXLINE(  17)			if ((a < b)) {
HXLINE(  18)				return -1;
            			}
HXLINE(  19)			if ((a > b)) {
HXLINE(  20)				return 1;
            			}
HXLINE(  21)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_d743eae1731c4a40_8_new)
HXLINE(   9)		super::__construct(1);
HXLINE(  10)		::Array< ::String > ids = ::Array_obj< ::String >::__new();
HXLINE(  11)		{
HXLINE(  11)			 ::Dynamic id = ::objects::ObjectLibrary_obj::idToType->keys();
HXDLIN(  11)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  12)				ids->push(id->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)());
            			}
            		}
HXLINE(  14)		ids->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(  23)		{
HXLINE(  23)			int _g = 0;
HXDLIN(  23)			while((_g < ids->length)){
HXLINE(  23)				::String id1 = ids->__get(_g);
HXDLIN(  23)				_g = (_g + 1);
HXLINE(  24)				 ::Dynamic type = ::objects::ObjectLibrary_obj::idToType->get(id1);
HXLINE(  25)				 ::Xml objXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(type)) );
HXLINE(  26)				bool _hx_tmp;
HXDLIN(  26)				bool _hx_tmp1;
HXDLIN(  26)				if (!(( (bool)(objXML->elementsNamed(HX_("Item",33,f1,98,30))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ))) {
HXLINE(  26)					_hx_tmp1 = ( (bool)(objXML->elementsNamed(HX_("Player",81,5f,4d,6c))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            				}
            				else {
HXLINE(  26)					_hx_tmp1 = true;
            				}
HXDLIN(  26)				if (!(_hx_tmp1)) {
HXLINE(  26)					::String _hx_tmp2;
HXDLIN(  26)					if (( (bool)(objXML->elementsNamed(HX_("Class",18,e8,85,db))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  26)						 ::Xml _this = ( ( ::Xml)(objXML->elementsNamed(HX_("Class",18,e8,85,db))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  26)						bool _hx_tmp3;
HXDLIN(  26)						if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  26)							_hx_tmp3 = (_this->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE(  26)							_hx_tmp3 = false;
            						}
HXDLIN(  26)						if (_hx_tmp3) {
HXLINE(  26)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            						}
HXDLIN(  26)						 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  26)						bool _hx_tmp4;
HXDLIN(  26)						if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  26)							_hx_tmp4 = (_this1->nodeType == ::Xml_obj::Element);
            						}
            						else {
HXLINE(  26)							_hx_tmp4 = true;
            						}
HXDLIN(  26)						if (_hx_tmp4) {
HXLINE(  26)							HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            						}
HXDLIN(  26)						_hx_tmp2 = _this1->nodeValue;
            					}
            					else {
HXLINE(  26)						_hx_tmp2 = HX_("",00,00,00,00);
            					}
HXDLIN(  26)					_hx_tmp = (_hx_tmp2 == HX_("Projectile",09,8a,3c,bb));
            				}
            				else {
HXLINE(  26)					_hx_tmp = true;
            				}
HXDLIN(  26)				if (!(_hx_tmp)) {
HXLINE(  27)					this->addElement( ::mapeditor::ObjectElement_obj::__alloc( HX_CTX ,objXML));
            				}
            			}
            		}
            	}

Dynamic ObjectChooser_obj::__CreateEmpty() { return new ObjectChooser_obj; }

void *ObjectChooser_obj::_hx_vtable = 0;

Dynamic ObjectChooser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ObjectChooser_obj > _hx_result = new ObjectChooser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ObjectChooser_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1596b732 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x652f3973) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x652f3973;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void ObjectChooser_obj::reloadObjects(::String search){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(::String s1,::String s2){
            			HX_STACKFRAME(&_hx_pos_d743eae1731c4a40_39_reloadObjects)
HXLINE(  40)			::String a = s1.toLowerCase();
HXLINE(  41)			::String b = s2.toLowerCase();
HXLINE(  42)			if ((a < b)) {
HXLINE(  43)				return -1;
            			}
HXLINE(  44)			if ((a > b)) {
HXLINE(  45)				return 1;
            			}
HXLINE(  46)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_d743eae1731c4a40_31_reloadObjects)
HXLINE(  32)		this->removeElements();
HXLINE(  34)		::Array< ::String > ids = ::Array_obj< ::String >::__new();
HXLINE(  35)		{
HXLINE(  35)			 ::Dynamic id = ::objects::ObjectLibrary_obj::idToType->keys();
HXDLIN(  35)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  35)				::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  36)				bool _hx_tmp;
HXDLIN(  36)				if ((search != HX_("",00,00,00,00))) {
HXLINE(  36)					_hx_tmp = (id1.toLowerCase().indexOf(search,null()) != -1);
            				}
            				else {
HXLINE(  36)					_hx_tmp = true;
            				}
HXDLIN(  36)				if (_hx_tmp) {
HXLINE(  37)					ids->push(id1);
            				}
            			}
            		}
HXLINE(  39)		ids->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(  48)		{
HXLINE(  48)			int _g = 0;
HXDLIN(  48)			while((_g < ids->length)){
HXLINE(  48)				::String id2 = ids->__get(_g);
HXDLIN(  48)				_g = (_g + 1);
HXLINE(  49)				 ::Dynamic type = ::objects::ObjectLibrary_obj::idToType->get(id2);
HXLINE(  50)				 ::Xml objXML = ( ( ::Xml)(::objects::ObjectLibrary_obj::xmlLibrary->get(type)) );
HXLINE(  51)				bool _hx_tmp1;
HXDLIN(  51)				bool _hx_tmp2;
HXDLIN(  51)				if (!(( (bool)(objXML->elementsNamed(HX_("Item",33,f1,98,30))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ))) {
HXLINE(  51)					_hx_tmp2 = ( (bool)(objXML->elementsNamed(HX_("Player",81,5f,4d,6c))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            				}
            				else {
HXLINE(  51)					_hx_tmp2 = true;
            				}
HXDLIN(  51)				if (!(_hx_tmp2)) {
HXLINE(  51)					::String _hx_tmp3;
HXDLIN(  51)					if (( (bool)(objXML->elementsNamed(HX_("Class",18,e8,85,db))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  51)						 ::Xml _this = ( ( ::Xml)(objXML->elementsNamed(HX_("Class",18,e8,85,db))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  51)						bool _hx_tmp4;
HXDLIN(  51)						if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  51)							_hx_tmp4 = (_this->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE(  51)							_hx_tmp4 = false;
            						}
HXDLIN(  51)						if (_hx_tmp4) {
HXLINE(  51)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            						}
HXDLIN(  51)						 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  51)						bool _hx_tmp5;
HXDLIN(  51)						if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  51)							_hx_tmp5 = (_this1->nodeType == ::Xml_obj::Element);
            						}
            						else {
HXLINE(  51)							_hx_tmp5 = true;
            						}
HXDLIN(  51)						if (_hx_tmp5) {
HXLINE(  51)							HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            						}
HXDLIN(  51)						_hx_tmp3 = _this1->nodeValue;
            					}
            					else {
HXLINE(  51)						_hx_tmp3 = HX_("",00,00,00,00);
            					}
HXDLIN(  51)					_hx_tmp1 = (_hx_tmp3 == HX_("Projectile",09,8a,3c,bb));
            				}
            				else {
HXLINE(  51)					_hx_tmp1 = true;
            				}
HXDLIN(  51)				if (!(_hx_tmp1)) {
HXLINE(  52)					this->addElement( ::mapeditor::ObjectElement_obj::__alloc( HX_CTX ,objXML));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectChooser_obj,reloadObjects,(void))


::hx::ObjectPtr< ObjectChooser_obj > ObjectChooser_obj::__new() {
	::hx::ObjectPtr< ObjectChooser_obj > __this = new ObjectChooser_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ObjectChooser_obj > ObjectChooser_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ObjectChooser_obj *__this = (ObjectChooser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ObjectChooser_obj), true, "mapeditor.ObjectChooser"));
	*(void **)__this = ObjectChooser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ObjectChooser_obj::ObjectChooser_obj()
{
}

::hx::Val ObjectChooser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"reloadObjects") ) { return ::hx::Val( reloadObjects_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ObjectChooser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ObjectChooser_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectChooser_obj_sMemberFields[] = {
	HX_("reloadObjects",7b,4a,2b,53),
	::String(null()) };

::hx::Class ObjectChooser_obj::__mClass;

void ObjectChooser_obj::__register()
{
	ObjectChooser_obj _hx_dummy;
	ObjectChooser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.ObjectChooser",b7,72,6f,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ObjectChooser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ObjectChooser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectChooser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectChooser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
