// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_mapeditor_CommandMenu
#include <mapeditor/CommandMenu.h>
#endif
#ifndef INCLUDED_mapeditor_CommandMenuItem
#include <mapeditor/CommandMenuItem.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ca4db69634762486_8_new,"mapeditor.CommandMenu","new",0xf0080937,"mapeditor.CommandMenu.new","mapeditor/CommandMenu.hx",8,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_21_getCommand,"mapeditor.CommandMenu","getCommand",0x11ef975e,"mapeditor.CommandMenu.getCommand","mapeditor/CommandMenu.hx",21,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_25_setCommand,"mapeditor.CommandMenu","setCommand",0x156d35d2,"mapeditor.CommandMenu.setCommand","mapeditor/CommandMenu.hx",25,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_35_setSelected,"mapeditor.CommandMenu","setSelected",0x9d395bf4,"mapeditor.CommandMenu.setSelected","mapeditor/CommandMenu.hx",35,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_44_onAddedToStage,"mapeditor.CommandMenu","onAddedToStage",0xd2d05aab,"mapeditor.CommandMenu.onAddedToStage","mapeditor/CommandMenu.hx",44,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_48_onRemovedFromStage,"mapeditor.CommandMenu","onRemovedFromStage",0xbfc71d7c,"mapeditor.CommandMenu.onRemovedFromStage","mapeditor/CommandMenu.hx",48,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_51_onKeyDown,"mapeditor.CommandMenu","onKeyDown",0xc1271659,"mapeditor.CommandMenu.onKeyDown","mapeditor/CommandMenu.hx",51,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_62_addCommandMenuItem,"mapeditor.CommandMenu","addCommandMenuItem",0xb415d6a5,"mapeditor.CommandMenu.addCommandMenuItem","mapeditor/CommandMenu.hx",62,0x0e98e9da)
HX_LOCAL_STACK_FRAME(_hx_pos_ca4db69634762486_74_addBreak,"mapeditor.CommandMenu","addBreak",0xc904a6a7,"mapeditor.CommandMenu.addBreak","mapeditor/CommandMenu.hx",74,0x0e98e9da)
namespace mapeditor{

void CommandMenu_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ca4db69634762486_8_new)
HXLINE(  11)		this->selected = null();
HXLINE(  10)		this->yOffset = 0;
HXLINE(  14)		super::__construct();
HXLINE(  15)		this->keyCodeDict =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  16)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  17)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic CommandMenu_obj::__CreateEmpty() { return new CommandMenu_obj; }

void *CommandMenu_obj::_hx_vtable = 0;

Dynamic CommandMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CommandMenu_obj > _hx_result = new CommandMenu_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CommandMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x37a60de5 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

int CommandMenu_obj::getCommand(){
            	HX_STACKFRAME(&_hx_pos_ca4db69634762486_21_getCommand)
HXDLIN(  21)		return this->selected->command;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandMenu_obj,getCommand,return )

void CommandMenu_obj::setCommand(int command){
            	HX_STACKFRAME(&_hx_pos_ca4db69634762486_25_setCommand)
HXDLIN(  25)		int _g = 0;
HXDLIN(  25)		int _g1 = this->get_numChildren();
HXDLIN(  25)		while((_g < _g1)){
HXDLIN(  25)			_g = (_g + 1);
HXLINE(  26)			 ::mapeditor::CommandMenuItem item = ::hx::TCast<  ::mapeditor::CommandMenuItem >::cast(this->getChildAt((_g - 1)));
HXLINE(  27)			if (::hx::IsNotNull( item )) {
HXLINE(  28)				if ((item->command == command)) {
HXLINE(  29)					this->setSelected(item);
HXLINE(  30)					goto _hx_goto_2;
            				}
            			}
            		}
            		_hx_goto_2:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CommandMenu_obj,setCommand,(void))

void CommandMenu_obj::setSelected( ::mapeditor::CommandMenuItem item){
            	HX_STACKFRAME(&_hx_pos_ca4db69634762486_35_setSelected)
HXLINE(  36)		if (::hx::IsNotNull( this->selected )) {
HXLINE(  37)			this->selected->setSelected(false);
            		}
HXLINE(  39)		this->selected = item;
HXLINE(  40)		this->selected->setSelected(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CommandMenu_obj,setSelected,(void))

void CommandMenu_obj::onAddedToStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_ca4db69634762486_44_onAddedToStage)
HXDLIN(  44)		this->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CommandMenu_obj,onAddedToStage,(void))

void CommandMenu_obj::onRemovedFromStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_ca4db69634762486_48_onRemovedFromStage)
HXDLIN(  48)		this->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CommandMenu_obj,onRemovedFromStage,(void))

void CommandMenu_obj::onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_ca4db69634762486_51_onKeyDown)
HXLINE(  52)		if (::hx::IsNotNull( this->stage->get_focus() )) {
HXLINE(  53)			return;
            		}
HXLINE(  55)		 ::mapeditor::CommandMenuItem item = ( ( ::mapeditor::CommandMenuItem)(this->keyCodeDict->get(event->keyCode)) );
HXLINE(  56)		if (::hx::IsNull( item )) {
HXLINE(  57)			return;
            		}
HXLINE(  59)		item->callback(item);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CommandMenu_obj,onKeyDown,(void))

void CommandMenu_obj::addCommandMenuItem(::String label,int keyCode, ::Dynamic callback,int command){
            	HX_GC_STACKFRAME(&_hx_pos_ca4db69634762486_62_addCommandMenuItem)
HXLINE(  63)		 ::mapeditor::CommandMenuItem commandMenuItem =  ::mapeditor::CommandMenuItem_obj::__alloc( HX_CTX ,label,callback,command);
HXLINE(  64)		commandMenuItem->set_y(( (Float)(this->yOffset) ));
HXLINE(  65)		this->addChild(commandMenuItem);
HXLINE(  66)		this->keyCodeDict->set(keyCode,commandMenuItem);
HXLINE(  67)		if (::hx::IsNull( this->selected )) {
HXLINE(  68)			this->setSelected(commandMenuItem);
            		}
HXLINE(  70)		this->yOffset = (this->yOffset + 30);
            	}


HX_DEFINE_DYNAMIC_FUNC4(CommandMenu_obj,addCommandMenuItem,(void))

void CommandMenu_obj::addBreak(){
            	HX_STACKFRAME(&_hx_pos_ca4db69634762486_74_addBreak)
HXDLIN(  74)		this->yOffset = (this->yOffset + 30);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CommandMenu_obj,addBreak,(void))


::hx::ObjectPtr< CommandMenu_obj > CommandMenu_obj::__new() {
	::hx::ObjectPtr< CommandMenu_obj > __this = new CommandMenu_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CommandMenu_obj > CommandMenu_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CommandMenu_obj *__this = (CommandMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CommandMenu_obj), true, "mapeditor.CommandMenu"));
	*(void **)__this = CommandMenu_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CommandMenu_obj::CommandMenu_obj()
{
}

void CommandMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CommandMenu);
	HX_MARK_MEMBER_NAME(keyCodeDict,"keyCodeDict");
	HX_MARK_MEMBER_NAME(yOffset,"yOffset");
	HX_MARK_MEMBER_NAME(selected,"selected");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CommandMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyCodeDict,"keyCodeDict");
	HX_VISIT_MEMBER_NAME(yOffset,"yOffset");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CommandMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"yOffset") ) { return ::hx::Val( yOffset ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"addBreak") ) { return ::hx::Val( addBreak_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return ::hx::Val( onKeyDown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getCommand") ) { return ::hx::Val( getCommand_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCommand") ) { return ::hx::Val( setCommand_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyCodeDict") ) { return ::hx::Val( keyCodeDict ); }
		if (HX_FIELD_EQ(inName,"setSelected") ) { return ::hx::Val( setSelected_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCommandMenuItem") ) { return ::hx::Val( addCommandMenuItem_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CommandMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"yOffset") ) { yOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast<  ::mapeditor::CommandMenuItem >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyCodeDict") ) { keyCodeDict=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CommandMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyCodeDict",02,4e,e0,be));
	outFields->push(HX_("yOffset",ec,2c,79,3c));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CommandMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(CommandMenu_obj,keyCodeDict),HX_("keyCodeDict",02,4e,e0,be)},
	{::hx::fsInt,(int)offsetof(CommandMenu_obj,yOffset),HX_("yOffset",ec,2c,79,3c)},
	{::hx::fsObject /*  ::mapeditor::CommandMenuItem */ ,(int)offsetof(CommandMenu_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CommandMenu_obj_sStaticStorageInfo = 0;
#endif

static ::String CommandMenu_obj_sMemberFields[] = {
	HX_("keyCodeDict",02,4e,e0,be),
	HX_("yOffset",ec,2c,79,3c),
	HX_("selected",5b,2a,6d,b1),
	HX_("getCommand",55,f7,ce,d0),
	HX_("setCommand",c9,95,4c,d4),
	HX_("setSelected",1d,f4,cd,e1),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onKeyDown",42,22,f2,73),
	HX_("addCommandMenuItem",9c,85,d8,06),
	HX_("addBreak",de,4a,49,32),
	::String(null()) };

::hx::Class CommandMenu_obj::__mClass;

void CommandMenu_obj::__register()
{
	CommandMenu_obj _hx_dummy;
	CommandMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.CommandMenu",c5,a1,77,d8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CommandMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CommandMenu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CommandMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CommandMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
