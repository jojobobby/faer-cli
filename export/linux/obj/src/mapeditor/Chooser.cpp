// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_mapeditor_Chooser
#include <mapeditor/Chooser.h>
#endif
#ifndef INCLUDED_mapeditor_Element
#include <mapeditor/Element.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsSolidFill
#include <openfl/display/GraphicsSolidFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_ui_Scrollbar
#include <ui/Scrollbar.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f992d9691ade2d4d_18_new,"mapeditor.Chooser","new",0xfd277968,"mapeditor.Chooser.new","mapeditor/Chooser.hx",18,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_63_selectedType,"mapeditor.Chooser","selectedType",0x59e608ad,"mapeditor.Chooser.selectedType","mapeditor/Chooser.hx",63,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_67_setSelectedType,"mapeditor.Chooser","setSelectedType",0xaa89fa7f,"mapeditor.Chooser.setSelectedType","mapeditor/Chooser.hx",67,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_74_removeElements,"mapeditor.Chooser","removeElements",0x9980d693,"mapeditor.Chooser.removeElements","mapeditor/Chooser.hx",74,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_88_addElement,"mapeditor.Chooser","addElement",0x1855e293,"mapeditor.Chooser.addElement","mapeditor/Chooser.hx",88,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_101_onMouseDown,"mapeditor.Chooser","onMouseDown",0x8eb58510,"mapeditor.Chooser.onMouseDown","mapeditor/Chooser.hx",101,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_104_setSelected,"mapeditor.Chooser","setSelected",0x5f7de525,"mapeditor.Chooser.setSelected","mapeditor/Chooser.hx",104,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_111_onScrollBarChange,"mapeditor.Chooser","onScrollBarChange",0xef549e7f,"mapeditor.Chooser.onScrollBarChange","mapeditor/Chooser.hx",111,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_114_onAddedToStage,"mapeditor.Chooser","onAddedToStage",0x81aae61a,"mapeditor.Chooser.onAddedToStage","mapeditor/Chooser.hx",114,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_119_onRemovedFromStage,"mapeditor.Chooser","onRemovedFromStage",0x7fbd8c6b,"mapeditor.Chooser.onRemovedFromStage","mapeditor/Chooser.hx",119,0xd0111649)
HX_LOCAL_STACK_FRAME(_hx_pos_f992d9691ade2d4d_121_drawBackground,"mapeditor.Chooser","drawBackground",0x548dd50a,"mapeditor.Chooser.drawBackground","mapeditor/Chooser.hx",121,0xd0111649)
static const int _hx_array_data_144ce576_12[] = {
	(int)1,(int)1,(int)1,(int)1,
};
namespace mapeditor{

void Chooser_obj::__construct(int layer){
            	HX_GC_STACKFRAME(&_hx_pos_f992d9691ade2d4d_18_new)
HXLINE(  32)		this->graphicsData =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,0,false,::Array_obj< ::Dynamic>::__new(5)->init(0, ::openfl::display::GraphicsStroke_obj::__alloc( HX_CTX ,1,false,2,0,2,3, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,16777215,1)))->init(1, ::openfl::display::GraphicsSolidFill_obj::__alloc( HX_CTX ,3552822,1))->init(2, ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null()))->init(3,::util::GraphicsUtil_obj::END_FILL)->init(4,::util::GraphicsUtil_obj::END_STROKE),true);
HXLINE(  31)		this->path =  ::openfl::display::GraphicsPath_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  41)		int length = null();
HXDLIN(  41)		bool fixed = null();
HXDLIN(  41)		::Array< ::Dynamic> array = null();
HXDLIN(  41)		this->elements =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
HXLINE(  42)		super::__construct();
HXLINE(  43)		this->layer = layer;
HXLINE(  44)		this->drawBackground();
HXLINE(  45)		this->elementSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  46)		this->elementSprite->set_x(( (Float)(4) ));
HXLINE(  47)		this->elementSprite->set_y(( (Float)(6) ));
HXLINE(  48)		this->addChild(this->elementSprite);
HXLINE(  49)		this->scrollBar =  ::ui::Scrollbar_obj::__alloc( HX_CTX ,20,472,null());
HXLINE(  50)		this->scrollBar->set_x(( (Float)(110) ));
HXLINE(  51)		this->scrollBar->set_y(( (Float)(4) ));
HXLINE(  52)		this->scrollBar->addEventListener(HX_("change",70,91,72,b7),this->onScrollBarChange_dyn(),null(),null(),null());
HXLINE(  53)		 ::openfl::display::Shape maskShape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  54)		maskShape->get_graphics()->beginFill(0,null());
HXLINE(  55)		maskShape->get_graphics()->drawRect(( (Float)(0) ),( (Float)(2) ),( (Float)(112) ),( (Float)(476) ));
HXLINE(  56)		this->addChild(maskShape);
HXLINE(  57)		this->elementSprite->set_mask(maskShape);
HXLINE(  58)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  59)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
            	}

Dynamic Chooser_obj::__CreateEmpty() { return new Chooser_obj; }

void *Chooser_obj::_hx_vtable = 0;

Dynamic Chooser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Chooser_obj > _hx_result = new Chooser_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Chooser_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1596b732) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1596b732;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

int Chooser_obj::selectedType(){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_63_selectedType)
HXDLIN(  63)		return this->selected->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Chooser_obj,selectedType,return )

void Chooser_obj::setSelectedType(int type){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_67_setSelectedType)
HXDLIN(  67)		 ::Dynamic element = this->elements->iterator();
HXDLIN(  67)		while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN(  67)			 ::mapeditor::Element element1 = ( ( ::mapeditor::Element)(element->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  68)			if ((element1->type == type)) {
HXLINE(  69)				this->setSelected(element1);
HXLINE(  70)				return;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chooser_obj,setSelectedType,(void))

void Chooser_obj::removeElements(){
            	HX_GC_STACKFRAME(&_hx_pos_f992d9691ade2d4d_74_removeElements)
HXLINE(  75)		int length = null();
HXDLIN(  75)		bool fixed = null();
HXDLIN(  75)		::Array< ::Dynamic> array = null();
HXDLIN(  75)		this->elements =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
HXLINE(  76)		this->removeChild(this->elementSprite);
HXLINE(  77)		this->elementSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  78)		this->elementSprite->set_x(( (Float)(4) ));
HXLINE(  79)		this->elementSprite->set_y(( (Float)(6) ));
HXLINE(  80)		 ::openfl::display::Shape maskShape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  81)		maskShape->get_graphics()->beginFill(0,null());
HXLINE(  82)		maskShape->get_graphics()->drawRect(( (Float)(0) ),( (Float)(2) ),( (Float)(112) ),( (Float)(476) ));
HXLINE(  83)		this->addChild(maskShape);
HXLINE(  84)		this->elementSprite->set_mask(maskShape);
HXLINE(  85)		this->addChild(this->elementSprite);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Chooser_obj,removeElements,(void))

void Chooser_obj::addElement( ::mapeditor::Element element){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_88_addElement)
HXLINE(  89)		int i = this->elements->get_length();
HXLINE(  90)		Float _hx_tmp;
HXDLIN(  90)		if ((::hx::Mod(i,2) == 0)) {
HXLINE(  90)			_hx_tmp = ( (Float)(0) );
            		}
            		else {
HXLINE(  90)			_hx_tmp = ( (Float)(52) );
            		}
HXDLIN(  90)		element->set_x(_hx_tmp);
HXLINE(  91)		element->set_y(( (Float)(((::Std_obj::_hx_int((( (Float)(i) ) / ( (Float)(2) ))) * 50) + 6)) ));
HXLINE(  92)		this->elementSprite->addChild(element);
HXLINE(  93)		if ((i == 0)) {
HXLINE(  94)			this->setSelected(element);
            		}
HXLINE(  96)		element->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE(  97)		this->elements->push(element);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chooser_obj,addElement,(void))

void Chooser_obj::onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_101_onMouseDown)
HXDLIN( 101)		this->setSelected(::hx::TCast<  ::mapeditor::Element >::cast(event->currentTarget));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chooser_obj,onMouseDown,(void))

void Chooser_obj::setSelected( ::mapeditor::Element element){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_104_setSelected)
HXLINE( 105)		{
HXLINE( 105)			 ::mapeditor::Element tmp = this->selected;
HXDLIN( 105)			if (::hx::IsNotNull( tmp )) {
HXLINE( 105)				tmp->setSelected(false);
            			}
            		}
HXLINE( 106)		this->selected = element;
HXLINE( 107)		this->selected->setSelected(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chooser_obj,setSelected,(void))

void Chooser_obj::onScrollBarChange( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_111_onScrollBarChange)
HXDLIN( 111)		 ::openfl::display::Sprite _hx_tmp = this->elementSprite;
HXDLIN( 111)		Float _hx_tmp1 = this->scrollBar->pos();
HXDLIN( 111)		_hx_tmp->set_y((( (Float)(6) ) - (_hx_tmp1 * ((this->elementSprite->get_height() + 12) - ( (Float)(480) )))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chooser_obj,onScrollBarChange,(void))

void Chooser_obj::onAddedToStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_114_onAddedToStage)
HXLINE( 115)		 ::ui::Scrollbar _hx_tmp = this->scrollBar;
HXDLIN( 115)		_hx_tmp->setIndicatorSize(( (Float)(480) ),this->elementSprite->get_height(),null());
HXLINE( 116)		this->addChild(this->scrollBar);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chooser_obj,onAddedToStage,(void))

void Chooser_obj::onRemovedFromStage( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_119_onRemovedFromStage)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chooser_obj,onRemovedFromStage,(void))

void Chooser_obj::drawBackground(){
            	HX_STACKFRAME(&_hx_pos_f992d9691ade2d4d_121_drawBackground)
HXLINE( 122)		::util::GraphicsUtil_obj::clearPath(this->path);
HXLINE( 123)		::util::GraphicsUtil_obj::drawCutEdgeRect(0,0,136,480,4,::Array_obj< int >::fromData( _hx_array_data_144ce576_12,4),this->path);
HXLINE( 124)		this->graphicsData->set(2,this->path);
HXLINE( 125)		this->get_graphics()->drawGraphicsData(this->graphicsData);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Chooser_obj,drawBackground,(void))


::hx::ObjectPtr< Chooser_obj > Chooser_obj::__new(int layer) {
	::hx::ObjectPtr< Chooser_obj > __this = new Chooser_obj();
	__this->__construct(layer);
	return __this;
}

::hx::ObjectPtr< Chooser_obj > Chooser_obj::__alloc(::hx::Ctx *_hx_ctx,int layer) {
	Chooser_obj *__this = (Chooser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Chooser_obj), true, "mapeditor.Chooser"));
	*(void **)__this = Chooser_obj::_hx_vtable;
	__this->__construct(layer);
	return __this;
}

Chooser_obj::Chooser_obj()
{
}

void Chooser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Chooser);
	HX_MARK_MEMBER_NAME(layer,"layer");
	HX_MARK_MEMBER_NAME(elementSprite,"elementSprite");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(scrollBar,"scrollBar");
	HX_MARK_MEMBER_NAME(elements,"elements");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Chooser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(layer,"layer");
	HX_VISIT_MEMBER_NAME(elementSprite,"elementSprite");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(scrollBar,"scrollBar");
	HX_VISIT_MEMBER_NAME(elements,"elements");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(graphicsData,"graphicsData");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Chooser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { return ::hx::Val( path ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"layer") ) { return ::hx::Val( layer ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"elements") ) { return ::hx::Val( elements ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { return ::hx::Val( scrollBar ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addElement") ) { return ::hx::Val( addElement_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSelected") ) { return ::hx::Val( setSelected_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { return ::hx::Val( graphicsData ); }
		if (HX_FIELD_EQ(inName,"selectedType") ) { return ::hx::Val( selectedType_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"elementSprite") ) { return ::hx::Val( elementSprite ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"removeElements") ) { return ::hx::Val( removeElements_dyn() ); }
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawBackground") ) { return ::hx::Val( drawBackground_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setSelectedType") ) { return ::hx::Val( setSelectedType_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onScrollBarChange") ) { return ::hx::Val( onScrollBarChange_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Chooser_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast<  ::openfl::display::GraphicsPath >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"layer") ) { layer=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast<  ::mapeditor::Element >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elements") ) { elements=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { scrollBar=inValue.Cast<  ::ui::Scrollbar >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicsData") ) { graphicsData=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"elementSprite") ) { elementSprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Chooser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("layer",d1,81,c0,6f));
	outFields->push(HX_("elementSprite",e1,b3,f8,95));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("scrollBar",c6,57,fc,3d));
	outFields->push(HX_("elements",37,36,c4,83));
	outFields->push(HX_("path",a5,e5,51,4a));
	outFields->push(HX_("graphicsData",95,3c,58,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Chooser_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Chooser_obj,layer),HX_("layer",d1,81,c0,6f)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Chooser_obj,elementSprite),HX_("elementSprite",e1,b3,f8,95)},
	{::hx::fsObject /*  ::mapeditor::Element */ ,(int)offsetof(Chooser_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{::hx::fsObject /*  ::ui::Scrollbar */ ,(int)offsetof(Chooser_obj,scrollBar),HX_("scrollBar",c6,57,fc,3d)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(Chooser_obj,elements),HX_("elements",37,36,c4,83)},
	{::hx::fsObject /*  ::openfl::display::GraphicsPath */ ,(int)offsetof(Chooser_obj,path),HX_("path",a5,e5,51,4a)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(Chooser_obj,graphicsData),HX_("graphicsData",95,3c,58,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Chooser_obj_sStaticStorageInfo = 0;
#endif

static ::String Chooser_obj_sMemberFields[] = {
	HX_("layer",d1,81,c0,6f),
	HX_("elementSprite",e1,b3,f8,95),
	HX_("selected",5b,2a,6d,b1),
	HX_("scrollBar",c6,57,fc,3d),
	HX_("elements",37,36,c4,83),
	HX_("path",a5,e5,51,4a),
	HX_("graphicsData",95,3c,58,41),
	HX_("selectedType",b5,12,a3,dd),
	HX_("setSelectedType",77,e5,58,fc),
	HX_("removeElements",9b,72,1a,4e),
	HX_("addElement",9b,da,de,6d),
	HX_("onMouseDown",08,94,05,11),
	HX_("setSelected",1d,f4,cd,e1),
	HX_("onScrollBarChange",77,37,ee,82),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("drawBackground",12,71,27,09),
	::String(null()) };

::hx::Class Chooser_obj::__mClass;

void Chooser_obj::__register()
{
	Chooser_obj _hx_dummy;
	Chooser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.Chooser",76,e5,4c,14);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Chooser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Chooser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Chooser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Chooser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
