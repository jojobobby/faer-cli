// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_mapeditor_ObjectTypeToolTip
#include <mapeditor/ObjectTypeToolTip.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_591d95d7b75fdb5e_15_new,"mapeditor.ObjectTypeToolTip","new",0x5ccfebb7,"mapeditor.ObjectTypeToolTip.new","mapeditor/ObjectTypeToolTip.hx",15,0xa1709e1a)
namespace mapeditor{

void ObjectTypeToolTip_obj::__construct( ::Xml objectXML){
            	HX_GC_STACKFRAME(&_hx_pos_591d95d7b75fdb5e_15_new)
HXLINE(  16)		super::__construct(3552822,1,10197915,1,true);
HXLINE(  17)		this->titleText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,16,16777215,false,176,0,null());
HXLINE(  18)		this->titleText->setBold(true);
HXLINE(  19)		this->titleText->set_wordWrap(true);
HXLINE(  20)		 ::ui::SimpleText _hx_tmp = this->titleText;
HXDLIN(  20)		::String tmp = objectXML->get(HX_("id",db,5b,00,00));
HXDLIN(  20)		::String _hx_tmp1;
HXDLIN(  20)		if (::hx::IsNotNull( tmp )) {
HXLINE(  20)			_hx_tmp1 = tmp;
            		}
            		else {
HXLINE(  20)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(  20)		_hx_tmp->set_text(_hx_tmp1);
HXLINE(  21)		this->titleText->useTextDimensions();
HXLINE(  22)		 ::ui::SimpleText _hx_tmp2 = this->titleText;
HXDLIN(  22)		_hx_tmp2->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE(  23)		this->titleText->set_x(( (Float)(0) ));
HXLINE(  24)		this->titleText->set_y(( (Float)(0) ));
HXLINE(  25)		this->addChild(this->titleText);
HXLINE(  27)		::String desc = HX_("",00,00,00,00);
HXLINE(  28)		if (( (bool)(objectXML->elementsNamed(HX_("Static",ce,50,90,3a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  29)			desc = HX_("Static\n",7c,63,b6,03);
            		}
HXLINE(  30)		if (( (bool)(objectXML->elementsNamed(HX_("Enemy",28,82,a8,03))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  31)			desc = (desc + HX_("Enemy\n",e2,60,c9,2f));
HXLINE(  32)			if (( (bool)(objectXML->elementsNamed(HX_("MaxHitPoints",b2,79,d5,8a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  33)				::String desc1;
HXDLIN(  33)				if (( (bool)(objectXML->elementsNamed(HX_("MaxHitPoints",b2,79,d5,8a))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  33)					 ::Xml _this = ( ( ::Xml)(objectXML->elementsNamed(HX_("MaxHitPoints",b2,79,d5,8a))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  33)					bool desc2;
HXDLIN(  33)					if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  33)						desc2 = (_this->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE(  33)						desc2 = false;
            					}
HXDLIN(  33)					if (desc2) {
HXLINE(  33)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            					}
HXDLIN(  33)					 ::Xml _this1 = _this->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  33)					bool desc3;
HXDLIN(  33)					if ((_this1->nodeType != ::Xml_obj::Document)) {
HXLINE(  33)						desc3 = (_this1->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE(  33)						desc3 = true;
            					}
HXDLIN(  33)					if (desc3) {
HXLINE(  33)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this1->nodeType)));
            					}
HXDLIN(  33)					desc1 = _this1->nodeValue;
            				}
            				else {
HXLINE(  33)					desc1 = HX_("",00,00,00,00);
            				}
HXDLIN(  33)				desc = (desc + ((HX_("MaxHitPoints: ",d8,fc,6c,06) + desc1) + HX_("\n",0a,00,00,00)));
            			}
HXLINE(  34)			if (( (bool)(objectXML->elementsNamed(HX_("Defense",60,91,b4,6b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  35)				::String desc4;
HXDLIN(  35)				if (( (bool)(objectXML->elementsNamed(HX_("Defense",60,91,b4,6b))->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(  35)					 ::Xml _this2 = ( ( ::Xml)(objectXML->elementsNamed(HX_("Defense",60,91,b4,6b))->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  35)					bool desc5;
HXDLIN(  35)					if ((_this2->nodeType != ::Xml_obj::Document)) {
HXLINE(  35)						desc5 = (_this2->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE(  35)						desc5 = false;
            					}
HXDLIN(  35)					if (desc5) {
HXLINE(  35)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this2->nodeType)));
            					}
HXDLIN(  35)					 ::Xml _this3 = _this2->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  35)					bool desc6;
HXDLIN(  35)					if ((_this3->nodeType != ::Xml_obj::Document)) {
HXLINE(  35)						desc6 = (_this3->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE(  35)						desc6 = true;
            					}
HXDLIN(  35)					if (desc6) {
HXLINE(  35)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this3->nodeType)));
            					}
HXDLIN(  35)					desc4 = _this3->nodeValue;
            				}
            				else {
HXLINE(  35)					desc4 = HX_("",00,00,00,00);
            				}
HXDLIN(  35)				desc = (desc + ((HX_("Defense: ",06,dc,03,2f) + desc4) + HX_("\n",0a,00,00,00)));
            			}
            		}
HXLINE(  38)		this->descText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,11776947,false,180,0,null());
HXLINE(  39)		this->descText->set_wordWrap(true);
HXLINE(  40)		this->descText->set_text(desc);
HXLINE(  41)		this->descText->useTextDimensions();
HXLINE(  42)		 ::ui::SimpleText _hx_tmp3 = this->descText;
HXDLIN(  42)		_hx_tmp3->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE(  43)		this->descText->set_x(( (Float)(0) ));
HXLINE(  44)		 ::ui::SimpleText _hx_tmp4 = this->descText;
HXDLIN(  44)		_hx_tmp4->set_y((this->titleText->get_height() + 2));
HXLINE(  45)		this->addChild(this->descText);
            	}

Dynamic ObjectTypeToolTip_obj::__CreateEmpty() { return new ObjectTypeToolTip_obj; }

void *ObjectTypeToolTip_obj::_hx_vtable = 0;

Dynamic ObjectTypeToolTip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ObjectTypeToolTip_obj > _hx_result = new ObjectTypeToolTip_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ObjectTypeToolTip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1a7f672d) {
		if (inClassId<=(int)0x0637743c) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0637743c;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1a7f672d;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}


::hx::ObjectPtr< ObjectTypeToolTip_obj > ObjectTypeToolTip_obj::__new( ::Xml objectXML) {
	::hx::ObjectPtr< ObjectTypeToolTip_obj > __this = new ObjectTypeToolTip_obj();
	__this->__construct(objectXML);
	return __this;
}

::hx::ObjectPtr< ObjectTypeToolTip_obj > ObjectTypeToolTip_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml objectXML) {
	ObjectTypeToolTip_obj *__this = (ObjectTypeToolTip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ObjectTypeToolTip_obj), true, "mapeditor.ObjectTypeToolTip"));
	*(void **)__this = ObjectTypeToolTip_obj::_hx_vtable;
	__this->__construct(objectXML);
	return __this;
}

ObjectTypeToolTip_obj::ObjectTypeToolTip_obj()
{
}

void ObjectTypeToolTip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectTypeToolTip);
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(descText,"descText");
	 ::ui::tooltip::ToolTip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ObjectTypeToolTip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	 ::ui::tooltip::ToolTip_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ObjectTypeToolTip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ObjectTypeToolTip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectTypeToolTip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("descText",9e,53,35,f3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ObjectTypeToolTip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(ObjectTypeToolTip_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(ObjectTypeToolTip_obj,descText),HX_("descText",9e,53,35,f3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ObjectTypeToolTip_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectTypeToolTip_obj_sMemberFields[] = {
	HX_("titleText",65,ba,a4,70),
	HX_("descText",9e,53,35,f3),
	::String(null()) };

::hx::Class ObjectTypeToolTip_obj::__mClass;

void ObjectTypeToolTip_obj::__register()
{
	ObjectTypeToolTip_obj _hx_dummy;
	ObjectTypeToolTip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.ObjectTypeToolTip",45,44,fc,95);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ObjectTypeToolTip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ObjectTypeToolTip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectTypeToolTip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectTypeToolTip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
