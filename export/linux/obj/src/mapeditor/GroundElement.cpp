// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_mapeditor_Element
#include <mapeditor/Element.h>
#endif
#ifndef INCLUDED_mapeditor_GroundElement
#include <mapeditor/GroundElement.h>
#endif
#ifndef INCLUDED_mapeditor_GroundTypeToolTip
#include <mapeditor/GroundTypeToolTip.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b1677d1943b5b4d7_14_new,"mapeditor.GroundElement","new",0x657cbde2,"mapeditor.GroundElement.new","mapeditor/GroundElement.hx",14,0x076ce5cf)
HX_LOCAL_STACK_FRAME(_hx_pos_b1677d1943b5b4d7_25_getToolTip,"mapeditor.GroundElement","getToolTip",0x88f291ab,"mapeditor.GroundElement.getToolTip","mapeditor/GroundElement.hx",25,0x076ce5cf)
namespace mapeditor{

void GroundElement_obj::__construct( ::Xml groundXML){
            	HX_GC_STACKFRAME(&_hx_pos_b1677d1943b5b4d7_14_new)
HXLINE(  15)		int _hx_tmp;
HXDLIN(  15)		if (::hx::IsNotNull( groundXML->get(HX_("type",ba,f2,08,4d)) )) {
HXLINE(  15)			_hx_tmp = ( (int)(::Std_obj::parseInt(groundXML->get(HX_("type",ba,f2,08,4d)))) );
            		}
            		else {
HXLINE(  15)			_hx_tmp = 0;
            		}
HXDLIN(  15)		super::__construct(_hx_tmp);
HXLINE(  16)		this->groundXML = groundXML;
HXLINE(  18)		this->tileShape =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::map::GroundLibrary_obj::getBitmapData(this->type,null()),null(),null());
HXLINE(  19)		 ::openfl::display::Bitmap _hx_tmp1 = this->tileShape;
HXDLIN(  19)		_hx_tmp1->set_scaleX(this->tileShape->set_scaleY(( (Float)(5) )));
HXLINE(  20)		 ::openfl::display::Bitmap _hx_tmp2 = this->tileShape;
HXDLIN(  20)		_hx_tmp2->set_x(this->tileShape->set_y(( (Float)(5) )));
HXLINE(  21)		this->addChild(this->tileShape);
            	}

Dynamic GroundElement_obj::__CreateEmpty() { return new GroundElement_obj; }

void *GroundElement_obj::_hx_vtable = 0;

Dynamic GroundElement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GroundElement_obj > _hx_result = new GroundElement_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GroundElement_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x038173d8) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x038173d8;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3ed04433 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::ui::tooltip::ToolTip GroundElement_obj::getToolTip(){
            	HX_GC_STACKFRAME(&_hx_pos_b1677d1943b5b4d7_25_getToolTip)
HXDLIN(  25)		return  ::mapeditor::GroundTypeToolTip_obj::__alloc( HX_CTX ,this->groundXML);
            	}



::hx::ObjectPtr< GroundElement_obj > GroundElement_obj::__new( ::Xml groundXML) {
	::hx::ObjectPtr< GroundElement_obj > __this = new GroundElement_obj();
	__this->__construct(groundXML);
	return __this;
}

::hx::ObjectPtr< GroundElement_obj > GroundElement_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml groundXML) {
	GroundElement_obj *__this = (GroundElement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GroundElement_obj), true, "mapeditor.GroundElement"));
	*(void **)__this = GroundElement_obj::_hx_vtable;
	__this->__construct(groundXML);
	return __this;
}

GroundElement_obj::GroundElement_obj()
{
}

void GroundElement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GroundElement);
	HX_MARK_MEMBER_NAME(groundXML,"groundXML");
	HX_MARK_MEMBER_NAME(tileShape,"tileShape");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GroundElement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(groundXML,"groundXML");
	HX_VISIT_MEMBER_NAME(tileShape,"tileShape");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GroundElement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"groundXML") ) { return ::hx::Val( groundXML ); }
		if (HX_FIELD_EQ(inName,"tileShape") ) { return ::hx::Val( tileShape ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getToolTip") ) { return ::hx::Val( getToolTip_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GroundElement_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"groundXML") ) { groundXML=inValue.Cast<  ::Xml >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileShape") ) { tileShape=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GroundElement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("groundXML",90,f5,97,bf));
	outFields->push(HX_("tileShape",13,41,78,07));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GroundElement_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(GroundElement_obj,groundXML),HX_("groundXML",90,f5,97,bf)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(GroundElement_obj,tileShape),HX_("tileShape",13,41,78,07)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GroundElement_obj_sStaticStorageInfo = 0;
#endif

static ::String GroundElement_obj_sMemberFields[] = {
	HX_("groundXML",90,f5,97,bf),
	HX_("tileShape",13,41,78,07),
	HX_("getToolTip",ed,ea,d5,b9),
	::String(null()) };

::hx::Class GroundElement_obj::__mClass;

void GroundElement_obj::__register()
{
	GroundElement_obj _hx_dummy;
	GroundElement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("mapeditor.GroundElement",f0,e4,d3,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GroundElement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GroundElement_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GroundElement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GroundElement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mapeditor
