// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_0e0693b5ce2fed3b
#define INCLUDED_0e0693b5ce2fed3b
#include "discord_register.h"
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_core_ScreensView
#include <core/ScreensView.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_AccountScreen
#include <screens/AccountScreen.h>
#endif
#ifndef INCLUDED_screens_ServerBoxes
#include <screens/ServerBoxes.h>
#endif
#ifndef INCLUDED_screens_ServersScreen
#include <screens/ServersScreen.h>
#endif
#ifndef INCLUDED_screens_TitleMenuOption
#include <screens/TitleMenuOption.h>
#endif
#ifndef INCLUDED_servers_Server
#include <servers/Server.h>
#endif
#ifndef INCLUDED_servers_ServerModel
#include <servers/ServerModel.h>
#endif
#ifndef INCLUDED_ui_Scrollbar
#include <ui/Scrollbar.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_view_ScreenBase
#include <ui/view/ScreenBase.h>
#endif
#ifndef INCLUDED_ui_view_TitleView
#include <ui/view/TitleView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a59509f61e72c7c5_27_new,"screens.ServersScreen","new",0x4fe18807,"screens.ServersScreen.new","screens/ServersScreen.hx",27,0x97f9674a)
HX_LOCAL_STACK_FRAME(_hx_pos_a59509f61e72c7c5_87_onScrollBarChange,"screens.ServersScreen","onScrollBarChange",0x1e93655e,"screens.ServersScreen.onScrollBarChange","screens/ServersScreen.hx",87,0x97f9674a)
HX_LOCAL_STACK_FRAME(_hx_pos_a59509f61e72c7c5_91_onDone,"screens.ServersScreen","onDone",0x6ff943fa,"screens.ServersScreen.onDone","screens/ServersScreen.hx",91,0x97f9674a)
namespace screens{

void ServersScreen_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a59509f61e72c7c5_27_new)
HXLINE(  28)		super::__construct();
HXLINE(  30)		this->addChild( ::ui::view::ScreenBase_obj::__alloc( HX_CTX ));
HXLINE(  31)		this->addChild( ::screens::AccountScreen_obj::__alloc( HX_CTX ));
HXLINE(  33)		this->selectServerText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,18,11776947,false,0,0,null());
HXLINE(  34)		this->selectServerText->setBold(true);
HXLINE(  35)		this->selectServerText->set_text(HX_("Select Server",67,63,d7,1c));
HXLINE(  36)		this->selectServerText->updateMetrics();
HXLINE(  37)		 ::ui::SimpleText _hx_tmp = this->selectServerText;
HXDLIN(  37)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,8,8,null(),null(),null(),null(),null())));
HXLINE(  38)		 ::ui::SimpleText _hx_tmp1 = this->selectServerText;
HXDLIN(  38)		int _hx_tmp2 = ::Main_obj::stageWidth;
HXDLIN(  38)		_hx_tmp1->set_x(((( (Float)(_hx_tmp2) ) - this->selectServerText->get_width()) / ( (Float)(2) )));
HXLINE(  39)		this->selectServerText->set_y(( (Float)(72) ));
HXLINE(  40)		this->addChild(this->selectServerText);
HXLINE(  41)		this->lines =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  42)		this->addChild(this->lines);
HXLINE(  43)		this->content =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  44)		this->content->set_x(((( (Float)((::Main_obj::stageWidth - 800)) ) / ( (Float)(2) )) + 4));
HXLINE(  45)		this->content->set_y(( (Float)(100) ));
HXLINE(  46)		 ::openfl::display::Shape maskShape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  47)		maskShape->get_graphics()->beginFill(16777215,null());
HXLINE(  48)		 ::openfl::display::Graphics _hx_tmp3 = maskShape->get_graphics();
HXDLIN(  48)		_hx_tmp3->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)((::Main_obj::stageWidth - 24)) ),((( (Float)(::Main_obj::stageHeight) ) / ( (Float)(2) )) + 30));
HXLINE(  49)		maskShape->get_graphics()->endFill();
HXLINE(  50)		this->content->addChild(maskShape);
HXLINE(  51)		this->content->set_mask(maskShape);
HXLINE(  52)		this->addChild(this->content);
HXLINE(  53)		this->serverBoxes =  ::screens::ServerBoxes_obj::__alloc( HX_CTX ,::Global_obj::serverModel->getServers());
HXLINE(  54)		this->serverBoxes->set_y(( (Float)(8) ));
HXLINE(  55)		this->serverBoxes->addEventListener(HX_("complete",b9,00,c8,7f),::screens::ServersScreen_obj::onDone_dyn(),null(),null(),null());
HXLINE(  56)		this->content->addChild(this->serverBoxes);
HXLINE(  57)		if ((this->serverBoxes->get_height() > 400)) {
HXLINE(  58)			this->scrollBar =  ::ui::Scrollbar_obj::__alloc( HX_CTX ,16,::Std_obj::_hx_int((( (Float)(::Main_obj::stageHeight) ) / ( (Float)(2) ))),null());
HXLINE(  59)			 ::ui::Scrollbar _hx_tmp4 = this->scrollBar;
HXDLIN(  59)			int _hx_tmp5 = ::Main_obj::stageWidth;
HXDLIN(  59)			_hx_tmp4->set_x(((( (Float)(_hx_tmp5) ) - this->scrollBar->get_width()) - ( (Float)(4) )));
HXLINE(  60)			this->scrollBar->set_y(( (Float)(104) ));
HXLINE(  61)			 ::ui::Scrollbar _hx_tmp6 = this->scrollBar;
HXDLIN(  61)			Float _hx_tmp7 = (( (Float)(::Main_obj::stageHeight) ) / ( (Float)(2) ));
HXDLIN(  61)			_hx_tmp6->setIndicatorSize(_hx_tmp7,this->serverBoxes->get_height(),null());
HXLINE(  62)			this->scrollBar->addEventListener(HX_("change",70,91,72,b7),this->onScrollBarChange_dyn(),null(),null(),null());
HXLINE(  63)			this->addChild(this->scrollBar);
            		}
HXLINE(  65)		this->doneButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("done",82,f0,6d,42),36,false);
HXLINE(  66)		this->doneButton->addEventListener(HX_("click",48,7c,5e,48),::screens::ServersScreen_obj::onDone_dyn(),null(),null(),null());
HXLINE(  67)		this->addChild(this->doneButton);
HXLINE(  68)		 ::screens::TitleMenuOption _hx_tmp8 = this->doneButton;
HXDLIN(  68)		Float _hx_tmp9 = (( (Float)(::Main_obj::stageWidth) ) / ( (Float)(2) ));
HXDLIN(  68)		_hx_tmp8->set_x((_hx_tmp9 - (this->doneButton->get_width() / ( (Float)(2) ))));
HXLINE(  69)		this->doneButton->set_y(( (Float)((::Main_obj::stageHeight - 76)) ));
HXLINE(  72)		if (::Main_obj::rpcReady) {
HXLINE(  73)			 DiscordRichPresence discordPresence = DiscordRichPresence();
HXLINE(  74)			discordPresence.state = HX_("Server Select",b9,9a,79,16).utf8_str();
HXLINE(  75)			discordPresence.details = HX_("",00,00,00,00).utf8_str();
HXLINE(  76)			discordPresence.largeImageKey = HX_("logo",6b,9f,b7,47).utf8_str();
HXLINE(  77)			discordPresence.largeImageText = (HX_("v",76,00,00,00) + HX_("0.5",77,94,24,00)).utf8_str();
HXLINE(  78)			discordPresence.startTimestamp = ( (::cpp::Int64)(::Main_obj::startTime) );
HXLINE(  79)			Discord_UpdatePresence(&(discordPresence));
            		}
            	}

Dynamic ServersScreen_obj::__CreateEmpty() { return new ServersScreen_obj; }

void *ServersScreen_obj::_hx_vtable = 0;

Dynamic ServersScreen_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ServersScreen_obj > _hx_result = new ServersScreen_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ServersScreen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x5fc1ec79) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x5fc1ec79;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void ServersScreen_obj::onScrollBarChange( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_a59509f61e72c7c5_87_onScrollBarChange)
HXDLIN(  87)		 ::screens::ServerBoxes _hx_tmp = this->serverBoxes;
HXDLIN(  87)		Float _hx_tmp1 = this->scrollBar->pos();
HXDLIN(  87)		_hx_tmp->set_y((( (Float)(8) ) - (_hx_tmp1 * (this->serverBoxes->get_height() - ( (Float)(400) )))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ServersScreen_obj,onScrollBarChange,(void))

void ServersScreen_obj::onDone( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_a59509f61e72c7c5_91_onDone)
HXDLIN(  91)		 ::core::ScreensView _hx_tmp = ::Global_obj::layers->screens;
HXDLIN(  91)		_hx_tmp->setScreen( ::ui::view::TitleView_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ServersScreen_obj,onDone,(void))


::hx::ObjectPtr< ServersScreen_obj > ServersScreen_obj::__new() {
	::hx::ObjectPtr< ServersScreen_obj > __this = new ServersScreen_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ServersScreen_obj > ServersScreen_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ServersScreen_obj *__this = (ServersScreen_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ServersScreen_obj), true, "screens.ServersScreen"));
	*(void **)__this = ServersScreen_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ServersScreen_obj::ServersScreen_obj()
{
}

void ServersScreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ServersScreen);
	HX_MARK_MEMBER_NAME(doneButton,"doneButton");
	HX_MARK_MEMBER_NAME(selectServerText,"selectServerText");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(serverBoxes,"serverBoxes");
	HX_MARK_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ServersScreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(doneButton,"doneButton");
	HX_VISIT_MEMBER_NAME(selectServerText,"selectServerText");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(serverBoxes,"serverBoxes");
	HX_VISIT_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ServersScreen_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { return ::hx::Val( lines ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { return ::hx::Val( scrollBar ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doneButton") ) { return ::hx::Val( doneButton ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"serverBoxes") ) { return ::hx::Val( serverBoxes ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectServerText") ) { return ::hx::Val( selectServerText ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onScrollBarChange") ) { return ::hx::Val( onScrollBarChange_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ServersScreen_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"onDone") ) { outValue = onDone_dyn(); return true; }
	}
	return false;
}

::hx::Val ServersScreen_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { scrollBar=inValue.Cast<  ::ui::Scrollbar >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doneButton") ) { doneButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"serverBoxes") ) { serverBoxes=inValue.Cast<  ::screens::ServerBoxes >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectServerText") ) { selectServerText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ServersScreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("doneButton",14,14,dd,9d));
	outFields->push(HX_("selectServerText",2c,93,14,2c));
	outFields->push(HX_("lines",ff,dd,01,75));
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("serverBoxes",76,31,e0,54));
	outFields->push(HX_("scrollBar",c6,57,fc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ServersScreen_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(ServersScreen_obj,doneButton),HX_("doneButton",14,14,dd,9d)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(ServersScreen_obj,selectServerText),HX_("selectServerText",2c,93,14,2c)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(ServersScreen_obj,lines),HX_("lines",ff,dd,01,75)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(ServersScreen_obj,content),HX_("content",39,8d,77,19)},
	{::hx::fsObject /*  ::screens::ServerBoxes */ ,(int)offsetof(ServersScreen_obj,serverBoxes),HX_("serverBoxes",76,31,e0,54)},
	{::hx::fsObject /*  ::ui::Scrollbar */ ,(int)offsetof(ServersScreen_obj,scrollBar),HX_("scrollBar",c6,57,fc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ServersScreen_obj_sStaticStorageInfo = 0;
#endif

static ::String ServersScreen_obj_sMemberFields[] = {
	HX_("doneButton",14,14,dd,9d),
	HX_("selectServerText",2c,93,14,2c),
	HX_("lines",ff,dd,01,75),
	HX_("content",39,8d,77,19),
	HX_("serverBoxes",76,31,e0,54),
	HX_("scrollBar",c6,57,fc,3d),
	HX_("onScrollBarChange",77,37,ee,82),
	::String(null()) };

::hx::Class ServersScreen_obj::__mClass;

static ::String ServersScreen_obj_sStaticFields[] = {
	HX_("onDone",41,f9,f7,e4),
	::String(null())
};

void ServersScreen_obj::__register()
{
	ServersScreen_obj _hx_dummy;
	ServersScreen_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.ServersScreen",95,78,55,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ServersScreen_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ServersScreen_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ServersScreen_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ServersScreen_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ServersScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ServersScreen_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
