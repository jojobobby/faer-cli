// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_0e0693b5ce2fed3b
#define INCLUDED_0e0693b5ce2fed3b
#include "discord_register.h"
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_account_services_GetCharListTask
#include <account/services/GetCharListTask.h>
#endif
#ifndef INCLUDED_appengine_SavedCharacter
#include <appengine/SavedCharacter.h>
#endif
#ifndef INCLUDED_classes_model_CharacterClass
#include <classes/model/CharacterClass.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkin
#include <classes/model/CharacterSkin.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkins
#include <classes/model/CharacterSkins.h>
#endif
#ifndef INCLUDED_classes_model_ClassModel
#include <classes/model/ClassModel.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_core_PlayerModel
#include <core/PlayerModel.h>
#endif
#ifndef INCLUDED_core_ScreensView
#include <core/ScreensView.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_model_GameInitData
#include <game/model/GameInitData.h>
#endif
#ifndef INCLUDED_game_view_CurrencyDisplay
#include <game/view/CurrencyDisplay.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_lib_tasks_TaskData
#include <lib/tasks/TaskData.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_AccountScreen
#include <screens/AccountScreen.h>
#endif
#ifndef INCLUDED_screens_CharacterList
#include <screens/CharacterList.h>
#endif
#ifndef INCLUDED_screens_CharacterSelectionScreen
#include <screens/CharacterSelectionScreen.h>
#endif
#ifndef INCLUDED_screens_NewCharacterScreen
#include <screens/NewCharacterScreen.h>
#endif
#ifndef INCLUDED_screens_TitleMenuOption
#include <screens/TitleMenuOption.h>
#endif
#ifndef INCLUDED_ui_Scrollbar
#include <ui/Scrollbar.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_view_ScreenBase
#include <ui/view/ScreenBase.h>
#endif
#ifndef INCLUDED_ui_view_TitleView
#include <ui/view/TitleView.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f9a9eb9031717537_50_new,"screens.CharacterSelectionScreen","new",0x0262ab08,"screens.CharacterSelectionScreen.new","screens/CharacterSelectionScreen.hx",50,0x21166907)
HX_DEFINE_STACK_FRAME(_hx_pos_f9a9eb9031717537_25_new,"screens.CharacterSelectionScreen","new",0x0262ab08,"screens.CharacterSelectionScreen.new","screens/CharacterSelectionScreen.hx",25,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_55_onAdded,"screens.CharacterSelectionScreen","onAdded",0xe956c1c9,"screens.CharacterSelectionScreen.onAdded","screens/CharacterSelectionScreen.hx",55,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_73_onRemoved,"screens.CharacterSelectionScreen","onRemoved",0x5c6f20e9,"screens.CharacterSelectionScreen.onRemoved","screens/CharacterSelectionScreen.hx",73,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_88_initialize,"screens.CharacterSelectionScreen","initialize",0xe6b67ba8,"screens.CharacterSelectionScreen.initialize","screens/CharacterSelectionScreen.hx",88,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_91_getReferenceRectangle,"screens.CharacterSelectionScreen","getReferenceRectangle",0x54bc01c2,"screens.CharacterSelectionScreen.getReferenceRectangle","screens/CharacterSelectionScreen.hx",91,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_99_createDisplayAssets,"screens.CharacterSelectionScreen","createDisplayAssets",0xfca1ea71,"screens.CharacterSelectionScreen.createDisplayAssets","screens/CharacterSelectionScreen.hx",99,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_109_createButtons,"screens.CharacterSelectionScreen","createButtons",0x0b91e74d,"screens.CharacterSelectionScreen.createButtons","screens/CharacterSelectionScreen.hx",109,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_116_positionButtons,"screens.CharacterSelectionScreen","positionButtons",0x59ed6740,"screens.CharacterSelectionScreen.positionButtons","screens/CharacterSelectionScreen.hx",116,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_125_createScrollbar,"screens.CharacterSelectionScreen","createScrollbar",0x6f498ff2,"screens.CharacterSelectionScreen.createScrollbar","screens/CharacterSelectionScreen.hx",125,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_134_createCharacterList,"screens.CharacterSelectionScreen","createCharacterList",0x2fdb92b3,"screens.CharacterSelectionScreen.createCharacterList","screens/CharacterSelectionScreen.hx",134,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_142_createCurrencyDisplay,"screens.CharacterSelectionScreen","createCurrencyDisplay",0xac95c7fd,"screens.CharacterSelectionScreen.createCurrencyDisplay","screens/CharacterSelectionScreen.hx",142,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_150_createNameText,"screens.CharacterSelectionScreen","createNameText",0x0166c20c,"screens.CharacterSelectionScreen.createNameText","screens/CharacterSelectionScreen.hx",150,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_162_onScrollBarChange,"screens.CharacterSelectionScreen","onScrollBarChange",0xcca7681f,"screens.CharacterSelectionScreen.onScrollBarChange","screens/CharacterSelectionScreen.hx",162,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_80_onNewCharacter,"screens.CharacterSelectionScreen","onNewCharacter",0xedde9540,"screens.CharacterSelectionScreen.onNewCharacter","screens/CharacterSelectionScreen.hx",80,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_84_onClose,"screens.CharacterSelectionScreen","onClose",0x157604c1,"screens.CharacterSelectionScreen.onClose","screens/CharacterSelectionScreen.hx",84,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_166_onPlayClick,"screens.CharacterSelectionScreen","onPlayClick",0x4d6b4f3d,"screens.CharacterSelectionScreen.onPlayClick","screens/CharacterSelectionScreen.hx",166,0x21166907)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a9eb9031717537_26_boot,"screens.CharacterSelectionScreen","boot",0x0c0bfc8a,"screens.CharacterSelectionScreen.boot","screens/CharacterSelectionScreen.hx",26,0x21166907)
namespace screens{

void CharacterSelectionScreen_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::screens::CharacterSelectionScreen,_gthis) HXARGC(1)
            		void _hx_run( ::lib::tasks::TaskData td){
            			HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_50_new)
HXLINE(  50)			_gthis->addEventListener(HX_("addedToStage",63,22,55,0c),_gthis->onAdded_dyn(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_25_new)
HXLINE(  31)		this->characterListHeight = ((Float)0.0);
HXLINE(  37)		 ::screens::CharacterSelectionScreen _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  38)		super::__construct();
HXLINE(  40)		this->playButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("play",f4,2d,5a,4a),36,true);
HXLINE(  41)		this->backButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("main",39,38,56,48),22,false);
HXLINE(  42)		this->classesButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("classes",a6,4e,91,69),22,false);
HXLINE(  43)		this->addChild( ::ui::view::ScreenBase_obj::__alloc( HX_CTX ));
HXLINE(  44)		this->addChild( ::screens::AccountScreen_obj::__alloc( HX_CTX ));
HXLINE(  46)		this->backButton->addEventListener(HX_("click",48,7c,5e,48),::screens::CharacterSelectionScreen_obj::onClose_dyn(),null(),null(),null());
HXLINE(  47)		this->classesButton->addEventListener(HX_("click",48,7c,5e,48),::screens::CharacterSelectionScreen_obj::onNewCharacter_dyn(),null(),null(),null());
HXLINE(  49)		::Global_obj::charListTask->finished->once( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  52)		::Global_obj::charListTask->start();
            	}

Dynamic CharacterSelectionScreen_obj::__CreateEmpty() { return new CharacterSelectionScreen_obj; }

void *CharacterSelectionScreen_obj::_hx_vtable = 0;

Dynamic CharacterSelectionScreen_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterSelectionScreen_obj > _hx_result = new CharacterSelectionScreen_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CharacterSelectionScreen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b2e1bce) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1b2e1bce;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void CharacterSelectionScreen_obj::onAdded( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_f9a9eb9031717537_55_onAdded)
HXLINE(  57)		if (::Main_obj::rpcReady) {
HXLINE(  58)			 DiscordRichPresence discordPresence = DiscordRichPresence();
HXLINE(  59)			discordPresence.state = HX_("Character Select",d3,1e,ae,df).utf8_str();
HXLINE(  60)			discordPresence.details = HX_("",00,00,00,00).utf8_str();
HXLINE(  61)			discordPresence.largeImageKey = HX_("logo",6b,9f,b7,47).utf8_str();
HXLINE(  62)			discordPresence.largeImageText = (HX_("v",76,00,00,00) + HX_("0.5",77,94,24,00)).utf8_str();
HXLINE(  63)			discordPresence.startTimestamp = ( (::cpp::Int64)(::Main_obj::startTime) );
HXLINE(  64)			Discord_UpdatePresence(&(discordPresence));
            		}
HXLINE(  68)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  69)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null(),null(),null());
HXLINE(  70)		this->initialize();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterSelectionScreen_obj,onAdded,(void))

void CharacterSelectionScreen_obj::onRemoved( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_f9a9eb9031717537_73_onRemoved)
HXLINE(  74)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemoved_dyn(),null());
HXLINE(  75)		this->backButton->removeEventListener(HX_("click",48,7c,5e,48),::screens::CharacterSelectionScreen_obj::onClose_dyn(),null());
HXLINE(  76)		this->classesButton->removeEventListener(HX_("click",48,7c,5e,48),::screens::CharacterSelectionScreen_obj::onNewCharacter_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterSelectionScreen_obj,onRemoved,(void))

void CharacterSelectionScreen_obj::initialize(){
            	HX_STACKFRAME(&_hx_pos_f9a9eb9031717537_88_initialize)
HXDLIN(  88)		this->createDisplayAssets();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,initialize,(void))

 ::openfl::geom::Rectangle CharacterSelectionScreen_obj::getReferenceRectangle(){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_91_getReferenceRectangle)
HXLINE(  92)		 ::openfl::geom::Rectangle rectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  93)		if (::hx::IsNotNull( this->stage )) {
HXLINE(  94)			rectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->stage->stageWidth,this->stage->stageHeight);
            		}
HXLINE(  96)		return rectangle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,getReferenceRectangle,return )

void CharacterSelectionScreen_obj::createDisplayAssets(){
            	HX_STACKFRAME(&_hx_pos_f9a9eb9031717537_99_createDisplayAssets)
HXLINE( 100)		this->createNameText();
HXLINE( 101)		this->createCurrencyDisplay();
HXLINE( 102)		this->createCharacterList();
HXLINE( 103)		this->createButtons();
HXLINE( 104)		this->positionButtons();
HXLINE( 105)		if ((this->characterListHeight > (( (Float)(this->stage->stageHeight) ) / ( (Float)(2) )))) {
HXLINE( 106)			this->createScrollbar();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,createDisplayAssets,(void))

void CharacterSelectionScreen_obj::createButtons(){
            	HX_STACKFRAME(&_hx_pos_f9a9eb9031717537_109_createButtons)
HXLINE( 110)		this->addChild(this->playButton);
HXLINE( 111)		this->addChild(this->backButton);
HXLINE( 112)		this->addChild(this->classesButton);
HXLINE( 113)		this->playButton->addEventListener(HX_("click",48,7c,5e,48),::screens::CharacterSelectionScreen_obj::onPlayClick_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,createButtons,(void))

void CharacterSelectionScreen_obj::positionButtons(){
            	HX_STACKFRAME(&_hx_pos_f9a9eb9031717537_116_positionButtons)
HXLINE( 117)		 ::screens::TitleMenuOption _hx_tmp = this->playButton;
HXDLIN( 117)		Float _hx_tmp1 = this->getReferenceRectangle()->width;
HXDLIN( 117)		_hx_tmp->set_x(((_hx_tmp1 - this->playButton->get_width()) / ( (Float)(2) )));
HXLINE( 118)		this->playButton->set_y(( (Float)((this->stage->stageHeight - 80)) ));
HXLINE( 119)		 ::screens::TitleMenuOption _hx_tmp2 = this->backButton;
HXDLIN( 119)		Float _hx_tmp3 = this->getReferenceRectangle()->width;
HXDLIN( 119)		_hx_tmp2->set_x((((_hx_tmp3 - this->backButton->get_width()) / ( (Float)(2) )) - ( (Float)(94) )));
HXLINE( 120)		this->backButton->set_y(( (Float)((this->stage->stageHeight - 68)) ));
HXLINE( 121)		 ::screens::TitleMenuOption _hx_tmp4 = this->classesButton;
HXDLIN( 121)		Float _hx_tmp5 = this->getReferenceRectangle()->width;
HXDLIN( 121)		_hx_tmp4->set_x((((_hx_tmp5 - this->classesButton->get_width()) / ( (Float)(2) )) + 96));
HXLINE( 122)		this->classesButton->set_y(( (Float)((this->stage->stageHeight - 68)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,positionButtons,(void))

void CharacterSelectionScreen_obj::createScrollbar(){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_125_createScrollbar)
HXLINE( 126)		this->scrollBar =  ::ui::Scrollbar_obj::__alloc( HX_CTX ,16,(this->stage->stageHeight - 120),null());
HXLINE( 127)		this->scrollBar->set_x(((( (Float)((this->stage->stageWidth - 800)) ) / ( (Float)(2) )) + 800));
HXLINE( 128)		this->scrollBar->set_y(( (Float)(113) ));
HXLINE( 129)		 ::ui::Scrollbar _hx_tmp = this->scrollBar;
HXDLIN( 129)		Float _hx_tmp1 = (( (Float)(this->stage->stageHeight) ) / ( (Float)(2) ));
HXDLIN( 129)		_hx_tmp->setIndicatorSize(_hx_tmp1,this->characterList->get_height(),null());
HXLINE( 130)		this->scrollBar->addEventListener(HX_("change",70,91,72,b7),this->onScrollBarChange_dyn(),null(),null(),null());
HXLINE( 131)		this->addChild(this->scrollBar);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,createScrollbar,(void))

void CharacterSelectionScreen_obj::createCharacterList(){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_134_createCharacterList)
HXLINE( 135)		this->characterList =  ::screens::CharacterList_obj::__alloc( HX_CTX );
HXLINE( 136)		this->characterList->set_x(((( (Float)((this->stage->stageWidth - 800)) ) / ( (Float)(2) )) + 18));
HXLINE( 137)		this->characterList->set_y(( (Float)(112) ));
HXLINE( 138)		this->characterListHeight = this->characterList->get_height();
HXLINE( 139)		this->addChild(this->characterList);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,createCharacterList,(void))

void CharacterSelectionScreen_obj::createCurrencyDisplay(){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_142_createCurrencyDisplay)
HXLINE( 143)		this->currencyDisplay =  ::game::view::CurrencyDisplay_obj::__alloc( HX_CTX ,HX_("rtl",6a,e6,56,00),null());
HXLINE( 144)		{
HXLINE( 144)			 ::game::view::CurrencyDisplay _this = this->currencyDisplay;
HXDLIN( 144)			int gems = ::Global_obj::playerModel->getGems();
HXDLIN( 144)			int gold = ::Global_obj::playerModel->getGold();
HXDLIN( 144)			int crowns = ::Global_obj::playerModel->getCrowns();
HXDLIN( 144)			bool _hx_tmp;
HXDLIN( 144)			bool _hx_tmp1;
HXDLIN( 144)			if ((gems == _this->gems)) {
HXLINE( 144)				_hx_tmp1 = (gold == _this->gold);
            			}
            			else {
HXLINE( 144)				_hx_tmp1 = false;
            			}
HXDLIN( 144)			if (_hx_tmp1) {
HXLINE( 144)				_hx_tmp = (crowns == _this->crowns);
            			}
            			else {
HXLINE( 144)				_hx_tmp = false;
            			}
HXDLIN( 144)			if (!(_hx_tmp)) {
HXLINE( 144)				_this->gems = gems;
HXDLIN( 144)				_this->gold = gold;
HXDLIN( 144)				_this->crowns = crowns;
HXDLIN( 144)				::String _hx_switch_0 = _this->orientation;
            				if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXLINE( 144)					 ::ui::SimpleText _this1 = _this->gemText;
HXDLIN( 144)					_this1->set_text(::Std_obj::string(_this->gems));
HXDLIN( 144)					_this->gemText->updateMetrics();
HXDLIN( 144)					 ::ui::SimpleText _this2 = _this->gemText;
HXDLIN( 144)					Float _hx_tmp2 = _this->gemIcon->get_x();
HXDLIN( 144)					_this2->set_x((_hx_tmp2 + _this->gemIcon->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this3 = _this->gemText;
HXDLIN( 144)					Float _hx_tmp3 = (_this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN( 144)					_this3->set_y((_hx_tmp3 - (_this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN( 144)					 ::openfl::display::Bitmap _this4 = _this->goldIcon;
HXDLIN( 144)					Float _hx_tmp4 = _this->gemText->get_x();
HXDLIN( 144)					_this4->set_x((_hx_tmp4 + _this->gemText->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this5 = _this->goldText;
HXDLIN( 144)					_this5->set_text(::Std_obj::string(_this->gold));
HXDLIN( 144)					_this->goldText->updateMetrics();
HXDLIN( 144)					 ::ui::SimpleText _this6 = _this->goldText;
HXDLIN( 144)					Float _hx_tmp5 = _this->goldIcon->get_x();
HXDLIN( 144)					_this6->set_x((_hx_tmp5 + _this->goldIcon->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this7 = _this->goldText;
HXDLIN( 144)					Float _hx_tmp6 = (_this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN( 144)					_this7->set_y((_hx_tmp6 - (_this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN( 144)					 ::openfl::display::Bitmap _this8 = _this->crownIcon;
HXDLIN( 144)					Float _hx_tmp7 = _this->goldText->get_x();
HXDLIN( 144)					_this8->set_x((_hx_tmp7 + _this->goldText->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this9 = _this->crownText;
HXDLIN( 144)					_this9->set_text(::Std_obj::string(_this->crowns));
HXDLIN( 144)					_this->crownText->updateMetrics();
HXDLIN( 144)					 ::ui::SimpleText _this10 = _this->crownText;
HXDLIN( 144)					Float _hx_tmp8 = _this->crownIcon->get_x();
HXDLIN( 144)					_this10->set_x((_hx_tmp8 + _this->crownIcon->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this11 = _this->crownText;
HXDLIN( 144)					Float _hx_tmp9 = (_this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN( 144)					_this11->set_y((_hx_tmp9 - (_this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN( 144)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXLINE( 144)					 ::openfl::display::Bitmap _this12 = _this->gemIcon;
HXDLIN( 144)					_this12->set_x(-(_this->gemIcon->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this13 = _this->gemText;
HXDLIN( 144)					_this13->set_text(::Std_obj::string(_this->gems));
HXDLIN( 144)					_this->gemText->updateMetrics();
HXDLIN( 144)					 ::ui::SimpleText _this14 = _this->gemText;
HXDLIN( 144)					Float _hx_tmp10 = _this->gemIcon->get_x();
HXDLIN( 144)					_this14->set_x((_hx_tmp10 - _this->gemText->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this15 = _this->gemText;
HXDLIN( 144)					Float _hx_tmp11 = (_this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN( 144)					_this15->set_y((_hx_tmp11 - (_this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN( 144)					 ::openfl::display::Bitmap _this16 = _this->goldIcon;
HXDLIN( 144)					Float _hx_tmp12 = _this->gemText->get_x();
HXDLIN( 144)					_this16->set_x((_hx_tmp12 - _this->goldIcon->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this17 = _this->goldText;
HXDLIN( 144)					_this17->set_text(::Std_obj::string(_this->gold));
HXDLIN( 144)					_this->goldText->updateMetrics();
HXDLIN( 144)					 ::ui::SimpleText _this18 = _this->goldText;
HXDLIN( 144)					Float _hx_tmp13 = _this->goldIcon->get_x();
HXDLIN( 144)					_this18->set_x((_hx_tmp13 - _this->goldText->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this19 = _this->goldText;
HXDLIN( 144)					Float _hx_tmp14 = (_this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN( 144)					_this19->set_y((_hx_tmp14 - (_this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN( 144)					 ::openfl::display::Bitmap _this20 = _this->crownIcon;
HXDLIN( 144)					Float _hx_tmp15 = _this->goldText->get_x();
HXDLIN( 144)					_this20->set_x((_hx_tmp15 - _this->crownIcon->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this21 = _this->crownText;
HXDLIN( 144)					_this21->set_text(::Std_obj::string(_this->crowns));
HXDLIN( 144)					_this->crownText->updateMetrics();
HXDLIN( 144)					 ::ui::SimpleText _this22 = _this->crownText;
HXDLIN( 144)					Float _hx_tmp16 = _this->crownIcon->get_x();
HXDLIN( 144)					_this22->set_x((_hx_tmp16 - _this->crownText->get_width()));
HXDLIN( 144)					 ::ui::SimpleText _this23 = _this->crownText;
HXDLIN( 144)					Float _hx_tmp17 = (_this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN( 144)					_this23->set_y((_hx_tmp17 - (_this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN( 144)					goto _hx_goto_11;
            				}
            				_hx_goto_11:;
            			}
            		}
HXLINE( 145)		 ::game::view::CurrencyDisplay _hx_tmp18 = this->currencyDisplay;
HXDLIN( 145)		_hx_tmp18->set_x((this->getReferenceRectangle()->width - ( (Float)(5) )));
HXLINE( 146)		this->currencyDisplay->set_y(( (Float)(25) ));
HXLINE( 147)		this->addChild(this->currencyDisplay);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,createCurrencyDisplay,(void))

void CharacterSelectionScreen_obj::createNameText(){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_150_createNameText)
HXLINE( 151)		this->nameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,22,11776947,false,0,0,null());
HXLINE( 152)		this->nameText->setBold(true);
HXLINE( 153)		 ::ui::SimpleText _hx_tmp = this->nameText;
HXDLIN( 153)		_hx_tmp->set_text(::Global_obj::playerModel->getName());
HXLINE( 154)		this->nameText->updateMetrics();
HXLINE( 155)		this->nameText->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0,::screens::CharacterSelectionScreen_obj::DROP_SHADOW));
HXLINE( 156)		this->nameText->set_y(( (Float)(24) ));
HXLINE( 157)		 ::ui::SimpleText _hx_tmp1 = this->nameText;
HXDLIN( 157)		Float _hx_tmp2 = this->getReferenceRectangle()->width;
HXDLIN( 157)		_hx_tmp1->set_x(((_hx_tmp2 - this->nameText->get_width()) / ( (Float)(2) )));
HXLINE( 158)		this->addChild(this->nameText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectionScreen_obj,createNameText,(void))

void CharacterSelectionScreen_obj::onScrollBarChange( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_f9a9eb9031717537_162_onScrollBarChange)
HXDLIN( 162)		 ::screens::CharacterList _hx_tmp = this->characterList;
HXDLIN( 162)		Float _hx_tmp1 = -(this->scrollBar->pos());
HXDLIN( 162)		_hx_tmp->setPos((_hx_tmp1 * (this->characterListHeight - (( (Float)(this->stage->stageHeight) ) / ( (Float)(2) )))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterSelectionScreen_obj,onScrollBarChange,(void))

 ::openfl::filters::DropShadowFilter CharacterSelectionScreen_obj::DROP_SHADOW;

void CharacterSelectionScreen_obj::onNewCharacter( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_80_onNewCharacter)
HXDLIN(  80)		 ::core::ScreensView _hx_tmp = ::Global_obj::layers->screens;
HXDLIN(  80)		_hx_tmp->setScreen( ::screens::NewCharacterScreen_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CharacterSelectionScreen_obj,onNewCharacter,(void))

void CharacterSelectionScreen_obj::onClose( ::openfl::events::MouseEvent _){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_84_onClose)
HXDLIN(  84)		 ::core::ScreensView _hx_tmp = ::Global_obj::layers->screens;
HXDLIN(  84)		_hx_tmp->setScreen( ::ui::view::TitleView_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CharacterSelectionScreen_obj,onClose,(void))

void CharacterSelectionScreen_obj::onPlayClick( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_166_onPlayClick)
HXDLIN( 166)		if ((::Global_obj::playerModel->getCharacterCount() == 0)) {
HXLINE( 167)			 ::core::ScreensView _hx_tmp = ::Global_obj::layers->screens;
HXDLIN( 167)			_hx_tmp->setScreen( ::screens::NewCharacterScreen_obj::__alloc( HX_CTX ));
            		}
            		else {
HXLINE( 169)			 ::appengine::SavedCharacter character = ::Global_obj::playerModel->getCharacterByIndex(0);
HXLINE( 170)			::Global_obj::playerModel->currentCharId = ( (int)(character->charId()) );
HXLINE( 171)			 ::classes::model::ClassModel characterClass = ::Global_obj::classModel;
HXDLIN( 171)			 ::classes::model::CharacterClass characterClass1 = characterClass->getCharacterClass(( (int)(character->objectType()) ));
HXLINE( 172)			characterClass1->setIsSelected(true);
HXLINE( 173)			 ::classes::model::CharacterSkins characterClass2 = characterClass1->skins;
HXDLIN( 173)			characterClass2->getSkin(( (int)(character->skinType()) ))->setIsSelected(true);
HXLINE( 174)			 ::game::model::GameInitData game =  ::game::model::GameInitData_obj::__alloc( HX_CTX );
HXLINE( 175)			game->createCharacter = false;
HXLINE( 176)			game->charId = ( (int)(character->charId()) );
HXLINE( 177)			game->gameId = -2;
HXLINE( 178)			::Global_obj::playGame(game);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CharacterSelectionScreen_obj,onPlayClick,(void))


::hx::ObjectPtr< CharacterSelectionScreen_obj > CharacterSelectionScreen_obj::__new() {
	::hx::ObjectPtr< CharacterSelectionScreen_obj > __this = new CharacterSelectionScreen_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CharacterSelectionScreen_obj > CharacterSelectionScreen_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CharacterSelectionScreen_obj *__this = (CharacterSelectionScreen_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterSelectionScreen_obj), true, "screens.CharacterSelectionScreen"));
	*(void **)__this = CharacterSelectionScreen_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CharacterSelectionScreen_obj::CharacterSelectionScreen_obj()
{
}

void CharacterSelectionScreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterSelectionScreen);
	HX_MARK_MEMBER_NAME(nameText,"nameText");
	HX_MARK_MEMBER_NAME(currencyDisplay,"currencyDisplay");
	HX_MARK_MEMBER_NAME(characterList,"characterList");
	HX_MARK_MEMBER_NAME(characterListHeight,"characterListHeight");
	HX_MARK_MEMBER_NAME(playButton,"playButton");
	HX_MARK_MEMBER_NAME(backButton,"backButton");
	HX_MARK_MEMBER_NAME(classesButton,"classesButton");
	HX_MARK_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterSelectionScreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nameText,"nameText");
	HX_VISIT_MEMBER_NAME(currencyDisplay,"currencyDisplay");
	HX_VISIT_MEMBER_NAME(characterList,"characterList");
	HX_VISIT_MEMBER_NAME(characterListHeight,"characterListHeight");
	HX_VISIT_MEMBER_NAME(playButton,"playButton");
	HX_VISIT_MEMBER_NAME(backButton,"backButton");
	HX_VISIT_MEMBER_NAME(classesButton,"classesButton");
	HX_VISIT_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterSelectionScreen_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nameText") ) { return ::hx::Val( nameText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { return ::hx::Val( scrollBar ); }
		if (HX_FIELD_EQ(inName,"onRemoved") ) { return ::hx::Val( onRemoved_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playButton") ) { return ::hx::Val( playButton ); }
		if (HX_FIELD_EQ(inName,"backButton") ) { return ::hx::Val( backButton ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"characterList") ) { return ::hx::Val( characterList ); }
		if (HX_FIELD_EQ(inName,"classesButton") ) { return ::hx::Val( classesButton ); }
		if (HX_FIELD_EQ(inName,"createButtons") ) { return ::hx::Val( createButtons_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createNameText") ) { return ::hx::Val( createNameText_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currencyDisplay") ) { return ::hx::Val( currencyDisplay ); }
		if (HX_FIELD_EQ(inName,"positionButtons") ) { return ::hx::Val( positionButtons_dyn() ); }
		if (HX_FIELD_EQ(inName,"createScrollbar") ) { return ::hx::Val( createScrollbar_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onScrollBarChange") ) { return ::hx::Val( onScrollBarChange_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"characterListHeight") ) { return ::hx::Val( characterListHeight ); }
		if (HX_FIELD_EQ(inName,"createDisplayAssets") ) { return ::hx::Val( createDisplayAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCharacterList") ) { return ::hx::Val( createCharacterList_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getReferenceRectangle") ) { return ::hx::Val( getReferenceRectangle_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCurrencyDisplay") ) { return ::hx::Val( createCurrencyDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CharacterSelectionScreen_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onClose") ) { outValue = onClose_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"DROP_SHADOW") ) { outValue = ( DROP_SHADOW ); return true; }
		if (HX_FIELD_EQ(inName,"onPlayClick") ) { outValue = onPlayClick_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onNewCharacter") ) { outValue = onNewCharacter_dyn(); return true; }
	}
	return false;
}

::hx::Val CharacterSelectionScreen_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"nameText") ) { nameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { scrollBar=inValue.Cast<  ::ui::Scrollbar >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playButton") ) { playButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backButton") ) { backButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"characterList") ) { characterList=inValue.Cast<  ::screens::CharacterList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"classesButton") ) { classesButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currencyDisplay") ) { currencyDisplay=inValue.Cast<  ::game::view::CurrencyDisplay >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"characterListHeight") ) { characterListHeight=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CharacterSelectionScreen_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"DROP_SHADOW") ) { DROP_SHADOW=ioValue.Cast<  ::openfl::filters::DropShadowFilter >(); return true; }
	}
	return false;
}

void CharacterSelectionScreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nameText",98,ec,80,49));
	outFields->push(HX_("currencyDisplay",f1,46,0b,8a));
	outFields->push(HX_("characterList",a7,ac,9f,40));
	outFields->push(HX_("characterListHeight",ee,9f,09,c5));
	outFields->push(HX_("playButton",06,f3,a3,80));
	outFields->push(HX_("backButton",79,47,6a,18));
	outFields->push(HX_("classesButton",38,a5,df,fb));
	outFields->push(HX_("scrollBar",c6,57,fc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterSelectionScreen_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CharacterSelectionScreen_obj,nameText),HX_("nameText",98,ec,80,49)},
	{::hx::fsObject /*  ::game::view::CurrencyDisplay */ ,(int)offsetof(CharacterSelectionScreen_obj,currencyDisplay),HX_("currencyDisplay",f1,46,0b,8a)},
	{::hx::fsObject /*  ::screens::CharacterList */ ,(int)offsetof(CharacterSelectionScreen_obj,characterList),HX_("characterList",a7,ac,9f,40)},
	{::hx::fsFloat,(int)offsetof(CharacterSelectionScreen_obj,characterListHeight),HX_("characterListHeight",ee,9f,09,c5)},
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(CharacterSelectionScreen_obj,playButton),HX_("playButton",06,f3,a3,80)},
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(CharacterSelectionScreen_obj,backButton),HX_("backButton",79,47,6a,18)},
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(CharacterSelectionScreen_obj,classesButton),HX_("classesButton",38,a5,df,fb)},
	{::hx::fsObject /*  ::ui::Scrollbar */ ,(int)offsetof(CharacterSelectionScreen_obj,scrollBar),HX_("scrollBar",c6,57,fc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CharacterSelectionScreen_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::filters::DropShadowFilter */ ,(void *) &CharacterSelectionScreen_obj::DROP_SHADOW,HX_("DROP_SHADOW",30,79,4c,09)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CharacterSelectionScreen_obj_sMemberFields[] = {
	HX_("nameText",98,ec,80,49),
	HX_("currencyDisplay",f1,46,0b,8a),
	HX_("characterList",a7,ac,9f,40),
	HX_("characterListHeight",ee,9f,09,c5),
	HX_("playButton",06,f3,a3,80),
	HX_("backButton",79,47,6a,18),
	HX_("classesButton",38,a5,df,fb),
	HX_("scrollBar",c6,57,fc,3d),
	HX_("onAdded",21,73,81,b2),
	HX_("onRemoved",41,d8,aa,ca),
	HX_("initialize",50,31,bb,ec),
	HX_("getReferenceRectangle",1a,5d,59,43),
	HX_("createDisplayAssets",c9,3f,bd,ed),
	HX_("createButtons",a5,2a,b8,b2),
	HX_("positionButtons",98,30,ad,c9),
	HX_("createScrollbar",4a,59,09,df),
	HX_("createCharacterList",0b,e8,f6,20),
	HX_("createCurrencyDisplay",55,23,33,9b),
	HX_("createNameText",b4,6b,bb,9b),
	HX_("onScrollBarChange",77,37,ee,82),
	::String(null()) };

static void CharacterSelectionScreen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CharacterSelectionScreen_obj::DROP_SHADOW,"DROP_SHADOW");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CharacterSelectionScreen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CharacterSelectionScreen_obj::DROP_SHADOW,"DROP_SHADOW");
};

#endif

::hx::Class CharacterSelectionScreen_obj::__mClass;

static ::String CharacterSelectionScreen_obj_sStaticFields[] = {
	HX_("DROP_SHADOW",30,79,4c,09),
	HX_("onNewCharacter",e8,3e,33,88),
	HX_("onClose",19,b6,a0,de),
	HX_("onPlayClick",95,8c,85,8b),
	::String(null())
};

void CharacterSelectionScreen_obj::__register()
{
	CharacterSelectionScreen_obj _hx_dummy;
	CharacterSelectionScreen_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.CharacterSelectionScreen",16,c7,66,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterSelectionScreen_obj::__GetStatic;
	__mClass->mSetStaticField = &CharacterSelectionScreen_obj::__SetStatic;
	__mClass->mMarkFunc = CharacterSelectionScreen_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterSelectionScreen_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterSelectionScreen_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterSelectionScreen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CharacterSelectionScreen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterSelectionScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterSelectionScreen_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CharacterSelectionScreen_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f9a9eb9031717537_26_boot)
HXDLIN(  26)		DROP_SHADOW =  ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,8,8,null(),null(),null(),null(),null());
            	}
}

} // end namespace screens
