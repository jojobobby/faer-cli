// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_core_PlayerModel
#include <core/PlayerModel.h>
#endif
#ifndef INCLUDED_core_ScreensView
#include <core/ScreensView.h>
#endif
#ifndef INCLUDED_game_GameSprite
#include <game/GameSprite.h>
#endif
#ifndef INCLUDED_game_view_CurrencyDisplay
#include <game/view/CurrencyDisplay.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_AccountScreen
#include <screens/AccountScreen.h>
#endif
#ifndef INCLUDED_screens_CharacterBox
#include <screens/CharacterBox.h>
#endif
#ifndef INCLUDED_screens_CharacterSelectionScreen
#include <screens/CharacterSelectionScreen.h>
#endif
#ifndef INCLUDED_screens_NewCharacterScreen
#include <screens/NewCharacterScreen.h>
#endif
#ifndef INCLUDED_screens_TitleMenuOption
#include <screens/TitleMenuOption.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_TooltipsView
#include <ui/tooltip/TooltipsView.h>
#endif
#ifndef INCLUDED_ui_view_ScreenBase
#include <ui/view/ScreenBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_70910dbd10a81030_16_new,"screens.NewCharacterScreen","new",0x048c670e,"screens.NewCharacterScreen.new","screens/NewCharacterScreen.hx",16,0x66c3fe81)
HX_LOCAL_STACK_FRAME(_hx_pos_70910dbd10a81030_26_onAdded,"screens.NewCharacterScreen","onAdded",0x7d75f8cf,"screens.NewCharacterScreen.onAdded","screens/NewCharacterScreen.hx",26,0x66c3fe81)
HX_LOCAL_STACK_FRAME(_hx_pos_70910dbd10a81030_73_onBackClick,"screens.NewCharacterScreen","onBackClick",0x1726bc30,"screens.NewCharacterScreen.onBackClick","screens/NewCharacterScreen.hx",73,0x66c3fe81)
HX_LOCAL_STACK_FRAME(_hx_pos_70910dbd10a81030_76_onCharBoxOver,"screens.NewCharacterScreen","onCharBoxOver",0x8827e618,"screens.NewCharacterScreen.onCharBoxOver","screens/NewCharacterScreen.hx",76,0x66c3fe81)
HX_LOCAL_STACK_FRAME(_hx_pos_70910dbd10a81030_82_onCharBoxOut,"screens.NewCharacterScreen","onCharBoxOut",0xbe07104a,"screens.NewCharacterScreen.onCharBoxOut","screens/NewCharacterScreen.hx",82,0x66c3fe81)
namespace screens{

void NewCharacterScreen_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_70910dbd10a81030_16_new)
HXLINE(  17)		super::__construct();
HXLINE(  19)		this->boxes =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  20)		this->addChild( ::ui::view::ScreenBase_obj::__alloc( HX_CTX ));
HXLINE(  21)		this->addChild( ::screens::AccountScreen_obj::__alloc( HX_CTX ));
HXLINE(  23)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic NewCharacterScreen_obj::__CreateEmpty() { return new NewCharacterScreen_obj; }

void *NewCharacterScreen_obj::_hx_vtable = 0;

Dynamic NewCharacterScreen_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NewCharacterScreen_obj > _hx_result = new NewCharacterScreen_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NewCharacterScreen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ca579b8) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x0ca579b8;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void NewCharacterScreen_obj::onAdded( ::openfl::events::Event _){
            	HX_GC_STACKFRAME(&_hx_pos_70910dbd10a81030_26_onAdded)
HXLINE(  27)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  29)		 ::Xml playerXML = null();
HXLINE(  30)		int objectType = 0;
HXLINE(  32)		 ::screens::CharacterBox charBox = null();
HXLINE(  34)		this->backButton =  ::screens::TitleMenuOption_obj::__alloc( HX_CTX ,HX_("back",27,da,10,41),36,false);
HXLINE(  35)		this->backButton->addEventListener(HX_("click",48,7c,5e,48),::screens::NewCharacterScreen_obj::onBackClick_dyn(),null(),null(),null());
HXLINE(  36)		this->addChild(this->backButton);
HXLINE(  37)		this->currencyDisplay =  ::game::view::CurrencyDisplay_obj::__alloc( HX_CTX ,HX_("rtl",6a,e6,56,00),null());
HXLINE(  38)		{
HXLINE(  38)			 ::game::view::CurrencyDisplay _this = this->currencyDisplay;
HXDLIN(  38)			int gems = ::Global_obj::playerModel->getGems();
HXDLIN(  38)			int gold = ::Global_obj::playerModel->getGold();
HXDLIN(  38)			int crowns = ::Global_obj::playerModel->getCrowns();
HXDLIN(  38)			bool _hx_tmp;
HXDLIN(  38)			bool _hx_tmp1;
HXDLIN(  38)			if ((gems == _this->gems)) {
HXLINE(  38)				_hx_tmp1 = (gold == _this->gold);
            			}
            			else {
HXLINE(  38)				_hx_tmp1 = false;
            			}
HXDLIN(  38)			if (_hx_tmp1) {
HXLINE(  38)				_hx_tmp = (crowns == _this->crowns);
            			}
            			else {
HXLINE(  38)				_hx_tmp = false;
            			}
HXDLIN(  38)			if (!(_hx_tmp)) {
HXLINE(  38)				_this->gems = gems;
HXDLIN(  38)				_this->gold = gold;
HXDLIN(  38)				_this->crowns = crowns;
HXDLIN(  38)				::String _hx_switch_0 = _this->orientation;
            				if (  (_hx_switch_0==HX_("ltr",ea,58,52,00)) ){
HXLINE(  38)					 ::ui::SimpleText _this1 = _this->gemText;
HXDLIN(  38)					_this1->set_text(::Std_obj::string(_this->gems));
HXDLIN(  38)					_this->gemText->updateMetrics();
HXDLIN(  38)					 ::ui::SimpleText _this2 = _this->gemText;
HXDLIN(  38)					Float _hx_tmp2 = _this->gemIcon->get_x();
HXDLIN(  38)					_this2->set_x((_hx_tmp2 + _this->gemIcon->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this3 = _this->gemText;
HXDLIN(  38)					Float _hx_tmp3 = (_this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  38)					_this3->set_y((_hx_tmp3 - (_this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  38)					 ::openfl::display::Bitmap _this4 = _this->goldIcon;
HXDLIN(  38)					Float _hx_tmp4 = _this->gemText->get_x();
HXDLIN(  38)					_this4->set_x((_hx_tmp4 + _this->gemText->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this5 = _this->goldText;
HXDLIN(  38)					_this5->set_text(::Std_obj::string(_this->gold));
HXDLIN(  38)					_this->goldText->updateMetrics();
HXDLIN(  38)					 ::ui::SimpleText _this6 = _this->goldText;
HXDLIN(  38)					Float _hx_tmp5 = _this->goldIcon->get_x();
HXDLIN(  38)					_this6->set_x((_hx_tmp5 + _this->goldIcon->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this7 = _this->goldText;
HXDLIN(  38)					Float _hx_tmp6 = (_this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  38)					_this7->set_y((_hx_tmp6 - (_this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  38)					 ::openfl::display::Bitmap _this8 = _this->crownIcon;
HXDLIN(  38)					Float _hx_tmp7 = _this->goldText->get_x();
HXDLIN(  38)					_this8->set_x((_hx_tmp7 + _this->goldText->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this9 = _this->crownText;
HXDLIN(  38)					_this9->set_text(::Std_obj::string(_this->crowns));
HXDLIN(  38)					_this->crownText->updateMetrics();
HXDLIN(  38)					 ::ui::SimpleText _this10 = _this->crownText;
HXDLIN(  38)					Float _hx_tmp8 = _this->crownIcon->get_x();
HXDLIN(  38)					_this10->set_x((_hx_tmp8 + _this->crownIcon->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this11 = _this->crownText;
HXDLIN(  38)					Float _hx_tmp9 = (_this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  38)					_this11->set_y((_hx_tmp9 - (_this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  38)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("rtl",6a,e6,56,00)) ){
HXLINE(  38)					 ::openfl::display::Bitmap _this12 = _this->gemIcon;
HXDLIN(  38)					_this12->set_x(-(_this->gemIcon->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this13 = _this->gemText;
HXDLIN(  38)					_this13->set_text(::Std_obj::string(_this->gems));
HXDLIN(  38)					_this->gemText->updateMetrics();
HXDLIN(  38)					 ::ui::SimpleText _this14 = _this->gemText;
HXDLIN(  38)					Float _hx_tmp10 = _this->gemIcon->get_x();
HXDLIN(  38)					_this14->set_x((_hx_tmp10 - _this->gemText->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this15 = _this->gemText;
HXDLIN(  38)					Float _hx_tmp11 = (_this->gemIcon->get_height() / ( (Float)(2) ));
HXDLIN(  38)					_this15->set_y((_hx_tmp11 - (_this->gemText->get_height() / ( (Float)(2) ))));
HXDLIN(  38)					 ::openfl::display::Bitmap _this16 = _this->goldIcon;
HXDLIN(  38)					Float _hx_tmp12 = _this->gemText->get_x();
HXDLIN(  38)					_this16->set_x((_hx_tmp12 - _this->goldIcon->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this17 = _this->goldText;
HXDLIN(  38)					_this17->set_text(::Std_obj::string(_this->gold));
HXDLIN(  38)					_this->goldText->updateMetrics();
HXDLIN(  38)					 ::ui::SimpleText _this18 = _this->goldText;
HXDLIN(  38)					Float _hx_tmp13 = _this->goldIcon->get_x();
HXDLIN(  38)					_this18->set_x((_hx_tmp13 - _this->goldText->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this19 = _this->goldText;
HXDLIN(  38)					Float _hx_tmp14 = (_this->goldIcon->get_height() / ( (Float)(2) ));
HXDLIN(  38)					_this19->set_y((_hx_tmp14 - (_this->goldText->get_height() / ( (Float)(2) ))));
HXDLIN(  38)					 ::openfl::display::Bitmap _this20 = _this->crownIcon;
HXDLIN(  38)					Float _hx_tmp15 = _this->goldText->get_x();
HXDLIN(  38)					_this20->set_x((_hx_tmp15 - _this->crownIcon->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this21 = _this->crownText;
HXDLIN(  38)					_this21->set_text(::Std_obj::string(_this->crowns));
HXDLIN(  38)					_this->crownText->updateMetrics();
HXDLIN(  38)					 ::ui::SimpleText _this22 = _this->crownText;
HXDLIN(  38)					Float _hx_tmp16 = _this->crownIcon->get_x();
HXDLIN(  38)					_this22->set_x((_hx_tmp16 - _this->crownText->get_width()));
HXDLIN(  38)					 ::ui::SimpleText _this23 = _this->crownText;
HXDLIN(  38)					Float _hx_tmp17 = (_this->crownIcon->get_height() / ( (Float)(2) ));
HXDLIN(  38)					_this23->set_y((_hx_tmp17 - (_this->crownText->get_height() / ( (Float)(2) ))));
HXDLIN(  38)					goto _hx_goto_1;
            				}
            				_hx_goto_1:;
            			}
            		}
HXLINE(  39)		this->addChild(this->currencyDisplay);
HXLINE(  40)		{
HXLINE(  40)			int _g = 0;
HXDLIN(  40)			int _g1 = ::objects::ObjectLibrary_obj::playerChars->length;
HXDLIN(  40)			while((_g < _g1)){
HXLINE(  40)				_g = (_g + 1);
HXDLIN(  40)				int i = (_g - 1);
HXLINE(  41)				playerXML = ::objects::ObjectLibrary_obj::playerChars->__get(i).StaticCast<  ::Xml >();
HXLINE(  42)				objectType = ( (int)(::Std_obj::parseInt(playerXML->get(HX_("type",ba,f2,08,4d)))) );
HXLINE(  43)				playerXML->get(HX_("id",db,5b,00,00));
HXLINE(  44)				charBox =  ::screens::CharacterBox_obj::__alloc( HX_CTX ,playerXML);
HXLINE(  45)				Float _hx_tmp18 = ((((( (Float)((::Main_obj::stageWidth - 800)) ) / ( (Float)(2) )) + 50) + (140 * ::Math_obj::floor(( (Float)(::hx::Mod(i,5)) )))) + 70);
HXDLIN(  45)				charBox->set_x((_hx_tmp18 - (charBox->get_width() / ( (Float)(2) ))));
HXLINE(  46)				charBox->set_y((((( (Float)((::Main_obj::stageHeight - 600)) ) / ( (Float)(2) )) + 88) + (140 * ::Math_obj::floor((( (Float)(i) ) / ( (Float)(5) ))))));
HXLINE(  47)				this->boxes->set(objectType,charBox);
HXLINE(  48)				charBox->addEventListener(HX_("rollOver",71,ab,a8,12),::screens::NewCharacterScreen_obj::onCharBoxOver_dyn(),null(),null(),null());
HXLINE(  49)				charBox->addEventListener(HX_("rollOut",11,f9,11,5d),::screens::NewCharacterScreen_obj::onCharBoxOut_dyn(),null(),null(),null());
HXLINE(  50)				this->addChild(charBox);
            			}
            		}
HXLINE(  53)		 ::screens::TitleMenuOption _hx_tmp19 = this->backButton;
HXDLIN(  53)		Float _hx_tmp20 = (( (Float)(this->stage->stageWidth) ) / ( (Float)(2) ));
HXDLIN(  53)		_hx_tmp19->set_x((_hx_tmp20 - (this->backButton->get_width() / ( (Float)(2) ))));
HXLINE(  54)		this->backButton->set_y(( (Float)((this->stage->stageHeight - 76)) ));
HXLINE(  55)		this->currencyDisplay->set_x(( (Float)((this->stage->stageWidth - 5)) ));
HXLINE(  56)		this->currencyDisplay->set_y(( (Float)(25) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NewCharacterScreen_obj,onAdded,(void))

void NewCharacterScreen_obj::onBackClick( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_70910dbd10a81030_73_onBackClick)
HXDLIN(  73)		 ::core::ScreensView _hx_tmp = ::Global_obj::layers->screens;
HXDLIN(  73)		_hx_tmp->setScreen( ::screens::CharacterSelectionScreen_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NewCharacterScreen_obj,onBackClick,(void))

void NewCharacterScreen_obj::onCharBoxOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_70910dbd10a81030_76_onCharBoxOver)
HXLINE(  77)		 ::screens::CharacterBox charBox = ::hx::TCast<  ::screens::CharacterBox >::cast(event->currentTarget);
HXLINE(  78)		charBox->setOver(true);
HXLINE(  79)		 ::ui::tooltip::TooltipsView _hx_tmp = ::Global_obj::layers->tooltips;
HXDLIN(  79)		_hx_tmp->show(charBox->getTooltip());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NewCharacterScreen_obj,onCharBoxOver,(void))

void NewCharacterScreen_obj::onCharBoxOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_70910dbd10a81030_82_onCharBoxOut)
HXLINE(  84)		::hx::TCast<  ::screens::CharacterBox >::cast(event->currentTarget)->setOver(false);
HXLINE(  85)		::Global_obj::layers->tooltips->hide();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NewCharacterScreen_obj,onCharBoxOut,(void))


::hx::ObjectPtr< NewCharacterScreen_obj > NewCharacterScreen_obj::__new() {
	::hx::ObjectPtr< NewCharacterScreen_obj > __this = new NewCharacterScreen_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< NewCharacterScreen_obj > NewCharacterScreen_obj::__alloc(::hx::Ctx *_hx_ctx) {
	NewCharacterScreen_obj *__this = (NewCharacterScreen_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NewCharacterScreen_obj), true, "screens.NewCharacterScreen"));
	*(void **)__this = NewCharacterScreen_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NewCharacterScreen_obj::NewCharacterScreen_obj()
{
}

void NewCharacterScreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NewCharacterScreen);
	HX_MARK_MEMBER_NAME(backButton,"backButton");
	HX_MARK_MEMBER_NAME(currencyDisplay,"currencyDisplay");
	HX_MARK_MEMBER_NAME(boxes,"boxes");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NewCharacterScreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backButton,"backButton");
	HX_VISIT_MEMBER_NAME(currencyDisplay,"currencyDisplay");
	HX_VISIT_MEMBER_NAME(boxes,"boxes");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NewCharacterScreen_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"boxes") ) { return ::hx::Val( boxes ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onAdded") ) { return ::hx::Val( onAdded_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backButton") ) { return ::hx::Val( backButton ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currencyDisplay") ) { return ::hx::Val( currencyDisplay ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NewCharacterScreen_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"onBackClick") ) { outValue = onBackClick_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onCharBoxOut") ) { outValue = onCharBoxOut_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onCharBoxOver") ) { outValue = onCharBoxOver_dyn(); return true; }
	}
	return false;
}

::hx::Val NewCharacterScreen_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"boxes") ) { boxes=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backButton") ) { backButton=inValue.Cast<  ::screens::TitleMenuOption >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currencyDisplay") ) { currencyDisplay=inValue.Cast<  ::game::view::CurrencyDisplay >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NewCharacterScreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("backButton",79,47,6a,18));
	outFields->push(HX_("currencyDisplay",f1,46,0b,8a));
	outFields->push(HX_("boxes",39,ef,fe,b6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NewCharacterScreen_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::screens::TitleMenuOption */ ,(int)offsetof(NewCharacterScreen_obj,backButton),HX_("backButton",79,47,6a,18)},
	{::hx::fsObject /*  ::game::view::CurrencyDisplay */ ,(int)offsetof(NewCharacterScreen_obj,currencyDisplay),HX_("currencyDisplay",f1,46,0b,8a)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(NewCharacterScreen_obj,boxes),HX_("boxes",39,ef,fe,b6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NewCharacterScreen_obj_sStaticStorageInfo = 0;
#endif

static ::String NewCharacterScreen_obj_sMemberFields[] = {
	HX_("backButton",79,47,6a,18),
	HX_("currencyDisplay",f1,46,0b,8a),
	HX_("boxes",39,ef,fe,b6),
	HX_("onAdded",21,73,81,b2),
	::String(null()) };

::hx::Class NewCharacterScreen_obj::__mClass;

static ::String NewCharacterScreen_obj_sStaticFields[] = {
	HX_("onBackClick",82,c7,52,47),
	HX_("onCharBoxOver",ea,e9,ea,23),
	HX_("onCharBoxOut",b8,ec,64,b4),
	::String(null())
};

void NewCharacterScreen_obj::__register()
{
	NewCharacterScreen_obj _hx_dummy;
	NewCharacterScreen_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.NewCharacterScreen",1c,88,b4,5d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NewCharacterScreen_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NewCharacterScreen_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NewCharacterScreen_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NewCharacterScreen_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NewCharacterScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NewCharacterScreen_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
