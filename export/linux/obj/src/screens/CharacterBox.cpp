// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_appengine_SavedCharacter
#include <appengine/SavedCharacter.h>
#endif
#ifndef INCLUDED_classes_model_CharacterClass
#include <classes/model/CharacterClass.h>
#endif
#ifndef INCLUDED_classes_model_ClassModel
#include <classes/model/ClassModel.h>
#endif
#ifndef INCLUDED_classes_view_CharSkinView
#include <classes/view/CharSkinView.h>
#endif
#ifndef INCLUDED_core_Layers
#include <core/Layers.h>
#endif
#ifndef INCLUDED_core_ScreensView
#include <core/ScreensView.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_CharacterBox
#include <screens/CharacterBox.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_ui_tooltip_ClassToolTip
#include <ui/tooltip/ClassToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_ToolTip
#include <ui/tooltip/ToolTip.h>
#endif
#ifndef INCLUDED_ui_tooltip_TooltipsView
#include <ui/tooltip/TooltipsView.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c80ed98167cd150a_17_new,"screens.CharacterBox","new",0xb1af30bb,"screens.CharacterBox.new","screens/CharacterBox.hx",17,0x1174a834)
HX_LOCAL_STACK_FRAME(_hx_pos_c80ed98167cd150a_28_onClick,"screens.CharacterBox","onClick",0xb69e4484,"screens.CharacterBox.onClick","screens/CharacterBox.hx",28,0x1174a834)
HX_LOCAL_STACK_FRAME(_hx_pos_c80ed98167cd150a_75_objectType,"screens.CharacterBox","objectType",0x0f009a1e,"screens.CharacterBox.objectType","screens/CharacterBox.hx",75,0x1174a834)
HX_LOCAL_STACK_FRAME(_hx_pos_c80ed98167cd150a_79_getTooltip,"screens.CharacterBox","getTooltip",0xf9ad6412,"screens.CharacterBox.getTooltip","screens/CharacterBox.hx",79,0x1174a834)
HX_LOCAL_STACK_FRAME(_hx_pos_c80ed98167cd150a_82_setOver,"screens.CharacterBox","setOver",0xe73efbf1,"screens.CharacterBox.setOver","screens/CharacterBox.hx",82,0x1174a834)
HX_LOCAL_STACK_FRAME(_hx_pos_c80ed98167cd150a_92_setImage,"screens.CharacterBox","setImage",0xf57ffe1e,"screens.CharacterBox.setImage","screens/CharacterBox.hx",92,0x1174a834)
HX_LOCAL_STACK_FRAME(_hx_pos_c80ed98167cd150a_97_setStatusButton,"screens.CharacterBox","setStatusButton",0x2716fe61,"screens.CharacterBox.setStatusButton","screens/CharacterBox.hx",97,0x1174a834)
namespace screens{

void CharacterBox_obj::__construct( ::Xml playerXML){
            	HX_GC_STACKFRAME(&_hx_pos_c80ed98167cd150a_17_new)
HXLINE(  19)		this->available = true;
HXLINE(  18)		this->playerXML = null();
HXLINE(  40)		super::__construct();
HXLINE(  42)		this->playerXML = playerXML;
HXLINE(  43)		this->graphic =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  44)		this->graphic->get_graphics()->lineStyle(2,6710886,null(),null(),null(),null(),null(),null());
HXLINE(  45)		this->graphic->get_graphics()->beginFill(1118481,null());
HXLINE(  46)		this->graphic->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ));
HXLINE(  47)		this->graphicContainer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  48)		this->addChild(this->graphicContainer);
HXLINE(  49)		this->graphicContainer->addChild(this->graphic);
HXLINE(  50)		this->graphicContainer->addEventListener(HX_("click",48,7c,5e,48),this->onClick_dyn(),null(),null(),null());
HXLINE(  51)		this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  52)		this->bitmap->set_y(( (Float)(10) ));
HXLINE(  53)		this->setImage(2,0,( (Float)(0) ));
HXLINE(  54)		this->graphic->addChild(this->bitmap);
HXLINE(  55)		this->classNameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16777215,false,0,0,null());
HXLINE(  56)		this->classNameText->setBold(true);
HXLINE(  57)		 ::ui::SimpleText _hx_tmp = this->classNameText;
HXDLIN(  57)		_hx_tmp->set_htmlText(((HX_("<p align=\"center\">",cf,04,3d,e9) + this->playerXML->get(HX_("id",db,5b,00,00))) + HX_("</p>",01,d9,cc,27)));
HXLINE(  58)		this->classNameText->set_autoSize(0);
HXLINE(  59)		this->classNameText->updateMetrics();
HXLINE(  60)		 ::ui::SimpleText _hx_tmp1 = this->classNameText;
HXDLIN(  60)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,4,4,null(),null(),null(),null(),null())));
HXLINE(  61)		this->classNameText->set_y(( (Float)(65) ));
HXLINE(  62)		this->graphic->addChild(this->classNameText);
HXLINE(  63)		this->setStatusButton();
HXLINE(  64)		if (!(this->available)) {
HXLINE(  65)			this->lock =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::util::AssetLibrary_obj::getImageFromSet(HX_("misc",ec,52,5c,48),11),null(),null());
HXLINE(  66)			this->lock->set_scaleX(( (Float)(2) ));
HXLINE(  67)			this->lock->set_scaleY(( (Float)(2) ));
HXLINE(  68)			this->lock->set_x(( (Float)(4) ));
HXLINE(  69)			this->lock->set_y(( (Float)(8) ));
HXLINE(  70)			this->addChild(this->lock);
            		}
            	}

Dynamic CharacterBox_obj::__CreateEmpty() { return new CharacterBox_obj; }

void *CharacterBox_obj::_hx_vtable = 0;

Dynamic CharacterBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterBox_obj > _hx_result = new CharacterBox_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CharacterBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3e814be5 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void CharacterBox_obj::onClick( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_c80ed98167cd150a_28_onClick)
HXLINE(  29)		this->graphicContainer->removeEventListener(HX_("click",48,7c,5e,48),this->onClick_dyn(),null());
HXLINE(  31)		::Global_obj::layers->tooltips->hide();
HXLINE(  32)		if (!(this->available)) {
HXLINE(  33)			return;
            		}
HXLINE(  35)		 ::classes::model::ClassModel _hx_tmp = ::Global_obj::classModel;
HXDLIN(  35)		_hx_tmp->getCharacterClass(( (int)(this->objectType()) ))->setIsSelected(true);
HXLINE(  36)		 ::core::ScreensView _hx_tmp1 = ::Global_obj::layers->screens;
HXDLIN(  36)		_hx_tmp1->setScreen( ::classes::view::CharSkinView_obj::__alloc( HX_CTX ,this->playerXML));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterBox_obj,onClick,(void))

 ::Dynamic CharacterBox_obj::objectType(){
            	HX_STACKFRAME(&_hx_pos_c80ed98167cd150a_75_objectType)
HXDLIN(  75)		return ::Std_obj::parseInt(this->playerXML->get(HX_("type",ba,f2,08,4d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterBox_obj,objectType,return )

 ::ui::tooltip::ToolTip CharacterBox_obj::getTooltip(){
            	HX_GC_STACKFRAME(&_hx_pos_c80ed98167cd150a_79_getTooltip)
HXDLIN(  79)		return  ::ui::tooltip::ClassToolTip_obj::__alloc( HX_CTX ,this->playerXML);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterBox_obj,getTooltip,return )

void CharacterBox_obj::setOver(bool over){
            	HX_GC_STACKFRAME(&_hx_pos_c80ed98167cd150a_82_setOver)
HXLINE(  83)		if (!(this->available)) {
HXLINE(  84)			return;
            		}
HXLINE(  86)		if (over) {
HXLINE(  87)			this->get_transform()->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,((Float)1.2),((Float)1.2),((Float)1.2),null(),null(),null(),null(),null()));
            		}
            		else {
HXLINE(  89)			this->get_transform()->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,1,1,null(),null(),null(),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterBox_obj,setOver,(void))

void CharacterBox_obj::setImage(int dir,int action,Float p){
            	HX_STACKFRAME(&_hx_pos_c80ed98167cd150a_92_setImage)
HXLINE(  93)		 ::openfl::display::Bitmap _hx_tmp = this->bitmap;
HXDLIN(  93)		_hx_tmp->set_bitmapData(::appengine::SavedCharacter_obj::getImage(null(),this->playerXML,dir,action,p,this->available,false));
HXLINE(  94)		 ::openfl::display::Bitmap _hx_tmp1 = this->bitmap;
HXDLIN(  94)		Float _hx_tmp2 = (this->graphic->get_width() / ( (Float)(2) ));
HXDLIN(  94)		_hx_tmp1->set_x((_hx_tmp2 - (( (Float)(this->bitmap->get_bitmapData()->width) ) / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC3(CharacterBox_obj,setImage,(void))

void CharacterBox_obj::setStatusButton(){
            	HX_GC_STACKFRAME(&_hx_pos_c80ed98167cd150a_97_setStatusButton)
HXLINE(  98)		this->statusText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,14,16711680,false,0,0,null());
HXLINE(  99)		this->statusText->set_htmlText(HX_("<p align=\"center\">Locked</p>",ba,ec,af,8f));
HXLINE( 100)		this->statusText->setBold(true);
HXLINE( 101)		this->statusText->set_autoSize(0);
HXLINE( 102)		this->statusText->updateMetrics();
HXLINE( 103)		 ::ui::SimpleText _hx_tmp = this->statusText;
HXDLIN( 103)		_hx_tmp->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,4,4,null(),null(),null(),null(),null())));
HXLINE( 104)		this->statusText->set_y(( (Float)(58) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterBox_obj,setStatusButton,(void))


::hx::ObjectPtr< CharacterBox_obj > CharacterBox_obj::__new( ::Xml playerXML) {
	::hx::ObjectPtr< CharacterBox_obj > __this = new CharacterBox_obj();
	__this->__construct(playerXML);
	return __this;
}

::hx::ObjectPtr< CharacterBox_obj > CharacterBox_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml playerXML) {
	CharacterBox_obj *__this = (CharacterBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterBox_obj), true, "screens.CharacterBox"));
	*(void **)__this = CharacterBox_obj::_hx_vtable;
	__this->__construct(playerXML);
	return __this;
}

CharacterBox_obj::CharacterBox_obj()
{
}

void CharacterBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterBox);
	HX_MARK_MEMBER_NAME(playerXML,"playerXML");
	HX_MARK_MEMBER_NAME(available,"available");
	HX_MARK_MEMBER_NAME(graphicContainer,"graphicContainer");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(statusText,"statusText");
	HX_MARK_MEMBER_NAME(classNameText,"classNameText");
	HX_MARK_MEMBER_NAME(lock,"lock");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(playerXML,"playerXML");
	HX_VISIT_MEMBER_NAME(available,"available");
	HX_VISIT_MEMBER_NAME(graphicContainer,"graphicContainer");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(statusText,"statusText");
	HX_VISIT_MEMBER_NAME(classNameText,"classNameText");
	HX_VISIT_MEMBER_NAME(lock,"lock");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { return ::hx::Val( lock ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return ::hx::Val( bitmap ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return ::hx::Val( graphic ); }
		if (HX_FIELD_EQ(inName,"onClick") ) { return ::hx::Val( onClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOver") ) { return ::hx::Val( setOver_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setImage") ) { return ::hx::Val( setImage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playerXML") ) { return ::hx::Val( playerXML ); }
		if (HX_FIELD_EQ(inName,"available") ) { return ::hx::Val( available ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"statusText") ) { return ::hx::Val( statusText ); }
		if (HX_FIELD_EQ(inName,"objectType") ) { return ::hx::Val( objectType_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTooltip") ) { return ::hx::Val( getTooltip_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"classNameText") ) { return ::hx::Val( classNameText ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setStatusButton") ) { return ::hx::Val( setStatusButton_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"graphicContainer") ) { return ::hx::Val( graphicContainer ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CharacterBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { lock=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { graphic=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playerXML") ) { playerXML=inValue.Cast<  ::Xml >(); return inValue; }
		if (HX_FIELD_EQ(inName,"available") ) { available=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"statusText") ) { statusText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"classNameText") ) { classNameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"graphicContainer") ) { graphicContainer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharacterBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("playerXML",f6,b0,cc,00));
	outFields->push(HX_("available",c9,59,83,77));
	outFields->push(HX_("graphicContainer",79,65,62,13));
	outFields->push(HX_("graphic",a8,5a,07,74));
	outFields->push(HX_("bitmap",ef,0f,0c,f1));
	outFields->push(HX_("statusText",ff,60,57,b1));
	outFields->push(HX_("classNameText",f0,18,92,d1));
	outFields->push(HX_("lock",eb,9b,b7,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(CharacterBox_obj,playerXML),HX_("playerXML",f6,b0,cc,00)},
	{::hx::fsBool,(int)offsetof(CharacterBox_obj,available),HX_("available",c9,59,83,77)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(CharacterBox_obj,graphicContainer),HX_("graphicContainer",79,65,62,13)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(CharacterBox_obj,graphic),HX_("graphic",a8,5a,07,74)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CharacterBox_obj,bitmap),HX_("bitmap",ef,0f,0c,f1)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CharacterBox_obj,statusText),HX_("statusText",ff,60,57,b1)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CharacterBox_obj,classNameText),HX_("classNameText",f0,18,92,d1)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CharacterBox_obj,lock),HX_("lock",eb,9b,b7,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CharacterBox_obj_sStaticStorageInfo = 0;
#endif

static ::String CharacterBox_obj_sMemberFields[] = {
	HX_("playerXML",f6,b0,cc,00),
	HX_("available",c9,59,83,77),
	HX_("graphicContainer",79,65,62,13),
	HX_("graphic",a8,5a,07,74),
	HX_("bitmap",ef,0f,0c,f1),
	HX_("statusText",ff,60,57,b1),
	HX_("classNameText",f0,18,92,d1),
	HX_("lock",eb,9b,b7,47),
	HX_("onClick",a9,1a,9c,de),
	HX_("objectType",19,69,41,cf),
	HX_("getTooltip",0d,33,ee,b9),
	HX_("setOver",16,d2,3c,0f),
	HX_("setImage",59,88,9d,cb),
	HX_("setStatusButton",86,01,bf,5e),
	::String(null()) };

::hx::Class CharacterBox_obj::__mClass;

void CharacterBox_obj::__register()
{
	CharacterBox_obj _hx_dummy;
	CharacterBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.CharacterBox",49,b7,0b,55);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
