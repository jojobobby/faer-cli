// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_screens_ServerBox
#include <screens/ServerBox.h>
#endif
#ifndef INCLUDED_screens_ServerBoxes
#include <screens/ServerBoxes.h>
#endif
#ifndef INCLUDED_servers_Server
#include <servers/Server.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8a770df79a7565f5_11_new,"screens.ServerBoxes","new",0x6044b261,"screens.ServerBoxes.new","screens/ServerBoxes.hx",11,0x298113f0)
HX_LOCAL_STACK_FRAME(_hx_pos_8a770df79a7565f5_37_setSelected,"screens.ServerBoxes","setSelected",0xa3623f1e,"screens.ServerBoxes.setSelected","screens/ServerBoxes.hx",37,0x298113f0)
HX_LOCAL_STACK_FRAME(_hx_pos_8a770df79a7565f5_44_onMouseDown,"screens.ServerBoxes","onMouseDown",0xd299df09,"screens.ServerBoxes.onMouseDown","screens/ServerBoxes.hx",44,0x298113f0)
namespace screens{

void ServerBoxes_obj::__construct(::Array< ::Dynamic> servers){
            	HX_GC_STACKFRAME(&_hx_pos_8a770df79a7565f5_11_new)
HXLINE(  12)		super::__construct();
HXLINE(  15)		int i = 2;
HXLINE(  16)		this->boxes = ::Array_obj< ::Dynamic>::__new();
HXLINE(  14)		 ::screens::ServerBox serverBox =  ::screens::ServerBox_obj::__alloc( HX_CTX ,null());
HXLINE(  18)		serverBox->setSelected(true);
HXLINE(  19)		serverBox->set_x(((Float)194.));
HXLINE(  20)		serverBox->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE(  21)		this->addChild(serverBox);
HXLINE(  22)		this->boxes->push(serverBox);
HXLINE(  23)		{
HXLINE(  23)			int _g = 0;
HXDLIN(  23)			while((_g < servers->length)){
HXLINE(  23)				 ::servers::Server server = servers->__get(_g).StaticCast<  ::servers::Server >();
HXDLIN(  23)				_g = (_g + 1);
HXLINE(  24)				serverBox =  ::screens::ServerBox_obj::__alloc( HX_CTX ,server);
HXLINE(  25)				if ((server->name == ::util::Settings_obj::selectedServer)) {
HXLINE(  26)					this->setSelected(serverBox);
            				}
HXLINE(  28)				serverBox->set_x(( (Float)((::hx::Mod(i,2) * 388)) ));
HXLINE(  29)				serverBox->set_y(( (Float)((::Std_obj::_hx_int((( (Float)(i) ) / ( (Float)(2) ))) * 56)) ));
HXLINE(  30)				serverBox->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE(  31)				this->addChild(serverBox);
HXLINE(  32)				this->boxes->push(serverBox);
HXLINE(  33)				i = (i + 1);
            			}
            		}
            	}

Dynamic ServerBoxes_obj::__CreateEmpty() { return new ServerBoxes_obj; }

void *ServerBoxes_obj::_hx_vtable = 0;

Dynamic ServerBoxes_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ServerBoxes_obj > _hx_result = new ServerBoxes_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ServerBoxes_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d6f652b) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x0d6f652b;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void ServerBoxes_obj::setSelected( ::screens::ServerBox serverBox){
            	HX_STACKFRAME(&_hx_pos_8a770df79a7565f5_37_setSelected)
HXLINE(  38)		{
HXLINE(  38)			int _g = 0;
HXDLIN(  38)			::Array< ::Dynamic> _g1 = this->boxes;
HXDLIN(  38)			while((_g < _g1->length)){
HXLINE(  38)				 ::screens::ServerBox otherServerBox = _g1->__get(_g).StaticCast<  ::screens::ServerBox >();
HXDLIN(  38)				_g = (_g + 1);
HXLINE(  39)				otherServerBox->setSelected(false);
            			}
            		}
HXLINE(  41)		serverBox->setSelected(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ServerBoxes_obj,setSelected,(void))

void ServerBoxes_obj::onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_8a770df79a7565f5_44_onMouseDown)
HXLINE(  45)		 ::screens::ServerBox serverBox = ::hx::TCast<  ::screens::ServerBox >::cast(event->target);
HXLINE(  46)		this->setSelected(serverBox);
HXLINE(  47)		::util::Settings_obj::selectedServer = serverBox->value;
HXLINE(  48)		::util::Settings_obj::save();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ServerBoxes_obj,onMouseDown,(void))


::hx::ObjectPtr< ServerBoxes_obj > ServerBoxes_obj::__new(::Array< ::Dynamic> servers) {
	::hx::ObjectPtr< ServerBoxes_obj > __this = new ServerBoxes_obj();
	__this->__construct(servers);
	return __this;
}

::hx::ObjectPtr< ServerBoxes_obj > ServerBoxes_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> servers) {
	ServerBoxes_obj *__this = (ServerBoxes_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ServerBoxes_obj), true, "screens.ServerBoxes"));
	*(void **)__this = ServerBoxes_obj::_hx_vtable;
	__this->__construct(servers);
	return __this;
}

ServerBoxes_obj::ServerBoxes_obj()
{
}

void ServerBoxes_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ServerBoxes);
	HX_MARK_MEMBER_NAME(boxes,"boxes");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ServerBoxes_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(boxes,"boxes");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ServerBoxes_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"boxes") ) { return ::hx::Val( boxes ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setSelected") ) { return ::hx::Val( setSelected_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ServerBoxes_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"boxes") ) { boxes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ServerBoxes_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("boxes",39,ef,fe,b6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ServerBoxes_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ServerBoxes_obj,boxes),HX_("boxes",39,ef,fe,b6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ServerBoxes_obj_sStaticStorageInfo = 0;
#endif

static ::String ServerBoxes_obj_sMemberFields[] = {
	HX_("boxes",39,ef,fe,b6),
	HX_("setSelected",1d,f4,cd,e1),
	HX_("onMouseDown",08,94,05,11),
	::String(null()) };

::hx::Class ServerBoxes_obj::__mClass;

void ServerBoxes_obj::__register()
{
	ServerBoxes_obj _hx_dummy;
	ServerBoxes_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.ServerBoxes",ef,ed,c9,14);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ServerBoxes_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ServerBoxes_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ServerBoxes_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ServerBoxes_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
