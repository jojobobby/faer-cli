// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_TitleMenuOption
#include <screens/TitleMenuOption.h>
#endif
#ifndef INCLUDED_sound_SoundEffectLibrary
#include <sound/SoundEffectLibrary.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif
#ifndef INCLUDED_util_EmptySignal
#include <util/EmptySignal.h>
#endif
#ifndef INCLUDED_util_MathUtil
#include <util/MathUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_14_new,"screens.TitleMenuOption","new",0xf2479a97,"screens.TitleMenuOption.new","screens/TitleMenuOption.hx",14,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_41_setText,"screens.TitleMenuOption","setText",0x1628bf26,"screens.TitleMenuOption.setText","screens/TitleMenuOption.hx",41,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_59_activate,"screens.TitleMenuOption","activate",0x175cea1c,"screens.TitleMenuOption.activate","screens/TitleMenuOption.hx",59,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_65_deactivate,"screens.TitleMenuOption","deactivate",0xd65156dd,"screens.TitleMenuOption.deactivate","screens/TitleMenuOption.hx",65,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_74_setColorTransform,"screens.TitleMenuOption","setColorTransform",0x2671fb42,"screens.TitleMenuOption.setColorTransform","screens/TitleMenuOption.hx",74,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_87_onMouseOver,"screens.TitleMenuOption","onMouseOver",0x83fb8631,"screens.TitleMenuOption.onMouseOver","screens/TitleMenuOption.hx",87,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_91_onMouseOut,"screens.TitleMenuOption","onMouseOut",0x1c24b651,"screens.TitleMenuOption.onMouseOut","screens/TitleMenuOption.hx",91,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_94_onMouseClick,"screens.TitleMenuOption","onMouseClick",0x08b1c8cb,"screens.TitleMenuOption.onMouseClick","screens/TitleMenuOption.hx",94,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_99_onAddedToStage,"screens.TitleMenuOption","onAddedToStage",0x1fd1854b,"screens.TitleMenuOption.onAddedToStage","screens/TitleMenuOption.hx",99,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_108_onRemovedFromStage,"screens.TitleMenuOption","onRemovedFromStage",0x15c2181c,"screens.TitleMenuOption.onRemovedFromStage","screens/TitleMenuOption.hx",108,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_117_onEnterFrame,"screens.TitleMenuOption","onEnterFrame",0xa4d65cdd,"screens.TitleMenuOption.onEnterFrame","screens/TitleMenuOption.hx",117,0x5fae18fa)
HX_LOCAL_STACK_FRAME(_hx_pos_5c7222b5bba0f85f_15_boot,"screens.TitleMenuOption","boot",0x0478aa1b,"screens.TitleMenuOption.boot","screens/TitleMenuOption.hx",15,0x5fae18fa)
namespace screens{

void TitleMenuOption_obj::__construct(::String text,int size,bool pulse){
            	HX_GC_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_14_new)
HXLINE(  27)		this->originalHeight = ((Float)0.0);
HXLINE(  26)		this->originalWidth = ((Float)0.0);
HXLINE(  24)		this->active = false;
HXLINE(  22)		this->isPulse = false;
HXLINE(  20)		this->size = 0;
HXLINE(  17)		this->clicked =  ::util::EmptySignal_obj::__alloc( HX_CTX );
HXLINE(  30)		super::__construct();
HXLINE(  32)		this->set_buttonMode(true);
HXLINE(  33)		this->size = size;
HXLINE(  34)		this->setText(text);
HXLINE(  35)		this->isPulse = pulse;
HXLINE(  36)		this->originalWidth = this->get_width();
HXLINE(  37)		this->originalHeight = this->get_height();
HXLINE(  38)		this->activate();
            	}

Dynamic TitleMenuOption_obj::__CreateEmpty() { return new TitleMenuOption_obj; }

void *TitleMenuOption_obj::_hx_vtable = 0;

Dynamic TitleMenuOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleMenuOption_obj > _hx_result = new TitleMenuOption_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TitleMenuOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0bd1256d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0bd1256d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void TitleMenuOption_obj::setText(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_41_setText)
HXLINE(  42)		this->set_name(text);
HXLINE(  43)		if (::hx::IsNotNull( this->textField )) {
HXLINE(  44)			this->removeChild(this->textField);
            		}
HXLINE(  46)		this->textField =  ::ui::SimpleText_obj::__alloc( HX_CTX ,this->size,16777215,false,0,0,null());
HXLINE(  47)		this->textField->setBold(true);
HXLINE(  48)		 ::ui::SimpleText _hx_tmp = this->textField;
HXDLIN(  48)		_hx_tmp->set_text(text.toLowerCase());
HXLINE(  49)		this->textField->updateMetrics();
HXLINE(  50)		 ::ui::SimpleText _hx_tmp1 = this->textField;
HXDLIN(  50)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,((Float)0.5),12,12,null(),null(),null(),null(),null())));
HXLINE(  51)		this->addChild(this->textField);
HXLINE(  54)		this->get_graphics()->clear();
HXLINE(  55)		this->get_graphics()->beginFill(16777215,0);
HXLINE(  56)		 ::openfl::display::Graphics _hx_tmp2 = this->get_graphics();
HXDLIN(  56)		Float _hx_tmp3 = (this->textField->get_x() - ( (Float)(4) ));
HXDLIN(  56)		Float _hx_tmp4 = (this->textField->get_y() - ( (Float)(4) ));
HXDLIN(  56)		Float _hx_tmp5 = (this->textField->get_width() + 8);
HXDLIN(  56)		_hx_tmp2->drawRect(_hx_tmp3,_hx_tmp4,_hx_tmp5,(this->textField->get_height() + 8));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,setText,(void))

void TitleMenuOption_obj::activate(){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_59_activate)
HXLINE(  60)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
HXLINE(  61)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null(),null(),null());
HXLINE(  62)		this->active = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleMenuOption_obj,activate,(void))

void TitleMenuOption_obj::deactivate(){
            	HX_GC_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_65_deactivate)
HXLINE(  66)		 ::openfl::geom::ColorTransform ct =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  67)		ct->set_color(3552822);
HXLINE(  68)		this->setColorTransform(ct);
HXLINE(  69)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null());
HXLINE(  70)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->onRemovedFromStage_dyn(),null());
HXLINE(  71)		this->active = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleMenuOption_obj,deactivate,(void))

void TitleMenuOption_obj::setColorTransform( ::openfl::geom::ColorTransform ct){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_74_setColorTransform)
HXLINE(  75)		if (::hx::IsInstanceEq( ct,this->colorTransform )) {
HXLINE(  76)			return;
            		}
HXLINE(  78)		this->colorTransform = ct;
HXLINE(  79)		if (::hx::IsNull( this->colorTransform )) {
HXLINE(  80)			this->textField->get_transform()->set_colorTransform(::util::ColorUtils_obj::identity);
            		}
            		else {
HXLINE(  82)			this->textField->get_transform()->set_colorTransform(this->colorTransform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,setColorTransform,(void))

void TitleMenuOption_obj::onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_87_onMouseOver)
HXDLIN(  87)		this->setColorTransform(::screens::TitleMenuOption_obj::OVER_COLOR_TRANSFORM);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,onMouseOver,(void))

void TitleMenuOption_obj::onMouseOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_91_onMouseOut)
HXDLIN(  91)		this->setColorTransform(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,onMouseOut,(void))

void TitleMenuOption_obj::onMouseClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_94_onMouseClick)
HXLINE(  95)		::sound::SoundEffectLibrary_obj::play(HX_("button_click",fb,26,6f,b7),null(),null());
HXLINE(  96)		this->clicked->emit();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,onMouseClick,(void))

void TitleMenuOption_obj::onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_99_onAddedToStage)
HXLINE( 100)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE( 101)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null(),null(),null());
HXLINE( 102)		this->addEventListener(HX_("click",48,7c,5e,48),this->onMouseClick_dyn(),null(),null(),null());
HXLINE( 103)		if (this->isPulse) {
HXLINE( 104)			this->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,onAddedToStage,(void))

void TitleMenuOption_obj::onRemovedFromStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_108_onRemovedFromStage)
HXLINE( 109)		this->removeEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null());
HXLINE( 110)		this->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->onMouseOut_dyn(),null());
HXLINE( 111)		this->removeEventListener(HX_("click",48,7c,5e,48),this->onMouseClick_dyn(),null());
HXLINE( 112)		if (this->isPulse) {
HXLINE( 113)			this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,onRemovedFromStage,(void))

void TitleMenuOption_obj::onEnterFrame( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_117_onEnterFrame)
HXLINE( 118)		float x = ( (float)((( (Float)(::lime::_hx_system::System_obj::getTimer()) ) / ( (Float)(200) ))) );
HXDLIN( 118)		Float s = (((Float)1.05) + (((Float)0.05) * ( (Float)(::util::MathUtil_obj::SIN_TABLE[(::Math_obj::round((( (Float)(x) ) * ((Float)10430.3783504704534))) & 65535)]) )));
HXLINE( 119)		this->textField->set_scaleX(s);
HXLINE( 120)		this->textField->set_scaleY(s);
HXLINE( 121)		 ::ui::SimpleText _hx_tmp = this->textField;
HXDLIN( 121)		Float _hx_tmp1 = (this->originalWidth / ( (Float)(2) ));
HXDLIN( 121)		_hx_tmp->set_x((_hx_tmp1 - (this->textField->get_width() / ( (Float)(2) ))));
HXLINE( 122)		 ::ui::SimpleText _hx_tmp2 = this->textField;
HXDLIN( 122)		Float _hx_tmp3 = (this->originalHeight / ( (Float)(2) ));
HXDLIN( 122)		_hx_tmp2->set_y((_hx_tmp3 - (this->textField->get_height() / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleMenuOption_obj,onEnterFrame,(void))

 ::openfl::geom::ColorTransform TitleMenuOption_obj::OVER_COLOR_TRANSFORM;


::hx::ObjectPtr< TitleMenuOption_obj > TitleMenuOption_obj::__new(::String text,int size,bool pulse) {
	::hx::ObjectPtr< TitleMenuOption_obj > __this = new TitleMenuOption_obj();
	__this->__construct(text,size,pulse);
	return __this;
}

::hx::ObjectPtr< TitleMenuOption_obj > TitleMenuOption_obj::__alloc(::hx::Ctx *_hx_ctx,::String text,int size,bool pulse) {
	TitleMenuOption_obj *__this = (TitleMenuOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleMenuOption_obj), true, "screens.TitleMenuOption"));
	*(void **)__this = TitleMenuOption_obj::_hx_vtable;
	__this->__construct(text,size,pulse);
	return __this;
}

TitleMenuOption_obj::TitleMenuOption_obj()
{
}

void TitleMenuOption_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleMenuOption);
	HX_MARK_MEMBER_NAME(clicked,"clicked");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(isPulse,"isPulse");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(originalWidth,"originalWidth");
	HX_MARK_MEMBER_NAME(originalHeight,"originalHeight");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleMenuOption_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(clicked,"clicked");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(isPulse,"isPulse");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(originalWidth,"originalWidth");
	HX_VISIT_MEMBER_NAME(originalHeight,"originalHeight");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleMenuOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"clicked") ) { return ::hx::Val( clicked ); }
		if (HX_FIELD_EQ(inName,"isPulse") ) { return ::hx::Val( isPulse ); }
		if (HX_FIELD_EQ(inName,"setText") ) { return ::hx::Val( setText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"activate") ) { return ::hx::Val( activate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"deactivate") ) { return ::hx::Val( deactivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return ::hx::Val( onMouseOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onMouseClick") ) { return ::hx::Val( onMouseClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return ::hx::Val( onEnterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"originalWidth") ) { return ::hx::Val( originalWidth ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return ::hx::Val( colorTransform ); }
		if (HX_FIELD_EQ(inName,"originalHeight") ) { return ::hx::Val( originalHeight ); }
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return ::hx::Val( onAddedToStage_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setColorTransform") ) { return ::hx::Val( setColorTransform_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onRemovedFromStage") ) { return ::hx::Val( onRemovedFromStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TitleMenuOption_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"OVER_COLOR_TRANSFORM") ) { outValue = ( OVER_COLOR_TRANSFORM ); return true; }
	}
	return false;
}

::hx::Val TitleMenuOption_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"clicked") ) { clicked=inValue.Cast<  ::util::EmptySignal >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isPulse") ) { isPulse=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"originalWidth") ) { originalWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originalHeight") ) { originalHeight=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TitleMenuOption_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"OVER_COLOR_TRANSFORM") ) { OVER_COLOR_TRANSFORM=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

void TitleMenuOption_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("clicked",a7,76,2c,fa));
	outFields->push(HX_("colorTransform",89,d7,3f,ad));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("isPulse",cf,ea,0e,67));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("originalWidth",f5,ab,53,25));
	outFields->push(HX_("originalHeight",18,43,32,3a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleMenuOption_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::util::EmptySignal */ ,(int)offsetof(TitleMenuOption_obj,clicked),HX_("clicked",a7,76,2c,fa)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(TitleMenuOption_obj,colorTransform),HX_("colorTransform",89,d7,3f,ad)},
	{::hx::fsInt,(int)offsetof(TitleMenuOption_obj,size),HX_("size",c1,a0,53,4c)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(TitleMenuOption_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsBool,(int)offsetof(TitleMenuOption_obj,isPulse),HX_("isPulse",cf,ea,0e,67)},
	{::hx::fsBool,(int)offsetof(TitleMenuOption_obj,active),HX_("active",c6,41,46,16)},
	{::hx::fsFloat,(int)offsetof(TitleMenuOption_obj,originalWidth),HX_("originalWidth",f5,ab,53,25)},
	{::hx::fsFloat,(int)offsetof(TitleMenuOption_obj,originalHeight),HX_("originalHeight",18,43,32,3a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TitleMenuOption_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &TitleMenuOption_obj::OVER_COLOR_TRANSFORM,HX_("OVER_COLOR_TRANSFORM",e5,97,b7,11)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TitleMenuOption_obj_sMemberFields[] = {
	HX_("clicked",a7,76,2c,fa),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("size",c1,a0,53,4c),
	HX_("textField",cd,24,81,99),
	HX_("isPulse",cf,ea,0e,67),
	HX_("active",c6,41,46,16),
	HX_("originalWidth",f5,ab,53,25),
	HX_("originalHeight",18,43,32,3a),
	HX_("setText",6f,0d,7e,12),
	HX_("activate",b3,1b,ac,e5),
	HX_("deactivate",34,5c,01,3c),
	HX_("setColorTransform",cb,5e,21,43),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onMouseOut",a8,bb,d4,81),
	HX_("onMouseClick",e2,11,6f,3e),
	HX_("onAddedToStage",22,82,44,36),
	HX_("onRemovedFromStage",73,cc,89,12),
	HX_("onEnterFrame",f4,a5,93,da),
	::String(null()) };

static void TitleMenuOption_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TitleMenuOption_obj::OVER_COLOR_TRANSFORM,"OVER_COLOR_TRANSFORM");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TitleMenuOption_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TitleMenuOption_obj::OVER_COLOR_TRANSFORM,"OVER_COLOR_TRANSFORM");
};

#endif

::hx::Class TitleMenuOption_obj::__mClass;

static ::String TitleMenuOption_obj_sStaticFields[] = {
	HX_("OVER_COLOR_TRANSFORM",e5,97,b7,11),
	::String(null())
};

void TitleMenuOption_obj::__register()
{
	TitleMenuOption_obj _hx_dummy;
	TitleMenuOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.TitleMenuOption",25,03,7b,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TitleMenuOption_obj::__GetStatic;
	__mClass->mSetStaticField = &TitleMenuOption_obj::__SetStatic;
	__mClass->mMarkFunc = TitleMenuOption_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TitleMenuOption_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleMenuOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleMenuOption_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TitleMenuOption_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleMenuOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleMenuOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TitleMenuOption_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_5c7222b5bba0f85f_15_boot)
HXDLIN(  15)		OVER_COLOR_TRANSFORM =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,((Float)0.86274509803921573),((Float)0.521568627450980427),null(),null(),null(),null(),null());
            	}
}

} // end namespace screens
