// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_assets_IconFactory
#include <assets/IconFactory.h>
#endif
#ifndef INCLUDED_core_PlayerModel
#include <core/PlayerModel.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_charrects_BuyCharacterRect
#include <screens/charrects/BuyCharacterRect.h>
#endif
#ifndef INCLUDED_screens_charrects_CharacterRect
#include <screens/charrects/CharacterRect.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f3a40ca0ce85f38_51_new,"screens.charrects.BuyCharacterRect","new",0xfd5b8035,"screens.charrects.BuyCharacterRect.new","screens/charrects/BuyCharacterRect.hx",51,0x35c122d9)
HX_LOCAL_STACK_FRAME(_hx_pos_1f3a40ca0ce85f38_16_buildIcon,"screens.charrects.BuyCharacterRect","buildIcon",0xa7bfdb5c,"screens.charrects.BuyCharacterRect.buildIcon","screens/charrects/BuyCharacterRect.hx",16,0x35c122d9)
HX_LOCAL_STACK_FRAME(_hx_pos_1f3a40ca0ce85f38_33_getOrdinalString,"screens.charrects.BuyCharacterRect","getOrdinalString",0xe6bb56b7,"screens.charrects.BuyCharacterRect.getOrdinalString","screens/charrects/BuyCharacterRect.hx",33,0x35c122d9)
namespace screens{
namespace charrects{

void BuyCharacterRect_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1f3a40ca0ce85f38_51_new)
HXLINE(  52)		super::__construct(2039583,4342338);
HXLINE(  53)		 ::openfl::display::Shape icon = ::screens::charrects::BuyCharacterRect_obj::buildIcon();
HXLINE(  54)		icon->set_x(( (Float)(7) ));
HXLINE(  55)		icon->set_y(( (Float)(7) ));
HXLINE(  56)		this->addChild(icon);
HXLINE(  57)		this->makeContainer();
HXLINE(  58)		this->classNameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,18,16777215,null(),null(),null(),null());
HXLINE(  59)		this->classNameText->setBold(true);
HXLINE(  60)		 ::ui::SimpleText _hx_tmp = this->classNameText;
HXDLIN(  60)		_hx_tmp->set_text(((HX_("Buy ",3a,46,f9,2b) + ::screens::charrects::BuyCharacterRect_obj::getOrdinalString((::Global_obj::playerModel->getMaxCharacters() + 1))) + HX_(" Character Slot",35,66,af,30)));
HXLINE(  61)		 ::ui::SimpleText _hx_tmp1 = this->classNameText;
HXDLIN(  61)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,8,8,null(),null(),null(),null(),null())));
HXLINE(  62)		this->classNameText->updateMetrics();
HXLINE(  63)		 ::ui::SimpleText _hx_tmp2 = this->classNameText;
HXDLIN(  63)		_hx_tmp2->set_x((((( (Float)(384) ) - this->classNameText->get_width()) / ( (Float)(2) )) - ( (Float)(22) )));
HXLINE(  64)		 ::ui::SimpleText _hx_tmp3 = this->classNameText;
HXDLIN(  64)		_hx_tmp3->set_y((((( (Float)(59) ) - this->classNameText->get_height()) / ( (Float)(2) )) - ( (Float)(3) )));
HXLINE(  65)		this->selectContainer->addChild(this->classNameText);
HXLINE(  66)		this->priceText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,18,16777215,null(),null(),null(),null());
HXLINE(  67)		 ::ui::SimpleText _hx_tmp4 = this->priceText;
HXDLIN(  67)		_hx_tmp4->set_text(::Std_obj::string(::Global_obj::playerModel->getNextCharSlotPrice()));
HXLINE(  68)		this->priceText->updateMetrics();
HXLINE(  69)		 ::ui::SimpleText _hx_tmp5 = this->priceText;
HXDLIN(  69)		_hx_tmp5->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,8,8,null(),null(),null(),null(),null())));
HXLINE(  70)		 ::ui::SimpleText _hx_tmp6 = this->priceText;
HXDLIN(  70)		_hx_tmp6->set_x((( (Float)(341) ) - this->priceText->get_width()));
HXLINE(  71)		 ::ui::SimpleText _hx_tmp7 = this->priceText;
HXDLIN(  71)		_hx_tmp7->set_y(this->classNameText->get_y());
HXLINE(  72)		this->selectContainer->addChild(this->priceText);
HXLINE(  73)		 ::openfl::display::BitmapData bd;
HXDLIN(  73)		if (::Global_obj::playerModel->isNextCharSlotCurrencyGems()) {
HXLINE(  73)			bd = ::assets::IconFactory_obj::makeGold();
            		}
            		else {
HXLINE(  73)			bd = ::assets::IconFactory_obj::makeGems();
            		}
HXLINE(  74)		this->currency =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bd,null(),null());
HXLINE(  75)		this->currency->set_x(( (Float)(341) ));
HXLINE(  76)		 ::openfl::display::Bitmap _hx_tmp8 = this->currency;
HXDLIN(  76)		_hx_tmp8->set_y((this->priceText->get_y() + 2));
HXLINE(  77)		this->selectContainer->addChild(this->currency);
            	}

Dynamic BuyCharacterRect_obj::__CreateEmpty() { return new BuyCharacterRect_obj; }

void *BuyCharacterRect_obj::_hx_vtable = 0;

Dynamic BuyCharacterRect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BuyCharacterRect_obj > _hx_result = new BuyCharacterRect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BuyCharacterRect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3baa690f) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x3baa690f;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3eb7e1b9 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::openfl::display::Shape BuyCharacterRect_obj::buildIcon(){
            	HX_GC_STACKFRAME(&_hx_pos_1f3a40ca0ce85f38_16_buildIcon)
HXLINE(  17)		 ::openfl::display::Shape shape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  18)		 ::openfl::display::Graphics g = shape->get_graphics();
HXLINE(  19)		g->beginFill(3880246,null());
HXLINE(  20)		g->lineStyle(1,4603457,null(),null(),null(),null(),null(),null());
HXLINE(  21)		g->drawCircle(( (Float)(22) ),( (Float)(22) ),( (Float)(19) ));
HXLINE(  22)		g->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  23)		g->endFill();
HXLINE(  24)		g->beginFill(2039583,null());
HXLINE(  25)		g->drawRect(( (Float)(14) ),( (Float)(20) ),( (Float)(16) ),( (Float)(4) ));
HXLINE(  26)		g->endFill();
HXLINE(  27)		g->beginFill(2039583,null());
HXLINE(  28)		g->drawRect(( (Float)(20) ),( (Float)(14) ),( (Float)(4) ),( (Float)(16) ));
HXLINE(  29)		g->endFill();
HXLINE(  30)		return shape;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuyCharacterRect_obj,buildIcon,return )

::String BuyCharacterRect_obj::getOrdinalString(int num){
            	HX_STACKFRAME(&_hx_pos_1f3a40ca0ce85f38_33_getOrdinalString)
HXLINE(  34)		::String str = ::Std_obj::string(num);
HXLINE(  35)		int ones = ::hx::Mod(num,10);
HXLINE(  37)		if ((::hx::Mod(::Std_obj::_hx_int((( (Float)(num) ) / ( (Float)(10) ))),10) == 1)) {
HXLINE(  38)			str = (str + HX_("th",74,65,00,00));
            		}
            		else {
HXLINE(  39)			if ((ones == 1)) {
HXLINE(  40)				str = (str + HX_("st",a1,64,00,00));
            			}
            			else {
HXLINE(  41)				if ((ones == 2)) {
HXLINE(  42)					str = (str + HX_("nd",36,60,00,00));
            				}
            				else {
HXLINE(  43)					if ((ones == 3)) {
HXLINE(  44)						str = (str + HX_("rd",b2,63,00,00));
            					}
            					else {
HXLINE(  46)						str = (str + HX_("th",74,65,00,00));
            					}
            				}
            			}
            		}
HXLINE(  48)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BuyCharacterRect_obj,getOrdinalString,return )


::hx::ObjectPtr< BuyCharacterRect_obj > BuyCharacterRect_obj::__new() {
	::hx::ObjectPtr< BuyCharacterRect_obj > __this = new BuyCharacterRect_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BuyCharacterRect_obj > BuyCharacterRect_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BuyCharacterRect_obj *__this = (BuyCharacterRect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BuyCharacterRect_obj), true, "screens.charrects.BuyCharacterRect"));
	*(void **)__this = BuyCharacterRect_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BuyCharacterRect_obj::BuyCharacterRect_obj()
{
}

void BuyCharacterRect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BuyCharacterRect);
	HX_MARK_MEMBER_NAME(classNameText,"classNameText");
	HX_MARK_MEMBER_NAME(priceText,"priceText");
	HX_MARK_MEMBER_NAME(currency,"currency");
	 ::screens::charrects::CharacterRect_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BuyCharacterRect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(classNameText,"classNameText");
	HX_VISIT_MEMBER_NAME(priceText,"priceText");
	HX_VISIT_MEMBER_NAME(currency,"currency");
	 ::screens::charrects::CharacterRect_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BuyCharacterRect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"currency") ) { return ::hx::Val( currency ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"priceText") ) { return ::hx::Val( priceText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"classNameText") ) { return ::hx::Val( classNameText ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BuyCharacterRect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"buildIcon") ) { outValue = buildIcon_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getOrdinalString") ) { outValue = getOrdinalString_dyn(); return true; }
	}
	return false;
}

::hx::Val BuyCharacterRect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"currency") ) { currency=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"priceText") ) { priceText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"classNameText") ) { classNameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BuyCharacterRect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("classNameText",f0,18,92,d1));
	outFields->push(HX_("priceText",d6,bf,02,c5));
	outFields->push(HX_("currency",51,07,45,9b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BuyCharacterRect_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(BuyCharacterRect_obj,classNameText),HX_("classNameText",f0,18,92,d1)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(BuyCharacterRect_obj,priceText),HX_("priceText",d6,bf,02,c5)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(BuyCharacterRect_obj,currency),HX_("currency",51,07,45,9b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BuyCharacterRect_obj_sStaticStorageInfo = 0;
#endif

static ::String BuyCharacterRect_obj_sMemberFields[] = {
	HX_("classNameText",f0,18,92,d1),
	HX_("priceText",d6,bf,02,c5),
	HX_("currency",51,07,45,9b),
	::String(null()) };

::hx::Class BuyCharacterRect_obj::__mClass;

static ::String BuyCharacterRect_obj_sStaticFields[] = {
	HX_("buildIcon",c7,1d,ef,e5),
	HX_("getOrdinalString",ac,07,ee,45),
	::String(null())
};

void BuyCharacterRect_obj::__register()
{
	BuyCharacterRect_obj _hx_dummy;
	BuyCharacterRect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.charrects.BuyCharacterRect",c3,41,c8,07);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BuyCharacterRect_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BuyCharacterRect_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BuyCharacterRect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BuyCharacterRect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuyCharacterRect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuyCharacterRect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
} // end namespace charrects
