// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_screens_charrects_CharacterRect
#include <screens/charrects/CharacterRect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c1fbd44922816c90_8_new,"screens.charrects.CharacterRect","new",0xc4b559e3,"screens.charrects.CharacterRect.new","screens/charrects/CharacterRect.hx",8,0x5e0c422f)
HX_LOCAL_STACK_FRAME(_hx_pos_c1fbd44922816c90_30_makeContainer,"screens.charrects.CharacterRect","makeContainer",0x18f418b6,"screens.charrects.CharacterRect.makeContainer","screens/charrects/CharacterRect.hx",30,0x5e0c422f)
HX_LOCAL_STACK_FRAME(_hx_pos_c1fbd44922816c90_39_drawBox,"screens.charrects.CharacterRect","drawBox",0x57a2ab6a,"screens.charrects.CharacterRect.drawBox","screens/charrects/CharacterRect.hx",39,0x5e0c422f)
HX_LOCAL_STACK_FRAME(_hx_pos_c1fbd44922816c90_48_onMouseOver,"screens.charrects.CharacterRect","onMouseOver",0xc86b717d,"screens.charrects.CharacterRect.onMouseOver","screens/charrects/CharacterRect.hx",48,0x5e0c422f)
HX_LOCAL_STACK_FRAME(_hx_pos_c1fbd44922816c90_52_onRollOut,"screens.charrects.CharacterRect","onRollOut",0x3be6bf75,"screens.charrects.CharacterRect.onRollOut","screens/charrects/CharacterRect.hx",52,0x5e0c422f)
namespace screens{
namespace charrects{

void CharacterRect_obj::__construct(int color,int overColor){
            	HX_GC_STACKFRAME(&_hx_pos_c1fbd44922816c90_8_new)
HXLINE(  15)		this->overColor = 0;
HXLINE(  14)		this->color = 0;
HXLINE(  19)		super::__construct();
HXLINE(  21)		this->color = color;
HXLINE(  22)		this->overColor = overColor;
HXLINE(  23)		this->box =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  24)		this->drawBox(false);
HXLINE(  25)		this->addChild(this->box);
HXLINE(  26)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->onMouseOver_dyn(),null(),null(),null());
HXLINE(  27)		this->addEventListener(HX_("rollOut",11,f9,11,5d),this->onRollOut_dyn(),null(),null(),null());
            	}

Dynamic CharacterRect_obj::__CreateEmpty() { return new CharacterRect_obj; }

void *CharacterRect_obj::_hx_vtable = 0;

Dynamic CharacterRect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterRect_obj > _hx_result = new CharacterRect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CharacterRect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3baa690f || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void CharacterRect_obj::makeContainer(){
            	HX_GC_STACKFRAME(&_hx_pos_c1fbd44922816c90_30_makeContainer)
HXLINE(  31)		this->selectContainer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  32)		this->selectContainer->mouseChildren = false;
HXLINE(  33)		this->selectContainer->set_buttonMode(true);
HXLINE(  34)		this->selectContainer->get_graphics()->beginFill(16711935,0);
HXLINE(  35)		this->selectContainer->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(384) ),( (Float)(59) ));
HXLINE(  36)		this->addChild(this->selectContainer);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterRect_obj,makeContainer,(void))

void CharacterRect_obj::drawBox(bool over){
            	HX_STACKFRAME(&_hx_pos_c1fbd44922816c90_39_drawBox)
HXLINE(  40)		 ::openfl::display::Graphics g = this->box->get_graphics();
HXLINE(  41)		g->clear();
HXLINE(  42)		int _hx_tmp;
HXDLIN(  42)		if (over) {
HXLINE(  42)			_hx_tmp = this->overColor;
            		}
            		else {
HXLINE(  42)			_hx_tmp = this->color;
            		}
HXDLIN(  42)		g->beginFill(_hx_tmp,null());
HXLINE(  43)		g->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(384) ),( (Float)(59) ));
HXLINE(  44)		g->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterRect_obj,drawBox,(void))

void CharacterRect_obj::onMouseOver( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_c1fbd44922816c90_48_onMouseOver)
HXDLIN(  48)		this->drawBox(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterRect_obj,onMouseOver,(void))

void CharacterRect_obj::onRollOut( ::openfl::events::MouseEvent _){
            	HX_STACKFRAME(&_hx_pos_c1fbd44922816c90_52_onRollOut)
HXDLIN(  52)		this->drawBox(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterRect_obj,onRollOut,(void))


::hx::ObjectPtr< CharacterRect_obj > CharacterRect_obj::__new(int color,int overColor) {
	::hx::ObjectPtr< CharacterRect_obj > __this = new CharacterRect_obj();
	__this->__construct(color,overColor);
	return __this;
}

::hx::ObjectPtr< CharacterRect_obj > CharacterRect_obj::__alloc(::hx::Ctx *_hx_ctx,int color,int overColor) {
	CharacterRect_obj *__this = (CharacterRect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterRect_obj), true, "screens.charrects.CharacterRect"));
	*(void **)__this = CharacterRect_obj::_hx_vtable;
	__this->__construct(color,overColor);
	return __this;
}

CharacterRect_obj::CharacterRect_obj()
{
}

void CharacterRect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterRect);
	HX_MARK_MEMBER_NAME(selectContainer,"selectContainer");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(overColor,"overColor");
	HX_MARK_MEMBER_NAME(box,"box");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterRect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selectContainer,"selectContainer");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(overColor,"overColor");
	HX_VISIT_MEMBER_NAME(box,"box");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterRect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { return ::hx::Val( box ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drawBox") ) { return ::hx::Val( drawBox_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"overColor") ) { return ::hx::Val( overColor ); }
		if (HX_FIELD_EQ(inName,"onRollOut") ) { return ::hx::Val( onRollOut_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return ::hx::Val( onMouseOver_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"makeContainer") ) { return ::hx::Val( makeContainer_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selectContainer") ) { return ::hx::Val( selectContainer ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CharacterRect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"overColor") ) { overColor=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selectContainer") ) { selectContainer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharacterRect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selectContainer",a5,fa,2d,72));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("overColor",6f,ff,1d,ae));
	outFields->push(HX_("box",0b,be,4a,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterRect_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(CharacterRect_obj,selectContainer),HX_("selectContainer",a5,fa,2d,72)},
	{::hx::fsInt,(int)offsetof(CharacterRect_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsInt,(int)offsetof(CharacterRect_obj,overColor),HX_("overColor",6f,ff,1d,ae)},
	{::hx::fsObject /*  ::openfl::display::Shape */ ,(int)offsetof(CharacterRect_obj,box),HX_("box",0b,be,4a,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CharacterRect_obj_sStaticStorageInfo = 0;
#endif

static ::String CharacterRect_obj_sMemberFields[] = {
	HX_("selectContainer",a5,fa,2d,72),
	HX_("color",63,71,5c,4a),
	HX_("overColor",6f,ff,1d,ae),
	HX_("box",0b,be,4a,00),
	HX_("makeContainer",73,6d,1c,b8),
	HX_("drawBox",67,a4,ca,fb),
	HX_("onMouseOver",fa,2c,50,18),
	HX_("onRollOut",b2,b1,bc,34),
	::String(null()) };

::hx::Class CharacterRect_obj::__mClass;

void CharacterRect_obj::__register()
{
	CharacterRect_obj _hx_dummy;
	CharacterRect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.charrects.CharacterRect",71,2c,2c,6e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterRect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterRect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterRect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterRect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
} // end namespace charrects
