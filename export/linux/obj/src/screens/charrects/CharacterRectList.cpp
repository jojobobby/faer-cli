// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_appengine_SavedCharacter
#include <appengine/SavedCharacter.h>
#endif
#ifndef INCLUDED_assets_CharacterFactory
#include <assets/CharacterFactory.h>
#endif
#ifndef INCLUDED_assets_CharacterTemplate
#include <assets/CharacterTemplate.h>
#endif
#ifndef INCLUDED_classes_model_CharacterClass
#include <classes/model/CharacterClass.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkin
#include <classes/model/CharacterSkin.h>
#endif
#ifndef INCLUDED_classes_model_CharacterSkins
#include <classes/model/CharacterSkins.h>
#endif
#ifndef INCLUDED_classes_model_ClassModel
#include <classes/model/ClassModel.h>
#endif
#ifndef INCLUDED_core_PlayerModel
#include <core/PlayerModel.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_screens_NewCharacterScreen
#include <screens/NewCharacterScreen.h>
#endif
#ifndef INCLUDED_screens_charrects_BuyCharacterRect
#include <screens/charrects/BuyCharacterRect.h>
#endif
#ifndef INCLUDED_screens_charrects_CharacterRect
#include <screens/charrects/CharacterRect.h>
#endif
#ifndef INCLUDED_screens_charrects_CharacterRectList
#include <screens/charrects/CharacterRectList.h>
#endif
#ifndef INCLUDED_screens_charrects_CreateNewCharacterRect
#include <screens/charrects/CreateNewCharacterRect.h>
#endif
#ifndef INCLUDED_screens_charrects_CurrentCharacterRect
#include <screens/charrects/CurrentCharacterRect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_792689f140e00c69_16_new,"screens.charrects.CharacterRectList","new",0x025085e1,"screens.charrects.CharacterRectList.new","screens/charrects/CharacterRectList.hx",16,0x87d8e8f1)
HX_LOCAL_STACK_FRAME(_hx_pos_792689f140e00c69_64_getIcon,"screens.charrects.CharacterRectList","getIcon",0x95e1a130,"screens.charrects.CharacterRectList.getIcon","screens/charrects/CharacterRectList.hx",64,0x87d8e8f1)
HX_LOCAL_STACK_FRAME(_hx_pos_792689f140e00c69_72_onNewChar,"screens.charrects.CharacterRectList","onNewChar",0x117a1038,"screens.charrects.CharacterRectList.onNewChar","screens/charrects/CharacterRectList.hx",72,0x87d8e8f1)
HX_LOCAL_STACK_FRAME(_hx_pos_792689f140e00c69_76_onBuyCharSlot,"screens.charrects.CharacterRectList","onBuyCharSlot",0xd57edf3c,"screens.charrects.CharacterRectList.onBuyCharSlot","screens/charrects/CharacterRectList.hx",76,0x87d8e8f1)
namespace screens{
namespace charrects{

void CharacterRectList_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_792689f140e00c69_16_new)
HXLINE(  17)		super::__construct();
HXLINE(  20)		 ::classes::model::CharacterClass charType = null();
HXLINE(  21)		 ::screens::charrects::CurrentCharacterRect currCharBox = null();
HXLINE(  23)		 ::screens::charrects::CreateNewCharacterRect newCharRect = null();
HXLINE(  24)		::String charName = ::Global_obj::playerModel->getName();
HXLINE(  25)		int yOffset = 4;
HXDLIN(  25)		int xFlip = 0;
HXDLIN(  25)		int idx = 0;
HXLINE(  26)		{
HXLINE(  26)			int _g = 0;
HXDLIN(  26)			::Array< ::Dynamic> _g1 = ::Global_obj::playerModel->getSavedCharacters();
HXDLIN(  26)			while((_g < _g1->length)){
HXLINE(  26)				 ::appengine::SavedCharacter savedChar = _g1->__get(_g).StaticCast<  ::appengine::SavedCharacter >();
HXDLIN(  26)				_g = (_g + 1);
HXLINE(  27)				 ::classes::model::ClassModel charType1 = ::Global_obj::classModel;
HXDLIN(  27)				charType = charType1->getCharacterClass(( (int)(savedChar->objectType()) ));
HXLINE(  28)				currCharBox =  ::screens::charrects::CurrentCharacterRect_obj::__alloc( HX_CTX ,charName,charType,savedChar);
HXLINE(  29)				currCharBox->setIcon(::screens::charrects::CharacterRectList_obj::getIcon(savedChar));
HXLINE(  30)				currCharBox->set_x(( (Float)(xFlip) ));
HXLINE(  31)				currCharBox->set_y(( (Float)(yOffset) ));
HXLINE(  32)				this->addChild(currCharBox);
HXLINE(  33)				if ((::hx::Mod(idx,2) == 0)) {
HXLINE(  34)					xFlip = 389;
            				}
            				else {
HXLINE(  36)					xFlip = 0;
HXLINE(  37)					yOffset = (yOffset + 63);
            				}
HXLINE(  39)				idx = (idx + 1);
            			}
            		}
HXLINE(  41)		if (::Global_obj::playerModel->hasAvailableCharSlot()) {
HXLINE(  42)			int _g2 = 0;
HXDLIN(  42)			int _g3 = ::Global_obj::playerModel->getAvailableCharSlots();
HXDLIN(  42)			while((_g2 < _g3)){
HXLINE(  42)				_g2 = (_g2 + 1);
HXLINE(  43)				newCharRect =  ::screens::charrects::CreateNewCharacterRect_obj::__alloc( HX_CTX );
HXLINE(  44)				newCharRect->addEventListener(HX_("mouseDown",27,b1,c2,ee),::screens::charrects::CharacterRectList_obj::onNewChar_dyn(),null(),null(),null());
HXLINE(  45)				newCharRect->set_x(( (Float)(xFlip) ));
HXLINE(  46)				newCharRect->set_y(( (Float)(yOffset) ));
HXLINE(  47)				this->addChild(newCharRect);
HXLINE(  48)				if ((::hx::Mod(idx,2) == 0)) {
HXLINE(  49)					xFlip = 389;
            				}
            				else {
HXLINE(  51)					xFlip = 0;
HXLINE(  52)					yOffset = (yOffset + 63);
            				}
HXLINE(  54)				idx = (idx + 1);
            			}
            		}
HXLINE(  19)		 ::screens::charrects::BuyCharacterRect buyRect =  ::screens::charrects::BuyCharacterRect_obj::__alloc( HX_CTX );
HXLINE(  58)		buyRect->addEventListener(HX_("mouseDown",27,b1,c2,ee),::screens::charrects::CharacterRectList_obj::onBuyCharSlot_dyn(),null(),null(),null());
HXLINE(  59)		buyRect->set_x(( (Float)(xFlip) ));
HXLINE(  60)		buyRect->set_y(( (Float)(yOffset) ));
HXLINE(  61)		this->addChild(buyRect);
            	}

Dynamic CharacterRectList_obj::__CreateEmpty() { return new CharacterRectList_obj; }

void *CharacterRectList_obj::_hx_vtable = 0;

Dynamic CharacterRectList_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterRectList_obj > _hx_result = new CharacterRectList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CharacterRectList_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x11d760f1) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x11d760f1;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::openfl::display::DisplayObject CharacterRectList_obj::getIcon( ::appengine::SavedCharacter savedChar){
            	HX_GC_STACKFRAME(&_hx_pos_792689f140e00c69_64_getIcon)
HXLINE(  65)		 ::classes::model::ClassModel chrClass = ::Global_obj::classModel;
HXDLIN(  65)		 ::classes::model::CharacterClass chrClass1 = chrClass->getCharacterClass(( (int)(savedChar->objectType()) ));
HXLINE(  66)		 ::classes::model::CharacterSkin skin;
HXDLIN(  66)		 ::classes::model::CharacterSkins chrClass2 = chrClass1->skins;
HXDLIN(  66)		if (::hx::IsNotNull( chrClass2->getSkin(( (int)(savedChar->skinType()) )) )) {
HXLINE(  66)			 ::classes::model::CharacterSkins chrClass3 = chrClass1->skins;
HXDLIN(  66)			skin = chrClass3->getSkin(( (int)(savedChar->skinType()) ));
            		}
            		else {
HXLINE(  66)			skin = chrClass1->skins->getDefaultSkin();
            		}
HXLINE(  68)		return  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::assets::CharacterFactory_obj::makeIcon(skin->_hx_template,100),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CharacterRectList_obj,getIcon,return )

void CharacterRectList_obj::onNewChar( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_792689f140e00c69_72_onNewChar)
HXDLIN(  72)		::Global_obj::setScreenValid( ::screens::NewCharacterScreen_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CharacterRectList_obj,onNewChar,(void))

void CharacterRectList_obj::onBuyCharSlot( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_792689f140e00c69_76_onBuyCharSlot)
HXDLIN(  76)		::Global_obj::buyCharSlot();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CharacterRectList_obj,onBuyCharSlot,(void))


::hx::ObjectPtr< CharacterRectList_obj > CharacterRectList_obj::__new() {
	::hx::ObjectPtr< CharacterRectList_obj > __this = new CharacterRectList_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CharacterRectList_obj > CharacterRectList_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CharacterRectList_obj *__this = (CharacterRectList_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterRectList_obj), true, "screens.charrects.CharacterRectList"));
	*(void **)__this = CharacterRectList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CharacterRectList_obj::CharacterRectList_obj()
{
}

bool CharacterRectList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getIcon") ) { outValue = getIcon_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onNewChar") ) { outValue = onNewChar_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBuyCharSlot") ) { outValue = onBuyCharSlot_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CharacterRectList_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CharacterRectList_obj_sStaticStorageInfo = 0;
#endif

::hx::Class CharacterRectList_obj::__mClass;

static ::String CharacterRectList_obj_sStaticFields[] = {
	HX_("getIcon",2f,97,35,18),
	HX_("onNewChar",f7,c3,36,c9),
	HX_("onBuyCharSlot",7b,de,99,ce),
	::String(null())
};

void CharacterRectList_obj::__register()
{
	CharacterRectList_obj _hx_dummy;
	CharacterRectList_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.charrects.CharacterRectList",6f,01,86,d8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterRectList_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterRectList_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CharacterRectList_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterRectList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterRectList_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
} // end namespace charrects
