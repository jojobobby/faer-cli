// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_appengine_SavedCharacter
#include <appengine/SavedCharacter.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_screens_charrects_CharacterRect
#include <screens/charrects/CharacterRect.h>
#endif
#ifndef INCLUDED_screens_charrects_CreateNewCharacterRect
#include <screens/charrects/CreateNewCharacterRect.h>
#endif
#ifndef INCLUDED_ui_SimpleText
#include <ui/SimpleText.h>
#endif
#ifndef INCLUDED_util_BitmapUtil
#include <util/BitmapUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_58a34a2acf24a358_15_new,"screens.charrects.CreateNewCharacterRect","new",0x447313f7,"screens.charrects.CreateNewCharacterRect.new","screens/charrects/CreateNewCharacterRect.hx",15,0xc7564fd7)
namespace screens{
namespace charrects{

void CreateNewCharacterRect_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_58a34a2acf24a358_15_new)
HXLINE(  16)		super::__construct(5526612,7829367);
HXLINE(  17)		this->makeContainer();
HXLINE(  18)		 ::Xml playerXML = ::objects::ObjectLibrary_obj::playerChars->__get(::Std_obj::_hx_int((( (Float)(::objects::ObjectLibrary_obj::playerChars->length) ) * ::Math_obj::random()))).StaticCast<  ::Xml >();
HXLINE(  19)		 ::openfl::display::BitmapData bd = ::appengine::SavedCharacter_obj::getImage(null(),playerXML,0,0,( (Float)(0) ),false,false);
HXLINE(  20)		bd = ::util::BitmapUtil_obj::cropToBitmapData(bd,6,6,(bd->width - 12),(bd->height - 6));
HXLINE(  21)		this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  22)		this->bitmap->set_bitmapData(bd);
HXLINE(  23)		 ::openfl::display::Bitmap _hx_tmp = this->bitmap;
HXDLIN(  23)		_hx_tmp->set_x(this->bitmap->set_y(( (Float)(3) )));
HXLINE(  24)		this->selectContainer->addChild(this->bitmap);
HXLINE(  25)		this->classNameText =  ::ui::SimpleText_obj::__alloc( HX_CTX ,18,16777215,false,0,0,null());
HXLINE(  26)		this->classNameText->setBold(true);
HXLINE(  27)		this->classNameText->set_text(HX_("New Character",a9,0f,84,05));
HXLINE(  28)		this->classNameText->updateMetrics();
HXLINE(  29)		 ::ui::SimpleText _hx_tmp1 = this->classNameText;
HXDLIN(  29)		_hx_tmp1->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,0,0,0,1,8,8,null(),null(),null(),null(),null())));
HXLINE(  30)		 ::ui::SimpleText _hx_tmp2 = this->classNameText;
HXDLIN(  30)		_hx_tmp2->set_x(((( (Float)(384) ) - this->classNameText->get_width()) / ( (Float)(2) )));
HXLINE(  31)		 ::ui::SimpleText _hx_tmp3 = this->classNameText;
HXDLIN(  31)		_hx_tmp3->set_y((((( (Float)(59) ) - this->classNameText->get_height()) / ( (Float)(2) )) - ( (Float)(3) )));
HXLINE(  32)		this->selectContainer->addChild(this->classNameText);
            	}

Dynamic CreateNewCharacterRect_obj::__CreateEmpty() { return new CreateNewCharacterRect_obj; }

void *CreateNewCharacterRect_obj::_hx_vtable = 0;

Dynamic CreateNewCharacterRect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CreateNewCharacterRect_obj > _hx_result = new CreateNewCharacterRect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CreateNewCharacterRect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0afc5f5f) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0afc5f5f;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3baa690f || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}


::hx::ObjectPtr< CreateNewCharacterRect_obj > CreateNewCharacterRect_obj::__new() {
	::hx::ObjectPtr< CreateNewCharacterRect_obj > __this = new CreateNewCharacterRect_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CreateNewCharacterRect_obj > CreateNewCharacterRect_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CreateNewCharacterRect_obj *__this = (CreateNewCharacterRect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CreateNewCharacterRect_obj), true, "screens.charrects.CreateNewCharacterRect"));
	*(void **)__this = CreateNewCharacterRect_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CreateNewCharacterRect_obj::CreateNewCharacterRect_obj()
{
}

void CreateNewCharacterRect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CreateNewCharacterRect);
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(classNameText,"classNameText");
	 ::screens::charrects::CharacterRect_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CreateNewCharacterRect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(classNameText,"classNameText");
	 ::screens::charrects::CharacterRect_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CreateNewCharacterRect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return ::hx::Val( bitmap ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"classNameText") ) { return ::hx::Val( classNameText ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CreateNewCharacterRect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"classNameText") ) { classNameText=inValue.Cast<  ::ui::SimpleText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CreateNewCharacterRect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bitmap",ef,0f,0c,f1));
	outFields->push(HX_("classNameText",f0,18,92,d1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CreateNewCharacterRect_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(CreateNewCharacterRect_obj,bitmap),HX_("bitmap",ef,0f,0c,f1)},
	{::hx::fsObject /*  ::ui::SimpleText */ ,(int)offsetof(CreateNewCharacterRect_obj,classNameText),HX_("classNameText",f0,18,92,d1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CreateNewCharacterRect_obj_sStaticStorageInfo = 0;
#endif

static ::String CreateNewCharacterRect_obj_sMemberFields[] = {
	HX_("bitmap",ef,0f,0c,f1),
	HX_("classNameText",f0,18,92,d1),
	::String(null()) };

::hx::Class CreateNewCharacterRect_obj::__mClass;

void CreateNewCharacterRect_obj::__register()
{
	CreateNewCharacterRect_obj _hx_dummy;
	CreateNewCharacterRect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("screens.charrects.CreateNewCharacterRect",85,4c,56,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CreateNewCharacterRect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CreateNewCharacterRect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CreateNewCharacterRect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CreateNewCharacterRect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace screens
} // end namespace charrects
