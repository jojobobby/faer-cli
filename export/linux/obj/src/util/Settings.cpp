// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_75_load,"util.Settings","load",0xedaf1805,"util.Settings.load","util/Settings.hx",75,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_127_save,"util.Settings","save",0xf245091c,"util.Settings.save","util/Settings.hx",127,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_177_setDefaults,"util.Settings","setDefaults",0x6b8e2655,"util.Settings.setDefaults","util/Settings.hx",177,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_30_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",30,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_31_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",31,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_32_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",32,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_33_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",33,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_34_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",34,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_35_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",35,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_36_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",36,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_37_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",37,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_38_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",38,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_39_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",39,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_40_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",40,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_41_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",41,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_42_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",42,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_43_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",43,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_44_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",44,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_45_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",45,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_46_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",46,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_47_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",47,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_48_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",48,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_49_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",49,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_50_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",50,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_51_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",51,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_52_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",52,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_53_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",53,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_54_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",54,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_55_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",55,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_56_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",56,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_57_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",57,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_58_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",58,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_59_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",59,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_60_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",60,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_61_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",61,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_62_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",62,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_63_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",63,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_64_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",64,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_65_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",65,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_66_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",66,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_67_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",67,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_68_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",68,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_69_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",69,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_70_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",70,0xad31c0ce)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba59c65835d964c_72_boot,"util.Settings","boot",0xe7130211,"util.Settings.boot","util/Settings.hx",72,0xad31c0ce)
namespace util{

void Settings_obj::__construct() { }

Dynamic Settings_obj::__CreateEmpty() { return new Settings_obj; }

void *Settings_obj::_hx_vtable = 0;

Dynamic Settings_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Settings_obj > _hx_result = new Settings_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Settings_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01eef631;
}

unsigned char Settings_obj::moveLeft;

unsigned char Settings_obj::moveRight;

unsigned char Settings_obj::moveUp;

unsigned char Settings_obj::moveDown;

unsigned char Settings_obj::rotateLeft;

unsigned char Settings_obj::rotateRight;

unsigned char Settings_obj::shoot;

unsigned char Settings_obj::useAbility;

unsigned char Settings_obj::interact;

unsigned char Settings_obj::inv1;

unsigned char Settings_obj::inv2;

unsigned char Settings_obj::inv3;

unsigned char Settings_obj::inv4;

unsigned char Settings_obj::inv5;

unsigned char Settings_obj::inv6;

unsigned char Settings_obj::inv7;

unsigned char Settings_obj::inv8;

unsigned char Settings_obj::goToHub;

unsigned char Settings_obj::chatUp;

unsigned char Settings_obj::chatDown;

unsigned char Settings_obj::resetCamera;

unsigned char Settings_obj::perfStats;

unsigned char Settings_obj::options;

unsigned char Settings_obj::toggleCentering;

unsigned char Settings_obj::chat;

unsigned char Settings_obj::chatCmd;

unsigned char Settings_obj::respond;

unsigned char Settings_obj::guildChat;

unsigned char Settings_obj::healthVial;

unsigned char Settings_obj::magicVial;

unsigned char Settings_obj::switchTabs;

unsigned char Settings_obj::walk;

bool Settings_obj::playMusic;

bool Settings_obj::playSfx;

bool Settings_obj::playWepSfx;

bool Settings_obj::centerCamera;

bool Settings_obj::textBubbles;

::String Settings_obj::selectedServer;

float Settings_obj::cameraAngle;

signed char Settings_obj::selectedCursor;

unsigned char Settings_obj::glowType;

::Array< ::String > Settings_obj::messagesSent;

void Settings_obj::load(){
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_75_load)
HXDLIN(  75)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  76)			if (::sys::FileSystem_obj::exists(HX_("settings",e3,7c,3d,8b))) {
HXLINE(  77)				 ::sys::io::FileInput o = ::sys::io::File_obj::read(HX_("settings",e3,7c,3d,8b),null());
HXLINE(  78)				::util::Settings_obj::moveLeft = ( (unsigned char)(o->readByte()) );
HXLINE(  79)				::util::Settings_obj::moveRight = ( (unsigned char)(o->readByte()) );
HXLINE(  80)				::util::Settings_obj::moveUp = ( (unsigned char)(o->readByte()) );
HXLINE(  81)				::util::Settings_obj::moveDown = ( (unsigned char)(o->readByte()) );
HXLINE(  82)				::util::Settings_obj::rotateLeft = ( (unsigned char)(o->readByte()) );
HXLINE(  83)				::util::Settings_obj::rotateRight = ( (unsigned char)(o->readByte()) );
HXLINE(  84)				::util::Settings_obj::shoot = ( (unsigned char)(o->readByte()) );
HXLINE(  85)				::util::Settings_obj::useAbility = ( (unsigned char)(o->readByte()) );
HXLINE(  86)				::util::Settings_obj::interact = ( (unsigned char)(o->readByte()) );
HXLINE(  87)				::util::Settings_obj::inv1 = ( (unsigned char)(o->readByte()) );
HXLINE(  88)				::util::Settings_obj::inv2 = ( (unsigned char)(o->readByte()) );
HXLINE(  89)				::util::Settings_obj::inv3 = ( (unsigned char)(o->readByte()) );
HXLINE(  90)				::util::Settings_obj::inv4 = ( (unsigned char)(o->readByte()) );
HXLINE(  91)				::util::Settings_obj::inv5 = ( (unsigned char)(o->readByte()) );
HXLINE(  92)				::util::Settings_obj::inv6 = ( (unsigned char)(o->readByte()) );
HXLINE(  93)				::util::Settings_obj::inv7 = ( (unsigned char)(o->readByte()) );
HXLINE(  94)				::util::Settings_obj::inv8 = ( (unsigned char)(o->readByte()) );
HXLINE(  95)				::util::Settings_obj::goToHub = ( (unsigned char)(o->readByte()) );
HXLINE(  96)				::util::Settings_obj::chatUp = ( (unsigned char)(o->readByte()) );
HXLINE(  97)				::util::Settings_obj::chatDown = ( (unsigned char)(o->readByte()) );
HXLINE(  98)				::util::Settings_obj::resetCamera = ( (unsigned char)(o->readByte()) );
HXLINE(  99)				::util::Settings_obj::perfStats = ( (unsigned char)(o->readByte()) );
HXLINE( 100)				::util::Settings_obj::options = ( (unsigned char)(o->readByte()) );
HXLINE( 101)				::util::Settings_obj::toggleCentering = ( (unsigned char)(o->readByte()) );
HXLINE( 102)				::util::Settings_obj::chat = ( (unsigned char)(o->readByte()) );
HXLINE( 103)				::util::Settings_obj::chatCmd = ( (unsigned char)(o->readByte()) );
HXLINE( 104)				::util::Settings_obj::respond = ( (unsigned char)(o->readByte()) );
HXLINE( 105)				::util::Settings_obj::guildChat = ( (unsigned char)(o->readByte()) );
HXLINE( 106)				::util::Settings_obj::healthVial = ( (unsigned char)(o->readByte()) );
HXLINE( 107)				::util::Settings_obj::magicVial = ( (unsigned char)(o->readByte()) );
HXLINE( 108)				::util::Settings_obj::switchTabs = ( (unsigned char)(o->readByte()) );
HXLINE( 109)				::util::Settings_obj::walk = ( (unsigned char)(o->readByte()) );
HXLINE( 110)				bool _hx_tmp;
HXDLIN( 110)				if ((o->readByte() == 1)) {
HXLINE( 110)					_hx_tmp = true;
            				}
            				else {
HXLINE( 110)					_hx_tmp = false;
            				}
HXDLIN( 110)				::util::Settings_obj::playMusic = _hx_tmp;
HXLINE( 111)				bool _hx_tmp1;
HXDLIN( 111)				if ((o->readByte() == 1)) {
HXLINE( 111)					_hx_tmp1 = true;
            				}
            				else {
HXLINE( 111)					_hx_tmp1 = false;
            				}
HXDLIN( 111)				::util::Settings_obj::playSfx = _hx_tmp1;
HXLINE( 112)				bool _hx_tmp2;
HXDLIN( 112)				if ((o->readByte() == 1)) {
HXLINE( 112)					_hx_tmp2 = true;
            				}
            				else {
HXLINE( 112)					_hx_tmp2 = false;
            				}
HXDLIN( 112)				::util::Settings_obj::playWepSfx = _hx_tmp2;
HXLINE( 113)				bool _hx_tmp3;
HXDLIN( 113)				if ((o->readByte() == 1)) {
HXLINE( 113)					_hx_tmp3 = true;
            				}
            				else {
HXLINE( 113)					_hx_tmp3 = false;
            				}
HXDLIN( 113)				::util::Settings_obj::centerCamera = _hx_tmp3;
HXLINE( 114)				bool _hx_tmp4;
HXDLIN( 114)				if ((o->readByte() == 1)) {
HXLINE( 114)					_hx_tmp4 = true;
            				}
            				else {
HXLINE( 114)					_hx_tmp4 = false;
            				}
HXDLIN( 114)				::util::Settings_obj::textBubbles = _hx_tmp4;
HXLINE( 115)				::util::Settings_obj::selectedServer = o->readString(o->readByte(),null());
HXLINE( 116)				::util::Settings_obj::cameraAngle = ( (float)(o->readFloat()) );
HXLINE( 117)				::util::Settings_obj::selectedCursor = ( (signed char)(o->readByte()) );
HXLINE( 118)				::util::Settings_obj::glowType = ( (unsigned char)(o->readByte()) );
HXLINE( 119)				o->close();
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 121)				 ::haxe::Exception _g1 = ::haxe::Exception_obj::caught(_g);
HXLINE( 122)				{
HXLINE( 122)					 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 122)					::String _hx_tmp6 = (HX_("Settings load failed ",06,85,4c,a6) + ::Std_obj::string(_g1));
HXDLIN( 122)					_hx_tmp5(_hx_tmp6,::hx::SourceInfo(HX_("src/util/Settings.hx",99,a7,a3,13),122,HX_("util.Settings",ef,ae,ab,f2),HX_("load",26,9a,b7,47)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Settings_obj,load,(void))

void Settings_obj::save(){
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_127_save)
HXDLIN( 127)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 128)			 ::sys::io::FileOutput w = ::sys::io::File_obj::write(HX_("settings",e3,7c,3d,8b),null());
HXLINE( 129)			w->writeByte(( (int)(::util::Settings_obj::moveLeft) ));
HXLINE( 130)			w->writeByte(( (int)(::util::Settings_obj::moveRight) ));
HXLINE( 131)			w->writeByte(( (int)(::util::Settings_obj::moveUp) ));
HXLINE( 132)			w->writeByte(( (int)(::util::Settings_obj::moveDown) ));
HXLINE( 133)			w->writeByte(( (int)(::util::Settings_obj::rotateLeft) ));
HXLINE( 134)			w->writeByte(( (int)(::util::Settings_obj::rotateRight) ));
HXLINE( 135)			w->writeByte(( (int)(::util::Settings_obj::shoot) ));
HXLINE( 136)			w->writeByte(( (int)(::util::Settings_obj::useAbility) ));
HXLINE( 137)			w->writeByte(( (int)(::util::Settings_obj::interact) ));
HXLINE( 138)			w->writeByte(( (int)(::util::Settings_obj::inv1) ));
HXLINE( 139)			w->writeByte(( (int)(::util::Settings_obj::inv2) ));
HXLINE( 140)			w->writeByte(( (int)(::util::Settings_obj::inv3) ));
HXLINE( 141)			w->writeByte(( (int)(::util::Settings_obj::inv4) ));
HXLINE( 142)			w->writeByte(( (int)(::util::Settings_obj::inv5) ));
HXLINE( 143)			w->writeByte(( (int)(::util::Settings_obj::inv6) ));
HXLINE( 144)			w->writeByte(( (int)(::util::Settings_obj::inv7) ));
HXLINE( 145)			w->writeByte(( (int)(::util::Settings_obj::inv8) ));
HXLINE( 146)			w->writeByte(( (int)(::util::Settings_obj::goToHub) ));
HXLINE( 147)			w->writeByte(( (int)(::util::Settings_obj::chatUp) ));
HXLINE( 148)			w->writeByte(( (int)(::util::Settings_obj::chatDown) ));
HXLINE( 149)			w->writeByte(( (int)(::util::Settings_obj::resetCamera) ));
HXLINE( 150)			w->writeByte(( (int)(::util::Settings_obj::perfStats) ));
HXLINE( 151)			w->writeByte(( (int)(::util::Settings_obj::options) ));
HXLINE( 152)			w->writeByte(( (int)(::util::Settings_obj::toggleCentering) ));
HXLINE( 153)			w->writeByte(( (int)(::util::Settings_obj::chat) ));
HXLINE( 154)			w->writeByte(( (int)(::util::Settings_obj::chatCmd) ));
HXLINE( 155)			w->writeByte(( (int)(::util::Settings_obj::respond) ));
HXLINE( 156)			w->writeByte(( (int)(::util::Settings_obj::guildChat) ));
HXLINE( 157)			w->writeByte(( (int)(::util::Settings_obj::healthVial) ));
HXLINE( 158)			w->writeByte(( (int)(::util::Settings_obj::magicVial) ));
HXLINE( 159)			w->writeByte(( (int)(::util::Settings_obj::switchTabs) ));
HXLINE( 160)			w->writeByte(( (int)(::util::Settings_obj::walk) ));
HXLINE( 161)			int _hx_tmp;
HXDLIN( 161)			if ((::util::Settings_obj::playMusic == true)) {
HXLINE( 161)				_hx_tmp = 1;
            			}
            			else {
HXLINE( 161)				_hx_tmp = 0;
            			}
HXDLIN( 161)			w->writeByte(_hx_tmp);
HXLINE( 162)			int _hx_tmp1;
HXDLIN( 162)			if ((::util::Settings_obj::playSfx == true)) {
HXLINE( 162)				_hx_tmp1 = 1;
            			}
            			else {
HXLINE( 162)				_hx_tmp1 = 0;
            			}
HXDLIN( 162)			w->writeByte(_hx_tmp1);
HXLINE( 163)			int _hx_tmp2;
HXDLIN( 163)			if ((::util::Settings_obj::playWepSfx == true)) {
HXLINE( 163)				_hx_tmp2 = 1;
            			}
            			else {
HXLINE( 163)				_hx_tmp2 = 0;
            			}
HXDLIN( 163)			w->writeByte(_hx_tmp2);
HXLINE( 164)			int _hx_tmp3;
HXDLIN( 164)			if ((::util::Settings_obj::centerCamera == true)) {
HXLINE( 164)				_hx_tmp3 = 1;
            			}
            			else {
HXLINE( 164)				_hx_tmp3 = 0;
            			}
HXDLIN( 164)			w->writeByte(_hx_tmp3);
HXLINE( 165)			int _hx_tmp4;
HXDLIN( 165)			if ((::util::Settings_obj::textBubbles == true)) {
HXLINE( 165)				_hx_tmp4 = 1;
            			}
            			else {
HXLINE( 165)				_hx_tmp4 = 0;
            			}
HXDLIN( 165)			w->writeByte(_hx_tmp4);
HXLINE( 166)			w->writeByte(::util::Settings_obj::selectedServer.length);
HXLINE( 167)			w->writeString(::util::Settings_obj::selectedServer,null());
HXLINE( 168)			w->writeFloat(( (Float)(::util::Settings_obj::cameraAngle) ));
HXLINE( 169)			w->writeByte(( (int)(::util::Settings_obj::selectedCursor) ));
HXLINE( 170)			w->writeByte(( (int)(::util::Settings_obj::glowType) ));
HXLINE( 171)			w->close();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 172)				 ::haxe::Exception _g1 = ::haxe::Exception_obj::caught(_g);
HXLINE( 173)				{
HXLINE( 173)					 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 173)					::String _hx_tmp6 = (HX_("Settings save failed: ",09,ab,fc,7e) + ::Std_obj::string(_g1));
HXDLIN( 173)					_hx_tmp5(_hx_tmp6,::hx::SourceInfo(HX_("src/util/Settings.hx",99,a7,a3,13),173,HX_("util.Settings",ef,ae,ab,f2),HX_("save",3d,8b,4d,4c)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Settings_obj,save,(void))

void Settings_obj::setDefaults(){
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_177_setDefaults)
HXLINE( 178)		::util::Settings_obj::moveLeft = ( (unsigned char)(65) );
HXLINE( 179)		::util::Settings_obj::moveRight = ( (unsigned char)(68) );
HXLINE( 180)		::util::Settings_obj::moveUp = ( (unsigned char)(87) );
HXLINE( 181)		::util::Settings_obj::moveDown = ( (unsigned char)(83) );
HXLINE( 182)		::util::Settings_obj::rotateLeft = ( (unsigned char)(81) );
HXLINE( 183)		::util::Settings_obj::rotateRight = ( (unsigned char)(69) );
HXLINE( 184)		::util::Settings_obj::shoot = ( (unsigned char)(223) );
HXLINE( 185)		::util::Settings_obj::useAbility = ( (unsigned char)(224) );
HXLINE( 186)		::util::Settings_obj::interact = ( (unsigned char)(82) );
HXLINE( 187)		::util::Settings_obj::inv1 = ( (unsigned char)(49) );
HXLINE( 188)		::util::Settings_obj::inv2 = ( (unsigned char)(50) );
HXLINE( 189)		::util::Settings_obj::inv3 = ( (unsigned char)(51) );
HXLINE( 190)		::util::Settings_obj::inv4 = ( (unsigned char)(52) );
HXLINE( 191)		::util::Settings_obj::inv5 = ( (unsigned char)(53) );
HXLINE( 192)		::util::Settings_obj::inv6 = ( (unsigned char)(54) );
HXLINE( 193)		::util::Settings_obj::inv7 = ( (unsigned char)(55) );
HXLINE( 194)		::util::Settings_obj::inv8 = ( (unsigned char)(56) );
HXLINE( 195)		::util::Settings_obj::goToHub = ( (unsigned char)(9) );
HXLINE( 196)		::util::Settings_obj::chatUp = ( (unsigned char)(33) );
HXLINE( 197)		::util::Settings_obj::chatDown = ( (unsigned char)(34) );
HXLINE( 198)		::util::Settings_obj::resetCamera = ( (unsigned char)(90) );
HXLINE( 199)		::util::Settings_obj::perfStats = ( (unsigned char)(114) );
HXLINE( 200)		::util::Settings_obj::options = ( (unsigned char)(27) );
HXLINE( 201)		::util::Settings_obj::toggleCentering = ( (unsigned char)(88) );
HXLINE( 202)		::util::Settings_obj::chat = ( (unsigned char)(13) );
HXLINE( 203)		::util::Settings_obj::chatCmd = ( (unsigned char)(191) );
HXLINE( 204)		::util::Settings_obj::respond = ( (unsigned char)(113) );
HXLINE( 205)		::util::Settings_obj::guildChat = ( (unsigned char)(71) );
HXLINE( 206)		::util::Settings_obj::healthVial = ( (unsigned char)(70) );
HXLINE( 207)		::util::Settings_obj::magicVial = ( (unsigned char)(86) );
HXLINE( 208)		::util::Settings_obj::switchTabs = ( (unsigned char)(66) );
HXLINE( 209)		::util::Settings_obj::walk = ( (unsigned char)(16) );
HXLINE( 210)		::util::Settings_obj::playMusic = true;
HXLINE( 211)		::util::Settings_obj::playSfx = true;
HXLINE( 212)		::util::Settings_obj::playWepSfx = true;
HXLINE( 213)		::util::Settings_obj::centerCamera = true;
HXLINE( 214)		::util::Settings_obj::selectedServer = HX_("",00,00,00,00);
HXLINE( 215)		::util::Settings_obj::cameraAngle = ( (float)(0) );
HXLINE( 216)		::util::Settings_obj::textBubbles = true;
HXLINE( 217)		::util::Settings_obj::selectedCursor = ( (signed char)(3) );
HXLINE( 218)		::util::Settings_obj::glowType = ( (unsigned char)(0) );
HXLINE( 220)		::Main_obj::refreshCursor();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Settings_obj,setDefaults,(void))


Settings_obj::Settings_obj()
{
}

bool Settings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inv1") ) { outValue = ( inv1 ); return true; }
		if (HX_FIELD_EQ(inName,"inv2") ) { outValue = ( inv2 ); return true; }
		if (HX_FIELD_EQ(inName,"inv3") ) { outValue = ( inv3 ); return true; }
		if (HX_FIELD_EQ(inName,"inv4") ) { outValue = ( inv4 ); return true; }
		if (HX_FIELD_EQ(inName,"inv5") ) { outValue = ( inv5 ); return true; }
		if (HX_FIELD_EQ(inName,"inv6") ) { outValue = ( inv6 ); return true; }
		if (HX_FIELD_EQ(inName,"inv7") ) { outValue = ( inv7 ); return true; }
		if (HX_FIELD_EQ(inName,"inv8") ) { outValue = ( inv8 ); return true; }
		if (HX_FIELD_EQ(inName,"chat") ) { outValue = ( chat ); return true; }
		if (HX_FIELD_EQ(inName,"walk") ) { outValue = ( walk ); return true; }
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"save") ) { outValue = save_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shoot") ) { outValue = ( shoot ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"moveUp") ) { outValue = ( moveUp ); return true; }
		if (HX_FIELD_EQ(inName,"chatUp") ) { outValue = ( chatUp ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"goToHub") ) { outValue = ( goToHub ); return true; }
		if (HX_FIELD_EQ(inName,"options") ) { outValue = ( options ); return true; }
		if (HX_FIELD_EQ(inName,"chatCmd") ) { outValue = ( chatCmd ); return true; }
		if (HX_FIELD_EQ(inName,"respond") ) { outValue = ( respond ); return true; }
		if (HX_FIELD_EQ(inName,"playSfx") ) { outValue = ( playSfx ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"moveLeft") ) { outValue = ( moveLeft ); return true; }
		if (HX_FIELD_EQ(inName,"moveDown") ) { outValue = ( moveDown ); return true; }
		if (HX_FIELD_EQ(inName,"interact") ) { outValue = ( interact ); return true; }
		if (HX_FIELD_EQ(inName,"chatDown") ) { outValue = ( chatDown ); return true; }
		if (HX_FIELD_EQ(inName,"glowType") ) { outValue = ( glowType ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"moveRight") ) { outValue = ( moveRight ); return true; }
		if (HX_FIELD_EQ(inName,"perfStats") ) { outValue = ( perfStats ); return true; }
		if (HX_FIELD_EQ(inName,"guildChat") ) { outValue = ( guildChat ); return true; }
		if (HX_FIELD_EQ(inName,"magicVial") ) { outValue = ( magicVial ); return true; }
		if (HX_FIELD_EQ(inName,"playMusic") ) { outValue = ( playMusic ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rotateLeft") ) { outValue = ( rotateLeft ); return true; }
		if (HX_FIELD_EQ(inName,"useAbility") ) { outValue = ( useAbility ); return true; }
		if (HX_FIELD_EQ(inName,"healthVial") ) { outValue = ( healthVial ); return true; }
		if (HX_FIELD_EQ(inName,"switchTabs") ) { outValue = ( switchTabs ); return true; }
		if (HX_FIELD_EQ(inName,"playWepSfx") ) { outValue = ( playWepSfx ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rotateRight") ) { outValue = ( rotateRight ); return true; }
		if (HX_FIELD_EQ(inName,"resetCamera") ) { outValue = ( resetCamera ); return true; }
		if (HX_FIELD_EQ(inName,"textBubbles") ) { outValue = ( textBubbles ); return true; }
		if (HX_FIELD_EQ(inName,"cameraAngle") ) { outValue = ( cameraAngle ); return true; }
		if (HX_FIELD_EQ(inName,"setDefaults") ) { outValue = setDefaults_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"centerCamera") ) { outValue = ( centerCamera ); return true; }
		if (HX_FIELD_EQ(inName,"messagesSent") ) { outValue = ( messagesSent ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"selectedServer") ) { outValue = ( selectedServer ); return true; }
		if (HX_FIELD_EQ(inName,"selectedCursor") ) { outValue = ( selectedCursor ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"toggleCentering") ) { outValue = ( toggleCentering ); return true; }
	}
	return false;
}

bool Settings_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inv1") ) { inv1=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"inv2") ) { inv2=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"inv3") ) { inv3=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"inv4") ) { inv4=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"inv5") ) { inv5=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"inv6") ) { inv6=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"inv7") ) { inv7=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"inv8") ) { inv8=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"chat") ) { chat=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"walk") ) { walk=ioValue.Cast< unsigned char >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shoot") ) { shoot=ioValue.Cast< unsigned char >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"moveUp") ) { moveUp=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"chatUp") ) { chatUp=ioValue.Cast< unsigned char >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"goToHub") ) { goToHub=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"options") ) { options=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"chatCmd") ) { chatCmd=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"respond") ) { respond=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"playSfx") ) { playSfx=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"moveLeft") ) { moveLeft=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"moveDown") ) { moveDown=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"interact") ) { interact=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"chatDown") ) { chatDown=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"glowType") ) { glowType=ioValue.Cast< unsigned char >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"moveRight") ) { moveRight=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"perfStats") ) { perfStats=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"guildChat") ) { guildChat=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"magicVial") ) { magicVial=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"playMusic") ) { playMusic=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rotateLeft") ) { rotateLeft=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"useAbility") ) { useAbility=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"healthVial") ) { healthVial=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"switchTabs") ) { switchTabs=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"playWepSfx") ) { playWepSfx=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rotateRight") ) { rotateRight=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"resetCamera") ) { resetCamera=ioValue.Cast< unsigned char >(); return true; }
		if (HX_FIELD_EQ(inName,"textBubbles") ) { textBubbles=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"cameraAngle") ) { cameraAngle=ioValue.Cast< float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"centerCamera") ) { centerCamera=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"messagesSent") ) { messagesSent=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"selectedServer") ) { selectedServer=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"selectedCursor") ) { selectedCursor=ioValue.Cast< signed char >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"toggleCentering") ) { toggleCentering=ioValue.Cast< unsigned char >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Settings_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Settings_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::moveLeft,HX_("moveLeft",b8,73,67,ea)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::moveRight,HX_("moveRight",0b,db,2a,a7)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::moveUp,HX_("moveUp",cc,d3,ac,cc)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::moveDown,HX_("moveDown",13,64,25,e5)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::rotateLeft,HX_("rotateLeft",02,44,bb,7f)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::rotateRight,HX_("rotateRight",81,4b,2d,bb)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::shoot,HX_("shoot",df,81,27,7c)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::useAbility,HX_("useAbility",23,84,14,b0)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::interact,HX_("interact",b6,8b,6c,28)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv1,HX_("inv1",20,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv2,HX_("inv2",21,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv3,HX_("inv3",22,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv4,HX_("inv4",23,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv5,HX_("inv5",24,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv6,HX_("inv6",25,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv7,HX_("inv7",26,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::inv8,HX_("inv8",27,46,bb,45)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::goToHub,HX_("goToHub",b2,46,fe,c3)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::chatUp,HX_("chatUp",53,0f,77,b7)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::chatDown,HX_("chatDown",5a,cf,9a,c3)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::resetCamera,HX_("resetCamera",d4,c9,a0,57)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::perfStats,HX_("perfStats",76,8c,b3,3e)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::options,HX_("options",5e,33,fe,df)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::toggleCentering,HX_("toggleCentering",f9,07,b1,23)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::chat,HX_("chat",d8,5e,bf,41)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::chatCmd,HX_("chatCmd",82,ae,a8,d0)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::respond,HX_("respond",55,89,0b,68)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::guildChat,HX_("guildChat",2b,a2,b2,00)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::healthVial,HX_("healthVial",9a,01,e5,0a)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::magicVial,HX_("magicVial",ab,66,56,6d)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::switchTabs,HX_("switchTabs",92,30,e7,6b)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::walk,HX_("walk",09,5d,f2,4e)},
	{::hx::fsBool,(void *) &Settings_obj::playMusic,HX_("playMusic",11,fe,3e,31)},
	{::hx::fsBool,(void *) &Settings_obj::playSfx,HX_("playSfx",f1,56,07,8a)},
	{::hx::fsBool,(void *) &Settings_obj::playWepSfx,HX_("playWepSfx",17,52,fb,ac)},
	{::hx::fsBool,(void *) &Settings_obj::centerCamera,HX_("centerCamera",5a,6e,c1,7b)},
	{::hx::fsBool,(void *) &Settings_obj::textBubbles,HX_("textBubbles",3a,b6,d6,3c)},
	{::hx::fsString,(void *) &Settings_obj::selectedServer,HX_("selectedServer",7e,9f,95,f1)},
	{::hx::fsUnknown /* float */ ,(void *) &Settings_obj::cameraAngle,HX_("cameraAngle",ee,36,28,17)},
	{::hx::fsUnknown /* signed char */ ,(void *) &Settings_obj::selectedCursor,HX_("selectedCursor",91,e3,46,c2)},
	{::hx::fsUnknown /* unsigned char */ ,(void *) &Settings_obj::glowType,HX_("glowType",e7,37,88,ac)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Settings_obj::messagesSent,HX_("messagesSent",44,e8,b1,31)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Settings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Settings_obj::moveLeft,"moveLeft");
	HX_MARK_MEMBER_NAME(Settings_obj::moveRight,"moveRight");
	HX_MARK_MEMBER_NAME(Settings_obj::moveUp,"moveUp");
	HX_MARK_MEMBER_NAME(Settings_obj::moveDown,"moveDown");
	HX_MARK_MEMBER_NAME(Settings_obj::rotateLeft,"rotateLeft");
	HX_MARK_MEMBER_NAME(Settings_obj::rotateRight,"rotateRight");
	HX_MARK_MEMBER_NAME(Settings_obj::shoot,"shoot");
	HX_MARK_MEMBER_NAME(Settings_obj::useAbility,"useAbility");
	HX_MARK_MEMBER_NAME(Settings_obj::interact,"interact");
	HX_MARK_MEMBER_NAME(Settings_obj::inv1,"inv1");
	HX_MARK_MEMBER_NAME(Settings_obj::inv2,"inv2");
	HX_MARK_MEMBER_NAME(Settings_obj::inv3,"inv3");
	HX_MARK_MEMBER_NAME(Settings_obj::inv4,"inv4");
	HX_MARK_MEMBER_NAME(Settings_obj::inv5,"inv5");
	HX_MARK_MEMBER_NAME(Settings_obj::inv6,"inv6");
	HX_MARK_MEMBER_NAME(Settings_obj::inv7,"inv7");
	HX_MARK_MEMBER_NAME(Settings_obj::inv8,"inv8");
	HX_MARK_MEMBER_NAME(Settings_obj::goToHub,"goToHub");
	HX_MARK_MEMBER_NAME(Settings_obj::chatUp,"chatUp");
	HX_MARK_MEMBER_NAME(Settings_obj::chatDown,"chatDown");
	HX_MARK_MEMBER_NAME(Settings_obj::resetCamera,"resetCamera");
	HX_MARK_MEMBER_NAME(Settings_obj::perfStats,"perfStats");
	HX_MARK_MEMBER_NAME(Settings_obj::options,"options");
	HX_MARK_MEMBER_NAME(Settings_obj::toggleCentering,"toggleCentering");
	HX_MARK_MEMBER_NAME(Settings_obj::chat,"chat");
	HX_MARK_MEMBER_NAME(Settings_obj::chatCmd,"chatCmd");
	HX_MARK_MEMBER_NAME(Settings_obj::respond,"respond");
	HX_MARK_MEMBER_NAME(Settings_obj::guildChat,"guildChat");
	HX_MARK_MEMBER_NAME(Settings_obj::healthVial,"healthVial");
	HX_MARK_MEMBER_NAME(Settings_obj::magicVial,"magicVial");
	HX_MARK_MEMBER_NAME(Settings_obj::switchTabs,"switchTabs");
	HX_MARK_MEMBER_NAME(Settings_obj::walk,"walk");
	HX_MARK_MEMBER_NAME(Settings_obj::playMusic,"playMusic");
	HX_MARK_MEMBER_NAME(Settings_obj::playSfx,"playSfx");
	HX_MARK_MEMBER_NAME(Settings_obj::playWepSfx,"playWepSfx");
	HX_MARK_MEMBER_NAME(Settings_obj::centerCamera,"centerCamera");
	HX_MARK_MEMBER_NAME(Settings_obj::textBubbles,"textBubbles");
	HX_MARK_MEMBER_NAME(Settings_obj::selectedServer,"selectedServer");
	HX_MARK_MEMBER_NAME(Settings_obj::cameraAngle,"cameraAngle");
	HX_MARK_MEMBER_NAME(Settings_obj::selectedCursor,"selectedCursor");
	HX_MARK_MEMBER_NAME(Settings_obj::glowType,"glowType");
	HX_MARK_MEMBER_NAME(Settings_obj::messagesSent,"messagesSent");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Settings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Settings_obj::moveLeft,"moveLeft");
	HX_VISIT_MEMBER_NAME(Settings_obj::moveRight,"moveRight");
	HX_VISIT_MEMBER_NAME(Settings_obj::moveUp,"moveUp");
	HX_VISIT_MEMBER_NAME(Settings_obj::moveDown,"moveDown");
	HX_VISIT_MEMBER_NAME(Settings_obj::rotateLeft,"rotateLeft");
	HX_VISIT_MEMBER_NAME(Settings_obj::rotateRight,"rotateRight");
	HX_VISIT_MEMBER_NAME(Settings_obj::shoot,"shoot");
	HX_VISIT_MEMBER_NAME(Settings_obj::useAbility,"useAbility");
	HX_VISIT_MEMBER_NAME(Settings_obj::interact,"interact");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv1,"inv1");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv2,"inv2");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv3,"inv3");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv4,"inv4");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv5,"inv5");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv6,"inv6");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv7,"inv7");
	HX_VISIT_MEMBER_NAME(Settings_obj::inv8,"inv8");
	HX_VISIT_MEMBER_NAME(Settings_obj::goToHub,"goToHub");
	HX_VISIT_MEMBER_NAME(Settings_obj::chatUp,"chatUp");
	HX_VISIT_MEMBER_NAME(Settings_obj::chatDown,"chatDown");
	HX_VISIT_MEMBER_NAME(Settings_obj::resetCamera,"resetCamera");
	HX_VISIT_MEMBER_NAME(Settings_obj::perfStats,"perfStats");
	HX_VISIT_MEMBER_NAME(Settings_obj::options,"options");
	HX_VISIT_MEMBER_NAME(Settings_obj::toggleCentering,"toggleCentering");
	HX_VISIT_MEMBER_NAME(Settings_obj::chat,"chat");
	HX_VISIT_MEMBER_NAME(Settings_obj::chatCmd,"chatCmd");
	HX_VISIT_MEMBER_NAME(Settings_obj::respond,"respond");
	HX_VISIT_MEMBER_NAME(Settings_obj::guildChat,"guildChat");
	HX_VISIT_MEMBER_NAME(Settings_obj::healthVial,"healthVial");
	HX_VISIT_MEMBER_NAME(Settings_obj::magicVial,"magicVial");
	HX_VISIT_MEMBER_NAME(Settings_obj::switchTabs,"switchTabs");
	HX_VISIT_MEMBER_NAME(Settings_obj::walk,"walk");
	HX_VISIT_MEMBER_NAME(Settings_obj::playMusic,"playMusic");
	HX_VISIT_MEMBER_NAME(Settings_obj::playSfx,"playSfx");
	HX_VISIT_MEMBER_NAME(Settings_obj::playWepSfx,"playWepSfx");
	HX_VISIT_MEMBER_NAME(Settings_obj::centerCamera,"centerCamera");
	HX_VISIT_MEMBER_NAME(Settings_obj::textBubbles,"textBubbles");
	HX_VISIT_MEMBER_NAME(Settings_obj::selectedServer,"selectedServer");
	HX_VISIT_MEMBER_NAME(Settings_obj::cameraAngle,"cameraAngle");
	HX_VISIT_MEMBER_NAME(Settings_obj::selectedCursor,"selectedCursor");
	HX_VISIT_MEMBER_NAME(Settings_obj::glowType,"glowType");
	HX_VISIT_MEMBER_NAME(Settings_obj::messagesSent,"messagesSent");
};

#endif

::hx::Class Settings_obj::__mClass;

static ::String Settings_obj_sStaticFields[] = {
	HX_("moveLeft",b8,73,67,ea),
	HX_("moveRight",0b,db,2a,a7),
	HX_("moveUp",cc,d3,ac,cc),
	HX_("moveDown",13,64,25,e5),
	HX_("rotateLeft",02,44,bb,7f),
	HX_("rotateRight",81,4b,2d,bb),
	HX_("shoot",df,81,27,7c),
	HX_("useAbility",23,84,14,b0),
	HX_("interact",b6,8b,6c,28),
	HX_("inv1",20,46,bb,45),
	HX_("inv2",21,46,bb,45),
	HX_("inv3",22,46,bb,45),
	HX_("inv4",23,46,bb,45),
	HX_("inv5",24,46,bb,45),
	HX_("inv6",25,46,bb,45),
	HX_("inv7",26,46,bb,45),
	HX_("inv8",27,46,bb,45),
	HX_("goToHub",b2,46,fe,c3),
	HX_("chatUp",53,0f,77,b7),
	HX_("chatDown",5a,cf,9a,c3),
	HX_("resetCamera",d4,c9,a0,57),
	HX_("perfStats",76,8c,b3,3e),
	HX_("options",5e,33,fe,df),
	HX_("toggleCentering",f9,07,b1,23),
	HX_("chat",d8,5e,bf,41),
	HX_("chatCmd",82,ae,a8,d0),
	HX_("respond",55,89,0b,68),
	HX_("guildChat",2b,a2,b2,00),
	HX_("healthVial",9a,01,e5,0a),
	HX_("magicVial",ab,66,56,6d),
	HX_("switchTabs",92,30,e7,6b),
	HX_("walk",09,5d,f2,4e),
	HX_("playMusic",11,fe,3e,31),
	HX_("playSfx",f1,56,07,8a),
	HX_("playWepSfx",17,52,fb,ac),
	HX_("centerCamera",5a,6e,c1,7b),
	HX_("textBubbles",3a,b6,d6,3c),
	HX_("selectedServer",7e,9f,95,f1),
	HX_("cameraAngle",ee,36,28,17),
	HX_("selectedCursor",91,e3,46,c2),
	HX_("glowType",e7,37,88,ac),
	HX_("messagesSent",44,e8,b1,31),
	HX_("load",26,9a,b7,47),
	HX_("save",3d,8b,4d,4c),
	HX_("setDefaults",54,9a,fa,df),
	::String(null())
};

void Settings_obj::__register()
{
	Settings_obj _hx_dummy;
	Settings_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.Settings",ef,ae,ab,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Settings_obj::__GetStatic;
	__mClass->mSetStaticField = &Settings_obj::__SetStatic;
	__mClass->mMarkFunc = Settings_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Settings_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Settings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Settings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Settings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Settings_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Settings_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_30_boot)
HXDLIN(  30)		moveLeft = ( (unsigned char)(65) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_31_boot)
HXDLIN(  31)		moveRight = ( (unsigned char)(68) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_32_boot)
HXDLIN(  32)		moveUp = ( (unsigned char)(87) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_33_boot)
HXDLIN(  33)		moveDown = ( (unsigned char)(83) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_34_boot)
HXDLIN(  34)		rotateLeft = ( (unsigned char)(81) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_35_boot)
HXDLIN(  35)		rotateRight = ( (unsigned char)(69) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_36_boot)
HXDLIN(  36)		shoot = ( (unsigned char)(223) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_37_boot)
HXDLIN(  37)		useAbility = ( (unsigned char)(224) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_38_boot)
HXDLIN(  38)		interact = ( (unsigned char)(82) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_39_boot)
HXDLIN(  39)		inv1 = ( (unsigned char)(49) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_40_boot)
HXDLIN(  40)		inv2 = ( (unsigned char)(50) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_41_boot)
HXDLIN(  41)		inv3 = ( (unsigned char)(51) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_42_boot)
HXDLIN(  42)		inv4 = ( (unsigned char)(52) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_43_boot)
HXDLIN(  43)		inv5 = ( (unsigned char)(53) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_44_boot)
HXDLIN(  44)		inv6 = ( (unsigned char)(54) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_45_boot)
HXDLIN(  45)		inv7 = ( (unsigned char)(55) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_46_boot)
HXDLIN(  46)		inv8 = ( (unsigned char)(56) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_47_boot)
HXDLIN(  47)		goToHub = ( (unsigned char)(9) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_48_boot)
HXDLIN(  48)		chatUp = ( (unsigned char)(33) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_49_boot)
HXDLIN(  49)		chatDown = ( (unsigned char)(34) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_50_boot)
HXDLIN(  50)		resetCamera = ( (unsigned char)(90) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_51_boot)
HXDLIN(  51)		perfStats = ( (unsigned char)(114) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_52_boot)
HXDLIN(  52)		options = ( (unsigned char)(27) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_53_boot)
HXDLIN(  53)		toggleCentering = ( (unsigned char)(88) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_54_boot)
HXDLIN(  54)		chat = ( (unsigned char)(13) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_55_boot)
HXDLIN(  55)		chatCmd = ( (unsigned char)(191) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_56_boot)
HXDLIN(  56)		respond = ( (unsigned char)(113) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_57_boot)
HXDLIN(  57)		guildChat = ( (unsigned char)(71) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_58_boot)
HXDLIN(  58)		healthVial = ( (unsigned char)(70) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_59_boot)
HXDLIN(  59)		magicVial = ( (unsigned char)(86) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_60_boot)
HXDLIN(  60)		switchTabs = ( (unsigned char)(66) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_61_boot)
HXDLIN(  61)		walk = ( (unsigned char)(16) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_62_boot)
HXDLIN(  62)		playMusic = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_63_boot)
HXDLIN(  63)		playSfx = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_64_boot)
HXDLIN(  64)		playWepSfx = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_65_boot)
HXDLIN(  65)		centerCamera = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_66_boot)
HXDLIN(  66)		textBubbles = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_67_boot)
HXDLIN(  67)		selectedServer = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_68_boot)
HXDLIN(  68)		cameraAngle = ( (float)(((Float)0.0)) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_69_boot)
HXDLIN(  69)		selectedCursor = ( (signed char)(3) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_70_boot)
HXDLIN(  70)		glowType = ( (unsigned char)(3) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba59c65835d964c_72_boot)
HXDLIN(  72)		messagesSent = ::Array_obj< ::String >::__new();
            	}
}

} // end namespace util
