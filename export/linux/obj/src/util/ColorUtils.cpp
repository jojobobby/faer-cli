// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_util_ColorUtils
#include <util/ColorUtils.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1dcc46e13b5c9e2c_247_singleColorFilterMatrix,"util.ColorUtils","singleColorFilterMatrix",0xcef2bce0,"util.ColorUtils.singleColorFilterMatrix","util/Utils.hx",247,0xad0de83a)
HX_LOCAL_STACK_FRAME(_hx_pos_1dcc46e13b5c9e2c_253_getRarityColor,"util.ColorUtils","getRarityColor",0x519c5756,"util.ColorUtils.getRarityColor","util/Utils.hx",253,0xad0de83a)
HX_LOCAL_STACK_FRAME(_hx_pos_1dcc46e13b5c9e2c_224_boot,"util.ColorUtils","boot",0x8b218e46,"util.ColorUtils.boot","util/Utils.hx",224,0xad0de83a)
static const Float _hx_array_data_94328eda_4[] = {
	0.3,0.59,0.11,(Float)0,(Float)0,0.3,0.59,0.11,(Float)0,(Float)0,0.3,0.59,0.11,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1dcc46e13b5c9e2c_227_boot,"util.ColorUtils","boot",0x8b218e46,"util.ColorUtils.boot","util/Utils.hx",227,0xad0de83a)
HX_LOCAL_STACK_FRAME(_hx_pos_1dcc46e13b5c9e2c_228_boot,"util.ColorUtils","boot",0x8b218e46,"util.ColorUtils.boot","util/Utils.hx",228,0xad0de83a)
namespace util{

void ColorUtils_obj::__construct() { }

Dynamic ColorUtils_obj::__CreateEmpty() { return new ColorUtils_obj; }

void *ColorUtils_obj::_hx_vtable = 0;

Dynamic ColorUtils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorUtils_obj > _hx_result = new ColorUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e0fd7d4;
}

::Array< Float > ColorUtils_obj::greyscaleFilterMatrix;

 ::openfl::geom::ColorTransform ColorUtils_obj::identity;

 ::openfl::geom::ColorTransform ColorUtils_obj::darkCT;

::Array< Float > ColorUtils_obj::singleColorFilterMatrix(int color){
            	HX_STACKFRAME(&_hx_pos_1dcc46e13b5c9e2c_247_singleColorFilterMatrix)
HXDLIN( 247)		return ::Array_obj< Float >::__new(20)->init(0,((Float)0.0))->init(1,0)->init(2,0)->init(3,0)->init(4,((color & 16711680) >> 16))->init(5,0)->init(6,0)->init(7,0)->init(8,0)->init(9,((color & 65280) >> 8))->init(10,0)->init(11,0)->init(12,0)->init(13,0)->init(14,(color & 255))->init(15,0)->init(16,0)->init(17,0)->init(18,1)->init(19,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorUtils_obj,singleColorFilterMatrix,return )

int ColorUtils_obj::getRarityColor(::String rarity,::hx::Null< int >  __o_defaultColor){
            		int defaultColor = __o_defaultColor.Default(5526612);
            	HX_STACKFRAME(&_hx_pos_1dcc46e13b5c9e2c_253_getRarityColor)
HXDLIN( 253)		::String _hx_switch_0 = rarity;
            		if (  (_hx_switch_0==HX_("Epic",25,11,f1,2d)) ){
HXLINE( 259)			return 11019750;
HXDLIN( 259)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Legendary",9b,8f,37,e6)) ){
HXLINE( 257)			return 15114496;
HXDLIN( 257)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Mythic",da,ff,f2,c1)) ){
HXLINE( 255)			return 9633792;
HXDLIN( 255)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Rare",42,7d,7d,36)) ){
HXLINE( 261)			return 2455014;
HXDLIN( 261)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE( 263)			return defaultColor;
            		}
            		_hx_goto_1:;
HXLINE( 253)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorUtils_obj,getRarityColor,return )


ColorUtils_obj::ColorUtils_obj()
{
}

bool ColorUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"darkCT") ) { outValue = ( darkCT ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"identity") ) { outValue = ( identity ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getRarityColor") ) { outValue = getRarityColor_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"greyscaleFilterMatrix") ) { outValue = ( greyscaleFilterMatrix ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"singleColorFilterMatrix") ) { outValue = singleColorFilterMatrix_dyn(); return true; }
	}
	return false;
}

bool ColorUtils_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"darkCT") ) { darkCT=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"identity") ) { identity=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"greyscaleFilterMatrix") ) { greyscaleFilterMatrix=ioValue.Cast< ::Array< Float > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ColorUtils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ColorUtils_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &ColorUtils_obj::greyscaleFilterMatrix,HX_("greyscaleFilterMatrix",84,97,ee,c8)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &ColorUtils_obj::identity,HX_("identity",3e,45,2f,b9)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &ColorUtils_obj::darkCT,HX_("darkCT",a7,18,3a,21)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ColorUtils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorUtils_obj::greyscaleFilterMatrix,"greyscaleFilterMatrix");
	HX_MARK_MEMBER_NAME(ColorUtils_obj::identity,"identity");
	HX_MARK_MEMBER_NAME(ColorUtils_obj::darkCT,"darkCT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorUtils_obj::greyscaleFilterMatrix,"greyscaleFilterMatrix");
	HX_VISIT_MEMBER_NAME(ColorUtils_obj::identity,"identity");
	HX_VISIT_MEMBER_NAME(ColorUtils_obj::darkCT,"darkCT");
};

#endif

::hx::Class ColorUtils_obj::__mClass;

static ::String ColorUtils_obj_sStaticFields[] = {
	HX_("greyscaleFilterMatrix",84,97,ee,c8),
	HX_("identity",3e,45,2f,b9),
	HX_("darkCT",a7,18,3a,21),
	HX_("singleColorFilterMatrix",74,aa,ed,0e),
	HX_("getRarityColor",42,6c,85,42),
	::String(null())
};

void ColorUtils_obj::__register()
{
	ColorUtils_obj _hx_dummy;
	ColorUtils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.ColorUtils",da,8e,32,94);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &ColorUtils_obj::__SetStatic;
	__mClass->mMarkFunc = ColorUtils_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ColorUtils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ColorUtils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorUtils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorUtils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColorUtils_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1dcc46e13b5c9e2c_224_boot)
HXDLIN( 224)		greyscaleFilterMatrix = ::Array_obj< Float >::fromData( _hx_array_data_94328eda_4,20);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1dcc46e13b5c9e2c_227_boot)
HXDLIN( 227)		identity =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1dcc46e13b5c9e2c_228_boot)
HXDLIN( 228)		darkCT =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,((Float)0.6),((Float)0.6),((Float)0.6),1,0,0,0,0);
            	}
}

} // end namespace util
