// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_util_CachingColorTransformer
#include <util/CachingColorTransformer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c1dd6b57ae7e8a46_9_transformBitmapData,"util.CachingColorTransformer","transformBitmapData",0xfc477720,"util.CachingColorTransformer.transformBitmapData","util/CachingColorTransformer.hx",9,0xeaef01d6)
HX_LOCAL_STACK_FRAME(_hx_pos_c1dd6b57ae7e8a46_7_boot,"util.CachingColorTransformer","boot",0xf1ee98f7,"util.CachingColorTransformer.boot","util/CachingColorTransformer.hx",7,0xeaef01d6)
namespace util{

void CachingColorTransformer_obj::__construct() { }

Dynamic CachingColorTransformer_obj::__CreateEmpty() { return new CachingColorTransformer_obj; }

void *CachingColorTransformer_obj::_hx_vtable = 0;

Dynamic CachingColorTransformer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CachingColorTransformer_obj > _hx_result = new CachingColorTransformer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CachingColorTransformer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fd21e33;
}

 ::haxe::ds::ObjectMap CachingColorTransformer_obj::bds;

 ::openfl::display::BitmapData CachingColorTransformer_obj::transformBitmapData( ::openfl::display::BitmapData bitmapData, ::openfl::geom::ColorTransform ct){
            	HX_GC_STACKFRAME(&_hx_pos_c1dd6b57ae7e8a46_9_transformBitmapData)
HXLINE(  10)		 ::openfl::display::BitmapData newBitmapData = null();
HXLINE(  11)		 ::haxe::ds::ObjectMap object = ( ( ::haxe::ds::ObjectMap)(::util::CachingColorTransformer_obj::bds->get(bitmapData)) );
HXLINE(  12)		if (::hx::IsNotNull( object )) {
HXLINE(  13)			newBitmapData = ( ( ::openfl::display::BitmapData)(object->get(ct)) );
            		}
            		else {
HXLINE(  15)			object =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  16)			::util::CachingColorTransformer_obj::bds->set(bitmapData,object);
            		}
HXLINE(  19)		if (::hx::IsNull( newBitmapData )) {
HXLINE(  20)			newBitmapData = bitmapData->clone();
HXLINE(  21)			newBitmapData->colorTransform(newBitmapData->rect,ct);
HXLINE(  22)			object->set(ct,newBitmapData);
            		}
HXLINE(  25)		return newBitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CachingColorTransformer_obj,transformBitmapData,return )


CachingColorTransformer_obj::CachingColorTransformer_obj()
{
}

bool CachingColorTransformer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bds") ) { outValue = ( bds ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"transformBitmapData") ) { outValue = transformBitmapData_dyn(); return true; }
	}
	return false;
}

bool CachingColorTransformer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bds") ) { bds=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CachingColorTransformer_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo CachingColorTransformer_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::ObjectMap */ ,(void *) &CachingColorTransformer_obj::bds,HX_("bds",71,b4,4a,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void CachingColorTransformer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CachingColorTransformer_obj::bds,"bds");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CachingColorTransformer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CachingColorTransformer_obj::bds,"bds");
};

#endif

::hx::Class CachingColorTransformer_obj::__mClass;

static ::String CachingColorTransformer_obj_sStaticFields[] = {
	HX_("bds",71,b4,4a,00),
	HX_("transformBitmapData",45,66,74,bc),
	::String(null())
};

void CachingColorTransformer_obj::__register()
{
	CachingColorTransformer_obj _hx_dummy;
	CachingColorTransformer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.CachingColorTransformer",c9,81,03,48);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CachingColorTransformer_obj::__GetStatic;
	__mClass->mSetStaticField = &CachingColorTransformer_obj::__SetStatic;
	__mClass->mMarkFunc = CachingColorTransformer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CachingColorTransformer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CachingColorTransformer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CachingColorTransformer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CachingColorTransformer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CachingColorTransformer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CachingColorTransformer_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_c1dd6b57ae7e8a46_7_boot)
HXDLIN(   7)		bds =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace util
