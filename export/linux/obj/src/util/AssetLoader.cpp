// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_map_GroundLibrary
#include <map/GroundLibrary.h>
#endif
#ifndef INCLUDED_map_RegionLibrary
#include <map/RegionLibrary.h>
#endif
#ifndef INCLUDED_objects_ObjectLibrary
#include <objects/ObjectLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sound_Music
#include <sound/Music.h>
#endif
#ifndef INCLUDED_util_AnimatedChars
#include <util/AnimatedChars.h>
#endif
#ifndef INCLUDED_util_AssetLibrary
#include <util/AssetLibrary.h>
#endif
#ifndef INCLUDED_util_AssetLoader
#include <util/AssetLoader.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5991e0e5c51fca39_20_load,"util.AssetLoader","load",0x61618e5d,"util.AssetLoader.load","util/AssetLoader.hx",20,0x9f91a348)
HX_LOCAL_STACK_FRAME(_hx_pos_5991e0e5c51fca39_14_boot,"util.AssetLoader","boot",0x5ac57869,"util.AssetLoader.boot","util/AssetLoader.hx",14,0x9f91a348)
static const ::String _hx_array_data_73bcd797_5[] = {
	HX_("Ground",a7,96,bc,50),
};
HX_LOCAL_STACK_FRAME(_hx_pos_5991e0e5c51fca39_15_boot,"util.AssetLoader","boot",0x5ac57869,"util.AssetLoader.boot","util/AssetLoader.hx",15,0x9f91a348)
static const ::String _hx_array_data_73bcd797_7[] = {
	HX_("Projectiles",4a,3e,bc,19),HX_("Equip",90,46,b0,05),HX_("Players",d2,31,66,57),HX_("EnemiesLowRealm",c1,ec,f4,dd),HX_("EnemiesMidRealm",4d,bb,de,84),HX_("Containers",32,28,44,bc),HX_("Portals",27,04,f7,50),HX_("StaticObjects",a6,15,52,51),HX_("Test",72,f4,d2,37),HX_("Objects",b4,90,a0,4f),HX_("Skins",36,07,4c,11),
};
HX_LOCAL_STACK_FRAME(_hx_pos_5991e0e5c51fca39_18_boot,"util.AssetLoader","boot",0x5ac57869,"util.AssetLoader.boot","util/AssetLoader.hx",18,0x9f91a348)
static const ::String _hx_array_data_73bcd797_9[] = {
	HX_("Regions",df,3c,ed,47),
};
namespace util{

void AssetLoader_obj::__construct() { }

Dynamic AssetLoader_obj::__CreateEmpty() { return new AssetLoader_obj; }

void *AssetLoader_obj::_hx_vtable = 0;

Dynamic AssetLoader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AssetLoader_obj > _hx_result = new AssetLoader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetLoader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2c2f1b41;
}

::Array< ::String > AssetLoader_obj::GROUND_FILES;

::Array< ::String > AssetLoader_obj::OBJECT_FILES;

::Array< ::String > AssetLoader_obj::REGION_FILES;

void AssetLoader_obj::load(){
            	HX_GC_STACKFRAME(&_hx_pos_5991e0e5c51fca39_20_load)
HXLINE(  21)		::util::AssetLibrary_obj::addImageSet(HX_("invisible",2d,93,d5,bb), ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,8,8,true,0),8,8,null());
HXLINE(  24)		::util::AssetLibrary_obj::addImageSet(HX_("keyIndicators",43,58,49,9c),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/KeyIndicators.png",0f,62,f1,5e),null()),100,100,true);
HXLINE(  25)		::util::AssetLibrary_obj::addImageSet(HX_("cursors",dd,6c,94,cc),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Cursors.png",e9,38,28,64),null()),32,32,true);
HXLINE(  26)		::util::AssetLibrary_obj::addImageSet(HX_("items",00,ac,0c,c2),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Items.png",4c,df,97,44),null()),8,8,true);
HXLINE(  27)		::util::AssetLibrary_obj::addImageSet(HX_("skinItems",43,60,51,09),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Players.png",7e,84,25,e2),null()),8,8,true);
HXLINE(  28)		::util::AssetLibrary_obj::addImageSet(HX_("tieredItems",3f,0e,eb,ad),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/TieredItems.png",cb,2f,43,7c),null()),8,8,true);
HXLINE(  29)		::util::AssetLibrary_obj::addImageSet(HX_("speechBalloons",26,43,61,f7),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/SpeechBalloons.png",30,2b,6f,15),null()),32,24,true);
HXLINE(  31)		::util::AssetLibrary_obj::addImageSet(HX_("errorTexture",f3,ad,10,50),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/ErrorTexture.png",bd,9e,85,3d),null()),8,8,true);
HXLINE(  32)		::util::AssetLibrary_obj::addImageSet(HX_("bars",40,e7,10,41),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Bars.png",8a,db,4c,4e),null()),24,8,null());
HXLINE(  33)		::util::AssetLibrary_obj::addImageSet(HX_("ground",87,22,28,1c),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Ground.png",11,e8,b3,0e),null()),8,8,null());
HXLINE(  34)		::util::AssetLibrary_obj::addImageSet(HX_("conditions",78,7e,38,b1),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Conditions.png",02,a4,55,72),null()),16,16,null());
HXLINE(  35)		::util::AssetLibrary_obj::addImageSet(HX_("misc",ec,52,5c,48),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Misc.png",36,8d,15,40),null()),8,8,null());
HXLINE(  36)		::util::AssetLibrary_obj::addImageSet(HX_("misc16",d1,10,48,56),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Misc16.png",5b,c3,09,3e),null()),16,16,null());
HXLINE(  37)		::util::AssetLibrary_obj::addImageSet(HX_("portals",47,dc,a5,83),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Portals.png",53,a5,96,fa),null()),8,8,null());
HXLINE(  38)		::util::AssetLibrary_obj::addImageSet(HX_("portals16",ec,e6,0a,1e),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Portals16.png",b8,dc,16,6d),null()),16,16,null());
HXLINE(  39)		::util::AssetLibrary_obj::addImageSet(HX_("projectiles",6a,a6,89,35),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Projectiles.png",76,b9,48,d5),null()),8,8,null());
HXLINE(  40)		::util::AssetLibrary_obj::addImageSet(HX_("props",70,e7,8f,c8),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Props.png",bc,92,b5,69),null()),8,8,null());
HXLINE(  41)		::util::AssetLibrary_obj::addImageSet(HX_("props16",55,ce,ec,f9),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Props16.png",61,b6,da,13),null()),16,16,null());
HXLINE(  42)		::util::AssetLibrary_obj::addImageSet(HX_("tieredProjectiles",e9,c1,25,cf),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/TieredProjectiles.png",35,f3,75,f5),null()),8,8,null());
HXLINE(  44)		::util::AnimatedChars_obj::add(HX_("miscChars",51,a2,d4,62),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/MiscChars.png",9d,ae,52,60),null()),null(),8,8,48,8);
HXLINE(  45)		::util::AnimatedChars_obj::add(HX_("lowrealm",3b,3a,49,a4),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/LowRealm.png",65,db,1e,69),null()),null(),8,8,48,8);
HXLINE(  46)		::util::AnimatedChars_obj::add(HX_("lowrealm16",e0,a9,b8,34),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/LowRealm16.png",4a,3b,a6,b6),null()),null(),16,16,96,16);
HXLINE(  47)		::util::AnimatedChars_obj::add(HX_("midrealm",c7,08,33,4b),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/MidRealm.png",f1,df,20,60),null()),null(),8,8,48,8);
HXLINE(  48)		::util::AnimatedChars_obj::add(HX_("midrealm16",6c,33,9c,c4),::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/MidRealm16.png",d6,7a,9b,f5),null()),null(),16,16,96,16);
HXLINE(  49)		 ::openfl::display::BitmapData _hx_tmp = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/Players.png",7e,84,25,e2),null());
HXDLIN(  49)		::util::AnimatedChars_obj::add(HX_("players",f2,09,15,8a),_hx_tmp,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/PlayersMask.png",0a,c5,2e,b3),null()),8,8,48,24);
HXLINE(  50)		 ::openfl::display::BitmapData _hx_tmp1 = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/PlayerSkins.png",c1,90,02,f1),null());
HXDLIN(  50)		::util::AnimatedChars_obj::add(HX_("playerskins",55,cc,cf,f1),_hx_tmp1,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/sheets/PlayerSkinsMask.png",cd,ae,5a,57),null()),8,8,48,24);
HXLINE(  53)		{
HXLINE(  53)			int _g = 0;
HXDLIN(  53)			::Array< ::String > _g1 = ::util::AssetLoader_obj::GROUND_FILES;
HXDLIN(  53)			while((_g < _g1->length)){
HXLINE(  53)				::String name = _g1->__get(_g);
HXDLIN(  53)				_g = (_g + 1);
HXLINE(  54)				::map::GroundLibrary_obj::parseFromXML(::Xml_obj::parse(::openfl::utils::Assets_obj::getText(((HX_("assets/xmls/",27,38,5f,2c) + name) + HX_(".xml",69,3e,c3,1e))))->firstElement());
            			}
            		}
HXLINE(  56)		{
HXLINE(  56)			int _g2 = 0;
HXDLIN(  56)			::Array< ::String > _g3 = ::util::AssetLoader_obj::OBJECT_FILES;
HXDLIN(  56)			while((_g2 < _g3->length)){
HXLINE(  56)				::String name1 = _g3->__get(_g2);
HXDLIN(  56)				_g2 = (_g2 + 1);
HXLINE(  57)				::objects::ObjectLibrary_obj::parseFromXML(::Xml_obj::parse(::openfl::utils::Assets_obj::getText(((HX_("assets/xmls/",27,38,5f,2c) + name1) + HX_(".xml",69,3e,c3,1e))))->firstElement());
            			}
            		}
HXLINE(  59)		{
HXLINE(  59)			int _g4 = 0;
HXDLIN(  59)			::Array< ::String > _g5 = ::util::AssetLoader_obj::REGION_FILES;
HXDLIN(  59)			while((_g4 < _g5->length)){
HXLINE(  59)				::String name2 = _g5->__get(_g4);
HXDLIN(  59)				_g4 = (_g4 + 1);
HXLINE(  60)				::map::RegionLibrary_obj::parseFromXML(::Xml_obj::parse(::openfl::utils::Assets_obj::getText(((HX_("assets/xmls/",27,38,5f,2c) + name2) + HX_(".xml",69,3e,c3,1e))))->firstElement());
            			}
            		}
HXLINE(  62)		::sound::Music_obj::load();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AssetLoader_obj,load,(void))


AssetLoader_obj::AssetLoader_obj()
{
}

bool AssetLoader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"GROUND_FILES") ) { outValue = ( GROUND_FILES ); return true; }
		if (HX_FIELD_EQ(inName,"OBJECT_FILES") ) { outValue = ( OBJECT_FILES ); return true; }
		if (HX_FIELD_EQ(inName,"REGION_FILES") ) { outValue = ( REGION_FILES ); return true; }
	}
	return false;
}

bool AssetLoader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"GROUND_FILES") ) { GROUND_FILES=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"OBJECT_FILES") ) { OBJECT_FILES=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"REGION_FILES") ) { REGION_FILES=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AssetLoader_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo AssetLoader_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &AssetLoader_obj::GROUND_FILES,HX_("GROUND_FILES",5f,4b,f9,d7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &AssetLoader_obj::OBJECT_FILES,HX_("OBJECT_FILES",97,a1,af,0b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &AssetLoader_obj::REGION_FILES,HX_("REGION_FILES",8c,f9,4b,13)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void AssetLoader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssetLoader_obj::GROUND_FILES,"GROUND_FILES");
	HX_MARK_MEMBER_NAME(AssetLoader_obj::OBJECT_FILES,"OBJECT_FILES");
	HX_MARK_MEMBER_NAME(AssetLoader_obj::REGION_FILES,"REGION_FILES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssetLoader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssetLoader_obj::GROUND_FILES,"GROUND_FILES");
	HX_VISIT_MEMBER_NAME(AssetLoader_obj::OBJECT_FILES,"OBJECT_FILES");
	HX_VISIT_MEMBER_NAME(AssetLoader_obj::REGION_FILES,"REGION_FILES");
};

#endif

::hx::Class AssetLoader_obj::__mClass;

static ::String AssetLoader_obj_sStaticFields[] = {
	HX_("GROUND_FILES",5f,4b,f9,d7),
	HX_("OBJECT_FILES",97,a1,af,0b),
	HX_("REGION_FILES",8c,f9,4b,13),
	HX_("load",26,9a,b7,47),
	::String(null())
};

void AssetLoader_obj::__register()
{
	AssetLoader_obj _hx_dummy;
	AssetLoader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.AssetLoader",97,d7,bc,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetLoader_obj::__GetStatic;
	__mClass->mSetStaticField = &AssetLoader_obj::__SetStatic;
	__mClass->mMarkFunc = AssetLoader_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AssetLoader_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< AssetLoader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssetLoader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetLoader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetLoader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AssetLoader_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5991e0e5c51fca39_14_boot)
HXDLIN(  14)		GROUND_FILES = ::Array_obj< ::String >::fromData( _hx_array_data_73bcd797_5,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5991e0e5c51fca39_15_boot)
HXDLIN(  15)		OBJECT_FILES = ::Array_obj< ::String >::fromData( _hx_array_data_73bcd797_7,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5991e0e5c51fca39_18_boot)
HXDLIN(  18)		REGION_FILES = ::Array_obj< ::String >::fromData( _hx_array_data_73bcd797_9,1);
            	}
}

} // end namespace util
