// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_util_BevelRect
#include <util/BevelRect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2928d61b2cc417f7_3_new,"util.BevelRect","new",0xacc64124,"util.BevelRect.new","util/BevelRect.hx",3,0xef47ac4d)
namespace util{

void BevelRect_obj::__construct(int width,int height,int bevel){
            	HX_STACKFRAME(&_hx_pos_2928d61b2cc417f7_3_new)
HXLINE(  10)		this->bevel = 0;
HXLINE(   9)		this->height = 0;
HXLINE(   8)		this->width = 0;
HXLINE(   7)		this->bottomRightBevel = true;
HXLINE(   6)		this->bottomLeftBevel = true;
HXLINE(   5)		this->topRightBevel = true;
HXLINE(   4)		this->topLeftBevel = true;
HXLINE(  13)		this->width = width;
HXLINE(  14)		this->height = height;
HXLINE(  15)		this->bevel = bevel;
            	}

Dynamic BevelRect_obj::__CreateEmpty() { return new BevelRect_obj; }

void *BevelRect_obj::_hx_vtable = 0;

Dynamic BevelRect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BevelRect_obj > _hx_result = new BevelRect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BevelRect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b85445c;
}


BevelRect_obj::BevelRect_obj()
{
}

::hx::Val BevelRect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"bevel") ) { return ::hx::Val( bevel ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"topLeftBevel") ) { return ::hx::Val( topLeftBevel ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"topRightBevel") ) { return ::hx::Val( topRightBevel ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bottomLeftBevel") ) { return ::hx::Val( bottomLeftBevel ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bottomRightBevel") ) { return ::hx::Val( bottomRightBevel ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BevelRect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bevel") ) { bevel=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"topLeftBevel") ) { topLeftBevel=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"topRightBevel") ) { topRightBevel=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bottomLeftBevel") ) { bottomLeftBevel=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bottomRightBevel") ) { bottomRightBevel=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BevelRect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("topLeftBevel",9e,b5,d6,32));
	outFields->push(HX_("topRightBevel",f3,85,5f,28));
	outFields->push(HX_("bottomLeftBevel",88,7a,aa,fe));
	outFields->push(HX_("bottomRightBevel",c9,0d,d8,b5));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("bevel",7a,48,61,b0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BevelRect_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(BevelRect_obj,topLeftBevel),HX_("topLeftBevel",9e,b5,d6,32)},
	{::hx::fsBool,(int)offsetof(BevelRect_obj,topRightBevel),HX_("topRightBevel",f3,85,5f,28)},
	{::hx::fsBool,(int)offsetof(BevelRect_obj,bottomLeftBevel),HX_("bottomLeftBevel",88,7a,aa,fe)},
	{::hx::fsBool,(int)offsetof(BevelRect_obj,bottomRightBevel),HX_("bottomRightBevel",c9,0d,d8,b5)},
	{::hx::fsInt,(int)offsetof(BevelRect_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(BevelRect_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(BevelRect_obj,bevel),HX_("bevel",7a,48,61,b0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BevelRect_obj_sStaticStorageInfo = 0;
#endif

static ::String BevelRect_obj_sMemberFields[] = {
	HX_("topLeftBevel",9e,b5,d6,32),
	HX_("topRightBevel",f3,85,5f,28),
	HX_("bottomLeftBevel",88,7a,aa,fe),
	HX_("bottomRightBevel",c9,0d,d8,b5),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("bevel",7a,48,61,b0),
	::String(null()) };

::hx::Class BevelRect_obj::__mClass;

void BevelRect_obj::__register()
{
	BevelRect_obj _hx_dummy;
	BevelRect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.BevelRect",32,1f,06,5d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BevelRect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BevelRect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BevelRect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BevelRect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
