// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_util_BitmapUtil
#include <util/BitmapUtil.h>
#endif
#ifndef INCLUDED_util_GlowRedrawer
#include <util/GlowRedrawer.h>
#endif
#ifndef INCLUDED_util_TextureRedrawer
#include <util/TextureRedrawer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_245426bf18ac3cca_17_redraw,"util.TextureRedrawer","redraw",0xfdd85372,"util.TextureRedrawer.redraw","util/TextureRedrawer.hx",17,0x6355640c)
HX_LOCAL_STACK_FRAME(_hx_pos_245426bf18ac3cca_33_resize,"util.TextureRedrawer","resize",0x07bbc82f,"util.TextureRedrawer.resize","util/TextureRedrawer.hx",33,0x6355640c)
HX_LOCAL_STACK_FRAME(_hx_pos_245426bf18ac3cca_127_getHash,"util.TextureRedrawer","getHash",0x70aae4e9,"util.TextureRedrawer.getHash","util/TextureRedrawer.hx",127,0x6355640c)
HX_LOCAL_STACK_FRAME(_hx_pos_245426bf18ac3cca_132_cache,"util.TextureRedrawer","cache",0x8cd80c67,"util.TextureRedrawer.cache","util/TextureRedrawer.hx",132,0x6355640c)
HX_LOCAL_STACK_FRAME(_hx_pos_245426bf18ac3cca_139_isCached,"util.TextureRedrawer","isCached",0xac40ae67,"util.TextureRedrawer.isCached","util/TextureRedrawer.hx",139,0x6355640c)
HX_LOCAL_STACK_FRAME(_hx_pos_245426bf18ac3cca_13_boot,"util.TextureRedrawer","boot",0xb8d65dad,"util.TextureRedrawer.boot","util/TextureRedrawer.hx",13,0x6355640c)
namespace util{

void TextureRedrawer_obj::__construct() { }

Dynamic TextureRedrawer_obj::__CreateEmpty() { return new TextureRedrawer_obj; }

void *TextureRedrawer_obj::_hx_vtable = 0;

Dynamic TextureRedrawer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextureRedrawer_obj > _hx_result = new TextureRedrawer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextureRedrawer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e93e599;
}

 ::haxe::ds::ObjectMap TextureRedrawer_obj::redrawCaches;

 ::openfl::display::BitmapData TextureRedrawer_obj::redraw( ::openfl::display::BitmapData tex,int size,bool padBottom,int glowColor,::hx::Null< bool >  __o_useCache,::hx::Null< Float >  __o_sMult,::hx::Null< bool >  __o_noAlphaTrim){
            		bool useCache = __o_useCache.Default(true);
            		Float sMult = __o_sMult.Default(5);
            		bool noAlphaTrim = __o_noAlphaTrim.Default(false);
            	HX_STACKFRAME(&_hx_pos_245426bf18ac3cca_17_redraw)
HXLINE(  18)		int hash = ::util::TextureRedrawer_obj::getHash(size,padBottom,glowColor,sMult);
HXLINE(  19)		bool _hx_tmp;
HXDLIN(  19)		if (useCache) {
HXLINE(  19)			_hx_tmp = ::util::TextureRedrawer_obj::isCached(tex,hash);
            		}
            		else {
HXLINE(  19)			_hx_tmp = false;
            		}
HXDLIN(  19)		if (_hx_tmp) {
HXLINE(  20)			return ( ( ::openfl::display::BitmapData)(( ( ::haxe::ds::IntMap)(::util::TextureRedrawer_obj::redrawCaches->get(tex)) )->get(hash)) );
            		}
HXLINE(  22)		 ::openfl::display::BitmapData modTex = ::util::TextureRedrawer_obj::resize(tex,size,padBottom,sMult);
HXLINE(  23)		modTex = ::util::GlowRedrawer_obj::outlineGlow(modTex,glowColor,((Float)1.4),useCache,null());
HXLINE(  24)		if (!(noAlphaTrim)) {
HXLINE(  25)			modTex = ::util::BitmapUtil_obj::trimAlpha(modTex);
            		}
HXLINE(  27)		if (useCache) {
HXLINE(  28)			::util::TextureRedrawer_obj::cache(tex,hash,modTex);
            		}
HXLINE(  30)		return modTex;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(TextureRedrawer_obj,redraw,return )

 ::openfl::display::BitmapData TextureRedrawer_obj::resize( ::openfl::display::BitmapData tex,int size,bool padBottom,::hx::Null< Float >  __o_sMult){
            		Float sMult = __o_sMult.Default(5);
            	HX_GC_STACKFRAME(&_hx_pos_245426bf18ac3cca_33_resize)
HXLINE(  34)		int w = ::Math_obj::round((((sMult * ( (Float)(size) )) / ( (Float)(100) )) * ( (Float)(tex->width) )));
HXDLIN(  34)		int h = ::Math_obj::round((((sMult * ( (Float)(size) )) / ( (Float)(100) )) * ( (Float)(tex->height) )));
HXLINE(  36)		 ::openfl::geom::Matrix m =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  37)		m->scale((( (Float)(w) ) / ( (Float)(tex->width) )),(( (Float)(h) ) / ( (Float)(tex->height) )));
HXLINE(  38)		m->translate(( (Float)(12) ),( (Float)(12) ));
HXLINE(  39)		int ret;
HXDLIN(  39)		if (padBottom) {
HXLINE(  39)			ret = 12;
            		}
            		else {
HXLINE(  39)			ret = 2;
            		}
HXDLIN(  39)		 ::openfl::display::BitmapData ret1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(w + 24),((h + ret) + 12),true,0);
HXLINE(  40)		ret1->draw(tex,m,null(),null(),null(),null());
HXLINE(  41)		return ret1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(TextureRedrawer_obj,resize,return )

int TextureRedrawer_obj::getHash(int size,bool padBottom,int glowColor,Float sMult){
            	HX_STACKFRAME(&_hx_pos_245426bf18ac3cca_127_getHash)
HXLINE( 128)		int h;
HXDLIN( 128)		if (padBottom) {
HXLINE( 128)			h = 134217728;
            		}
            		else {
HXLINE( 128)			h = 0;
            		}
HXLINE( 129)		return (((h | ::Std_obj::_hx_int((( (Float)(size) ) * sMult))) * (int)1000002449) + glowColor);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(TextureRedrawer_obj,getHash,return )

void TextureRedrawer_obj::cache( ::openfl::display::BitmapData tex,int hash, ::openfl::display::BitmapData modifiedTex){
            	HX_GC_STACKFRAME(&_hx_pos_245426bf18ac3cca_132_cache)
HXLINE( 133)		if (!(::util::TextureRedrawer_obj::redrawCaches->exists(tex))) {
HXLINE( 134)			::util::TextureRedrawer_obj::redrawCaches->set(tex, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            		}
HXLINE( 136)		( ( ::haxe::ds::IntMap)(::util::TextureRedrawer_obj::redrawCaches->get(tex)) )->set(hash,modifiedTex);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TextureRedrawer_obj,cache,(void))

bool TextureRedrawer_obj::isCached( ::openfl::display::BitmapData tex,int hash){
            	HX_STACKFRAME(&_hx_pos_245426bf18ac3cca_139_isCached)
HXLINE( 140)		 ::haxe::ds::IntMap texCache = ( ( ::haxe::ds::IntMap)(::util::TextureRedrawer_obj::redrawCaches->get(tex)) );
HXLINE( 141)		if (::hx::IsNotNull( texCache )) {
HXLINE( 141)			return texCache->exists(hash);
            		}
            		else {
HXLINE( 141)			return false;
            		}
HXDLIN( 141)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TextureRedrawer_obj,isCached,return )


TextureRedrawer_obj::TextureRedrawer_obj()
{
}

bool TextureRedrawer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = cache_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"redraw") ) { outValue = redraw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getHash") ) { outValue = getHash_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isCached") ) { outValue = isCached_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"redrawCaches") ) { outValue = ( redrawCaches ); return true; }
	}
	return false;
}

bool TextureRedrawer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"redrawCaches") ) { redrawCaches=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TextureRedrawer_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo TextureRedrawer_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::ObjectMap */ ,(void *) &TextureRedrawer_obj::redrawCaches,HX_("redrawCaches",88,fc,b4,11)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void TextureRedrawer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureRedrawer_obj::redrawCaches,"redrawCaches");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureRedrawer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureRedrawer_obj::redrawCaches,"redrawCaches");
};

#endif

::hx::Class TextureRedrawer_obj::__mClass;

static ::String TextureRedrawer_obj_sStaticFields[] = {
	HX_("redrawCaches",88,fc,b4,11),
	HX_("redraw",37,e5,97,fe),
	HX_("resize",f4,59,7b,08),
	HX_("getHash",84,df,8a,17),
	HX_("cache",42,9a,14,41),
	HX_("isCached",6c,fb,5b,09),
	::String(null())
};

void TextureRedrawer_obj::__register()
{
	TextureRedrawer_obj _hx_dummy;
	TextureRedrawer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.TextureRedrawer",d3,f8,5d,32);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextureRedrawer_obj::__GetStatic;
	__mClass->mSetStaticField = &TextureRedrawer_obj::__SetStatic;
	__mClass->mMarkFunc = TextureRedrawer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextureRedrawer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TextureRedrawer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureRedrawer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureRedrawer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureRedrawer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextureRedrawer_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_245426bf18ac3cca_13_boot)
HXDLIN(  13)		redrawCaches =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace util
