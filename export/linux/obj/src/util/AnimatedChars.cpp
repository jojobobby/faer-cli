// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_util_AnimatedChar
#include <util/AnimatedChar.h>
#endif
#ifndef INCLUDED_util_AnimatedChars
#include <util/AnimatedChars.h>
#endif
#ifndef INCLUDED_util_MaskedImage
#include <util/MaskedImage.h>
#endif
#ifndef INCLUDED_util_MaskedImageSet
#include <util/MaskedImageSet.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_73361b5be04a74d8_9_getAnimatedChar,"util.AnimatedChars","getAnimatedChar",0xe0130e0f,"util.AnimatedChars.getAnimatedChar","util/AnimatedChars.hx",9,0x42fe47d1)
HX_LOCAL_STACK_FRAME(_hx_pos_73361b5be04a74d8_20_add,"util.AnimatedChars","add",0x49173f61,"util.AnimatedChars.add","util/AnimatedChars.hx",20,0x42fe47d1)
HX_LOCAL_STACK_FRAME(_hx_pos_73361b5be04a74d8_7_boot,"util.AnimatedChars","boot",0xabf1cef2,"util.AnimatedChars.boot","util/AnimatedChars.hx",7,0x42fe47d1)
namespace util{

void AnimatedChars_obj::__construct() { }

Dynamic AnimatedChars_obj::__CreateEmpty() { return new AnimatedChars_obj; }

void *AnimatedChars_obj::_hx_vtable = 0;

Dynamic AnimatedChars_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnimatedChars_obj > _hx_result = new AnimatedChars_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AnimatedChars_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x786c0fd8;
}

 ::haxe::ds::StringMap AnimatedChars_obj::nameMap;

 ::util::AnimatedChar AnimatedChars_obj::getAnimatedChar(::String name,int id){
            	HX_STACKFRAME(&_hx_pos_73361b5be04a74d8_9_getAnimatedChar)
HXLINE(  10)		::Array< ::Dynamic> chars = ( (::Array< ::Dynamic>)(::util::AnimatedChars_obj::nameMap->get(name)) );
HXLINE(  11)		bool _hx_tmp;
HXDLIN(  11)		if (::hx::IsNotNull( chars )) {
HXLINE(  11)			_hx_tmp = (id >= chars->length);
            		}
            		else {
HXLINE(  11)			_hx_tmp = true;
            		}
HXDLIN(  11)		if (_hx_tmp) {
HXLINE(  12)			 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(  12)			::String _hx_tmp2 = ((((((HX_("Could not parse anim char: ",f2,c2,e3,ed) + name) + HX_(" (id: ",49,3b,26,19)) + id) + HX_(", exists: ",f6,39,82,f9)) + ::Std_obj::string(::util::AnimatedChars_obj::nameMap->exists(name))) + HX_(", charsLen: ",12,2f,d4,a8));
HXDLIN(  12)			::Array< ::Dynamic> tmp = ( (::Array< ::Dynamic>)(::util::AnimatedChars_obj::nameMap->get(name)) );
HXDLIN(  12)			 ::Dynamic _hx_tmp3;
HXDLIN(  12)			if (::hx::IsNotNull( tmp )) {
HXLINE(  12)				_hx_tmp3 = tmp->length;
            			}
            			else {
HXLINE(  12)				_hx_tmp3 = null();
            			}
HXDLIN(  12)			_hx_tmp1(((_hx_tmp2 + _hx_tmp3) + HX_(")",29,00,00,00)),::hx::SourceInfo(HX_("src/util/AnimatedChars.hx",26,e1,5c,22),12,HX_("util.AnimatedChars",ae,0d,22,0c),HX_("getAnimatedChar",cf,e0,e6,c1)));
HXLINE(  13)			return null();
            		}
HXLINE(  16)		return chars->__get(id).StaticCast<  ::util::AnimatedChar >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AnimatedChars_obj,getAnimatedChar,return )

void AnimatedChars_obj::add(::String name, ::openfl::display::BitmapData images, ::openfl::display::BitmapData masks,int charWidth,int charHeight,int sheetWidth,int sheetHeight){
            	HX_GC_STACKFRAME(&_hx_pos_73361b5be04a74d8_20_add)
HXLINE(  21)		::Array< ::Dynamic> chars = ::Array_obj< ::Dynamic>::__new();
HXLINE(  22)		 ::util::MaskedImageSet charImages =  ::util::MaskedImageSet_obj::__alloc( HX_CTX );
HXLINE(  23)		charImages->addFromBitmapData(images,masks,sheetWidth,sheetHeight,true);
HXLINE(  24)		{
HXLINE(  24)			int _g = 0;
HXDLIN(  24)			::Array< ::Dynamic> _g1 = charImages->images;
HXDLIN(  24)			while((_g < _g1->length)){
HXLINE(  24)				 ::util::MaskedImage image = _g1->__get(_g).StaticCast<  ::util::MaskedImage >();
HXDLIN(  24)				_g = (_g + 1);
HXLINE(  25)				chars->push( ::util::AnimatedChar_obj::__alloc( HX_CTX ,image,charWidth,charHeight,null()));
            			}
            		}
HXLINE(  27)		::util::AnimatedChars_obj::nameMap->set(name,chars);
HXLINE(  29)		images->dispose();
HXLINE(  30)		images = null();
HXLINE(  32)		if (::hx::IsNotNull( masks )) {
HXLINE(  33)			masks->dispose();
HXLINE(  34)			masks = null();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(AnimatedChars_obj,add,(void))


AnimatedChars_obj::AnimatedChars_obj()
{
}

bool AnimatedChars_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nameMap") ) { outValue = ( nameMap ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getAnimatedChar") ) { outValue = getAnimatedChar_dyn(); return true; }
	}
	return false;
}

bool AnimatedChars_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nameMap") ) { nameMap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AnimatedChars_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo AnimatedChars_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AnimatedChars_obj::nameMap,HX_("nameMap",11,91,81,ac)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void AnimatedChars_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AnimatedChars_obj::nameMap,"nameMap");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AnimatedChars_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AnimatedChars_obj::nameMap,"nameMap");
};

#endif

::hx::Class AnimatedChars_obj::__mClass;

static ::String AnimatedChars_obj_sStaticFields[] = {
	HX_("nameMap",11,91,81,ac),
	HX_("getAnimatedChar",cf,e0,e6,c1),
	HX_("add",21,f2,49,00),
	::String(null())
};

void AnimatedChars_obj::__register()
{
	AnimatedChars_obj _hx_dummy;
	AnimatedChars_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.AnimatedChars",ae,0d,22,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AnimatedChars_obj::__GetStatic;
	__mClass->mSetStaticField = &AnimatedChars_obj::__SetStatic;
	__mClass->mMarkFunc = AnimatedChars_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AnimatedChars_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< AnimatedChars_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AnimatedChars_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimatedChars_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimatedChars_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AnimatedChars_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_73361b5be04a74d8_7_boot)
HXDLIN(   7)		nameMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace util
