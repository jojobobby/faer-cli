// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_util_Rect
#include <util/Rect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_865fed207ef50b3a_6_new,"util.Rect","new",0xc6688222,"util.Rect.new","util/BinPacker.hx",6,0x7c00debe)
namespace util{

void Rect_obj::__construct(::hx::Null< float >  __o_x,::hx::Null< float >  __o_y,::hx::Null< float >  __o_width,::hx::Null< float >  __o_height){
            		float x = __o_x.Default(0);
            		float y = __o_y.Default(0);
            		float width = __o_width.Default(0);
            		float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_865fed207ef50b3a_6_new)
HXLINE(  10)		this->height = ((Float)0.0);
HXLINE(   9)		this->width = ((Float)0.0);
HXLINE(   8)		this->y = ((Float)0.0);
HXLINE(   7)		this->x = ((Float)0.0);
HXLINE(  13)		this->x = ( (Float)(x) );
HXLINE(  14)		this->y = ( (Float)(y) );
HXLINE(  15)		this->width = ( (Float)(width) );
HXLINE(  16)		this->height = ( (Float)(height) );
            	}

Dynamic Rect_obj::__CreateEmpty() { return new Rect_obj; }

void *Rect_obj::_hx_vtable = 0;

Dynamic Rect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Rect_obj > _hx_result = new Rect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5c5f7446;
}


Rect_obj::Rect_obj()
{
}

::hx::Val Rect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Rect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Rect_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Rect_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Rect_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Rect_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(Rect_obj,height),HX_("height",e7,07,4c,02)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Rect_obj_sStaticStorageInfo = 0;
#endif

static ::String Rect_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	::String(null()) };

::hx::Class Rect_obj::__mClass;

void Rect_obj::__register()
{
	Rect_obj _hx_dummy;
	Rect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.Rect",30,89,f8,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Rect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Rect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
