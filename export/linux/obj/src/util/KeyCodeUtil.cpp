// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_util_KeyCodeUtil
#include <util/KeyCodeUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_10d4a01e66a06880_138_boot,"util.KeyCodeUtil","boot",0x829fc21e,"util.KeyCodeUtil.boot","util/Utils.hx",138,0xad0de83a)
static const int _hx_array_data_5010ea02_1[] = {
	(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)35,(int)79,(int)-1,(int)-1,(int)-1,(int)55,(int)-1,(int)48,(int)15,(int)49,(int)21,(int)-1,(int)40,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)64,(int)-1,(int)-1,(int)-1,(int)-1,(int)57,(int)89,(int)90,(int)53,(int)87,(int)23,(int)32,(int)24,(int)22,(int)-1,(int)-1,(int)-1,(int)-1,(int)62,(int)51,(int)-1,(int)0,(int)4,(int)5,(int)6,(int)7,(int)8,(int)16,(int)17,(int)18,(int)19,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)20,(int)34,(int)39,(int)50,(int)52,(int)84,(int)85,(int)86,(int)88,(int)63,(int)74,(int)75,(int)76,(int)61,(int)65,(int)66,(int)25,(int)28,(int)29,(int)73,(int)67,(int)31,(int)10,(int)12,(int)13,(int)14,(int)-1,(int)11,(int)-1,(int)-1,(int)-1,(int)0,(int)4,(int)5,(int)6,(int)7,(int)8,(int)16,(int)17,(int)18,(int)-1,(int)-1,(int)55,(int)45,(int)-1,(int)-1,(int)67,(int)68,(int)69,(int)70,(int)71,(int)79,(int)80,(int)81,(int)82,(int)1,(int)2,(int)3,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)30,(int)-1,(int)-1,(int)45,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)37,(int)41,(int)38,(int)-1,(int)-1,(int)46,(int)59,(int)58,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,(int)-1,
};
namespace util{

void KeyCodeUtil_obj::__construct() { }

Dynamic KeyCodeUtil_obj::__CreateEmpty() { return new KeyCodeUtil_obj; }

void *KeyCodeUtil_obj::_hx_vtable = 0;

Dynamic KeyCodeUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyCodeUtil_obj > _hx_result = new KeyCodeUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyCodeUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08832dac;
}

::Array< int > KeyCodeUtil_obj::charCodeIconIndices;


KeyCodeUtil_obj::KeyCodeUtil_obj()
{
}

bool KeyCodeUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"charCodeIconIndices") ) { outValue = ( charCodeIconIndices ); return true; }
	}
	return false;
}

bool KeyCodeUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"charCodeIconIndices") ) { charCodeIconIndices=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *KeyCodeUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo KeyCodeUtil_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(void *) &KeyCodeUtil_obj::charCodeIconIndices,HX_("charCodeIconIndices",4b,ee,6d,2c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void KeyCodeUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyCodeUtil_obj::charCodeIconIndices,"charCodeIconIndices");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyCodeUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyCodeUtil_obj::charCodeIconIndices,"charCodeIconIndices");
};

#endif

::hx::Class KeyCodeUtil_obj::__mClass;

static ::String KeyCodeUtil_obj_sStaticFields[] = {
	HX_("charCodeIconIndices",4b,ee,6d,2c),
	::String(null())
};

void KeyCodeUtil_obj::__register()
{
	KeyCodeUtil_obj _hx_dummy;
	KeyCodeUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.KeyCodeUtil",02,ea,10,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyCodeUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &KeyCodeUtil_obj::__SetStatic;
	__mClass->mMarkFunc = KeyCodeUtil_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(KeyCodeUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< KeyCodeUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyCodeUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyCodeUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyCodeUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyCodeUtil_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_10d4a01e66a06880_138_boot)
HXDLIN( 138)		charCodeIconIndices = ::Array_obj< int >::fromData( _hx_array_data_5010ea02_1,256);
            	}
}

} // end namespace util
