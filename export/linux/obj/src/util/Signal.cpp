// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ace0f4bbf57a7597_33_new,"util.Signal","new",0xa384f066,"util.Signal.new","util/Signal.hx",33,0xe93415a9)
HX_LOCAL_STACK_FRAME(_hx_pos_ace0f4bbf57a7597_38_on,"util.Signal","on",0x28e9a3d9,"util.Signal.on","util/Signal.hx",38,0xe93415a9)
HX_LOCAL_STACK_FRAME(_hx_pos_ace0f4bbf57a7597_42_once,"util.Signal","once",0x717d62bb,"util.Signal.once","util/Signal.hx",42,0xe93415a9)
HX_LOCAL_STACK_FRAME(_hx_pos_ace0f4bbf57a7597_41_once,"util.Signal","once",0x717d62bb,"util.Signal.once","util/Signal.hx",41,0xe93415a9)
HX_LOCAL_STACK_FRAME(_hx_pos_ace0f4bbf57a7597_49_off,"util.Signal","off",0xa385b375,"util.Signal.off","util/Signal.hx",49,0xe93415a9)
HX_LOCAL_STACK_FRAME(_hx_pos_ace0f4bbf57a7597_56_emit,"util.Signal","emit",0x6ae0838d,"util.Signal.emit","util/Signal.hx",56,0xe93415a9)
namespace util{

void Signal_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ace0f4bbf57a7597_33_new)
HXDLIN(  33)		this->listeners = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic Signal_obj::__CreateEmpty() { return new Signal_obj; }

void *Signal_obj::_hx_vtable = 0;

Dynamic Signal_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Signal_obj > _hx_result = new Signal_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Signal_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x17cf1836;
}

void Signal_obj::on( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_ace0f4bbf57a7597_38_on)
HXDLIN(  38)		this->listeners->push(listener);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,on,(void))

void Signal_obj::once( ::Dynamic listener){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,listener, ::util::Signal,_gthis,::Array< ::Dynamic>,wrapped) HXARGC(1)
            		void _hx_run( ::Dynamic data){
            			HX_STACKFRAME(&_hx_pos_ace0f4bbf57a7597_42_once)
HXLINE(  43)			_gthis->listeners->remove(wrapped->__get(0));
HXLINE(  44)			listener(data);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_ace0f4bbf57a7597_41_once)
HXDLIN(  41)		 ::util::Signal _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  42)		::Array< ::Dynamic> wrapped = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  42)		wrapped[0] =  ::Dynamic(new _hx_Closure_0(listener,_gthis,wrapped));
HXDLIN(  42)		this->listeners->push(wrapped->__get(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,once,(void))

void Signal_obj::off( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_ace0f4bbf57a7597_49_off)
HXDLIN(  49)		if (::hx::IsNotNull( listener )) {
HXLINE(  50)			this->listeners->remove(listener);
            		}
            		else {
HXLINE(  52)			this->listeners->resize(0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,off,(void))

void Signal_obj::emit( ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_ace0f4bbf57a7597_56_emit)
HXDLIN(  56)		int _g = 0;
HXDLIN(  56)		::Array< ::Dynamic> _g1 = this->listeners;
HXDLIN(  56)		while((_g < _g1->length)){
HXDLIN(  56)			 ::Dynamic listener = _g1->__get(_g);
HXDLIN(  56)			_g = (_g + 1);
HXLINE(  57)			listener(data);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,emit,(void))


Signal_obj::Signal_obj()
{
}

void Signal_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Signal);
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_END_CLASS();
}

void Signal_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
}

::hx::Val Signal_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"on") ) { return ::hx::Val( on_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"off") ) { return ::hx::Val( off_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"once") ) { return ::hx::Val( once_dyn() ); }
		if (HX_FIELD_EQ(inName,"emit") ) { return ::hx::Val( emit_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { return ::hx::Val( listeners ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Signal_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Signal_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("listeners",7f,65,8e,f3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Signal_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Signal_obj,listeners),HX_("listeners",7f,65,8e,f3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Signal_obj_sStaticStorageInfo = 0;
#endif

static ::String Signal_obj_sMemberFields[] = {
	HX_("listeners",7f,65,8e,f3),
	HX_("on",1f,61,00,00),
	HX_("once",81,7d,b2,49),
	HX_("off",6f,93,54,00),
	HX_("emit",53,9e,15,43),
	::String(null()) };

::hx::Class Signal_obj::__mClass;

void Signal_obj::__register()
{
	Signal_obj _hx_dummy;
	Signal_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.Signal",74,85,a7,0f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Signal_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Signal_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Signal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Signal_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
