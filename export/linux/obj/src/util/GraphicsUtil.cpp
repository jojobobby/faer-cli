// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsEndFill
#include <openfl/display/GraphicsEndFill.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsPath
#include <openfl/display/GraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsStroke
#include <openfl/display/GraphicsStroke.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsData
#include <openfl/display/IGraphicsData.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsFill
#include <openfl/display/IGraphicsFill.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsPath
#include <openfl/display/IGraphicsPath.h>
#endif
#ifndef INCLUDED_openfl_display_IGraphicsStroke
#include <openfl/display/IGraphicsStroke.h>
#endif
#ifndef INCLUDED_util_GraphicsUtil
#include <util/GraphicsUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_69cb55083d448c42_13_clearPath,"util.GraphicsUtil","clearPath",0x0b71ef9d,"util.GraphicsUtil.clearPath","util/GraphicsUtil.hx",13,0x10d09704)
HX_LOCAL_STACK_FRAME(_hx_pos_69cb55083d448c42_20_drawRect,"util.GraphicsUtil","drawRect",0xbd6657dd,"util.GraphicsUtil.drawRect","util/GraphicsUtil.hx",20,0x10d09704)
HX_LOCAL_STACK_FRAME(_hx_pos_69cb55083d448c42_27_drawCutEdgeRect,"util.GraphicsUtil","drawCutEdgeRect",0xa530e60a,"util.GraphicsUtil.drawCutEdgeRect","util/GraphicsUtil.hx",27,0x10d09704)
HX_LOCAL_STACK_FRAME(_hx_pos_69cb55083d448c42_91_drawDiamond,"util.GraphicsUtil","drawDiamond",0x6226163b,"util.GraphicsUtil.drawDiamond","util/GraphicsUtil.hx",91,0x10d09704)
HX_LOCAL_STACK_FRAME(_hx_pos_69cb55083d448c42_9_boot,"util.GraphicsUtil","boot",0x4105b647,"util.GraphicsUtil.boot","util/GraphicsUtil.hx",9,0x10d09704)
HX_LOCAL_STACK_FRAME(_hx_pos_69cb55083d448c42_10_boot,"util.GraphicsUtil","boot",0x4105b647,"util.GraphicsUtil.boot","util/GraphicsUtil.hx",10,0x10d09704)
HX_LOCAL_STACK_FRAME(_hx_pos_69cb55083d448c42_11_boot,"util.GraphicsUtil","boot",0x4105b647,"util.GraphicsUtil.boot","util/GraphicsUtil.hx",11,0x10d09704)
static const int _hx_array_data_f4e16679_9[] = {
	(int)1,(int)1,(int)1,(int)1,
};
namespace util{

void GraphicsUtil_obj::__construct() { }

Dynamic GraphicsUtil_obj::__CreateEmpty() { return new GraphicsUtil_obj; }

void *GraphicsUtil_obj::_hx_vtable = 0;

Dynamic GraphicsUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GraphicsUtil_obj > _hx_result = new GraphicsUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GraphicsUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x075e61f3;
}

 ::openfl::display::GraphicsEndFill GraphicsUtil_obj::END_FILL;

 ::openfl::display::GraphicsStroke GraphicsUtil_obj::END_STROKE;

::Array< int > GraphicsUtil_obj::ALL_CUTS;

void GraphicsUtil_obj::clearPath( ::openfl::display::GraphicsPath graphicsPath){
            	HX_STACKFRAME(&_hx_pos_69cb55083d448c42_13_clearPath)
HXLINE(  14)		if (::hx::IsNotNull( graphicsPath->commands )) {
HXLINE(  15)			::Dynamic this1 = graphicsPath->commands;
HXDLIN(  15)			int deleteCount = graphicsPath->commands->get_length();
HXDLIN(  15)			::cpp::VirtualArray items = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(  15)			this1->__SetField(HX_("__tempIndex",3e,e8,54,22),0,::hx::paccDynamic);
HXDLIN(  15)			{
HXLINE(  15)				int _g_current = 0;
HXDLIN(  15)				while((_g_current < items->get_length())){
HXLINE(  15)					_g_current = (_g_current + 1);
HXDLIN(  15)					( ( ::openfl::_Vector::IntVector)(this1) )->insertAt(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( (int)(items->__get((_g_current - 1))) ));
HXDLIN(  15)					::hx::FieldRef((this1).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            				}
            			}
HXDLIN(  15)			( ( ::openfl::_Vector::IntVector)(this1) )->splice(( (int)(this1->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),deleteCount);
            		}
HXLINE(  16)		if (::hx::IsNotNull( graphicsPath->data )) {
HXLINE(  17)			::Dynamic this2 = graphicsPath->data;
HXDLIN(  17)			int deleteCount1 = graphicsPath->data->get_length();
HXDLIN(  17)			::cpp::VirtualArray items1 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN(  17)			this2->__SetField(HX_("__tempIndex",3e,e8,54,22),0,::hx::paccDynamic);
HXDLIN(  17)			{
HXLINE(  17)				int _g_current1 = 0;
HXDLIN(  17)				while((_g_current1 < items1->get_length())){
HXLINE(  17)					_g_current1 = (_g_current1 + 1);
HXDLIN(  17)					( ( ::openfl::_Vector::FloatVector)(this2) )->insertAt(( (int)(this2->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),( (Float)(items1->__get((_g_current1 - 1))) ));
HXDLIN(  17)					::hx::FieldRef((this2).mPtr,HX_("__tempIndex",3e,e8,54,22))++;
            				}
            			}
HXDLIN(  17)			( ( ::openfl::_Vector::FloatVector)(this2) )->splice(( (int)(this2->__Field(HX_("__tempIndex",3e,e8,54,22),::hx::paccDynamic)) ),deleteCount1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GraphicsUtil_obj,clearPath,(void))

void GraphicsUtil_obj::drawRect(int x,int y,int width,int height, ::openfl::display::GraphicsPath path){
            	HX_STACKFRAME(&_hx_pos_69cb55083d448c42_20_drawRect)
HXLINE(  21)		path->moveTo(( (Float)(x) ),( (Float)(y) ));
HXLINE(  22)		path->lineTo(( (Float)((x + width)) ),( (Float)(y) ));
HXLINE(  23)		path->lineTo(( (Float)((x + width)) ),( (Float)((y + height)) ));
HXLINE(  24)		path->lineTo(( (Float)(x) ),( (Float)((y + height)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GraphicsUtil_obj,drawRect,(void))

void GraphicsUtil_obj::drawCutEdgeRect(int x,int y,int width,int height,int cutLen,::Array< int > cuts, ::openfl::display::GraphicsPath path){
            	HX_STACKFRAME(&_hx_pos_69cb55083d448c42_27_drawCutEdgeRect)
HXLINE(  28)		if ((cuts->__get(0) != 0)) {
HXLINE(  29)			path->moveTo(( (Float)(x) ),( (Float)((y + cutLen)) ));
HXLINE(  30)			path->lineTo(( (Float)((x + cutLen)) ),( (Float)(y) ));
            		}
            		else {
HXLINE(  32)			path->moveTo(( (Float)(x) ),( (Float)(y) ));
            		}
HXLINE(  34)		if ((cuts->__get(1) != 0)) {
HXLINE(  35)			path->lineTo(( (Float)(((x + width) - cutLen)) ),( (Float)(y) ));
HXLINE(  36)			path->lineTo(( (Float)((x + width)) ),( (Float)((y + cutLen)) ));
            		}
            		else {
HXLINE(  38)			path->lineTo(( (Float)((x + width)) ),( (Float)(y) ));
            		}
HXLINE(  40)		if ((cuts->__get(2) != 0)) {
HXLINE(  41)			path->lineTo(( (Float)((x + width)) ),( (Float)(((y + height) - cutLen)) ));
HXLINE(  42)			path->lineTo(( (Float)(((x + width) - cutLen)) ),( (Float)((y + height)) ));
            		}
            		else {
HXLINE(  44)			path->lineTo(( (Float)((x + width)) ),( (Float)((y + height)) ));
            		}
HXLINE(  46)		if ((cuts->__get(3) != 0)) {
HXLINE(  47)			path->lineTo(( (Float)((x + cutLen)) ),( (Float)((y + height)) ));
HXLINE(  48)			path->lineTo(( (Float)(x) ),( (Float)(((y + height) - cutLen)) ));
            		}
            		else {
HXLINE(  50)			path->lineTo(( (Float)(x) ),( (Float)((y + height)) ));
            		}
HXLINE(  52)		if ((cuts->__get(0) != 0)) {
HXLINE(  53)			path->lineTo(( (Float)(x) ),( (Float)((y + cutLen)) ));
            		}
            		else {
HXLINE(  55)			path->lineTo(( (Float)(x) ),( (Float)(y) ));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(GraphicsUtil_obj,drawCutEdgeRect,(void))

void GraphicsUtil_obj::drawDiamond(Float x,Float y,Float radius, ::openfl::display::GraphicsPath path){
            	HX_STACKFRAME(&_hx_pos_69cb55083d448c42_91_drawDiamond)
HXLINE(  92)		path->moveTo(x,(y - radius));
HXLINE(  93)		path->lineTo((x + radius),y);
HXLINE(  94)		path->lineTo(x,(y + radius));
HXLINE(  95)		path->lineTo((x - radius),y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GraphicsUtil_obj,drawDiamond,(void))


GraphicsUtil_obj::GraphicsUtil_obj()
{
}

bool GraphicsUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"END_FILL") ) { outValue = ( END_FILL ); return true; }
		if (HX_FIELD_EQ(inName,"ALL_CUTS") ) { outValue = ( ALL_CUTS ); return true; }
		if (HX_FIELD_EQ(inName,"drawRect") ) { outValue = drawRect_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clearPath") ) { outValue = clearPath_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"END_STROKE") ) { outValue = ( END_STROKE ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drawDiamond") ) { outValue = drawDiamond_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawCutEdgeRect") ) { outValue = drawCutEdgeRect_dyn(); return true; }
	}
	return false;
}

bool GraphicsUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"END_FILL") ) { END_FILL=ioValue.Cast<  ::openfl::display::GraphicsEndFill >(); return true; }
		if (HX_FIELD_EQ(inName,"ALL_CUTS") ) { ALL_CUTS=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"END_STROKE") ) { END_STROKE=ioValue.Cast<  ::openfl::display::GraphicsStroke >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GraphicsUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo GraphicsUtil_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::GraphicsEndFill */ ,(void *) &GraphicsUtil_obj::END_FILL,HX_("END_FILL",c7,2c,f5,27)},
	{::hx::fsObject /*  ::openfl::display::GraphicsStroke */ ,(void *) &GraphicsUtil_obj::END_STROKE,HX_("END_STROKE",fc,0e,35,7d)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &GraphicsUtil_obj::ALL_CUTS,HX_("ALL_CUTS",ef,d7,e8,20)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void GraphicsUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GraphicsUtil_obj::END_FILL,"END_FILL");
	HX_MARK_MEMBER_NAME(GraphicsUtil_obj::END_STROKE,"END_STROKE");
	HX_MARK_MEMBER_NAME(GraphicsUtil_obj::ALL_CUTS,"ALL_CUTS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GraphicsUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GraphicsUtil_obj::END_FILL,"END_FILL");
	HX_VISIT_MEMBER_NAME(GraphicsUtil_obj::END_STROKE,"END_STROKE");
	HX_VISIT_MEMBER_NAME(GraphicsUtil_obj::ALL_CUTS,"ALL_CUTS");
};

#endif

::hx::Class GraphicsUtil_obj::__mClass;

static ::String GraphicsUtil_obj_sStaticFields[] = {
	HX_("END_FILL",c7,2c,f5,27),
	HX_("END_STROKE",fc,0e,35,7d),
	HX_("ALL_CUTS",ef,d7,e8,20),
	HX_("clearPath",d2,cd,12,be),
	HX_("drawRect",48,f7,10,60),
	HX_("drawCutEdgeRect",ff,d9,bd,48),
	HX_("drawDiamond",b0,ab,62,a5),
	::String(null())
};

void GraphicsUtil_obj::__register()
{
	GraphicsUtil_obj _hx_dummy;
	GraphicsUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.GraphicsUtil",79,66,e1,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GraphicsUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &GraphicsUtil_obj::__SetStatic;
	__mClass->mMarkFunc = GraphicsUtil_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GraphicsUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< GraphicsUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GraphicsUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GraphicsUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GraphicsUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GraphicsUtil_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_69cb55083d448c42_9_boot)
HXDLIN(   9)		END_FILL =  ::openfl::display::GraphicsEndFill_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_69cb55083d448c42_10_boot)
HXDLIN(  10)		END_STROKE =  ::openfl::display::GraphicsStroke_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_69cb55083d448c42_11_boot)
HXDLIN(  11)		ALL_CUTS = ::Array_obj< int >::fromData( _hx_array_data_f4e16679_9,4);
            	}
}

} // end namespace util
