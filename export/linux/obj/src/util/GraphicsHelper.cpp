// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_util_BevelRect
#include <util/BevelRect.h>
#endif
#ifndef INCLUDED_util_GraphicsHelper
#include <util/GraphicsHelper.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6a53eae39553ffb0_6_drawBevelRect,"util.GraphicsHelper","drawBevelRect",0xe2482391,"util.GraphicsHelper.drawBevelRect","util/GraphicsHelper.hx",6,0x0ecc6f18)
namespace util{

void GraphicsHelper_obj::__construct() { }

Dynamic GraphicsHelper_obj::__CreateEmpty() { return new GraphicsHelper_obj; }

void *GraphicsHelper_obj::_hx_vtable = 0;

Dynamic GraphicsHelper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GraphicsHelper_obj > _hx_result = new GraphicsHelper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GraphicsHelper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7db33a3b;
}

void GraphicsHelper_obj::drawBevelRect(int x,int y, ::util::BevelRect rect, ::openfl::display::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_6a53eae39553ffb0_6_drawBevelRect)
HXLINE(   7)		int right = (x + rect->width);
HXLINE(   8)		int bottom = (y + rect->height);
HXLINE(   9)		int bevel = rect->bevel;
HXLINE(  10)		if (rect->topLeftBevel) {
HXLINE(  11)			graphics->moveTo(( (Float)(x) ),( (Float)((y + bevel)) ));
HXLINE(  12)			graphics->lineTo(( (Float)((x + bevel)) ),( (Float)(y) ));
            		}
            		else {
HXLINE(  14)			graphics->moveTo(( (Float)(x) ),( (Float)(y) ));
            		}
HXLINE(  16)		if (rect->topRightBevel) {
HXLINE(  17)			graphics->lineTo(( (Float)((right - bevel)) ),( (Float)(y) ));
HXLINE(  18)			graphics->lineTo(( (Float)(right) ),( (Float)((y + bevel)) ));
            		}
            		else {
HXLINE(  20)			graphics->lineTo(( (Float)(right) ),( (Float)(y) ));
            		}
HXLINE(  22)		if (rect->bottomRightBevel) {
HXLINE(  23)			graphics->lineTo(( (Float)(right) ),( (Float)((bottom - bevel)) ));
HXLINE(  24)			graphics->lineTo(( (Float)((right - bevel)) ),( (Float)(bottom) ));
            		}
            		else {
HXLINE(  26)			graphics->lineTo(( (Float)(right) ),( (Float)(bottom) ));
            		}
HXLINE(  28)		if (rect->bottomLeftBevel) {
HXLINE(  29)			graphics->lineTo(( (Float)((x + bevel)) ),( (Float)(bottom) ));
HXLINE(  30)			graphics->lineTo(( (Float)(x) ),( (Float)((bottom - bevel)) ));
            		}
            		else {
HXLINE(  32)			graphics->lineTo(( (Float)(x) ),( (Float)(bottom) ));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GraphicsHelper_obj,drawBevelRect,(void))


GraphicsHelper_obj::GraphicsHelper_obj()
{
}

bool GraphicsHelper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"drawBevelRect") ) { outValue = drawBevelRect_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GraphicsHelper_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *GraphicsHelper_obj_sStaticStorageInfo = 0;
#endif

::hx::Class GraphicsHelper_obj::__mClass;

static ::String GraphicsHelper_obj_sStaticFields[] = {
	HX_("drawBevelRect",1a,9a,2f,a3),
	::String(null())
};

void GraphicsHelper_obj::__register()
{
	GraphicsHelper_obj _hx_dummy;
	GraphicsHelper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.GraphicsHelper",a5,57,3b,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GraphicsHelper_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GraphicsHelper_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< GraphicsHelper_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GraphicsHelper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GraphicsHelper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
