// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_util_MaskedImage
#include <util/MaskedImage.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_22f2716e4af90858_9_new,"util.MaskedImage","new",0xbb054376,"util.MaskedImage.new","util/MaskedImage.hx",9,0xc04bfc7b)
HX_LOCAL_STACK_FRAME(_hx_pos_22f2716e4af90858_15_width,"util.MaskedImage","width",0xaaa79a9c,"util.MaskedImage.width","util/MaskedImage.hx",15,0xc04bfc7b)
namespace util{

void MaskedImage_obj::__construct( ::openfl::display::BitmapData image, ::openfl::display::BitmapData mask){
            	HX_STACKFRAME(&_hx_pos_22f2716e4af90858_9_new)
HXLINE(  10)		this->image = image;
HXLINE(  11)		this->mask = mask;
            	}

Dynamic MaskedImage_obj::__CreateEmpty() { return new MaskedImage_obj; }

void *MaskedImage_obj::_hx_vtable = 0;

Dynamic MaskedImage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MaskedImage_obj > _hx_result = new MaskedImage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MaskedImage_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x580f542e;
}

int MaskedImage_obj::width(){
            	HX_STACKFRAME(&_hx_pos_22f2716e4af90858_15_width)
HXDLIN(  15)		return this->image->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MaskedImage_obj,width,return )


::hx::ObjectPtr< MaskedImage_obj > MaskedImage_obj::__new( ::openfl::display::BitmapData image, ::openfl::display::BitmapData mask) {
	::hx::ObjectPtr< MaskedImage_obj > __this = new MaskedImage_obj();
	__this->__construct(image,mask);
	return __this;
}

::hx::ObjectPtr< MaskedImage_obj > MaskedImage_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::BitmapData image, ::openfl::display::BitmapData mask) {
	MaskedImage_obj *__this = (MaskedImage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MaskedImage_obj), true, "util.MaskedImage"));
	*(void **)__this = MaskedImage_obj::_hx_vtable;
	__this->__construct(image,mask);
	return __this;
}

MaskedImage_obj::MaskedImage_obj()
{
}

void MaskedImage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MaskedImage);
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(mask,"mask");
	HX_MARK_END_CLASS();
}

void MaskedImage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(mask,"mask");
}

::hx::Val MaskedImage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { return ::hx::Val( mask ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return ::hx::Val( image ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MaskedImage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { mask=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MaskedImage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("mask",ec,40,56,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MaskedImage_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MaskedImage_obj,image),HX_("image",5b,1f,69,bd)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(MaskedImage_obj,mask),HX_("mask",ec,40,56,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MaskedImage_obj_sStaticStorageInfo = 0;
#endif

static ::String MaskedImage_obj_sMemberFields[] = {
	HX_("image",5b,1f,69,bd),
	HX_("mask",ec,40,56,48),
	HX_("width",06,b6,62,ca),
	::String(null()) };

::hx::Class MaskedImage_obj::__mClass;

void MaskedImage_obj::__register()
{
	MaskedImage_obj _hx_dummy;
	MaskedImage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.MaskedImage",84,10,9d,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MaskedImage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MaskedImage_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MaskedImage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MaskedImage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
