// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_util_Cell
#include <util/Cell.h>
#endif
#ifndef INCLUDED_util__Stack_StackIterator
#include <util/_Stack/StackIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_acd4879735a16209_27_new,"util._Stack.StackIterator","new",0x651f9fcf,"util._Stack.StackIterator.new","util/Stack.hx",27,0xd3e93383)
HX_LOCAL_STACK_FRAME(_hx_pos_acd4879735a16209_17_hasNext,"util._Stack.StackIterator","hasNext",0x1a20585c,"util._Stack.StackIterator.hasNext","util/Stack.hx",17,0xd3e93383)
HX_LOCAL_STACK_FRAME(_hx_pos_acd4879735a16209_20_next,"util._Stack.StackIterator","next",0x168c36a4,"util._Stack.StackIterator.next","util/Stack.hx",20,0xd3e93383)
namespace util{
namespace _Stack{

void StackIterator_obj::__construct( ::util::Cell head){
            	HX_STACKFRAME(&_hx_pos_acd4879735a16209_27_new)
HXDLIN(  27)		this->current = head;
            	}

Dynamic StackIterator_obj::__CreateEmpty() { return new StackIterator_obj; }

void *StackIterator_obj::_hx_vtable = 0;

Dynamic StackIterator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StackIterator_obj > _hx_result = new StackIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StackIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x56845ceb;
}

bool StackIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_acd4879735a16209_17_hasNext)
HXDLIN(  17)		return ::hx::IsNotNull( this->current );
            	}


 ::Dynamic StackIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_acd4879735a16209_20_next)
HXLINE(  21)		 ::Dynamic result = this->current->elt;
HXLINE(  22)		this->current = this->current->next;
HXLINE(  23)		return result;
            	}



::hx::ObjectPtr< StackIterator_obj > StackIterator_obj::__new( ::util::Cell head) {
	::hx::ObjectPtr< StackIterator_obj > __this = new StackIterator_obj();
	__this->__construct(head);
	return __this;
}

::hx::ObjectPtr< StackIterator_obj > StackIterator_obj::__alloc(::hx::Ctx *_hx_ctx, ::util::Cell head) {
	StackIterator_obj *__this = (StackIterator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StackIterator_obj), true, "util._Stack.StackIterator"));
	*(void **)__this = StackIterator_obj::_hx_vtable;
	__this->__construct(head);
	return __this;
}

StackIterator_obj::StackIterator_obj()
{
}

void StackIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StackIterator);
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_END_CLASS();
}

void StackIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(current,"current");
}

::hx::Val StackIterator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { return ::hx::Val( current ); }
		if (HX_FIELD_EQ(inName,"hasNext") ) { return ::hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StackIterator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast<  ::util::Cell >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StackIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("current",39,9c,e3,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StackIterator_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::util::Cell */ ,(int)offsetof(StackIterator_obj,current),HX_("current",39,9c,e3,cb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StackIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String StackIterator_obj_sMemberFields[] = {
	HX_("current",39,9c,e3,cb),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	::String(null()) };

::hx::Class StackIterator_obj::__mClass;

void StackIterator_obj::__register()
{
	StackIterator_obj _hx_dummy;
	StackIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util._Stack.StackIterator",5d,0c,2a,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StackIterator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StackIterator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StackIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StackIterator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
} // end namespace _Stack
