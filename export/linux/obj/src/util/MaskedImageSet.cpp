// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_util_ImageSet
#include <util/ImageSet.h>
#endif
#ifndef INCLUDED_util_MaskedImage
#include <util/MaskedImage.h>
#endif
#ifndef INCLUDED_util_MaskedImageSet
#include <util/MaskedImageSet.h>
#endif
#ifndef INCLUDED_util_Rect
#include <util/Rect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e2778ec4bb395383_11_new,"util.MaskedImageSet","new",0xa9dfa570,"util.MaskedImageSet.new","util/MaskedImageSet.hx",11,0x3225c6df)
HX_LOCAL_STACK_FRAME(_hx_pos_e2778ec4bb395383_17_addFromBitmapData,"util.MaskedImageSet","addFromBitmapData",0x483036d4,"util.MaskedImageSet.addFromBitmapData","util/MaskedImageSet.hx",17,0x3225c6df)
HX_LOCAL_STACK_FRAME(_hx_pos_e2778ec4bb395383_35_addFromMaskedImage,"util.MaskedImageSet","addFromMaskedImage",0xe6d2e995,"util.MaskedImageSet.addFromMaskedImage","util/MaskedImageSet.hx",35,0x3225c6df)
namespace util{

void MaskedImageSet_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e2778ec4bb395383_11_new)
HXLINE(  12)		this->images = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  13)		this->imageRects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  14)		this->maskRects = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic MaskedImageSet_obj::__CreateEmpty() { return new MaskedImageSet_obj; }

void *MaskedImageSet_obj::_hx_vtable = 0;

Dynamic MaskedImageSet_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MaskedImageSet_obj > _hx_result = new MaskedImageSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MaskedImageSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fe45014;
}

void MaskedImageSet_obj::addFromBitmapData( ::openfl::display::BitmapData images, ::openfl::display::BitmapData masks,int width,int height,::hx::Null< bool >  __o_ignoreAtlas){
            		bool ignoreAtlas = __o_ignoreAtlas.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e2778ec4bb395383_17_addFromBitmapData)
HXLINE(  18)		 ::util::ImageSet imagesSet =  ::util::ImageSet_obj::__alloc( HX_CTX );
HXLINE(  19)		imagesSet->addFromBitmapData(images,width,height,ignoreAtlas,true);
HXLINE(  20)		bool masksNull = ::hx::IsNull( masks );
HXLINE(  21)		 ::util::ImageSet masksSet = null();
HXLINE(  22)		if (!(masksNull)) {
HXLINE(  23)			masksSet =  ::util::ImageSet_obj::__alloc( HX_CTX );
HXLINE(  24)			masksSet->addFromBitmapData(masks,width,height,ignoreAtlas,true);
            		}
HXLINE(  27)		{
HXLINE(  27)			int _g = 0;
HXDLIN(  27)			int _g1 = imagesSet->images->length;
HXDLIN(  27)			while((_g < _g1)){
HXLINE(  27)				_g = (_g + 1);
HXDLIN(  27)				int i = (_g - 1);
HXLINE(  28)				 ::openfl::display::BitmapData _hx_tmp;
HXDLIN(  28)				if (masksNull) {
HXLINE(  28)					_hx_tmp = null();
            				}
            				else {
HXLINE(  28)					_hx_tmp = masksSet->images->__get(i).StaticCast<  ::openfl::display::BitmapData >();
            				}
HXDLIN(  28)				this->images->push( ::util::MaskedImage_obj::__alloc( HX_CTX ,imagesSet->images->__get(i).StaticCast<  ::openfl::display::BitmapData >(),_hx_tmp));
HXLINE(  29)				this->imageRects->push(imagesSet->rects->__get(i).StaticCast<  ::util::Rect >());
HXLINE(  30)				 ::util::Rect _hx_tmp1;
HXDLIN(  30)				if (masksNull) {
HXLINE(  30)					_hx_tmp1 = null();
            				}
            				else {
HXLINE(  30)					_hx_tmp1 = masksSet->rects->__get(i).StaticCast<  ::util::Rect >();
            				}
HXDLIN(  30)				this->maskRects->push(_hx_tmp1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(MaskedImageSet_obj,addFromBitmapData,(void))

void MaskedImageSet_obj::addFromMaskedImage( ::util::MaskedImage maskedImage,int width,int height){
            	HX_STACKFRAME(&_hx_pos_e2778ec4bb395383_35_addFromMaskedImage)
HXDLIN(  35)		this->addFromBitmapData(maskedImage->image,maskedImage->mask,width,height,null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(MaskedImageSet_obj,addFromMaskedImage,(void))


::hx::ObjectPtr< MaskedImageSet_obj > MaskedImageSet_obj::__new() {
	::hx::ObjectPtr< MaskedImageSet_obj > __this = new MaskedImageSet_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MaskedImageSet_obj > MaskedImageSet_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MaskedImageSet_obj *__this = (MaskedImageSet_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MaskedImageSet_obj), true, "util.MaskedImageSet"));
	*(void **)__this = MaskedImageSet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MaskedImageSet_obj::MaskedImageSet_obj()
{
}

void MaskedImageSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MaskedImageSet);
	HX_MARK_MEMBER_NAME(images,"images");
	HX_MARK_MEMBER_NAME(imageRects,"imageRects");
	HX_MARK_MEMBER_NAME(maskRects,"maskRects");
	HX_MARK_END_CLASS();
}

void MaskedImageSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(images,"images");
	HX_VISIT_MEMBER_NAME(imageRects,"imageRects");
	HX_VISIT_MEMBER_NAME(maskRects,"maskRects");
}

::hx::Val MaskedImageSet_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"images") ) { return ::hx::Val( images ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maskRects") ) { return ::hx::Val( maskRects ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"imageRects") ) { return ::hx::Val( imageRects ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addFromBitmapData") ) { return ::hx::Val( addFromBitmapData_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addFromMaskedImage") ) { return ::hx::Val( addFromMaskedImage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MaskedImageSet_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"images") ) { images=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maskRects") ) { maskRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"imageRects") ) { imageRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MaskedImageSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("images",b8,50,92,fe));
	outFields->push(HX_("imageRects",74,f9,89,f2));
	outFields->push(HX_("maskRects",43,8a,24,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MaskedImageSet_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MaskedImageSet_obj,images),HX_("images",b8,50,92,fe)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MaskedImageSet_obj,imageRects),HX_("imageRects",74,f9,89,f2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MaskedImageSet_obj,maskRects),HX_("maskRects",43,8a,24,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MaskedImageSet_obj_sStaticStorageInfo = 0;
#endif

static ::String MaskedImageSet_obj_sMemberFields[] = {
	HX_("images",b8,50,92,fe),
	HX_("imageRects",74,f9,89,f2),
	HX_("maskRects",43,8a,24,6d),
	HX_("addFromBitmapData",c4,a5,bf,75),
	HX_("addFromMaskedImage",a5,8c,c4,96),
	::String(null()) };

::hx::Class MaskedImageSet_obj::__mClass;

void MaskedImageSet_obj::__register()
{
	MaskedImageSet_obj _hx_dummy;
	MaskedImageSet_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.MaskedImageSet",7e,6d,6c,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MaskedImageSet_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MaskedImageSet_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MaskedImageSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MaskedImageSet_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
