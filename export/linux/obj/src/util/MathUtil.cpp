// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_2710e462964f946c
#define INCLUDED_2710e462964f946c
#include "stdlib.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_util_MathUtil
#include <util/MathUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_438c55cda3239388_168_init,"util.MathUtil","init",0xa1b25288,"util.MathUtil.init","util/Utils.hx",168,0xad0de83a)
HX_LOCAL_STACK_FRAME(_hx_pos_438c55cda3239388_193_halfBound,"util.MathUtil","halfBound",0x1097c313,"util.MathUtil.halfBound","util/Utils.hx",193,0xad0de83a)
namespace util{

void MathUtil_obj::__construct() { }

Dynamic MathUtil_obj::__CreateEmpty() { return new MathUtil_obj; }

void *MathUtil_obj::_hx_vtable = 0;

Dynamic MathUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MathUtil_obj > _hx_result = new MathUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MathUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e67c338;
}

float* MathUtil_obj::SIN_TABLE;

void MathUtil_obj::init(){
            	HX_STACKFRAME(&_hx_pos_438c55cda3239388_168_init)
HXLINE( 169)		::util::MathUtil_obj::SIN_TABLE = ( (float*)(malloc(262144)) );
HXLINE( 170)		{
HXLINE( 170)			int _g = 0;
HXDLIN( 170)			while((_g < 65536)){
HXLINE( 170)				_g = (_g + 1);
HXDLIN( 170)				int i = (_g - 1);
HXLINE( 171)				::util::MathUtil_obj::SIN_TABLE[i] = ( (float)(::Math_obj::sin((((i + ((Float)0.5)) / ( (Float)(65536) )) * ( (Float)((( (float)(((Float)3.141592653589793)) ) * ( (float)(2) ))) )))) );
            			}
            		}
HXLINE( 173)		int i1 = 0;
HXLINE( 174)		while((i1 < 360)){
HXLINE( 175)			::util::MathUtil_obj::SIN_TABLE[(::Std_obj::_hx_int((( (Float)(i1) ) * ((Float)182.044444444444451))) & 65535)] = ( (float)(::Math_obj::sin(( (Float)((( (float)(i1) ) * ( (float)((( (Float)(( (float)(((Float)3.141592653589793)) )) ) / ( (Float)(180) ))) ))) ))) );
HXLINE( 176)			i1 = (i1 + 90);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MathUtil_obj,init,(void))

float MathUtil_obj::halfBound(float x){
            	HX_STACKFRAME(&_hx_pos_438c55cda3239388_193_halfBound)
HXDLIN( 193)		if ((x < -(( (float)(((Float)3.141592653589793)) )))) {
HXLINE( 194)			return (x + (( (float)((::Math_obj::floor((( (Float)(x) ) / ( (Float)(-(( (float)(((Float)3.141592653589793)) ))) ))) + 1)) ) * ( (float)(((Float)3.141592653589793)) )));
            		}
            		else {
HXLINE( 195)			if ((x > ( (float)(((Float)3.141592653589793)) ))) {
HXLINE( 196)				return (x - (( (float)((::Math_obj::floor((( (Float)(x) ) / ( (Float)(( (float)(((Float)3.141592653589793)) )) ))) + 1)) ) * ( (float)(((Float)3.141592653589793)) )));
            			}
            			else {
HXLINE( 198)				return x;
            			}
            		}
HXLINE( 193)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathUtil_obj,halfBound,return )


MathUtil_obj::MathUtil_obj()
{
}

bool MathUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"halfBound") ) { outValue = halfBound_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MathUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo MathUtil_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /* float* */ ,(void *) &MathUtil_obj::SIN_TABLE,HX_("SIN_TABLE",27,fc,ea,e3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void MathUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MathUtil_obj::SIN_TABLE,"SIN_TABLE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MathUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MathUtil_obj::SIN_TABLE,"SIN_TABLE");
};

#endif

::hx::Class MathUtil_obj::__mClass;

static ::String MathUtil_obj_sStaticFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("halfBound",8b,ed,ce,fb),
	::String(null())
};

void MathUtil_obj::__register()
{
	MathUtil_obj _hx_dummy;
	MathUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.MathUtil",f6,7b,24,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MathUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MathUtil_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MathUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MathUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MathUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
