// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_util_Cell
#include <util/Cell.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4b54c016d5d85dbd_7_new,"util.Cell","new",0x6a756da0,"util.Cell.new","util/Stack.hx",7,0xd3e93383)
namespace util{

void Cell_obj::__construct( ::Dynamic elt, ::util::Cell next){
            	HX_STACKFRAME(&_hx_pos_4b54c016d5d85dbd_7_new)
HXLINE(   8)		this->elt = elt;
HXLINE(   9)		this->next = next;
            	}

Dynamic Cell_obj::__CreateEmpty() { return new Cell_obj; }

void *Cell_obj::_hx_vtable = 0;

Dynamic Cell_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Cell_obj > _hx_result = new Cell_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Cell_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x527548c4;
}


Cell_obj::Cell_obj()
{
}

void Cell_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Cell);
	HX_MARK_MEMBER_NAME(elt,"elt");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_END_CLASS();
}

void Cell_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(elt,"elt");
	HX_VISIT_MEMBER_NAME(next,"next");
}

::hx::Val Cell_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"elt") ) { return ::hx::Val( elt ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Cell_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"elt") ) { elt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::util::Cell >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Cell_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("elt",2d,02,4d,00));
	outFields->push(HX_("next",f3,84,02,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Cell_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Cell_obj,elt),HX_("elt",2d,02,4d,00)},
	{::hx::fsObject /*  ::util::Cell */ ,(int)offsetof(Cell_obj,next),HX_("next",f3,84,02,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Cell_obj_sStaticStorageInfo = 0;
#endif

static ::String Cell_obj_sMemberFields[] = {
	HX_("elt",2d,02,4d,00),
	HX_("next",f3,84,02,49),
	::String(null()) };

::hx::Class Cell_obj::__mClass;

void Cell_obj::__register()
{
	Cell_obj _hx_dummy;
	Cell_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.Cell",ae,5d,0e,39);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Cell_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Cell_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cell_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cell_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
