// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_util_StringUtils
#include <util/StringUtils.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_009bb1fbc0dcba1c_203_toRoman,"util.StringUtils","toRoman",0x32bed628,"util.StringUtils.toRoman","util/Utils.hx",203,0xad0de83a)
static const int _hx_array_data_3bccf914_3[] = {
	(int)1000,(int)900,(int)500,(int)400,(int)100,(int)90,(int)50,(int)40,(int)10,(int)9,(int)5,(int)4,(int)1,
};
static const ::String _hx_array_data_3bccf914_4[] = {
	HX_("M",4d,00,00,00),HX_("CM",aa,3a,00,00),HX_("D",44,00,00,00),HX_("CD",a1,3a,00,00),HX_("C",43,00,00,00),HX_("XC",eb,4c,00,00),HX_("L",4c,00,00,00),HX_("XL",f4,4c,00,00),HX_("X",58,00,00,00),HX_("IX",ef,3f,00,00),HX_("V",56,00,00,00),HX_("IV",ed,3f,00,00),HX_("I",49,00,00,00),
};
namespace util{

void StringUtils_obj::__construct() { }

Dynamic StringUtils_obj::__CreateEmpty() { return new StringUtils_obj; }

void *StringUtils_obj::_hx_vtable = 0;

Dynamic StringUtils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringUtils_obj > _hx_result = new StringUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StringUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f931b56;
}

::String StringUtils_obj::toRoman(int n){
            	HX_STACKFRAME(&_hx_pos_009bb1fbc0dcba1c_203_toRoman)
HXLINE( 204)		if ((n == 0)) {
HXLINE( 205)			return HX_("0",30,00,00,00);
            		}
HXLINE( 207)		::Array< int > number = ::Array_obj< int >::fromData( _hx_array_data_3bccf914_3,13);
HXLINE( 208)		::Array< ::String > sign = ::Array_obj< ::String >::fromData( _hx_array_data_3bccf914_4,13);
HXLINE( 209)		::String ret = HX_("",00,00,00,00);
HXLINE( 210)		int i = 0;
HXLINE( 211)		while(true){
HXLINE( 211)			bool _hx_tmp;
HXDLIN( 211)			if ((i < 13)) {
HXLINE( 211)				_hx_tmp = (n > 0);
            			}
            			else {
HXLINE( 211)				_hx_tmp = false;
            			}
HXDLIN( 211)			if (!(_hx_tmp)) {
HXLINE( 211)				goto _hx_goto_0;
            			}
HXLINE( 212)			while((number->__get(i) <= n)){
HXLINE( 213)				n = (n - number->__get(i));
HXLINE( 214)				ret = (ret + sign->__get(i));
            			}
HXLINE( 216)			i = (i + 1);
            		}
            		_hx_goto_0:;
HXLINE( 219)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringUtils_obj,toRoman,return )


StringUtils_obj::StringUtils_obj()
{
}

bool StringUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"toRoman") ) { outValue = toRoman_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *StringUtils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *StringUtils_obj_sStaticStorageInfo = 0;
#endif

::hx::Class StringUtils_obj::__mClass;

static ::String StringUtils_obj_sStaticFields[] = {
	HX_("toRoman",82,27,e4,b9),
	::String(null())
};

void StringUtils_obj::__register()
{
	StringUtils_obj _hx_dummy;
	StringUtils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("util.StringUtils",14,f9,cc,3b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StringUtils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< StringUtils_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringUtils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace util
