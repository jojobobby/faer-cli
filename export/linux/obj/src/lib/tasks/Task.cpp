// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_lib_tasks_TaskData
#include <lib/tasks/TaskData.h>
#endif
#ifndef INCLUDED_util_Signal
#include <util/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3fb3724eacbb8e05_19_new,"lib.tasks.Task","new",0x0ce91cc0,"lib.tasks.Task.new","lib/tasks/Task.hx",19,0xadde802e)
HX_LOCAL_STACK_FRAME(_hx_pos_3fb3724eacbb8e05_34_start,"lib.tasks.Task","start",0xd9d498c2,"lib.tasks.Task.start","lib/tasks/Task.hx",34,0xadde802e)
HX_LOCAL_STACK_FRAME(_hx_pos_3fb3724eacbb8e05_41_reset,"lib.tasks.Task","reset",0x3c916e2f,"lib.tasks.Task.reset","lib/tasks/Task.hx",41,0xadde802e)
HX_LOCAL_STACK_FRAME(_hx_pos_3fb3724eacbb8e05_54_startTask,"lib.tasks.Task","startTask",0x278d0d27,"lib.tasks.Task.startTask","lib/tasks/Task.hx",54,0xadde802e)
HX_LOCAL_STACK_FRAME(_hx_pos_3fb3724eacbb8e05_56_onReset,"lib.tasks.Task","onReset",0xb2a8e490,"lib.tasks.Task.onReset","lib/tasks/Task.hx",56,0xadde802e)
HX_LOCAL_STACK_FRAME(_hx_pos_3fb3724eacbb8e05_58_completeTask,"lib.tasks.Task","completeTask",0x3107643e,"lib.tasks.Task.completeTask","lib/tasks/Task.hx",58,0xadde802e)
namespace lib{
namespace tasks{

void Task_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_3fb3724eacbb8e05_19_new)
HXLINE(  26)		this->error = HX_("",00,00,00,00);
HXLINE(  25)		this->isOK = false;
HXLINE(  24)		this->isFinished = false;
HXLINE(  23)		this->isStarted = false;
HXLINE(  29)		this->started =  ::util::Signal_obj::__alloc( HX_CTX );
HXLINE(  30)		this->finished = (this->lastly =  ::util::Signal_obj::__alloc( HX_CTX ));
            	}

Dynamic Task_obj::__CreateEmpty() { return new Task_obj; }

void *Task_obj::_hx_vtable = 0;

Dynamic Task_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Task_obj > _hx_result = new Task_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Task_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e99215e;
}

void Task_obj::start(){
            	HX_STACKFRAME(&_hx_pos_3fb3724eacbb8e05_34_start)
HXDLIN(  34)		if (!(this->isStarted)) {
HXLINE(  35)			this->isStarted = true;
HXLINE(  36)			this->started->emit(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  37)			this->startTask();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Task_obj,start,(void))

void Task_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_3fb3724eacbb8e05_41_reset)
HXLINE(  42)		if (this->isStarted) {
HXLINE(  43)			this->isStarted = false;
HXLINE(  44)			if (!(this->isFinished)) {
HXLINE(  45)				HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,HX_("Unable to Task.reset() when a task is ongoing",9c,a3,0c,06),null(),null()));
            			}
            		}
HXLINE(  48)		this->started->off(null());
HXLINE(  49)		this->finished->off(null());
HXLINE(  50)		this->lastly->off(null());
HXLINE(  51)		this->onReset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Task_obj,reset,(void))

void Task_obj::startTask(){
            	HX_STACKFRAME(&_hx_pos_3fb3724eacbb8e05_54_startTask)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Task_obj,startTask,(void))

void Task_obj::onReset(){
            	HX_STACKFRAME(&_hx_pos_3fb3724eacbb8e05_56_onReset)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Task_obj,onReset,(void))

void Task_obj::completeTask(bool isOK,::String __o_error){
            		::String error = __o_error;
            		if (::hx::IsNull(__o_error)) error = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_3fb3724eacbb8e05_58_completeTask)
HXLINE(  59)		this->isOK = isOK;
HXLINE(  60)		this->error = error;
HXLINE(  61)		this->isFinished = true;
HXLINE(  63)		this->finished->emit( ::lib::tasks::TaskData_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),isOK,error));
HXLINE(  64)		this->lastly->emit( ::lib::tasks::TaskData_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),isOK,error));
HXLINE(  66)		this->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Task_obj,completeTask,(void))


::hx::ObjectPtr< Task_obj > Task_obj::__new() {
	::hx::ObjectPtr< Task_obj > __this = new Task_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Task_obj > Task_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Task_obj *__this = (Task_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Task_obj), true, "lib.tasks.Task"));
	*(void **)__this = Task_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Task_obj::Task_obj()
{
}

void Task_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Task);
	HX_MARK_MEMBER_NAME(started,"started");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(lastly,"lastly");
	HX_MARK_MEMBER_NAME(isStarted,"isStarted");
	HX_MARK_MEMBER_NAME(isFinished,"isFinished");
	HX_MARK_MEMBER_NAME(isOK,"isOK");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_END_CLASS();
}

void Task_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(started,"started");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(lastly,"lastly");
	HX_VISIT_MEMBER_NAME(isStarted,"isStarted");
	HX_VISIT_MEMBER_NAME(isFinished,"isFinished");
	HX_VISIT_MEMBER_NAME(isOK,"isOK");
	HX_VISIT_MEMBER_NAME(error,"error");
}

::hx::Val Task_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"isOK") ) { return ::hx::Val( isOK ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lastly") ) { return ::hx::Val( lastly ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return ::hx::Val( started ); }
		if (HX_FIELD_EQ(inName,"onReset") ) { return ::hx::Val( onReset_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { return ::hx::Val( finished ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { return ::hx::Val( isStarted ); }
		if (HX_FIELD_EQ(inName,"startTask") ) { return ::hx::Val( startTask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isFinished") ) { return ::hx::Val( isFinished ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"completeTask") ) { return ::hx::Val( completeTask_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Task_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"isOK") ) { isOK=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lastly") ) { lastly=inValue.Cast<  ::util::Signal >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { started=inValue.Cast<  ::util::Signal >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast<  ::util::Signal >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { isStarted=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isFinished") ) { isFinished=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Task_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("started",41,29,1b,35));
	outFields->push(HX_("finished",72,93,0e,95));
	outFields->push(HX_("lastly",63,2a,c5,54));
	outFields->push(HX_("isStarted",77,a6,19,39));
	outFields->push(HX_("isFinished",7c,a5,bd,0f));
	outFields->push(HX_("isOK",86,ef,be,45));
	outFields->push(HX_("error",c8,cb,29,73));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Task_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::util::Signal */ ,(int)offsetof(Task_obj,started),HX_("started",41,29,1b,35)},
	{::hx::fsObject /*  ::util::Signal */ ,(int)offsetof(Task_obj,finished),HX_("finished",72,93,0e,95)},
	{::hx::fsObject /*  ::util::Signal */ ,(int)offsetof(Task_obj,lastly),HX_("lastly",63,2a,c5,54)},
	{::hx::fsBool,(int)offsetof(Task_obj,isStarted),HX_("isStarted",77,a6,19,39)},
	{::hx::fsBool,(int)offsetof(Task_obj,isFinished),HX_("isFinished",7c,a5,bd,0f)},
	{::hx::fsBool,(int)offsetof(Task_obj,isOK),HX_("isOK",86,ef,be,45)},
	{::hx::fsString,(int)offsetof(Task_obj,error),HX_("error",c8,cb,29,73)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Task_obj_sStaticStorageInfo = 0;
#endif

static ::String Task_obj_sMemberFields[] = {
	HX_("started",41,29,1b,35),
	HX_("finished",72,93,0e,95),
	HX_("lastly",63,2a,c5,54),
	HX_("isStarted",77,a6,19,39),
	HX_("isFinished",7c,a5,bd,0f),
	HX_("isOK",86,ef,be,45),
	HX_("error",c8,cb,29,73),
	HX_("start",62,74,0b,84),
	HX_("reset",cf,49,c8,e6),
	HX_("startTask",c7,38,ea,05),
	HX_("onReset",30,e8,05,7d),
	HX_("completeTask",9e,3c,b9,c0),
	::String(null()) };

::hx::Class Task_obj::__mClass;

void Task_obj::__register()
{
	Task_obj _hx_dummy;
	Task_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lib.tasks.Task",ce,fc,f3,e1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Task_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Task_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Task_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Task_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lib
} // end namespace tasks
