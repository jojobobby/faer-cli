// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_lib_tasks_Task
#include <lib/tasks/Task.h>
#endif
#ifndef INCLUDED_lib_tasks_TaskData
#include <lib/tasks/TaskData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c3a3de72019444cc_12_new,"lib.tasks.TaskData","new",0x3b9a8b0a,"lib.tasks.TaskData.new","lib/tasks/Task.hx",12,0xadde802e)
namespace lib{
namespace tasks{

void TaskData_obj::__construct( ::lib::tasks::Task task,bool success,::String error){
            	HX_STACKFRAME(&_hx_pos_c3a3de72019444cc_12_new)
HXLINE(  13)		this->task = task;
HXLINE(  14)		this->success = success;
HXLINE(  15)		this->error = error;
            	}

Dynamic TaskData_obj::__CreateEmpty() { return new TaskData_obj; }

void *TaskData_obj::_hx_vtable = 0;

Dynamic TaskData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TaskData_obj > _hx_result = new TaskData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TaskData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x75cafd18;
}


::hx::ObjectPtr< TaskData_obj > TaskData_obj::__new( ::lib::tasks::Task task,bool success,::String error) {
	::hx::ObjectPtr< TaskData_obj > __this = new TaskData_obj();
	__this->__construct(task,success,error);
	return __this;
}

::hx::ObjectPtr< TaskData_obj > TaskData_obj::__alloc(::hx::Ctx *_hx_ctx, ::lib::tasks::Task task,bool success,::String error) {
	TaskData_obj *__this = (TaskData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TaskData_obj), true, "lib.tasks.TaskData"));
	*(void **)__this = TaskData_obj::_hx_vtable;
	__this->__construct(task,success,error);
	return __this;
}

TaskData_obj::TaskData_obj()
{
}

void TaskData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TaskData);
	HX_MARK_MEMBER_NAME(task,"task");
	HX_MARK_MEMBER_NAME(success,"success");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_END_CLASS();
}

void TaskData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(task,"task");
	HX_VISIT_MEMBER_NAME(success,"success");
	HX_VISIT_MEMBER_NAME(error,"error");
}

::hx::Val TaskData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"task") ) { return ::hx::Val( task ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { return ::hx::Val( success ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TaskData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"task") ) { task=inValue.Cast<  ::lib::tasks::Task >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { success=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TaskData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("task",45,bf,f6,4c));
	outFields->push(HX_("success",c3,25,4e,b8));
	outFields->push(HX_("error",c8,cb,29,73));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TaskData_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lib::tasks::Task */ ,(int)offsetof(TaskData_obj,task),HX_("task",45,bf,f6,4c)},
	{::hx::fsBool,(int)offsetof(TaskData_obj,success),HX_("success",c3,25,4e,b8)},
	{::hx::fsString,(int)offsetof(TaskData_obj,error),HX_("error",c8,cb,29,73)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TaskData_obj_sStaticStorageInfo = 0;
#endif

static ::String TaskData_obj_sMemberFields[] = {
	HX_("task",45,bf,f6,4c),
	HX_("success",c3,25,4e,b8),
	HX_("error",c8,cb,29,73),
	::String(null()) };

::hx::Class TaskData_obj::__mClass;

void TaskData_obj::__register()
{
	TaskData_obj _hx_dummy;
	TaskData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lib.tasks.TaskData",18,fe,69,1b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TaskData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TaskData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TaskData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TaskData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lib
} // end namespace tasks
