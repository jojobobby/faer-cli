// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_sound_SoundEffectLibrary
#include <sound/SoundEffectLibrary.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_05b11553482085d1_11_play,"sound.SoundEffectLibrary","play",0x0273c468,"sound.SoundEffectLibrary.play","sound/SoundEffectLibrary.hx",11,0x05d9f6e3)
HX_LOCAL_STACK_FRAME(_hx_pos_05b11553482085d1_26_setPlaySFX,"sound.SoundEffectLibrary","setPlaySFX",0x990e44e3,"sound.SoundEffectLibrary.setPlaySFX","sound/SoundEffectLibrary.hx",26,0x05d9f6e3)
HX_LOCAL_STACK_FRAME(_hx_pos_05b11553482085d1_9_boot,"sound.SoundEffectLibrary","boot",0xf9351aa6,"sound.SoundEffectLibrary.boot","sound/SoundEffectLibrary.hx",9,0x05d9f6e3)
namespace sound{

void SoundEffectLibrary_obj::__construct() { }

Dynamic SoundEffectLibrary_obj::__CreateEmpty() { return new SoundEffectLibrary_obj; }

void *SoundEffectLibrary_obj::_hx_vtable = 0;

Dynamic SoundEffectLibrary_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SoundEffectLibrary_obj > _hx_result = new SoundEffectLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SoundEffectLibrary_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5832baa6;
}

 ::haxe::ds::StringMap SoundEffectLibrary_obj::sfxCache;

void SoundEffectLibrary_obj::play(::String name,::hx::Null< Float >  __o_volume,::hx::Null< bool >  __o_isFX){
            		Float volume = __o_volume.Default(((Float)1.0));
            		bool isFX = __o_isFX.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_05b11553482085d1_11_play)
HXLINE(  12)		bool playFX;
HXDLIN(  12)		bool playFX1;
HXDLIN(  12)		if (::util::Settings_obj::playSfx) {
HXLINE(  12)			playFX1 = isFX;
            		}
            		else {
HXLINE(  12)			playFX1 = false;
            		}
HXDLIN(  12)		if (!(playFX1)) {
HXLINE(  12)			if (!(isFX)) {
HXLINE(  12)				playFX = ::util::Settings_obj::playWepSfx;
            			}
            			else {
HXLINE(  12)				playFX = false;
            			}
            		}
            		else {
HXLINE(  12)			playFX = true;
            		}
HXLINE(  13)		if (!(playFX)) {
HXLINE(  14)			return;
            		}
HXLINE(  16)		if (::sound::SoundEffectLibrary_obj::sfxCache->exists(name)) {
HXLINE(  17)			( ( ::lime::media::AudioSource)(::sound::SoundEffectLibrary_obj::sfxCache->get(name)) )->play();
            		}
HXLINE(  19)		 ::lime::media::AudioSource sound =  ::lime::media::AudioSource_obj::__alloc( HX_CTX ,::lime::utils::Assets_obj::getAudioBuffer(((HX_("assets/sfx/",56,98,fe,b7) + name) + HX_(".ogg",e1,64,bc,1e)),null()),null(),null(),null());
HXLINE(  20)		sound->set_gain(volume);
HXLINE(  21)		sound->play();
HXLINE(  23)		::sound::SoundEffectLibrary_obj::sfxCache->set(name,sound);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SoundEffectLibrary_obj,play,(void))

void SoundEffectLibrary_obj::setPlaySFX(bool playSFX){
            	HX_STACKFRAME(&_hx_pos_05b11553482085d1_26_setPlaySFX)
HXLINE(  27)		::util::Settings_obj::playSfx = !(::util::Settings_obj::playSfx);
HXLINE(  28)		::util::Settings_obj::save();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SoundEffectLibrary_obj,setPlaySFX,(void))


SoundEffectLibrary_obj::SoundEffectLibrary_obj()
{
}

bool SoundEffectLibrary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { outValue = play_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sfxCache") ) { outValue = ( sfxCache ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setPlaySFX") ) { outValue = setPlaySFX_dyn(); return true; }
	}
	return false;
}

bool SoundEffectLibrary_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sfxCache") ) { sfxCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SoundEffectLibrary_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo SoundEffectLibrary_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SoundEffectLibrary_obj::sfxCache,HX_("sfxCache",7d,eb,4b,12)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void SoundEffectLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundEffectLibrary_obj::sfxCache,"sfxCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundEffectLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundEffectLibrary_obj::sfxCache,"sfxCache");
};

#endif

::hx::Class SoundEffectLibrary_obj::__mClass;

static ::String SoundEffectLibrary_obj_sStaticFields[] = {
	HX_("sfxCache",7d,eb,4b,12),
	HX_("play",f4,2d,5a,4a),
	HX_("setPlaySFX",6f,5f,e6,dc),
	::String(null())
};

void SoundEffectLibrary_obj::__register()
{
	SoundEffectLibrary_obj _hx_dummy;
	SoundEffectLibrary_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sound.SoundEffectLibrary",7a,5e,8a,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SoundEffectLibrary_obj::__GetStatic;
	__mClass->mSetStaticField = &SoundEffectLibrary_obj::__SetStatic;
	__mClass->mMarkFunc = SoundEffectLibrary_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SoundEffectLibrary_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< SoundEffectLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundEffectLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundEffectLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundEffectLibrary_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SoundEffectLibrary_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_05b11553482085d1_9_boot)
HXDLIN(   9)		sfxCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace sound
