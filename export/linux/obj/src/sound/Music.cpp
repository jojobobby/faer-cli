// Generated by Haxe 4.3.0+731dcd7
#include <hxcpp.h>

#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_sound_Music
#include <sound/Music.h>
#endif
#ifndef INCLUDED_util_Settings
#include <util/Settings.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b09497fd17e79a62_11_load,"sound.Music","load",0x3494e3ee,"sound.Music.load","sound/Music.hx",11,0xdcf78bd9)
HX_LOCAL_STACK_FRAME(_hx_pos_b09497fd17e79a62_19_setPlayMusic,"sound.Music","setPlayMusic",0x8af70fd7,"sound.Music.setPlayMusic","sound/Music.hx",19,0xdcf78bd9)
namespace sound{

void Music_obj::__construct() { }

Dynamic Music_obj::__CreateEmpty() { return new Music_obj; }

void *Music_obj::_hx_vtable = 0;

Dynamic Music_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Music_obj > _hx_result = new Music_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Music_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6fe0a396;
}

 ::lime::media::AudioSource Music_obj::music;

void Music_obj::load(){
            	HX_GC_STACKFRAME(&_hx_pos_b09497fd17e79a62_11_load)
HXLINE(  12)		::sound::Music_obj::music =  ::lime::media::AudioSource_obj::__alloc( HX_CTX ,::lime::utils::Assets_obj::getAudioBuffer(HX_("assets/music/sorc.ogg",e4,87,70,30),null()),null(),null(),null());
HXLINE(  13)		::sound::Music_obj::music->set_loops((int)2147483647);
HXLINE(  14)		::sound::Music_obj::music->set_gain(((Float)0.3));
HXLINE(  15)		if (::util::Settings_obj::playMusic) {
HXLINE(  16)			::sound::Music_obj::music->play();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,load,(void))

void Music_obj::setPlayMusic(bool playMusic){
            	HX_STACKFRAME(&_hx_pos_b09497fd17e79a62_19_setPlayMusic)
HXLINE(  20)		::util::Settings_obj::playMusic = !(::util::Settings_obj::playMusic);
HXLINE(  21)		::util::Settings_obj::save();
HXLINE(  23)		if (::hx::IsNotNull( ::sound::Music_obj::music )) {
HXLINE(  24)			if (!(playMusic)) {
HXLINE(  25)				::sound::Music_obj::music->stop();
            			}
            			else {
HXLINE(  27)				::sound::Music_obj::music->play();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Music_obj,setPlayMusic,(void))


Music_obj::Music_obj()
{
}

bool Music_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"music") ) { outValue = ( music ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setPlayMusic") ) { outValue = setPlayMusic_dyn(); return true; }
	}
	return false;
}

bool Music_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"music") ) { music=ioValue.Cast<  ::lime::media::AudioSource >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Music_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Music_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::lime::media::AudioSource */ ,(void *) &Music_obj::music,HX_("music",a5,d0,5a,10)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Music_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Music_obj::music,"music");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Music_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Music_obj::music,"music");
};

#endif

::hx::Class Music_obj::__mClass;

static ::String Music_obj_sStaticFields[] = {
	HX_("music",a5,d0,5a,10),
	HX_("load",26,9a,b7,47),
	HX_("setPlayMusic",0f,be,8e,55),
	::String(null())
};

void Music_obj::__register()
{
	Music_obj _hx_dummy;
	Music_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sound.Music",a6,6b,8b,86);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Music_obj::__GetStatic;
	__mClass->mSetStaticField = &Music_obj::__SetStatic;
	__mClass->mMarkFunc = Music_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Music_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Music_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Music_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Music_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Music_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sound
